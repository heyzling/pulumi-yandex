// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a new Container Registry IP Permission. For more information, see
 * [the official documentation](https://cloud.yandex.ru/docs/container-registry/operations/registry/registry-access)
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const myRegistry = new yandex.ContainerRegistry("myRegistry", {});
 * const myIpPermission = new yandex.ContainerRegistryIpPermission("myIpPermission", {
 *     registryId: myRegistry.id,
 *     pushes: [
 *         "10.1.0.0/16",
 *         "10.2.0.0/16",
 *         "10.3.0.0/16",
 *     ],
 *     pulls: [
 *         "10.1.0.0/16",
 *         "10.5.0/16",
 *     ],
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * An ip premission can be imported using the `id` of the Container Registry it is applied to, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission my_ip_permission registry_id
 * ```
 */
export class ContainerRegistryIpPermission extends pulumi.CustomResource {
    /**
     * Get an existing ContainerRegistryIpPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ContainerRegistryIpPermissionState, opts?: pulumi.CustomResourceOptions): ContainerRegistryIpPermission {
        return new ContainerRegistryIpPermission(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission';

    /**
     * Returns true if the given object is an instance of ContainerRegistryIpPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerRegistryIpPermission {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerRegistryIpPermission.__pulumiType;
    }

    /**
     * List of configured CIDRs, from which pull is allowed.
     */
    public readonly pulls!: pulumi.Output<string[] | undefined>;
    /**
     * List of configured CIDRs, from which push is allowed.
     */
    public readonly pushes!: pulumi.Output<string[] | undefined>;
    /**
     * The ID of the registry that ip restrictions applied to.
     */
    public readonly registryId!: pulumi.Output<string>;

    /**
     * Create a ContainerRegistryIpPermission resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerRegistryIpPermissionArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ContainerRegistryIpPermissionArgs | ContainerRegistryIpPermissionState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ContainerRegistryIpPermissionState | undefined;
            resourceInputs["pulls"] = state ? state.pulls : undefined;
            resourceInputs["pushes"] = state ? state.pushes : undefined;
            resourceInputs["registryId"] = state ? state.registryId : undefined;
        } else {
            const args = argsOrState as ContainerRegistryIpPermissionArgs | undefined;
            if ((!args || args.registryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'registryId'");
            }
            resourceInputs["pulls"] = args ? args.pulls : undefined;
            resourceInputs["pushes"] = args ? args.pushes : undefined;
            resourceInputs["registryId"] = args ? args.registryId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerRegistryIpPermission.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ContainerRegistryIpPermission resources.
 */
export interface ContainerRegistryIpPermissionState {
    /**
     * List of configured CIDRs, from which pull is allowed.
     */
    pulls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of configured CIDRs, from which push is allowed.
     */
    pushes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the registry that ip restrictions applied to.
     */
    registryId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ContainerRegistryIpPermission resource.
 */
export interface ContainerRegistryIpPermissionArgs {
    /**
     * List of configured CIDRs, from which pull is allowed.
     */
    pulls?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * List of configured CIDRs, from which push is allowed.
     */
    pushes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the registry that ip restrictions applied to.
     */
    registryId: pulumi.Input<string>;
}
