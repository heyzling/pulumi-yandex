// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getSmartcaptchaCaptcha(args?: GetSmartcaptchaCaptchaArgs, opts?: pulumi.InvokeOptions): Promise<GetSmartcaptchaCaptchaResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getSmartcaptchaCaptcha:getSmartcaptchaCaptcha", {
        "captchaId": args.captchaId,
        "cloudId": args.cloudId,
        "folderId": args.folderId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaArgs {
    captchaId?: string;
    cloudId?: string;
    folderId?: string;
    name?: string;
}

/**
 * A collection of values returned by getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaResult {
    readonly allowedSites: string[];
    readonly captchaId?: string;
    readonly challengeType: string;
    readonly clientKey: string;
    readonly cloudId: string;
    readonly complexity: string;
    readonly createdAt: string;
    readonly deletionProtection: boolean;
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly overrideVariants: outputs.GetSmartcaptchaCaptchaOverrideVariant[];
    readonly preCheckType: string;
    readonly securityRules: outputs.GetSmartcaptchaCaptchaSecurityRule[];
    readonly styleJson: string;
    readonly suspend: boolean;
    readonly turnOffHostnameCheck: boolean;
}
export function getSmartcaptchaCaptchaOutput(args?: GetSmartcaptchaCaptchaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSmartcaptchaCaptchaResult> {
    return pulumi.output(args).apply((a: any) => getSmartcaptchaCaptcha(a, opts))
}

/**
 * A collection of arguments for invoking getSmartcaptchaCaptcha.
 */
export interface GetSmartcaptchaCaptchaOutputArgs {
    captchaId?: pulumi.Input<string>;
    cloudId?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
}
