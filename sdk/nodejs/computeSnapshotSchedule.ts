// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates a new snapshot schedule. For more information, see
 * [the official documentation](https://cloud.yandex.ru/docs/compute/concepts/snapshot-schedule).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const _default = new yandex.ComputeSnapshotSchedule("default", {
 *     diskIds: [
 *         "test_disk_id",
 *         "another_test_disk_id",
 *     ],
 *     retentionPeriod: "12h",
 *     schedulePolicy: {
 *         expression: "0 0 * * *",
 *     },
 *     snapshotSpec: {
 *         description: "retention-snapshot",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A snapshot schedule can be imported using the `id` of the resource, e.g.
 *
 * ```sh
 * $ pulumi import yandex:index/computeSnapshotSchedule:ComputeSnapshotSchedule my-schedule snapshot_schedule_id
 * ```
 */
export class ComputeSnapshotSchedule extends pulumi.CustomResource {
    /**
     * Get an existing ComputeSnapshotSchedule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ComputeSnapshotScheduleState, opts?: pulumi.CustomResourceOptions): ComputeSnapshotSchedule {
        return new ComputeSnapshotSchedule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/computeSnapshotSchedule:ComputeSnapshotSchedule';

    /**
     * Returns true if the given object is an instance of ComputeSnapshotSchedule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ComputeSnapshotSchedule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ComputeSnapshotSchedule.__pulumiType;
    }

    /**
     * Creation timestamp of the snapshot schedule.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Description of the resource.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * IDs of the disk for snapshot schedule.
     */
    public readonly diskIds!: pulumi.Output<string[]>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs to assign to the snapshot schedule.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * A name for the resource.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Examples: "300ms", "1.5h" or "2h45m".
     */
    public readonly retentionPeriod!: pulumi.Output<string | undefined>;
    /**
     * Schedule policy of the snapshot schedule.
     */
    public readonly schedulePolicy!: pulumi.Output<outputs.ComputeSnapshotScheduleSchedulePolicy>;
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    public readonly snapshotCount!: pulumi.Output<number | undefined>;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     *
     * - - -
     */
    public readonly snapshotSpec!: pulumi.Output<outputs.ComputeSnapshotScheduleSnapshotSpec>;
    /**
     * The status of the snapshot schedule.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a ComputeSnapshotSchedule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ComputeSnapshotScheduleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ComputeSnapshotScheduleArgs | ComputeSnapshotScheduleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ComputeSnapshotScheduleState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["diskIds"] = state ? state.diskIds : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["retentionPeriod"] = state ? state.retentionPeriod : undefined;
            resourceInputs["schedulePolicy"] = state ? state.schedulePolicy : undefined;
            resourceInputs["snapshotCount"] = state ? state.snapshotCount : undefined;
            resourceInputs["snapshotSpec"] = state ? state.snapshotSpec : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as ComputeSnapshotScheduleArgs | undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["diskIds"] = args ? args.diskIds : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["retentionPeriod"] = args ? args.retentionPeriod : undefined;
            resourceInputs["schedulePolicy"] = args ? args.schedulePolicy : undefined;
            resourceInputs["snapshotCount"] = args ? args.snapshotCount : undefined;
            resourceInputs["snapshotSpec"] = args ? args.snapshotSpec : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ComputeSnapshotSchedule.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ComputeSnapshotSchedule resources.
 */
export interface ComputeSnapshotScheduleState {
    /**
     * Creation timestamp of the snapshot schedule.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * IDs of the disk for snapshot schedule.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the snapshot schedule.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A name for the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Examples: "300ms", "1.5h" or "2h45m".
     */
    retentionPeriod?: pulumi.Input<string>;
    /**
     * Schedule policy of the snapshot schedule.
     */
    schedulePolicy?: pulumi.Input<inputs.ComputeSnapshotScheduleSchedulePolicy>;
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     *
     * - - -
     */
    snapshotSpec?: pulumi.Input<inputs.ComputeSnapshotScheduleSnapshotSpec>;
    /**
     * The status of the snapshot schedule.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ComputeSnapshotSchedule resource.
 */
export interface ComputeSnapshotScheduleArgs {
    /**
     * Description of the resource.
     */
    description?: pulumi.Input<string>;
    /**
     * IDs of the disk for snapshot schedule.
     */
    diskIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the snapshot schedule.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * A name for the resource.
     */
    name?: pulumi.Input<string>;
    /**
     * Time duration applied to snapshots created by this snapshot schedule. This is a signed sequence of decimal numbers, each with optional fraction and a unit suffix. Valid time units are "ns", "us" (or "µs"), "ms", "s", "m", "h". Examples: "300ms", "1.5h" or "2h45m".
     */
    retentionPeriod?: pulumi.Input<string>;
    /**
     * Schedule policy of the snapshot schedule.
     */
    schedulePolicy?: pulumi.Input<inputs.ComputeSnapshotScheduleSchedulePolicy>;
    /**
     * Maximum number of snapshots for every disk of the snapshot schedule.
     */
    snapshotCount?: pulumi.Input<number>;
    /**
     * Additional attributes for snapshots created by this snapshot schedule.
     *
     * - - -
     */
    snapshotSpec?: pulumi.Input<inputs.ComputeSnapshotScheduleSnapshotSpec>;
}
