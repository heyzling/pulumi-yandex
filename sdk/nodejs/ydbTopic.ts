// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex YDB Topics. For more information, see
 * [the official documentation](https://cloud.yandex.ru/docs/ydb/concepts/#ydb).
 */
export class YdbTopic extends pulumi.CustomResource {
    /**
     * Get an existing YdbTopic resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: YdbTopicState, opts?: pulumi.CustomResourceOptions): YdbTopic {
        return new YdbTopic(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/ydbTopic:YdbTopic';

    /**
     * Returns true if the given object is an instance of YdbTopic.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is YdbTopic {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === YdbTopic.__pulumiType;
    }

    /**
     * Topic Readers. Types: array[consumer], optional. Default value: null.
     */
    public readonly consumers!: pulumi.Output<outputs.YdbTopicConsumer[]>;
    /**
     * YDB database endpoint. Types: string, required. Default value: "".
     */
    public readonly databaseEndpoint!: pulumi.Output<string>;
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Resource metering mode (`reservedCapacity` - based on the allocated resources or `requestUnits` - based on actual usage). This option applies to topics in serverless databases. Value type: String.
     */
    public readonly meteringMode!: pulumi.Output<string>;
    /**
     * Topic name. Type: string, required. Default value: "".
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Maximum allowed write speed per partition. If a write speed for a given partition exceeds this value, the write speed will be capped. Value type: integer, default value: 1024 (1MB).
     */
    public readonly partitionWriteSpeedKbps!: pulumi.Output<number>;
    /**
     * Number of partitions. Types: integer, optional. Default value: 2.
     */
    public readonly partitionsCount!: pulumi.Output<number>;
    public readonly retentionPeriodHours!: pulumi.Output<number>;
    public readonly retentionStorageMb!: pulumi.Output<number>;
    /**
     * Supported data encodings. Types: array[string]. Default value: ["gzip", "raw", "zstd"].
     */
    public readonly supportedCodecs!: pulumi.Output<string[]>;

    /**
     * Create a YdbTopic resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: YdbTopicArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: YdbTopicArgs | YdbTopicState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as YdbTopicState | undefined;
            resourceInputs["consumers"] = state ? state.consumers : undefined;
            resourceInputs["databaseEndpoint"] = state ? state.databaseEndpoint : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["meteringMode"] = state ? state.meteringMode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["partitionWriteSpeedKbps"] = state ? state.partitionWriteSpeedKbps : undefined;
            resourceInputs["partitionsCount"] = state ? state.partitionsCount : undefined;
            resourceInputs["retentionPeriodHours"] = state ? state.retentionPeriodHours : undefined;
            resourceInputs["retentionStorageMb"] = state ? state.retentionStorageMb : undefined;
            resourceInputs["supportedCodecs"] = state ? state.supportedCodecs : undefined;
        } else {
            const args = argsOrState as YdbTopicArgs | undefined;
            if ((!args || args.databaseEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseEndpoint'");
            }
            resourceInputs["consumers"] = args ? args.consumers : undefined;
            resourceInputs["databaseEndpoint"] = args ? args.databaseEndpoint : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["meteringMode"] = args ? args.meteringMode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["partitionWriteSpeedKbps"] = args ? args.partitionWriteSpeedKbps : undefined;
            resourceInputs["partitionsCount"] = args ? args.partitionsCount : undefined;
            resourceInputs["retentionPeriodHours"] = args ? args.retentionPeriodHours : undefined;
            resourceInputs["retentionStorageMb"] = args ? args.retentionStorageMb : undefined;
            resourceInputs["supportedCodecs"] = args ? args.supportedCodecs : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(YdbTopic.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering YdbTopic resources.
 */
export interface YdbTopicState {
    /**
     * Topic Readers. Types: array[consumer], optional. Default value: null.
     */
    consumers?: pulumi.Input<pulumi.Input<inputs.YdbTopicConsumer>[]>;
    /**
     * YDB database endpoint. Types: string, required. Default value: "".
     */
    databaseEndpoint?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Resource metering mode (`reservedCapacity` - based on the allocated resources or `requestUnits` - based on actual usage). This option applies to topics in serverless databases. Value type: String.
     */
    meteringMode?: pulumi.Input<string>;
    /**
     * Topic name. Type: string, required. Default value: "".
     */
    name?: pulumi.Input<string>;
    /**
     * Maximum allowed write speed per partition. If a write speed for a given partition exceeds this value, the write speed will be capped. Value type: integer, default value: 1024 (1MB).
     */
    partitionWriteSpeedKbps?: pulumi.Input<number>;
    /**
     * Number of partitions. Types: integer, optional. Default value: 2.
     */
    partitionsCount?: pulumi.Input<number>;
    retentionPeriodHours?: pulumi.Input<number>;
    retentionStorageMb?: pulumi.Input<number>;
    /**
     * Supported data encodings. Types: array[string]. Default value: ["gzip", "raw", "zstd"].
     */
    supportedCodecs?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a YdbTopic resource.
 */
export interface YdbTopicArgs {
    /**
     * Topic Readers. Types: array[consumer], optional. Default value: null.
     */
    consumers?: pulumi.Input<pulumi.Input<inputs.YdbTopicConsumer>[]>;
    /**
     * YDB database endpoint. Types: string, required. Default value: "".
     */
    databaseEndpoint: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    /**
     * Resource metering mode (`reservedCapacity` - based on the allocated resources or `requestUnits` - based on actual usage). This option applies to topics in serverless databases. Value type: String.
     */
    meteringMode?: pulumi.Input<string>;
    /**
     * Topic name. Type: string, required. Default value: "".
     */
    name?: pulumi.Input<string>;
    /**
     * Maximum allowed write speed per partition. If a write speed for a given partition exceeds this value, the write speed will be capped. Value type: integer, default value: 1024 (1MB).
     */
    partitionWriteSpeedKbps?: pulumi.Input<number>;
    /**
     * Number of partitions. Types: integer, optional. Default value: 2.
     */
    partitionsCount?: pulumi.Input<number>;
    retentionPeriodHours?: pulumi.Input<number>;
    retentionStorageMb?: pulumi.Input<number>;
    /**
     * Supported data encodings. Types: array[string]. Default value: ["gzip", "raw", "zstd"].
     */
    supportedCodecs?: pulumi.Input<pulumi.Input<string>[]>;
}
