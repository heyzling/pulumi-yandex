// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Yandex Cloud Lockbox secret version resource (with values hashed in state). For more information, see
 * [the official documentation](https://cloud.yandex.com/en/docs/lockbox/).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const mySecret = new yandex.LockboxSecret("mySecret", {});
 * const myVersion = new yandex.LockboxSecretVersionHashed("myVersion", {
 *     secretId: mySecret.id,
 *     key1: "key1",
 *     textValue1: "sensitive value 1",
 *     key2: "k2",
 *     textValue2: "sensitive value 2",
 * });
 * // etc. (up to 10 entries)
 * ```
 * <!--End PulumiCodeChooser -->
 */
export class LockboxSecretVersionHashed extends pulumi.CustomResource {
    /**
     * Get an existing LockboxSecretVersionHashed resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LockboxSecretVersionHashedState, opts?: pulumi.CustomResourceOptions): LockboxSecretVersionHashed {
        return new LockboxSecretVersionHashed(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/lockboxSecretVersionHashed:LockboxSecretVersionHashed';

    /**
     * Returns true if the given object is an instance of LockboxSecretVersionHashed.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LockboxSecretVersionHashed {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LockboxSecretVersionHashed.__pulumiType;
    }

    /**
     * The Yandex Cloud Lockbox secret version description.
     * * `key_<NUMBER>` - (Optional) Each of the entry keys in the Yandex Cloud Lockbox secret version.
     * * `text_value_<NUMBER>` - (Optional) Each of the entry values in the Yandex Cloud Lockbox secret version.
     *
     * The `<NUMBER>` can range from `1` to `10`. If you only need one entry, use `key1`/`textValue1`.
     * If you need a second entry, use `key2`/`textValue2`, and so on.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    public readonly key1!: pulumi.Output<string | undefined>;
    public readonly key10!: pulumi.Output<string | undefined>;
    public readonly key2!: pulumi.Output<string | undefined>;
    public readonly key3!: pulumi.Output<string | undefined>;
    public readonly key4!: pulumi.Output<string | undefined>;
    public readonly key5!: pulumi.Output<string | undefined>;
    public readonly key6!: pulumi.Output<string | undefined>;
    public readonly key7!: pulumi.Output<string | undefined>;
    public readonly key8!: pulumi.Output<string | undefined>;
    public readonly key9!: pulumi.Output<string | undefined>;
    /**
     * The Yandex Cloud Lockbox secret ID where to add the version.
     */
    public readonly secretId!: pulumi.Output<string>;
    public readonly textValue1!: pulumi.Output<string | undefined>;
    public readonly textValue10!: pulumi.Output<string | undefined>;
    public readonly textValue2!: pulumi.Output<string | undefined>;
    public readonly textValue3!: pulumi.Output<string | undefined>;
    public readonly textValue4!: pulumi.Output<string | undefined>;
    public readonly textValue5!: pulumi.Output<string | undefined>;
    public readonly textValue6!: pulumi.Output<string | undefined>;
    public readonly textValue7!: pulumi.Output<string | undefined>;
    public readonly textValue8!: pulumi.Output<string | undefined>;
    public readonly textValue9!: pulumi.Output<string | undefined>;

    /**
     * Create a LockboxSecretVersionHashed resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LockboxSecretVersionHashedArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LockboxSecretVersionHashedArgs | LockboxSecretVersionHashedState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LockboxSecretVersionHashedState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["key1"] = state ? state.key1 : undefined;
            resourceInputs["key10"] = state ? state.key10 : undefined;
            resourceInputs["key2"] = state ? state.key2 : undefined;
            resourceInputs["key3"] = state ? state.key3 : undefined;
            resourceInputs["key4"] = state ? state.key4 : undefined;
            resourceInputs["key5"] = state ? state.key5 : undefined;
            resourceInputs["key6"] = state ? state.key6 : undefined;
            resourceInputs["key7"] = state ? state.key7 : undefined;
            resourceInputs["key8"] = state ? state.key8 : undefined;
            resourceInputs["key9"] = state ? state.key9 : undefined;
            resourceInputs["secretId"] = state ? state.secretId : undefined;
            resourceInputs["textValue1"] = state ? state.textValue1 : undefined;
            resourceInputs["textValue10"] = state ? state.textValue10 : undefined;
            resourceInputs["textValue2"] = state ? state.textValue2 : undefined;
            resourceInputs["textValue3"] = state ? state.textValue3 : undefined;
            resourceInputs["textValue4"] = state ? state.textValue4 : undefined;
            resourceInputs["textValue5"] = state ? state.textValue5 : undefined;
            resourceInputs["textValue6"] = state ? state.textValue6 : undefined;
            resourceInputs["textValue7"] = state ? state.textValue7 : undefined;
            resourceInputs["textValue8"] = state ? state.textValue8 : undefined;
            resourceInputs["textValue9"] = state ? state.textValue9 : undefined;
        } else {
            const args = argsOrState as LockboxSecretVersionHashedArgs | undefined;
            if ((!args || args.secretId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["key1"] = args ? args.key1 : undefined;
            resourceInputs["key10"] = args ? args.key10 : undefined;
            resourceInputs["key2"] = args ? args.key2 : undefined;
            resourceInputs["key3"] = args ? args.key3 : undefined;
            resourceInputs["key4"] = args ? args.key4 : undefined;
            resourceInputs["key5"] = args ? args.key5 : undefined;
            resourceInputs["key6"] = args ? args.key6 : undefined;
            resourceInputs["key7"] = args ? args.key7 : undefined;
            resourceInputs["key8"] = args ? args.key8 : undefined;
            resourceInputs["key9"] = args ? args.key9 : undefined;
            resourceInputs["secretId"] = args ? args.secretId : undefined;
            resourceInputs["textValue1"] = args?.textValue1 ? pulumi.secret(args.textValue1) : undefined;
            resourceInputs["textValue10"] = args?.textValue10 ? pulumi.secret(args.textValue10) : undefined;
            resourceInputs["textValue2"] = args?.textValue2 ? pulumi.secret(args.textValue2) : undefined;
            resourceInputs["textValue3"] = args?.textValue3 ? pulumi.secret(args.textValue3) : undefined;
            resourceInputs["textValue4"] = args?.textValue4 ? pulumi.secret(args.textValue4) : undefined;
            resourceInputs["textValue5"] = args?.textValue5 ? pulumi.secret(args.textValue5) : undefined;
            resourceInputs["textValue6"] = args?.textValue6 ? pulumi.secret(args.textValue6) : undefined;
            resourceInputs["textValue7"] = args?.textValue7 ? pulumi.secret(args.textValue7) : undefined;
            resourceInputs["textValue8"] = args?.textValue8 ? pulumi.secret(args.textValue8) : undefined;
            resourceInputs["textValue9"] = args?.textValue9 ? pulumi.secret(args.textValue9) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["textValue1", "textValue10", "textValue2", "textValue3", "textValue4", "textValue5", "textValue6", "textValue7", "textValue8", "textValue9"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(LockboxSecretVersionHashed.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LockboxSecretVersionHashed resources.
 */
export interface LockboxSecretVersionHashedState {
    /**
     * The Yandex Cloud Lockbox secret version description.
     * * `key_<NUMBER>` - (Optional) Each of the entry keys in the Yandex Cloud Lockbox secret version.
     * * `text_value_<NUMBER>` - (Optional) Each of the entry values in the Yandex Cloud Lockbox secret version.
     *
     * The `<NUMBER>` can range from `1` to `10`. If you only need one entry, use `key1`/`textValue1`.
     * If you need a second entry, use `key2`/`textValue2`, and so on.
     */
    description?: pulumi.Input<string>;
    key1?: pulumi.Input<string>;
    key10?: pulumi.Input<string>;
    key2?: pulumi.Input<string>;
    key3?: pulumi.Input<string>;
    key4?: pulumi.Input<string>;
    key5?: pulumi.Input<string>;
    key6?: pulumi.Input<string>;
    key7?: pulumi.Input<string>;
    key8?: pulumi.Input<string>;
    key9?: pulumi.Input<string>;
    /**
     * The Yandex Cloud Lockbox secret ID where to add the version.
     */
    secretId?: pulumi.Input<string>;
    textValue1?: pulumi.Input<string>;
    textValue10?: pulumi.Input<string>;
    textValue2?: pulumi.Input<string>;
    textValue3?: pulumi.Input<string>;
    textValue4?: pulumi.Input<string>;
    textValue5?: pulumi.Input<string>;
    textValue6?: pulumi.Input<string>;
    textValue7?: pulumi.Input<string>;
    textValue8?: pulumi.Input<string>;
    textValue9?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LockboxSecretVersionHashed resource.
 */
export interface LockboxSecretVersionHashedArgs {
    /**
     * The Yandex Cloud Lockbox secret version description.
     * * `key_<NUMBER>` - (Optional) Each of the entry keys in the Yandex Cloud Lockbox secret version.
     * * `text_value_<NUMBER>` - (Optional) Each of the entry values in the Yandex Cloud Lockbox secret version.
     *
     * The `<NUMBER>` can range from `1` to `10`. If you only need one entry, use `key1`/`textValue1`.
     * If you need a second entry, use `key2`/`textValue2`, and so on.
     */
    description?: pulumi.Input<string>;
    key1?: pulumi.Input<string>;
    key10?: pulumi.Input<string>;
    key2?: pulumi.Input<string>;
    key3?: pulumi.Input<string>;
    key4?: pulumi.Input<string>;
    key5?: pulumi.Input<string>;
    key6?: pulumi.Input<string>;
    key7?: pulumi.Input<string>;
    key8?: pulumi.Input<string>;
    key9?: pulumi.Input<string>;
    /**
     * The Yandex Cloud Lockbox secret ID where to add the version.
     */
    secretId: pulumi.Input<string>;
    textValue1?: pulumi.Input<string>;
    textValue10?: pulumi.Input<string>;
    textValue2?: pulumi.Input<string>;
    textValue3?: pulumi.Input<string>;
    textValue4?: pulumi.Input<string>;
    textValue5?: pulumi.Input<string>;
    textValue6?: pulumi.Input<string>;
    textValue7?: pulumi.Input<string>;
    textValue8?: pulumi.Input<string>;
    textValue9?: pulumi.Input<string>;
}
