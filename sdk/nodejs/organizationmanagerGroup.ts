// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of a single Group within an existing Yandex.Cloud Organization. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/organization/manage-groups).
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const group = new yandex.OrganizationmanagerGroup("group", {
 *     description: "My new Group",
 *     organizationId: "sdf4*********3fr",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A Yandex.Cloud Organization Manager Group can be imported using the `id` of the resource, e.g.:
 *
 * ```sh
 * $ pulumi import yandex:index/organizationmanagerGroup:OrganizationmanagerGroup group "group_id"
 * ```
 */
export class OrganizationmanagerGroup extends pulumi.CustomResource {
    /**
     * Get an existing OrganizationmanagerGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationmanagerGroupState, opts?: pulumi.CustomResourceOptions): OrganizationmanagerGroup {
        return new OrganizationmanagerGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/organizationmanagerGroup:OrganizationmanagerGroup';

    /**
     * Returns true if the given object is an instance of OrganizationmanagerGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OrganizationmanagerGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OrganizationmanagerGroup.__pulumiType;
    }

    /**
     * (Computed) The SAML Federation creation timestamp.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the Group.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The name of the Group.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The organization to attach this Group to.
     */
    public readonly organizationId!: pulumi.Output<string>;

    /**
     * Create a OrganizationmanagerGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OrganizationmanagerGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationmanagerGroupArgs | OrganizationmanagerGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationmanagerGroupState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["organizationId"] = state ? state.organizationId : undefined;
        } else {
            const args = argsOrState as OrganizationmanagerGroupArgs | undefined;
            if ((!args || args.organizationId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'organizationId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["organizationId"] = args ? args.organizationId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OrganizationmanagerGroup.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OrganizationmanagerGroup resources.
 */
export interface OrganizationmanagerGroupState {
    /**
     * (Computed) The SAML Federation creation timestamp.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the Group.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Group.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization to attach this Group to.
     */
    organizationId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a OrganizationmanagerGroup resource.
 */
export interface OrganizationmanagerGroupArgs {
    /**
     * The description of the Group.
     */
    description?: pulumi.Input<string>;
    /**
     * The name of the Group.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization to attach this Group to.
     */
    organizationId: pulumi.Input<string>;
}
