// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export function getMdbClickhouseCluster(args?: GetMdbClickhouseClusterArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbClickhouseClusterResult> {
    args = args || {};

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster", {
        "access": args.access,
        "adminPassword": args.adminPassword,
        "backupWindowStart": args.backupWindowStart,
        "clickhouse": args.clickhouse,
        "cloudStorage": args.cloudStorage,
        "clusterId": args.clusterId,
        "copySchemaOnNewHosts": args.copySchemaOnNewHosts,
        "createdAt": args.createdAt,
        "databases": args.databases,
        "deletionProtection": args.deletionProtection,
        "description": args.description,
        "embeddedKeeper": args.embeddedKeeper,
        "environment": args.environment,
        "folderId": args.folderId,
        "formatSchemas": args.formatSchemas,
        "health": args.health,
        "hosts": args.hosts,
        "labels": args.labels,
        "maintenanceWindow": args.maintenanceWindow,
        "mlModels": args.mlModels,
        "name": args.name,
        "networkId": args.networkId,
        "securityGroupIds": args.securityGroupIds,
        "serviceAccountId": args.serviceAccountId,
        "shardGroups": args.shardGroups,
        "shards": args.shards,
        "sqlDatabaseManagement": args.sqlDatabaseManagement,
        "sqlUserManagement": args.sqlUserManagement,
        "status": args.status,
        "users": args.users,
        "version": args.version,
        "zookeeper": args.zookeeper,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbClickhouseCluster.
 */
export interface GetMdbClickhouseClusterArgs {
    access?: inputs.GetMdbClickhouseClusterAccess;
    adminPassword?: string;
    backupWindowStart?: inputs.GetMdbClickhouseClusterBackupWindowStart;
    clickhouse?: inputs.GetMdbClickhouseClusterClickhouse;
    cloudStorage?: inputs.GetMdbClickhouseClusterCloudStorage;
    clusterId?: string;
    copySchemaOnNewHosts?: boolean;
    createdAt?: string;
    databases?: inputs.GetMdbClickhouseClusterDatabase[];
    deletionProtection?: boolean;
    description?: string;
    embeddedKeeper?: boolean;
    environment?: string;
    folderId?: string;
    formatSchemas?: inputs.GetMdbClickhouseClusterFormatSchema[];
    health?: string;
    hosts?: inputs.GetMdbClickhouseClusterHost[];
    labels?: {[key: string]: string};
    maintenanceWindow?: inputs.GetMdbClickhouseClusterMaintenanceWindow;
    mlModels?: inputs.GetMdbClickhouseClusterMlModel[];
    name?: string;
    networkId?: string;
    securityGroupIds?: string[];
    serviceAccountId?: string;
    shardGroups?: inputs.GetMdbClickhouseClusterShardGroup[];
    shards?: inputs.GetMdbClickhouseClusterShard[];
    sqlDatabaseManagement?: boolean;
    sqlUserManagement?: boolean;
    status?: string;
    users?: inputs.GetMdbClickhouseClusterUser[];
    version?: string;
    zookeeper?: inputs.GetMdbClickhouseClusterZookeeper;
}

/**
 * A collection of values returned by getMdbClickhouseCluster.
 */
export interface GetMdbClickhouseClusterResult {
    readonly access: outputs.GetMdbClickhouseClusterAccess;
    readonly adminPassword?: string;
    readonly backupWindowStart: outputs.GetMdbClickhouseClusterBackupWindowStart;
    readonly clickhouse: outputs.GetMdbClickhouseClusterClickhouse;
    readonly cloudStorage: outputs.GetMdbClickhouseClusterCloudStorage;
    readonly clusterId: string;
    readonly copySchemaOnNewHosts?: boolean;
    readonly createdAt: string;
    readonly databases?: outputs.GetMdbClickhouseClusterDatabase[];
    readonly deletionProtection: boolean;
    readonly description?: string;
    readonly embeddedKeeper: boolean;
    readonly environment?: string;
    readonly folderId: string;
    readonly formatSchemas?: outputs.GetMdbClickhouseClusterFormatSchema[];
    readonly health: string;
    readonly hosts?: outputs.GetMdbClickhouseClusterHost[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly labels: {[key: string]: string};
    readonly maintenanceWindow: outputs.GetMdbClickhouseClusterMaintenanceWindow;
    readonly mlModels?: outputs.GetMdbClickhouseClusterMlModel[];
    readonly name?: string;
    readonly networkId?: string;
    readonly securityGroupIds: string[];
    readonly serviceAccountId: string;
    readonly shardGroups?: outputs.GetMdbClickhouseClusterShardGroup[];
    readonly shards: outputs.GetMdbClickhouseClusterShard[];
    readonly sqlDatabaseManagement: boolean;
    readonly sqlUserManagement: boolean;
    readonly status: string;
    readonly users?: outputs.GetMdbClickhouseClusterUser[];
    readonly version: string;
    readonly zookeeper: outputs.GetMdbClickhouseClusterZookeeper;
}
export function getMdbClickhouseClusterOutput(args?: GetMdbClickhouseClusterOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMdbClickhouseClusterResult> {
    return pulumi.output(args).apply((a: any) => getMdbClickhouseCluster(a, opts))
}

/**
 * A collection of arguments for invoking getMdbClickhouseCluster.
 */
export interface GetMdbClickhouseClusterOutputArgs {
    access?: pulumi.Input<inputs.GetMdbClickhouseClusterAccessArgs>;
    adminPassword?: pulumi.Input<string>;
    backupWindowStart?: pulumi.Input<inputs.GetMdbClickhouseClusterBackupWindowStartArgs>;
    clickhouse?: pulumi.Input<inputs.GetMdbClickhouseClusterClickhouseArgs>;
    cloudStorage?: pulumi.Input<inputs.GetMdbClickhouseClusterCloudStorageArgs>;
    clusterId?: pulumi.Input<string>;
    copySchemaOnNewHosts?: pulumi.Input<boolean>;
    createdAt?: pulumi.Input<string>;
    databases?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterDatabaseArgs>[]>;
    deletionProtection?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    embeddedKeeper?: pulumi.Input<boolean>;
    environment?: pulumi.Input<string>;
    folderId?: pulumi.Input<string>;
    formatSchemas?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterFormatSchemaArgs>[]>;
    health?: pulumi.Input<string>;
    hosts?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterHostArgs>[]>;
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    maintenanceWindow?: pulumi.Input<inputs.GetMdbClickhouseClusterMaintenanceWindowArgs>;
    mlModels?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterMlModelArgs>[]>;
    name?: pulumi.Input<string>;
    networkId?: pulumi.Input<string>;
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    serviceAccountId?: pulumi.Input<string>;
    shardGroups?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterShardGroupArgs>[]>;
    shards?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterShardArgs>[]>;
    sqlDatabaseManagement?: pulumi.Input<boolean>;
    sqlUserManagement?: pulumi.Input<boolean>;
    status?: pulumi.Input<string>;
    users?: pulumi.Input<pulumi.Input<inputs.GetMdbClickhouseClusterUserArgs>[]>;
    version?: pulumi.Input<string>;
    zookeeper?: pulumi.Input<inputs.GetMdbClickhouseClusterZookeeperArgs>;
}
