// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class MdbKafkaConnector extends pulumi.CustomResource {
    /**
     * Get an existing MdbKafkaConnector resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MdbKafkaConnectorState, opts?: pulumi.CustomResourceOptions): MdbKafkaConnector {
        return new MdbKafkaConnector(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/mdbKafkaConnector:MdbKafkaConnector';

    /**
     * Returns true if the given object is an instance of MdbKafkaConnector.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MdbKafkaConnector {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MdbKafkaConnector.__pulumiType;
    }

    public readonly clusterId!: pulumi.Output<string>;
    public readonly connectorConfigMirrormakers!: pulumi.Output<outputs.MdbKafkaConnectorConnectorConfigMirrormaker[] | undefined>;
    public readonly connectorConfigS3Sinks!: pulumi.Output<outputs.MdbKafkaConnectorConnectorConfigS3Sink[] | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly properties!: pulumi.Output<{[key: string]: string}>;
    public readonly tasksMax!: pulumi.Output<number | undefined>;

    /**
     * Create a MdbKafkaConnector resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MdbKafkaConnectorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MdbKafkaConnectorArgs | MdbKafkaConnectorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MdbKafkaConnectorState | undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["connectorConfigMirrormakers"] = state ? state.connectorConfigMirrormakers : undefined;
            resourceInputs["connectorConfigS3Sinks"] = state ? state.connectorConfigS3Sinks : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["properties"] = state ? state.properties : undefined;
            resourceInputs["tasksMax"] = state ? state.tasksMax : undefined;
        } else {
            const args = argsOrState as MdbKafkaConnectorArgs | undefined;
            if ((!args || args.clusterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterId'");
            }
            resourceInputs["clusterId"] = args ? args.clusterId : undefined;
            resourceInputs["connectorConfigMirrormakers"] = args ? args.connectorConfigMirrormakers : undefined;
            resourceInputs["connectorConfigS3Sinks"] = args ? args.connectorConfigS3Sinks : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["properties"] = args ? args.properties : undefined;
            resourceInputs["tasksMax"] = args ? args.tasksMax : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(MdbKafkaConnector.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering MdbKafkaConnector resources.
 */
export interface MdbKafkaConnectorState {
    clusterId?: pulumi.Input<string>;
    connectorConfigMirrormakers?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormaker>[]>;
    connectorConfigS3Sinks?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3Sink>[]>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tasksMax?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a MdbKafkaConnector resource.
 */
export interface MdbKafkaConnectorArgs {
    clusterId: pulumi.Input<string>;
    connectorConfigMirrormakers?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigMirrormaker>[]>;
    connectorConfigS3Sinks?: pulumi.Input<pulumi.Input<inputs.MdbKafkaConnectorConnectorConfigS3Sink>[]>;
    name?: pulumi.Input<string>;
    properties?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    tasksMax?: pulumi.Input<number>;
}
