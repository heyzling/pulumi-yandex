// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Creates a Yandex KMS asymmetric signature key that can be used for cryptographic operation.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const key_a = new yandex.KmsAsymmetricSignatureKey("key-a", {
 *     description: "description for key",
 *     signatureAlgorithm: "RSA_2048_SIGN_PSS_SHA_256",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A KMS asymmetric signature key can be imported using the `id` of the resource, e.g.
 *
 * ```sh
 * $ pulumi import yandex:index/kmsAsymmetricSignatureKey:KmsAsymmetricSignatureKey top-secret kms_asymmetric_signature_key_id
 * ```
 */
export class KmsAsymmetricSignatureKey extends pulumi.CustomResource {
    /**
     * Get an existing KmsAsymmetricSignatureKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsAsymmetricSignatureKeyState, opts?: pulumi.CustomResourceOptions): KmsAsymmetricSignatureKey {
        return new KmsAsymmetricSignatureKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/kmsAsymmetricSignatureKey:KmsAsymmetricSignatureKey';

    /**
     * Returns true if the given object is an instance of KmsAsymmetricSignatureKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsAsymmetricSignatureKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsAsymmetricSignatureKey.__pulumiType;
    }

    /**
     * Creation timestamp of the key.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * An optional description of the key.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * A set of key/value label pairs to assign to the key.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the key.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Signature algorithm to be used with a new key. The default value is `RSA_2048_SIGN_PSS_SHA_256`.
     */
    public readonly signatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * The status of the key.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a KmsAsymmetricSignatureKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: KmsAsymmetricSignatureKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsAsymmetricSignatureKeyArgs | KmsAsymmetricSignatureKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsAsymmetricSignatureKeyState | undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["signatureAlgorithm"] = state ? state.signatureAlgorithm : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as KmsAsymmetricSignatureKeyArgs | undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["signatureAlgorithm"] = args ? args.signatureAlgorithm : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(KmsAsymmetricSignatureKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KmsAsymmetricSignatureKey resources.
 */
export interface KmsAsymmetricSignatureKeyState {
    /**
     * Creation timestamp of the key.
     */
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * An optional description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the key.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * Signature algorithm to be used with a new key. The default value is `RSA_2048_SIGN_PSS_SHA_256`.
     */
    signatureAlgorithm?: pulumi.Input<string>;
    /**
     * The status of the key.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmsAsymmetricSignatureKey resource.
 */
export interface KmsAsymmetricSignatureKeyArgs {
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * An optional description of the key.
     */
    description?: pulumi.Input<string>;
    /**
     * The ID of the folder that the resource belongs to. If it
     * is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the key.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the key.
     */
    name?: pulumi.Input<string>;
    /**
     * Signature algorithm to be used with a new key. The default value is `RSA_2048_SIGN_PSS_SHA_256`.
     */
    signatureAlgorithm?: pulumi.Input<string>;
}
