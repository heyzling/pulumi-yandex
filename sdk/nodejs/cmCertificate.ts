// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Creates or requests a TLS certificate in the specified folder.
 * For more information, see [the official documentation](https://cloud.yandex.com/en/docs/certificate-manager/concepts/).
 *
 * ## Example Usage
 *
 * ### Managed Certificate
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const example = new yandex.CmCertificate("example", {
 *     domains: ["example.com"],
 *     managed: {
 *         challengeType: "DNS_CNAME",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Self-Managed Certificate
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const example = new yandex.CmCertificate("example", {selfManaged: {
 *     certificate: `-----BEGIN CERTIFICATE----- ... -----END CERTIFICATE----- 
 *  -----BEGIN CERTIFICATE----- ... -----END CERTIFICATE-----
 * `,
 *     privateKey: "-----BEGIN RSA PRIVATE KEY----- ... -----END RSA PRIVATE KEY-----",
 * }});
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Limitations
 *
 * At the moment, a resource may not work correctly if it declares the use of a DNS challenge, but the certificate is confirmed using an HTTP challenge. And vice versa.
 *
 * In this case, the service does not provide the parameters of the required type of challenges.
 *
 * ## Import
 *
 * A certificate can be imported using the `id` of the resource, e.g.:
 *
 * ```sh
 * $ pulumi import yandex:index/cmCertificate:CmCertificate default certificate_id
 * ```
 */
export class CmCertificate extends pulumi.CustomResource {
    /**
     * Get an existing CmCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CmCertificateState, opts?: pulumi.CustomResourceOptions): CmCertificate {
        return new CmCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/cmCertificate:CmCertificate';

    /**
     * Returns true if the given object is an instance of CmCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CmCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CmCertificate.__pulumiType;
    }

    /**
     * Array of challenges. Structure is documented below.
     */
    public /*out*/ readonly challenges!: pulumi.Output<outputs.CmCertificateChallenge[]>;
    /**
     * Time the challenge was created.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    public readonly deletionProtection!: pulumi.Output<boolean | undefined>;
    /**
     * Certificate description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    public readonly domains!: pulumi.Output<string[] | undefined>;
    /**
     * Folder that the resource belongs to. If value is omitted, the default provider folder is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * Certificate issue timestamp.
     */
    public /*out*/ readonly issuedAt!: pulumi.Output<string>;
    /**
     * Certificate issuer.
     */
    public /*out*/ readonly issuer!: pulumi.Output<string>;
    /**
     * Labels to assign to this certificate.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Managed specification. Structure is documented below.
     */
    public readonly managed!: pulumi.Output<outputs.CmCertificateManaged | undefined>;
    /**
     * Certificate name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Certificate end valid period.
     */
    public /*out*/ readonly notAfter!: pulumi.Output<string>;
    /**
     * Certificate start valid period.
     */
    public /*out*/ readonly notBefore!: pulumi.Output<string>;
    /**
     * Self-managed specification. Structure is documented below.
     *
     * > **NOTE:** Only one type `managed` or `selfManaged` should be specified.
     */
    public readonly selfManaged!: pulumi.Output<outputs.CmCertificateSelfManaged | undefined>;
    /**
     * Certificate serial number.
     */
    public /*out*/ readonly serial!: pulumi.Output<string>;
    /**
     * Certificate status: `"VALIDATING"`, `"INVALID"`,  `"ISSUED"`, `"REVOKED"`, `"RENEWING"` or `"RENEWAL_FAILED"`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Certificate subject.
     */
    public /*out*/ readonly subject!: pulumi.Output<string>;
    /**
     * Challenge type `"DNS"` or `"HTTP"`.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * Last time the challenge was updated.
     */
    public /*out*/ readonly updatedAt!: pulumi.Output<string>;

    /**
     * Create a CmCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: CmCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CmCertificateArgs | CmCertificateState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CmCertificateState | undefined;
            resourceInputs["challenges"] = state ? state.challenges : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["domains"] = state ? state.domains : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["issuedAt"] = state ? state.issuedAt : undefined;
            resourceInputs["issuer"] = state ? state.issuer : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["managed"] = state ? state.managed : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["notAfter"] = state ? state.notAfter : undefined;
            resourceInputs["notBefore"] = state ? state.notBefore : undefined;
            resourceInputs["selfManaged"] = state ? state.selfManaged : undefined;
            resourceInputs["serial"] = state ? state.serial : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["subject"] = state ? state.subject : undefined;
            resourceInputs["type"] = state ? state.type : undefined;
            resourceInputs["updatedAt"] = state ? state.updatedAt : undefined;
        } else {
            const args = argsOrState as CmCertificateArgs | undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["domains"] = args ? args.domains : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["managed"] = args ? args.managed : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["selfManaged"] = args ? args.selfManaged : undefined;
            resourceInputs["challenges"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["issuedAt"] = undefined /*out*/;
            resourceInputs["issuer"] = undefined /*out*/;
            resourceInputs["notAfter"] = undefined /*out*/;
            resourceInputs["notBefore"] = undefined /*out*/;
            resourceInputs["serial"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["subject"] = undefined /*out*/;
            resourceInputs["type"] = undefined /*out*/;
            resourceInputs["updatedAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CmCertificate.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CmCertificate resources.
 */
export interface CmCertificateState {
    /**
     * Array of challenges. Structure is documented below.
     */
    challenges?: pulumi.Input<pulumi.Input<inputs.CmCertificateChallenge>[]>;
    /**
     * Time the challenge was created.
     */
    createdAt?: pulumi.Input<string>;
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Certificate description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Folder that the resource belongs to. If value is omitted, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Certificate issue timestamp.
     */
    issuedAt?: pulumi.Input<string>;
    /**
     * Certificate issuer.
     */
    issuer?: pulumi.Input<string>;
    /**
     * Labels to assign to this certificate.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Managed specification. Structure is documented below.
     */
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    /**
     * Certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * Certificate end valid period.
     */
    notAfter?: pulumi.Input<string>;
    /**
     * Certificate start valid period.
     */
    notBefore?: pulumi.Input<string>;
    /**
     * Self-managed specification. Structure is documented below.
     *
     * > **NOTE:** Only one type `managed` or `selfManaged` should be specified.
     */
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
    /**
     * Certificate serial number.
     */
    serial?: pulumi.Input<string>;
    /**
     * Certificate status: `"VALIDATING"`, `"INVALID"`,  `"ISSUED"`, `"REVOKED"`, `"RENEWING"` or `"RENEWAL_FAILED"`.
     */
    status?: pulumi.Input<string>;
    /**
     * Certificate subject.
     */
    subject?: pulumi.Input<string>;
    /**
     * Challenge type `"DNS"` or `"HTTP"`.
     */
    type?: pulumi.Input<string>;
    /**
     * Last time the challenge was updated.
     */
    updatedAt?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CmCertificate resource.
 */
export interface CmCertificateArgs {
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Certificate description.
     */
    description?: pulumi.Input<string>;
    /**
     * Domains for this certificate. Should be specified for managed certificates.
     */
    domains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Folder that the resource belongs to. If value is omitted, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Labels to assign to this certificate.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Managed specification. Structure is documented below.
     */
    managed?: pulumi.Input<inputs.CmCertificateManaged>;
    /**
     * Certificate name.
     */
    name?: pulumi.Input<string>;
    /**
     * Self-managed specification. Structure is documented below.
     *
     * > **NOTE:** Only one type `managed` or `selfManaged` should be specified.
     */
    selfManaged?: pulumi.Input<inputs.CmCertificateSelfManaged>;
}
