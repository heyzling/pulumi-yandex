// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * Allows management of [trail](https://cloud.yandex.ru/en/docs/audit-trails/concepts/trail)
 *
 * ## Example Usage
 *
 * Trail delivering logs to Cloud Logging and gathering such logs:
 *
 * * Control plane logs from the 'home-folder' folder
 * * Object Storage data plane logs from the 'home-folder' folder
 * * DNS data plane logs from networks in the 'home-folder' folder
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const basicTrail = new yandex.AuditTrailsTrail("basicTrail", {
 *     description: "Some trail description",
 *     filter: {
 *         eventFilters: [
 *             {
 *                 categories: [{
 *                     plane: "DATA_PLANE",
 *                     type: "WRITE",
 *                 }],
 *                 pathFilter: {
 *                     anyFilter: {
 *                         resourceId: "home-folder",
 *                         resourceType: "resource-manager.folder",
 *                     },
 *                 },
 *                 service: "storage",
 *             },
 *             {
 *                 categories: [{
 *                     plane: "DATA_PLANE",
 *                     type: "READ",
 *                 }],
 *                 pathFilter: {
 *                     someFilter: {
 *                         anyFilters: [
 *                             {
 *                                 resourceId: "vpc-net-id-1",
 *                                 resourceType: "vpc.network",
 *                             },
 *                             {
 *                                 resourceId: "vpc-net-id-2",
 *                                 resourceType: "vpc.network",
 *                             },
 *                         ],
 *                         resourceId: "home-folder",
 *                         resourceType: "resource-manager.folder",
 *                     },
 *                 },
 *                 service: "dns",
 *             },
 *         ],
 *         pathFilter: {
 *             anyFilter: {
 *                 resourceId: "home-folder",
 *                 resourceType: "resource-manager.folder",
 *             },
 *         },
 *     },
 *     folderId: "home-folder",
 *     labels: {
 *         key: "value",
 *     },
 *     loggingDestination: {
 *         logGroupId: "some-log-group",
 *     },
 *     serviceAccountId: "trail-service-account",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * Trail delivering logs to YDS and gathering such logs:
 *
 * * Control plane logs from the 'some-organization' organization
 * * DNS data plane logs from the 'some-organization' organization
 * * Object Storage data plane logs from the 'some-organization' organization
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const basicTrail = new yandex.AuditTrailsTrail("basicTrail", {
 *     dataStreamDestination: {
 *         databaseId: "some-database",
 *         streamName: "some-stream",
 *     },
 *     description: "Some trail description",
 *     filter: {
 *         eventFilters: [
 *             {
 *                 categories: [{
 *                     plane: "DATA_PLANE",
 *                     type: "WRITE",
 *                 }],
 *                 pathFilter: {
 *                     anyFilter: {
 *                         resourceId: "some-organization",
 *                         resourceType: "organization-manager.organization",
 *                     },
 *                 },
 *                 service: "storage",
 *             },
 *             {
 *                 categories: [{
 *                     plane: "DATA_PLANE",
 *                     type: "READ",
 *                 }],
 *                 pathFilter: {
 *                     anyFilter: {
 *                         resourceId: "some-organization",
 *                         resourceType: "organization-manager.organization",
 *                     },
 *                 },
 *                 service: "dns",
 *             },
 *         ],
 *         pathFilter: {
 *             anyFilter: {
 *                 resourceId: "some-organization",
 *                 resourceType: "organization-manager.organization",
 *             },
 *         },
 *     },
 *     folderId: "home-folder",
 *     labels: {
 *         key: "value",
 *     },
 *     serviceAccountId: "trail-service-account",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * Trail delivering logs to Object Storage and gathering such logs:
 *
 * * Control plane logs from the 'home-folder' folder
 * * Managed PostgreSQL data plane logs from the 'home-folder' folder
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const basicTrail = new yandex.AuditTrailsTrail("basicTrail", {
 *     description: "Some trail description",
 *     filter: {
 *         eventFilters: [{
 *             categories: [{
 *                 plane: "DATA_PLANE",
 *                 type: "WRITE",
 *             }],
 *             pathFilter: {
 *                 anyFilter: {
 *                     resourceId: "home-folder",
 *                     resourceType: "resource-manager.folder",
 *                 },
 *             },
 *             service: "mdb.postgresql",
 *         }],
 *         pathFilter: {
 *             anyFilter: {
 *                 resourceId: "home-folder",
 *                 resourceType: "resource-manager.folder",
 *             },
 *         },
 *     },
 *     folderId: "home-folder",
 *     labels: {
 *         key: "value",
 *     },
 *     serviceAccountId: "trail-service-account",
 *     storageDestination: {
 *         bucketName: "some-bucket",
 *         objectPrefix: "some-prefix",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * A trail can be imported using the `id` of the resource, e.g.
 *
 * bash
 *
 * ```sh
 * $ pulumi import yandex:index/auditTrailsTrail:AuditTrailsTrail infosec-trail trail_id
 * ```
 */
export class AuditTrailsTrail extends pulumi.CustomResource {
    /**
     * Get an existing AuditTrailsTrail resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AuditTrailsTrailState, opts?: pulumi.CustomResourceOptions): AuditTrailsTrail {
        return new AuditTrailsTrail(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/auditTrailsTrail:AuditTrailsTrail';

    /**
     * Returns true if the given object is an instance of AuditTrailsTrail.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AuditTrailsTrail {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AuditTrailsTrail.__pulumiType;
    }

    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    public readonly dataStreamDestination!: pulumi.Output<outputs.AuditTrailsTrailDataStreamDestination | undefined>;
    /**
     * Description of the trail.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Structure describing event filtering process for the trail.
     */
    public readonly filter!: pulumi.Output<outputs.AuditTrailsTrailFilter>;
    /**
     * ID of the folder to which the trail belongs.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * Labels defined by the user.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    public readonly loggingDestination!: pulumi.Output<outputs.AuditTrailsTrailLoggingDestination | undefined>;
    /**
     * Name of the trail.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * ID of the [IAM service account](https://cloud.yandex.ru/en/docs/iam/concepts/users/service-accounts) that is used by the trail.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * Status of this trail.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    public readonly storageDestination!: pulumi.Output<outputs.AuditTrailsTrailStorageDestination | undefined>;
    /**
     * ID of the trail resource.
     */
    public /*out*/ readonly trailId!: pulumi.Output<string>;

    /**
     * Create a AuditTrailsTrail resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AuditTrailsTrailArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AuditTrailsTrailArgs | AuditTrailsTrailState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AuditTrailsTrailState | undefined;
            resourceInputs["dataStreamDestination"] = state ? state.dataStreamDestination : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["filter"] = state ? state.filter : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["loggingDestination"] = state ? state.loggingDestination : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["storageDestination"] = state ? state.storageDestination : undefined;
            resourceInputs["trailId"] = state ? state.trailId : undefined;
        } else {
            const args = argsOrState as AuditTrailsTrailArgs | undefined;
            if ((!args || args.filter === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filter'");
            }
            if ((!args || args.folderId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'folderId'");
            }
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["dataStreamDestination"] = args ? args.dataStreamDestination : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["filter"] = args ? args.filter : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["loggingDestination"] = args ? args.loggingDestination : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["storageDestination"] = args ? args.storageDestination : undefined;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["trailId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AuditTrailsTrail.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AuditTrailsTrail resources.
 */
export interface AuditTrailsTrailState {
    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    dataStreamDestination?: pulumi.Input<inputs.AuditTrailsTrailDataStreamDestination>;
    /**
     * Description of the trail.
     */
    description?: pulumi.Input<string>;
    /**
     * Structure describing event filtering process for the trail.
     */
    filter?: pulumi.Input<inputs.AuditTrailsTrailFilter>;
    /**
     * ID of the folder to which the trail belongs.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Labels defined by the user.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    loggingDestination?: pulumi.Input<inputs.AuditTrailsTrailLoggingDestination>;
    /**
     * Name of the trail.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the [IAM service account](https://cloud.yandex.ru/en/docs/iam/concepts/users/service-accounts) that is used by the trail.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Status of this trail.
     */
    status?: pulumi.Input<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    storageDestination?: pulumi.Input<inputs.AuditTrailsTrailStorageDestination>;
    /**
     * ID of the trail resource.
     */
    trailId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AuditTrailsTrail resource.
 */
export interface AuditTrailsTrailArgs {
    /**
     * Structure describing destination data stream of the trail. Mutually exclusive with `loggingDestination` and `storageDestination`.
     */
    dataStreamDestination?: pulumi.Input<inputs.AuditTrailsTrailDataStreamDestination>;
    /**
     * Description of the trail.
     */
    description?: pulumi.Input<string>;
    /**
     * Structure describing event filtering process for the trail.
     */
    filter: pulumi.Input<inputs.AuditTrailsTrailFilter>;
    /**
     * ID of the folder to which the trail belongs.
     */
    folderId: pulumi.Input<string>;
    /**
     * Labels defined by the user.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Structure describing destination log group of the trail. Mutually exclusive with `storageDestination` and `dataStreamDestination`.
     */
    loggingDestination?: pulumi.Input<inputs.AuditTrailsTrailLoggingDestination>;
    /**
     * Name of the trail.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of the [IAM service account](https://cloud.yandex.ru/en/docs/iam/concepts/users/service-accounts) that is used by the trail.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * Structure describing destination bucket of the trail. Mutually exclusive with `loggingDestination` and `dataStreamDestination`.
     */
    storageDestination?: pulumi.Input<inputs.AuditTrailsTrailStorageDestination>;
}
