# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetApiGatewayResult',
    'AwaitableGetApiGatewayResult',
    'get_api_gateway',
    'get_api_gateway_output',
]

@pulumi.output_type
class GetApiGatewayResult:
    """
    A collection of values returned by getApiGateway.
    """
    def __init__(__self__, api_gateway_id=None, canary=None, connectivity=None, created_at=None, custom_domains=None, description=None, domain=None, execution_timeout=None, folder_id=None, id=None, labels=None, log_group_id=None, log_options=None, name=None, status=None, user_domains=None, variables=None):
        if api_gateway_id and not isinstance(api_gateway_id, str):
            raise TypeError("Expected argument 'api_gateway_id' to be a str")
        pulumi.set(__self__, "api_gateway_id", api_gateway_id)
        if canary and not isinstance(canary, dict):
            raise TypeError("Expected argument 'canary' to be a dict")
        pulumi.set(__self__, "canary", canary)
        if connectivity and not isinstance(connectivity, dict):
            raise TypeError("Expected argument 'connectivity' to be a dict")
        pulumi.set(__self__, "connectivity", connectivity)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if custom_domains and not isinstance(custom_domains, list):
            raise TypeError("Expected argument 'custom_domains' to be a list")
        pulumi.set(__self__, "custom_domains", custom_domains)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if domain and not isinstance(domain, str):
            raise TypeError("Expected argument 'domain' to be a str")
        pulumi.set(__self__, "domain", domain)
        if execution_timeout and not isinstance(execution_timeout, str):
            raise TypeError("Expected argument 'execution_timeout' to be a str")
        pulumi.set(__self__, "execution_timeout", execution_timeout)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if log_group_id and not isinstance(log_group_id, str):
            raise TypeError("Expected argument 'log_group_id' to be a str")
        pulumi.set(__self__, "log_group_id", log_group_id)
        if log_options and not isinstance(log_options, list):
            raise TypeError("Expected argument 'log_options' to be a list")
        pulumi.set(__self__, "log_options", log_options)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if user_domains and not isinstance(user_domains, list):
            raise TypeError("Expected argument 'user_domains' to be a list")
        pulumi.set(__self__, "user_domains", user_domains)
        if variables and not isinstance(variables, dict):
            raise TypeError("Expected argument 'variables' to be a dict")
        pulumi.set(__self__, "variables", variables)

    @property
    @pulumi.getter(name="apiGatewayId")
    def api_gateway_id(self) -> Optional[str]:
        return pulumi.get(self, "api_gateway_id")

    @property
    @pulumi.getter
    def canary(self) -> Optional['outputs.GetApiGatewayCanaryResult']:
        return pulumi.get(self, "canary")

    @property
    @pulumi.getter
    def connectivity(self) -> Optional['outputs.GetApiGatewayConnectivityResult']:
        return pulumi.get(self, "connectivity")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="customDomains")
    def custom_domains(self) -> Optional[Sequence['outputs.GetApiGatewayCustomDomainResult']]:
        return pulumi.get(self, "custom_domains")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="executionTimeout")
    def execution_timeout(self) -> str:
        return pulumi.get(self, "execution_timeout")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="logOptions")
    def log_options(self) -> Sequence['outputs.GetApiGatewayLogOptionResult']:
        return pulumi.get(self, "log_options")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="userDomains")
    def user_domains(self) -> Sequence[str]:
        warnings.warn("""The 'user_domains' field has been deprecated. Please use 'custom_domains' instead.""", DeprecationWarning)
        pulumi.log.warn("""user_domains is deprecated: The 'user_domains' field has been deprecated. Please use 'custom_domains' instead.""")

        return pulumi.get(self, "user_domains")

    @property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "variables")


class AwaitableGetApiGatewayResult(GetApiGatewayResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetApiGatewayResult(
            api_gateway_id=self.api_gateway_id,
            canary=self.canary,
            connectivity=self.connectivity,
            created_at=self.created_at,
            custom_domains=self.custom_domains,
            description=self.description,
            domain=self.domain,
            execution_timeout=self.execution_timeout,
            folder_id=self.folder_id,
            id=self.id,
            labels=self.labels,
            log_group_id=self.log_group_id,
            log_options=self.log_options,
            name=self.name,
            status=self.status,
            user_domains=self.user_domains,
            variables=self.variables)


def get_api_gateway(api_gateway_id: Optional[str] = None,
                    canary: Optional[pulumi.InputType['GetApiGatewayCanaryArgs']] = None,
                    connectivity: Optional[pulumi.InputType['GetApiGatewayConnectivityArgs']] = None,
                    custom_domains: Optional[Sequence[pulumi.InputType['GetApiGatewayCustomDomainArgs']]] = None,
                    execution_timeout: Optional[str] = None,
                    folder_id: Optional[str] = None,
                    name: Optional[str] = None,
                    variables: Optional[Mapping[str, str]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetApiGatewayResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['apiGatewayId'] = api_gateway_id
    __args__['canary'] = canary
    __args__['connectivity'] = connectivity
    __args__['customDomains'] = custom_domains
    __args__['executionTimeout'] = execution_timeout
    __args__['folderId'] = folder_id
    __args__['name'] = name
    __args__['variables'] = variables
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getApiGateway:getApiGateway', __args__, opts=opts, typ=GetApiGatewayResult).value

    return AwaitableGetApiGatewayResult(
        api_gateway_id=pulumi.get(__ret__, 'api_gateway_id'),
        canary=pulumi.get(__ret__, 'canary'),
        connectivity=pulumi.get(__ret__, 'connectivity'),
        created_at=pulumi.get(__ret__, 'created_at'),
        custom_domains=pulumi.get(__ret__, 'custom_domains'),
        description=pulumi.get(__ret__, 'description'),
        domain=pulumi.get(__ret__, 'domain'),
        execution_timeout=pulumi.get(__ret__, 'execution_timeout'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        log_group_id=pulumi.get(__ret__, 'log_group_id'),
        log_options=pulumi.get(__ret__, 'log_options'),
        name=pulumi.get(__ret__, 'name'),
        status=pulumi.get(__ret__, 'status'),
        user_domains=pulumi.get(__ret__, 'user_domains'),
        variables=pulumi.get(__ret__, 'variables'))


@_utilities.lift_output_func(get_api_gateway)
def get_api_gateway_output(api_gateway_id: Optional[pulumi.Input[Optional[str]]] = None,
                           canary: Optional[pulumi.Input[Optional[pulumi.InputType['GetApiGatewayCanaryArgs']]]] = None,
                           connectivity: Optional[pulumi.Input[Optional[pulumi.InputType['GetApiGatewayConnectivityArgs']]]] = None,
                           custom_domains: Optional[pulumi.Input[Optional[Sequence[pulumi.InputType['GetApiGatewayCustomDomainArgs']]]]] = None,
                           execution_timeout: Optional[pulumi.Input[Optional[str]]] = None,
                           folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                           name: Optional[pulumi.Input[Optional[str]]] = None,
                           variables: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetApiGatewayResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
