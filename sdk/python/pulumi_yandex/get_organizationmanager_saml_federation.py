# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetOrganizationmanagerSamlFederationResult',
    'AwaitableGetOrganizationmanagerSamlFederationResult',
    'get_organizationmanager_saml_federation',
    'get_organizationmanager_saml_federation_output',
]

@pulumi.output_type
class GetOrganizationmanagerSamlFederationResult:
    """
    A collection of values returned by getOrganizationmanagerSamlFederation.
    """
    def __init__(__self__, auto_create_account_on_login=None, case_insensitive_name_ids=None, cookie_max_age=None, created_at=None, description=None, federation_id=None, id=None, issuer=None, labels=None, name=None, organization_id=None, security_settings=None, sso_binding=None, sso_url=None):
        if auto_create_account_on_login and not isinstance(auto_create_account_on_login, bool):
            raise TypeError("Expected argument 'auto_create_account_on_login' to be a bool")
        pulumi.set(__self__, "auto_create_account_on_login", auto_create_account_on_login)
        if case_insensitive_name_ids and not isinstance(case_insensitive_name_ids, bool):
            raise TypeError("Expected argument 'case_insensitive_name_ids' to be a bool")
        pulumi.set(__self__, "case_insensitive_name_ids", case_insensitive_name_ids)
        if cookie_max_age and not isinstance(cookie_max_age, str):
            raise TypeError("Expected argument 'cookie_max_age' to be a str")
        pulumi.set(__self__, "cookie_max_age", cookie_max_age)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if federation_id and not isinstance(federation_id, str):
            raise TypeError("Expected argument 'federation_id' to be a str")
        pulumi.set(__self__, "federation_id", federation_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if issuer and not isinstance(issuer, str):
            raise TypeError("Expected argument 'issuer' to be a str")
        pulumi.set(__self__, "issuer", issuer)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if organization_id and not isinstance(organization_id, str):
            raise TypeError("Expected argument 'organization_id' to be a str")
        pulumi.set(__self__, "organization_id", organization_id)
        if security_settings and not isinstance(security_settings, list):
            raise TypeError("Expected argument 'security_settings' to be a list")
        pulumi.set(__self__, "security_settings", security_settings)
        if sso_binding and not isinstance(sso_binding, str):
            raise TypeError("Expected argument 'sso_binding' to be a str")
        pulumi.set(__self__, "sso_binding", sso_binding)
        if sso_url and not isinstance(sso_url, str):
            raise TypeError("Expected argument 'sso_url' to be a str")
        pulumi.set(__self__, "sso_url", sso_url)

    @property
    @pulumi.getter(name="autoCreateAccountOnLogin")
    def auto_create_account_on_login(self) -> bool:
        return pulumi.get(self, "auto_create_account_on_login")

    @property
    @pulumi.getter(name="caseInsensitiveNameIds")
    def case_insensitive_name_ids(self) -> bool:
        return pulumi.get(self, "case_insensitive_name_ids")

    @property
    @pulumi.getter(name="cookieMaxAge")
    def cookie_max_age(self) -> str:
        return pulumi.get(self, "cookie_max_age")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="federationId")
    def federation_id(self) -> str:
        return pulumi.get(self, "federation_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def issuer(self) -> str:
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="organizationId")
    def organization_id(self) -> Optional[str]:
        return pulumi.get(self, "organization_id")

    @property
    @pulumi.getter(name="securitySettings")
    def security_settings(self) -> Sequence['outputs.GetOrganizationmanagerSamlFederationSecuritySettingResult']:
        return pulumi.get(self, "security_settings")

    @property
    @pulumi.getter(name="ssoBinding")
    def sso_binding(self) -> str:
        return pulumi.get(self, "sso_binding")

    @property
    @pulumi.getter(name="ssoUrl")
    def sso_url(self) -> str:
        return pulumi.get(self, "sso_url")


class AwaitableGetOrganizationmanagerSamlFederationResult(GetOrganizationmanagerSamlFederationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOrganizationmanagerSamlFederationResult(
            auto_create_account_on_login=self.auto_create_account_on_login,
            case_insensitive_name_ids=self.case_insensitive_name_ids,
            cookie_max_age=self.cookie_max_age,
            created_at=self.created_at,
            description=self.description,
            federation_id=self.federation_id,
            id=self.id,
            issuer=self.issuer,
            labels=self.labels,
            name=self.name,
            organization_id=self.organization_id,
            security_settings=self.security_settings,
            sso_binding=self.sso_binding,
            sso_url=self.sso_url)


def get_organizationmanager_saml_federation(federation_id: Optional[str] = None,
                                            labels: Optional[Mapping[str, str]] = None,
                                            name: Optional[str] = None,
                                            organization_id: Optional[str] = None,
                                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOrganizationmanagerSamlFederationResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['federationId'] = federation_id
    __args__['labels'] = labels
    __args__['name'] = name
    __args__['organizationId'] = organization_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getOrganizationmanagerSamlFederation:getOrganizationmanagerSamlFederation', __args__, opts=opts, typ=GetOrganizationmanagerSamlFederationResult).value

    return AwaitableGetOrganizationmanagerSamlFederationResult(
        auto_create_account_on_login=pulumi.get(__ret__, 'auto_create_account_on_login'),
        case_insensitive_name_ids=pulumi.get(__ret__, 'case_insensitive_name_ids'),
        cookie_max_age=pulumi.get(__ret__, 'cookie_max_age'),
        created_at=pulumi.get(__ret__, 'created_at'),
        description=pulumi.get(__ret__, 'description'),
        federation_id=pulumi.get(__ret__, 'federation_id'),
        id=pulumi.get(__ret__, 'id'),
        issuer=pulumi.get(__ret__, 'issuer'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        organization_id=pulumi.get(__ret__, 'organization_id'),
        security_settings=pulumi.get(__ret__, 'security_settings'),
        sso_binding=pulumi.get(__ret__, 'sso_binding'),
        sso_url=pulumi.get(__ret__, 'sso_url'))


@_utilities.lift_output_func(get_organizationmanager_saml_federation)
def get_organizationmanager_saml_federation_output(federation_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                   labels: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                                   name: Optional[pulumi.Input[Optional[str]]] = None,
                                                   organization_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetOrganizationmanagerSamlFederationResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
