# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['StorageBucketArgs', 'StorageBucket']

@pulumi.input_type
class StorageBucketArgs:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 anonymous_access_flags: Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]] = None,
                 default_storage_class: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]] = None,
                 https: Optional[pulumi.Input['StorageBucketHttpsArgs']] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 object_lock_configuration: Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_configuration: Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 versioning: Optional[pulumi.Input['StorageBucketVersioningArgs']] = None,
                 website: Optional[pulumi.Input['StorageBucketWebsiteArgs']] = None,
                 website_domain: Optional[pulumi.Input[str]] = None,
                 website_endpoint: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a StorageBucket resource.
        :param pulumi.Input[str] access_key: The access key to use when applying changes. If omitted, `storage_access_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[str] acl: The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
               Defaults to `private`. Conflicts with `grant`.
               
               > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        :param pulumi.Input['StorageBucketAnonymousAccessFlagsArgs'] anonymous_access_flags: Provides various access to objects.
               See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
               for more infomation.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix.
               Conflicts with `bucket`.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        :param pulumi.Input[str] default_storage_class: Storage class which is used for storing objects by default.
               Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
               See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        :param pulumi.Input[str] folder_id: Allow to create bucket in different folder.
               
               > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]] grants: An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        :param pulumi.Input['StorageBucketHttpsArgs'] https: Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]] loggings: A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        :param pulumi.Input[int] max_size: The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        :param pulumi.Input['StorageBucketObjectLockConfigurationArgs'] object_lock_configuration: A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        :param pulumi.Input[str] secret_key: The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs'] server_side_encryption_configuration: A configuration of server-side encryption for the bucket (documented below)
        :param pulumi.Input['StorageBucketVersioningArgs'] versioning: A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)
               
               > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        :param pulumi.Input['StorageBucketWebsiteArgs'] website: A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if anonymous_access_flags is not None:
            pulumi.set(__self__, "anonymous_access_flags", anonymous_access_flags)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if default_storage_class is not None:
            pulumi.set(__self__, "default_storage_class", default_storage_class)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if object_lock_configuration is not None:
            pulumi.set(__self__, "object_lock_configuration", object_lock_configuration)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if server_side_encryption_configuration is not None:
            pulumi.set(__self__, "server_side_encryption_configuration", server_side_encryption_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)
        if website is not None:
            pulumi.set(__self__, "website", website)
        if website_domain is not None:
            pulumi.set(__self__, "website_domain", website_domain)
        if website_endpoint is not None:
            pulumi.set(__self__, "website_endpoint", website_endpoint)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The access key to use when applying changes. If omitted, `storage_access_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
        Defaults to `private`. Conflicts with `grant`.

        > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="anonymousAccessFlags")
    def anonymous_access_flags(self) -> Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']]:
        """
        Provides various access to objects.
        See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
        for more infomation.
        """
        return pulumi.get(self, "anonymous_access_flags")

    @anonymous_access_flags.setter
    def anonymous_access_flags(self, value: Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']]):
        pulumi.set(self, "anonymous_access_flags", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Creates a unique bucket name beginning with the specified prefix.
        Conflicts with `bucket`.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]]:
        """
        A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Storage class which is used for storing objects by default.
        Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
        See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        """
        return pulumi.get(self, "default_storage_class")

    @default_storage_class.setter
    def default_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_storage_class", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allow to create bucket in different folder.

        > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]]:
        """
        An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        """
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]]):
        pulumi.set(self, "grants", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['StorageBucketHttpsArgs']]:
        """
        Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        """
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['StorageBucketHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]]:
        """
        A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]]:
        """
        A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        """
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="objectLockConfiguration")
    def object_lock_configuration(self) -> Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']]:
        """
        A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        """
        return pulumi.get(self, "object_lock_configuration")

    @object_lock_configuration.setter
    def object_lock_configuration(self, value: Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']]):
        pulumi.set(self, "object_lock_configuration", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serverSideEncryptionConfiguration")
    def server_side_encryption_configuration(self) -> Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']]:
        """
        A configuration of server-side encryption for the bucket (documented below)
        """
        return pulumi.get(self, "server_side_encryption_configuration")

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, value: Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']]):
        pulumi.set(self, "server_side_encryption_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input['StorageBucketVersioningArgs']]:
        """
        A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)

        > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        """
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input['StorageBucketVersioningArgs']]):
        pulumi.set(self, "versioning", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['StorageBucketWebsiteArgs']]:
        """
        A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['StorageBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)

    @property
    @pulumi.getter(name="websiteDomain")
    def website_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_domain")

    @website_domain.setter
    def website_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_domain", value)

    @property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_endpoint")

    @website_endpoint.setter
    def website_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_endpoint", value)


@pulumi.input_type
class _StorageBucketState:
    def __init__(__self__, *,
                 access_key: Optional[pulumi.Input[str]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 anonymous_access_flags: Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_domain_name: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]] = None,
                 default_storage_class: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]] = None,
                 https: Optional[pulumi.Input['StorageBucketHttpsArgs']] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 object_lock_configuration: Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_configuration: Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 versioning: Optional[pulumi.Input['StorageBucketVersioningArgs']] = None,
                 website: Optional[pulumi.Input['StorageBucketWebsiteArgs']] = None,
                 website_domain: Optional[pulumi.Input[str]] = None,
                 website_endpoint: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering StorageBucket resources.
        :param pulumi.Input[str] access_key: The access key to use when applying changes. If omitted, `storage_access_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[str] acl: The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
               Defaults to `private`. Conflicts with `grant`.
               
               > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        :param pulumi.Input['StorageBucketAnonymousAccessFlagsArgs'] anonymous_access_flags: Provides various access to objects.
               See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
               for more infomation.
        :param pulumi.Input[str] bucket_domain_name: The bucket domain name.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix.
               Conflicts with `bucket`.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        :param pulumi.Input[str] default_storage_class: Storage class which is used for storing objects by default.
               Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
               See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        :param pulumi.Input[str] folder_id: Allow to create bucket in different folder.
               
               > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]] grants: An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        :param pulumi.Input['StorageBucketHttpsArgs'] https: Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]] lifecycle_rules: A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        :param pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]] loggings: A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        :param pulumi.Input[int] max_size: The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        :param pulumi.Input['StorageBucketObjectLockConfigurationArgs'] object_lock_configuration: A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        :param pulumi.Input[str] secret_key: The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs'] server_side_encryption_configuration: A configuration of server-side encryption for the bucket (documented below)
        :param pulumi.Input['StorageBucketVersioningArgs'] versioning: A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)
               
               > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        :param pulumi.Input['StorageBucketWebsiteArgs'] website: A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        if access_key is not None:
            pulumi.set(__self__, "access_key", access_key)
        if acl is not None:
            pulumi.set(__self__, "acl", acl)
        if anonymous_access_flags is not None:
            pulumi.set(__self__, "anonymous_access_flags", anonymous_access_flags)
        if bucket is not None:
            pulumi.set(__self__, "bucket", bucket)
        if bucket_domain_name is not None:
            pulumi.set(__self__, "bucket_domain_name", bucket_domain_name)
        if bucket_prefix is not None:
            pulumi.set(__self__, "bucket_prefix", bucket_prefix)
        if cors_rules is not None:
            pulumi.set(__self__, "cors_rules", cors_rules)
        if default_storage_class is not None:
            pulumi.set(__self__, "default_storage_class", default_storage_class)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if force_destroy is not None:
            pulumi.set(__self__, "force_destroy", force_destroy)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if lifecycle_rules is not None:
            pulumi.set(__self__, "lifecycle_rules", lifecycle_rules)
        if loggings is not None:
            pulumi.set(__self__, "loggings", loggings)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if object_lock_configuration is not None:
            pulumi.set(__self__, "object_lock_configuration", object_lock_configuration)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if secret_key is not None:
            pulumi.set(__self__, "secret_key", secret_key)
        if server_side_encryption_configuration is not None:
            pulumi.set(__self__, "server_side_encryption_configuration", server_side_encryption_configuration)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)
        if versioning is not None:
            pulumi.set(__self__, "versioning", versioning)
        if website is not None:
            pulumi.set(__self__, "website", website)
        if website_domain is not None:
            pulumi.set(__self__, "website_domain", website_domain)
        if website_endpoint is not None:
            pulumi.set(__self__, "website_endpoint", website_endpoint)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> Optional[pulumi.Input[str]]:
        """
        The access key to use when applying changes. If omitted, `storage_access_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "access_key")

    @access_key.setter
    def access_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key", value)

    @property
    @pulumi.getter
    def acl(self) -> Optional[pulumi.Input[str]]:
        """
        The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
        Defaults to `private`. Conflicts with `grant`.

        > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        """
        return pulumi.get(self, "acl")

    @acl.setter
    def acl(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "acl", value)

    @property
    @pulumi.getter(name="anonymousAccessFlags")
    def anonymous_access_flags(self) -> Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']]:
        """
        Provides various access to objects.
        See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
        for more infomation.
        """
        return pulumi.get(self, "anonymous_access_flags")

    @anonymous_access_flags.setter
    def anonymous_access_flags(self, value: Optional[pulumi.Input['StorageBucketAnonymousAccessFlagsArgs']]):
        pulumi.set(self, "anonymous_access_flags", value)

    @property
    @pulumi.getter
    def bucket(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "bucket")

    @bucket.setter
    def bucket(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket", value)

    @property
    @pulumi.getter(name="bucketDomainName")
    def bucket_domain_name(self) -> Optional[pulumi.Input[str]]:
        """
        The bucket domain name.
        """
        return pulumi.get(self, "bucket_domain_name")

    @bucket_domain_name.setter
    def bucket_domain_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_domain_name", value)

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        Creates a unique bucket name beginning with the specified prefix.
        Conflicts with `bucket`.
        """
        return pulumi.get(self, "bucket_prefix")

    @bucket_prefix.setter
    def bucket_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "bucket_prefix", value)

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]]:
        """
        A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @cors_rules.setter
    def cors_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketCorsRuleArgs']]]]):
        pulumi.set(self, "cors_rules", value)

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> Optional[pulumi.Input[str]]:
        """
        Storage class which is used for storing objects by default.
        Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
        See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        """
        return pulumi.get(self, "default_storage_class")

    @default_storage_class.setter
    def default_storage_class(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_storage_class", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        Allow to create bucket in different folder.

        > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @force_destroy.setter
    def force_destroy(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "force_destroy", value)

    @property
    @pulumi.getter
    def grants(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]]:
        """
        An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        """
        return pulumi.get(self, "grants")

    @grants.setter
    def grants(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketGrantArgs']]]]):
        pulumi.set(self, "grants", value)

    @property
    @pulumi.getter
    def https(self) -> Optional[pulumi.Input['StorageBucketHttpsArgs']]:
        """
        Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        """
        return pulumi.get(self, "https")

    @https.setter
    def https(self, value: Optional[pulumi.Input['StorageBucketHttpsArgs']]):
        pulumi.set(self, "https", value)

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]]:
        """
        A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @lifecycle_rules.setter
    def lifecycle_rules(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLifecycleRuleArgs']]]]):
        pulumi.set(self, "lifecycle_rules", value)

    @property
    @pulumi.getter
    def loggings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]]:
        """
        A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        """
        return pulumi.get(self, "loggings")

    @loggings.setter
    def loggings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['StorageBucketLoggingArgs']]]]):
        pulumi.set(self, "loggings", value)

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[pulumi.Input[int]]:
        """
        The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        """
        return pulumi.get(self, "max_size")

    @max_size.setter
    def max_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_size", value)

    @property
    @pulumi.getter(name="objectLockConfiguration")
    def object_lock_configuration(self) -> Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']]:
        """
        A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        """
        return pulumi.get(self, "object_lock_configuration")

    @object_lock_configuration.setter
    def object_lock_configuration(self, value: Optional[pulumi.Input['StorageBucketObjectLockConfigurationArgs']]):
        pulumi.set(self, "object_lock_configuration", value)

    @property
    @pulumi.getter
    def policy(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "policy")

    @policy.setter
    def policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "policy", value)

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "secret_key")

    @secret_key.setter
    def secret_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "secret_key", value)

    @property
    @pulumi.getter(name="serverSideEncryptionConfiguration")
    def server_side_encryption_configuration(self) -> Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']]:
        """
        A configuration of server-side encryption for the bucket (documented below)
        """
        return pulumi.get(self, "server_side_encryption_configuration")

    @server_side_encryption_configuration.setter
    def server_side_encryption_configuration(self, value: Optional[pulumi.Input['StorageBucketServerSideEncryptionConfigurationArgs']]):
        pulumi.set(self, "server_side_encryption_configuration", value)

    @property
    @pulumi.getter
    def tags(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        return pulumi.get(self, "tags")

    @tags.setter
    def tags(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "tags", value)

    @property
    @pulumi.getter
    def versioning(self) -> Optional[pulumi.Input['StorageBucketVersioningArgs']]:
        """
        A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)

        > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        """
        return pulumi.get(self, "versioning")

    @versioning.setter
    def versioning(self, value: Optional[pulumi.Input['StorageBucketVersioningArgs']]):
        pulumi.set(self, "versioning", value)

    @property
    @pulumi.getter
    def website(self) -> Optional[pulumi.Input['StorageBucketWebsiteArgs']]:
        """
        A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        """
        return pulumi.get(self, "website")

    @website.setter
    def website(self, value: Optional[pulumi.Input['StorageBucketWebsiteArgs']]):
        pulumi.set(self, "website", value)

    @property
    @pulumi.getter(name="websiteDomain")
    def website_domain(self) -> Optional[pulumi.Input[str]]:
        """
        The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_domain")

    @website_domain.setter
    def website_domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_domain", value)

    @property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> Optional[pulumi.Input[str]]:
        """
        The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_endpoint")

    @website_endpoint.setter
    def website_endpoint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "website_endpoint", value)


class StorageBucket(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 anonymous_access_flags: Optional[pulumi.Input[pulumi.InputType['StorageBucketAnonymousAccessFlagsArgs']]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketCorsRuleArgs']]]]] = None,
                 default_storage_class: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketGrantArgs']]]]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['StorageBucketHttpsArgs']]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLifecycleRuleArgs']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLoggingArgs']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 object_lock_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketObjectLockConfigurationArgs']]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketServerSideEncryptionConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 versioning: Optional[pulumi.Input[pulumi.InputType['StorageBucketVersioningArgs']]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['StorageBucketWebsiteArgs']]] = None,
                 website_domain: Optional[pulumi.Input[str]] = None,
                 website_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Allows management of [Yandex.Cloud Storage Bucket](https://cloud.yandex.com/docs/storage/concepts/bucket).

        > **Note:** Your need to provide [static access key](https://cloud.yandex.com/docs/iam/concepts/authorization/access-key) (Access and Secret) to create storage client to work with Storage Service. To create them you need Service Account and proper permissions.

        > **Note:** For extended API usage, such as setting `max_size`, `folder_id`, `anonymous_access_flags`,
        `default_storage_class` and `https` parameters for bucket, will be used default authorization method, i.e.
        `IAM` / `OAuth` token from `provider` block will be used.
        This might be a little bit confusing in cases when separate service account is used for managing buckets because
        in this case buckets will be accessed by two different accounts that might have different permissions for buckets.

        ## Example Usage

        ### Simple Private Bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        folder_id = "<folder-id>"
        # Create SA
        sa = yandex.IamServiceAccount("sa", folder_id=folder_id)
        # Grant permissions
        sa_editor = yandex.ResourcemanagerFolderIamMember("sa-editor",
            folder_id=folder_id,
            role="storage.editor",
            member=sa.id.apply(lambda id: f"serviceAccount:{id}"))
        # Create Static Access Keys
        sa_static_key = yandex.IamServiceAccountStaticAccessKey("sa-static-key",
            service_account_id=sa.id,
            description="static access key for object storage")
        # Use keys to create bucket
        test = yandex.StorageBucket("test",
            access_key=sa_static_key.access_key,
            secret_key=sa_static_key.secret_key,
            bucket="tf-test-bucket")
        ```
        <!--End PulumiCodeChooser -->

        ### Static Website Hosting

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        test = yandex.StorageBucket("test",
            acl="public-read",
            bucket="storage-website-test.hashicorp.com",
            website=yandex.StorageBucketWebsiteArgs(
                error_document="error.html",
                index_document="index.html",
                routing_rules=\"\"\"[{
            "Condition": {
                "KeyPrefixEquals": "docs/"
            },
            "Redirect": {
                "ReplaceKeyPrefixWith": "documents/"
            }
        }]

        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using ACL policy grants

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        test = yandex.StorageBucket("test",
            bucket="mybucket",
            grants=[
                yandex.StorageBucketGrantArgs(
                    id="myuser",
                    permissions=["FULL_CONTROL"],
                    type="CanonicalUser",
                ),
                yandex.StorageBucketGrantArgs(
                    permissions=[
                        "READ",
                        "WRITE",
                    ],
                    type="Group",
                    uri="http://acs.amazonaws.com/groups/global/AllUsers",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="public-read",
            bucket="s3-website-test.hashicorp.com",
            cors_rules=[yandex.StorageBucketCorsRuleArgs(
                allowed_headers=["*"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_origins=["https://s3-website-test.hashicorp.com"],
                expose_headers=["ETag"],
                max_age_seconds=3000,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using versioning

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="private",
            bucket="my-tf-test-bucket",
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using Object Lock Configuration

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="private",
            bucket="my-tf-test-bucket",
            object_lock_configuration=yandex.StorageBucketObjectLockConfigurationArgs(
                object_lock_enabled="Enabled",
                rule=yandex.StorageBucketObjectLockConfigurationRuleArgs(
                    default_retention=yandex.StorageBucketObjectLockConfigurationRuleDefaultRetentionArgs(
                        mode="GOVERNANCE",
                        years=1,
                    ),
                ),
            ),
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Enable Logging

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        log_bucket = yandex.StorageBucket("logBucket", bucket="my-tf-log-bucket")
        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-tf-test-bucket",
            acl="private",
            loggings=[yandex.StorageBucketLoggingArgs(
                target_bucket=log_bucket.id,
                target_prefix="log/",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        bucket = yandex.StorageBucket("bucket",
            acl="private",
            bucket="my-bucket",
            lifecycle_rules=[
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=90,
                    ),
                    id="log",
                    prefix="log/",
                    transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    id="tmp",
                    prefix="tmp/",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        tag=yandex.StorageBucketLifecycleRuleFilterTagArgs(
                            key="key1",
                            value="value1",
                        ),
                    ),
                    id="test_tag",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        object_size_greater_than=1000,
                    ),
                    id="test_object_size_greater_than",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        object_size_less_than=30000,
                    ),
                    id="object_size_less_than",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        and_=yandex.StorageBucketLifecycleRuleFilterAndArgs(
                            object_size_greater_than=1000,
                            object_size_less_than=30000,
                            prefix="path2/",
                            tags={
                                "key1": "value1",
                                "key2": "value2",
                            },
                        ),
                    ),
                    id="test_filter",
                ),
            ])
        versioning_bucket = yandex.StorageBucket("versioningBucket",
            acl="private",
            bucket="my-versioning-bucket",
            lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(
                enabled=True,
                noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(
                    days=90,
                ),
                noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(
                    days=30,
                    storage_class="COLD",
                )],
                prefix="config/",
            )],
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using SSE

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        key_a = yandex.KmsSymmetricKey("key-a",
            description="description for key",
            default_algorithm="AES_128",
            rotation_period="8760h")
        # equal to 1 year
        test = yandex.StorageBucket("test",
            bucket="mybucket",
            server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(
                rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(
                    apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(
                        kms_master_key_id=key_a.id,
                        sse_algorithm="aws:kms",
                    ),
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            policy=\"\"\"{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::my-policy-bucket/*",
                "arn:aws:s3:::my-policy-bucket"
              ]
            },
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": [
                "arn:aws:s3:::my-policy-bucket/*",
                "arn:aws:s3:::my-policy-bucket"
              ]
            }
          ]
        }

        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Tagging

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            tags={
                "other_key": "other_value",
                "test_key": "test_value",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Max Size

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            max_size=1048576)
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Folder Id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            folder_id="<folder_id>")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Anonymous Access Flags

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(
                config_read=True,
                list=False,
                read=True,
            ),
            bucket="my-policy-bucket")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket HTTPS Certificate

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            https=yandex.StorageBucketHttpsArgs(
                certificate_id="<certificate_id_from_certificate_manager>",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Default Storage Class

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            default_storage_class="COLD")
        ```
        <!--End PulumiCodeChooser -->

        ### All settings example

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        log_bucket = yandex.StorageBucket("logBucket",
            bucket="my-tf-log-bucket",
            lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(
                id="cleanupoldlogs",
                enabled=True,
                expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                    days=365,
                ),
            )])
        key_a = yandex.KmsSymmetricKey("key-a",
            description="description for key",
            default_algorithm="AES_128",
            rotation_period="8760h")
        # equal to 1 year
        all_settings = yandex.StorageBucket("allSettings",
            bucket="example-tf-settings-bucket",
            website=yandex.StorageBucketWebsiteArgs(
                index_document="index.html",
                error_document="error.html",
            ),
            lifecycle_rules=[
                yandex.StorageBucketLifecycleRuleArgs(
                    id="test",
                    enabled=True,
                    prefix="prefix/",
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=30,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="log",
                    enabled=True,
                    prefix="log/",
                    transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=90,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="everything180",
                    prefix="",
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=180,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="cleanupoldversions",
                    prefix="config/",
                    enabled=True,
                    noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                    noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(
                        days=90,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="abortmultiparts",
                    prefix="",
                    enabled=True,
                    abort_incomplete_multipart_upload_days=7,
                ),
            ],
            cors_rules=[yandex.StorageBucketCorsRuleArgs(
                allowed_headers=["*"],
                allowed_methods=[
                    "GET",
                    "PUT",
                ],
                allowed_origins=["https://storage-cloud.example.com"],
                expose_headers=["ETag"],
                max_age_seconds=3000,
            )],
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ),
            server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(
                rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(
                    apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(
                        kms_master_key_id=key_a.id,
                        sse_algorithm="aws:kms",
                    ),
                ),
            ),
            loggings=[yandex.StorageBucketLoggingArgs(
                target_bucket=log_bucket.id,
                target_prefix="tf-logs/",
            )],
            max_size=1024,
            folder_id="<folder_id>",
            default_storage_class="COLD",
            anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(
                read=True,
                list=True,
            ),
            https=yandex.StorageBucketHttpsArgs(
                certificate_id="<certificate_id>",
            ),
            tags={
                "some_key": "some_value",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Storage bucket can be imported using the `bucket`, e.g.

        ```sh
        $ pulumi import yandex:index/storageBucket:StorageBucket bucket bucket-name
        ```
        ~> __Note:__ Terraform will import this resource with `force_destroy` set to
        `false` in state. If you've set it to `true` in config, run `pulumi up` to
        update the value set in state. If you delete this resource before updating the
        value, objects in the bucket will not be destroyed.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: The access key to use when applying changes. If omitted, `storage_access_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[str] acl: The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
               Defaults to `private`. Conflicts with `grant`.
               
               > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        :param pulumi.Input[pulumi.InputType['StorageBucketAnonymousAccessFlagsArgs']] anonymous_access_flags: Provides various access to objects.
               See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
               for more infomation.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix.
               Conflicts with `bucket`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketCorsRuleArgs']]]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        :param pulumi.Input[str] default_storage_class: Storage class which is used for storing objects by default.
               Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
               See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        :param pulumi.Input[str] folder_id: Allow to create bucket in different folder.
               
               > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketGrantArgs']]]] grants: An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        :param pulumi.Input[pulumi.InputType['StorageBucketHttpsArgs']] https: Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLoggingArgs']]]] loggings: A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        :param pulumi.Input[int] max_size: The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        :param pulumi.Input[pulumi.InputType['StorageBucketObjectLockConfigurationArgs']] object_lock_configuration: A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        :param pulumi.Input[str] secret_key: The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[pulumi.InputType['StorageBucketServerSideEncryptionConfigurationArgs']] server_side_encryption_configuration: A configuration of server-side encryption for the bucket (documented below)
        :param pulumi.Input[pulumi.InputType['StorageBucketVersioningArgs']] versioning: A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)
               
               > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        :param pulumi.Input[pulumi.InputType['StorageBucketWebsiteArgs']] website: A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[StorageBucketArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Allows management of [Yandex.Cloud Storage Bucket](https://cloud.yandex.com/docs/storage/concepts/bucket).

        > **Note:** Your need to provide [static access key](https://cloud.yandex.com/docs/iam/concepts/authorization/access-key) (Access and Secret) to create storage client to work with Storage Service. To create them you need Service Account and proper permissions.

        > **Note:** For extended API usage, such as setting `max_size`, `folder_id`, `anonymous_access_flags`,
        `default_storage_class` and `https` parameters for bucket, will be used default authorization method, i.e.
        `IAM` / `OAuth` token from `provider` block will be used.
        This might be a little bit confusing in cases when separate service account is used for managing buckets because
        in this case buckets will be accessed by two different accounts that might have different permissions for buckets.

        ## Example Usage

        ### Simple Private Bucket

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        folder_id = "<folder-id>"
        # Create SA
        sa = yandex.IamServiceAccount("sa", folder_id=folder_id)
        # Grant permissions
        sa_editor = yandex.ResourcemanagerFolderIamMember("sa-editor",
            folder_id=folder_id,
            role="storage.editor",
            member=sa.id.apply(lambda id: f"serviceAccount:{id}"))
        # Create Static Access Keys
        sa_static_key = yandex.IamServiceAccountStaticAccessKey("sa-static-key",
            service_account_id=sa.id,
            description="static access key for object storage")
        # Use keys to create bucket
        test = yandex.StorageBucket("test",
            access_key=sa_static_key.access_key,
            secret_key=sa_static_key.secret_key,
            bucket="tf-test-bucket")
        ```
        <!--End PulumiCodeChooser -->

        ### Static Website Hosting

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        test = yandex.StorageBucket("test",
            acl="public-read",
            bucket="storage-website-test.hashicorp.com",
            website=yandex.StorageBucketWebsiteArgs(
                error_document="error.html",
                index_document="index.html",
                routing_rules=\"\"\"[{
            "Condition": {
                "KeyPrefixEquals": "docs/"
            },
            "Redirect": {
                "ReplaceKeyPrefixWith": "documents/"
            }
        }]

        \"\"\",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using ACL policy grants

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        test = yandex.StorageBucket("test",
            bucket="mybucket",
            grants=[
                yandex.StorageBucketGrantArgs(
                    id="myuser",
                    permissions=["FULL_CONTROL"],
                    type="CanonicalUser",
                ),
                yandex.StorageBucketGrantArgs(
                    permissions=[
                        "READ",
                        "WRITE",
                    ],
                    type="Group",
                    uri="http://acs.amazonaws.com/groups/global/AllUsers",
                ),
            ])
        ```
        <!--End PulumiCodeChooser -->

        ### Using CORS

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="public-read",
            bucket="s3-website-test.hashicorp.com",
            cors_rules=[yandex.StorageBucketCorsRuleArgs(
                allowed_headers=["*"],
                allowed_methods=[
                    "PUT",
                    "POST",
                ],
                allowed_origins=["https://s3-website-test.hashicorp.com"],
                expose_headers=["ETag"],
                max_age_seconds=3000,
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using versioning

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="private",
            bucket="my-tf-test-bucket",
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using Object Lock Configuration

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            acl="private",
            bucket="my-tf-test-bucket",
            object_lock_configuration=yandex.StorageBucketObjectLockConfigurationArgs(
                object_lock_enabled="Enabled",
                rule=yandex.StorageBucketObjectLockConfigurationRuleArgs(
                    default_retention=yandex.StorageBucketObjectLockConfigurationRuleDefaultRetentionArgs(
                        mode="GOVERNANCE",
                        years=1,
                    ),
                ),
            ),
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Enable Logging

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        log_bucket = yandex.StorageBucket("logBucket", bucket="my-tf-log-bucket")
        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-tf-test-bucket",
            acl="private",
            loggings=[yandex.StorageBucketLoggingArgs(
                target_bucket=log_bucket.id,
                target_prefix="log/",
            )])
        ```
        <!--End PulumiCodeChooser -->

        ### Using object lifecycle

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        bucket = yandex.StorageBucket("bucket",
            acl="private",
            bucket="my-bucket",
            lifecycle_rules=[
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=90,
                    ),
                    id="log",
                    prefix="log/",
                    transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    id="tmp",
                    prefix="tmp/",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        tag=yandex.StorageBucketLifecycleRuleFilterTagArgs(
                            key="key1",
                            value="value1",
                        ),
                    ),
                    id="test_tag",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        object_size_greater_than=1000,
                    ),
                    id="test_object_size_greater_than",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        object_size_less_than=30000,
                    ),
                    id="object_size_less_than",
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        date="2020-12-21",
                    ),
                    filter=yandex.StorageBucketLifecycleRuleFilterArgs(
                        and_=yandex.StorageBucketLifecycleRuleFilterAndArgs(
                            object_size_greater_than=1000,
                            object_size_less_than=30000,
                            prefix="path2/",
                            tags={
                                "key1": "value1",
                                "key2": "value2",
                            },
                        ),
                    ),
                    id="test_filter",
                ),
            ])
        versioning_bucket = yandex.StorageBucket("versioningBucket",
            acl="private",
            bucket="my-versioning-bucket",
            lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(
                enabled=True,
                noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(
                    days=90,
                ),
                noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(
                    days=30,
                    storage_class="COLD",
                )],
                prefix="config/",
            )],
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Using SSE

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        key_a = yandex.KmsSymmetricKey("key-a",
            description="description for key",
            default_algorithm="AES_128",
            rotation_period="8760h")
        # equal to 1 year
        test = yandex.StorageBucket("test",
            bucket="mybucket",
            server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(
                rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(
                    apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(
                        kms_master_key_id=key_a.id,
                        sse_algorithm="aws:kms",
                    ),
                ),
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Policy

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            policy=\"\"\"{
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": "*",
              "Action": "s3:*",
              "Resource": [
                "arn:aws:s3:::my-policy-bucket/*",
                "arn:aws:s3:::my-policy-bucket"
              ]
            },
            {
              "Effect": "Deny",
              "Principal": "*",
              "Action": "s3:PutObject",
              "Resource": [
                "arn:aws:s3:::my-policy-bucket/*",
                "arn:aws:s3:::my-policy-bucket"
              ]
            }
          ]
        }

        \"\"\")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Tagging

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            tags={
                "other_key": "other_value",
                "test_key": "test_value",
            })
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Max Size

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            max_size=1048576)
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Folder Id

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            folder_id="<folder_id>")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Anonymous Access Flags

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(
                config_read=True,
                list=False,
                read=True,
            ),
            bucket="my-policy-bucket")
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket HTTPS Certificate

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            https=yandex.StorageBucketHttpsArgs(
                certificate_id="<certificate_id_from_certificate_manager>",
            ))
        ```
        <!--End PulumiCodeChooser -->

        ### Bucket Default Storage Class

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        storage_bucket = yandex.StorageBucket("storageBucket",
            bucket="my-policy-bucket",
            default_storage_class="COLD")
        ```
        <!--End PulumiCodeChooser -->

        ### All settings example

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        log_bucket = yandex.StorageBucket("logBucket",
            bucket="my-tf-log-bucket",
            lifecycle_rules=[yandex.StorageBucketLifecycleRuleArgs(
                id="cleanupoldlogs",
                enabled=True,
                expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                    days=365,
                ),
            )])
        key_a = yandex.KmsSymmetricKey("key-a",
            description="description for key",
            default_algorithm="AES_128",
            rotation_period="8760h")
        # equal to 1 year
        all_settings = yandex.StorageBucket("allSettings",
            bucket="example-tf-settings-bucket",
            website=yandex.StorageBucketWebsiteArgs(
                index_document="index.html",
                error_document="error.html",
            ),
            lifecycle_rules=[
                yandex.StorageBucketLifecycleRuleArgs(
                    id="test",
                    enabled=True,
                    prefix="prefix/",
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=30,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="log",
                    enabled=True,
                    prefix="log/",
                    transitions=[yandex.StorageBucketLifecycleRuleTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=90,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="everything180",
                    prefix="",
                    enabled=True,
                    expiration=yandex.StorageBucketLifecycleRuleExpirationArgs(
                        days=180,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="cleanupoldversions",
                    prefix="config/",
                    enabled=True,
                    noncurrent_version_transitions=[yandex.StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs(
                        days=30,
                        storage_class="COLD",
                    )],
                    noncurrent_version_expiration=yandex.StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs(
                        days=90,
                    ),
                ),
                yandex.StorageBucketLifecycleRuleArgs(
                    id="abortmultiparts",
                    prefix="",
                    enabled=True,
                    abort_incomplete_multipart_upload_days=7,
                ),
            ],
            cors_rules=[yandex.StorageBucketCorsRuleArgs(
                allowed_headers=["*"],
                allowed_methods=[
                    "GET",
                    "PUT",
                ],
                allowed_origins=["https://storage-cloud.example.com"],
                expose_headers=["ETag"],
                max_age_seconds=3000,
            )],
            versioning=yandex.StorageBucketVersioningArgs(
                enabled=True,
            ),
            server_side_encryption_configuration=yandex.StorageBucketServerSideEncryptionConfigurationArgs(
                rule=yandex.StorageBucketServerSideEncryptionConfigurationRuleArgs(
                    apply_server_side_encryption_by_default=yandex.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs(
                        kms_master_key_id=key_a.id,
                        sse_algorithm="aws:kms",
                    ),
                ),
            ),
            loggings=[yandex.StorageBucketLoggingArgs(
                target_bucket=log_bucket.id,
                target_prefix="tf-logs/",
            )],
            max_size=1024,
            folder_id="<folder_id>",
            default_storage_class="COLD",
            anonymous_access_flags=yandex.StorageBucketAnonymousAccessFlagsArgs(
                read=True,
                list=True,
            ),
            https=yandex.StorageBucketHttpsArgs(
                certificate_id="<certificate_id>",
            ),
            tags={
                "some_key": "some_value",
            })
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        Storage bucket can be imported using the `bucket`, e.g.

        ```sh
        $ pulumi import yandex:index/storageBucket:StorageBucket bucket bucket-name
        ```
        ~> __Note:__ Terraform will import this resource with `force_destroy` set to
        `false` in state. If you've set it to `true` in config, run `pulumi up` to
        update the value set in state. If you delete this resource before updating the
        value, objects in the bucket will not be destroyed.

        :param str resource_name: The name of the resource.
        :param StorageBucketArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(StorageBucketArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_key: Optional[pulumi.Input[str]] = None,
                 acl: Optional[pulumi.Input[str]] = None,
                 anonymous_access_flags: Optional[pulumi.Input[pulumi.InputType['StorageBucketAnonymousAccessFlagsArgs']]] = None,
                 bucket: Optional[pulumi.Input[str]] = None,
                 bucket_prefix: Optional[pulumi.Input[str]] = None,
                 cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketCorsRuleArgs']]]]] = None,
                 default_storage_class: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 force_destroy: Optional[pulumi.Input[bool]] = None,
                 grants: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketGrantArgs']]]]] = None,
                 https: Optional[pulumi.Input[pulumi.InputType['StorageBucketHttpsArgs']]] = None,
                 lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLifecycleRuleArgs']]]]] = None,
                 loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLoggingArgs']]]]] = None,
                 max_size: Optional[pulumi.Input[int]] = None,
                 object_lock_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketObjectLockConfigurationArgs']]] = None,
                 policy: Optional[pulumi.Input[str]] = None,
                 secret_key: Optional[pulumi.Input[str]] = None,
                 server_side_encryption_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketServerSideEncryptionConfigurationArgs']]] = None,
                 tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 versioning: Optional[pulumi.Input[pulumi.InputType['StorageBucketVersioningArgs']]] = None,
                 website: Optional[pulumi.Input[pulumi.InputType['StorageBucketWebsiteArgs']]] = None,
                 website_domain: Optional[pulumi.Input[str]] = None,
                 website_endpoint: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = StorageBucketArgs.__new__(StorageBucketArgs)

            __props__.__dict__["access_key"] = access_key
            __props__.__dict__["acl"] = acl
            __props__.__dict__["anonymous_access_flags"] = anonymous_access_flags
            __props__.__dict__["bucket"] = bucket
            __props__.__dict__["bucket_prefix"] = bucket_prefix
            __props__.__dict__["cors_rules"] = cors_rules
            __props__.__dict__["default_storage_class"] = default_storage_class
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["force_destroy"] = force_destroy
            __props__.__dict__["grants"] = grants
            __props__.__dict__["https"] = https
            __props__.__dict__["lifecycle_rules"] = lifecycle_rules
            __props__.__dict__["loggings"] = loggings
            __props__.__dict__["max_size"] = max_size
            __props__.__dict__["object_lock_configuration"] = object_lock_configuration
            __props__.__dict__["policy"] = policy
            __props__.__dict__["secret_key"] = None if secret_key is None else pulumi.Output.secret(secret_key)
            __props__.__dict__["server_side_encryption_configuration"] = server_side_encryption_configuration
            __props__.__dict__["tags"] = tags
            __props__.__dict__["versioning"] = versioning
            __props__.__dict__["website"] = website
            __props__.__dict__["website_domain"] = website_domain
            __props__.__dict__["website_endpoint"] = website_endpoint
            __props__.__dict__["bucket_domain_name"] = None
        secret_opts = pulumi.ResourceOptions(additional_secret_outputs=["secretKey"])
        opts = pulumi.ResourceOptions.merge(opts, secret_opts)
        super(StorageBucket, __self__).__init__(
            'yandex:index/storageBucket:StorageBucket',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            access_key: Optional[pulumi.Input[str]] = None,
            acl: Optional[pulumi.Input[str]] = None,
            anonymous_access_flags: Optional[pulumi.Input[pulumi.InputType['StorageBucketAnonymousAccessFlagsArgs']]] = None,
            bucket: Optional[pulumi.Input[str]] = None,
            bucket_domain_name: Optional[pulumi.Input[str]] = None,
            bucket_prefix: Optional[pulumi.Input[str]] = None,
            cors_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketCorsRuleArgs']]]]] = None,
            default_storage_class: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            force_destroy: Optional[pulumi.Input[bool]] = None,
            grants: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketGrantArgs']]]]] = None,
            https: Optional[pulumi.Input[pulumi.InputType['StorageBucketHttpsArgs']]] = None,
            lifecycle_rules: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLifecycleRuleArgs']]]]] = None,
            loggings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLoggingArgs']]]]] = None,
            max_size: Optional[pulumi.Input[int]] = None,
            object_lock_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketObjectLockConfigurationArgs']]] = None,
            policy: Optional[pulumi.Input[str]] = None,
            secret_key: Optional[pulumi.Input[str]] = None,
            server_side_encryption_configuration: Optional[pulumi.Input[pulumi.InputType['StorageBucketServerSideEncryptionConfigurationArgs']]] = None,
            tags: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            versioning: Optional[pulumi.Input[pulumi.InputType['StorageBucketVersioningArgs']]] = None,
            website: Optional[pulumi.Input[pulumi.InputType['StorageBucketWebsiteArgs']]] = None,
            website_domain: Optional[pulumi.Input[str]] = None,
            website_endpoint: Optional[pulumi.Input[str]] = None) -> 'StorageBucket':
        """
        Get an existing StorageBucket resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_key: The access key to use when applying changes. If omitted, `storage_access_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[str] acl: The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
               Defaults to `private`. Conflicts with `grant`.
               
               > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        :param pulumi.Input[pulumi.InputType['StorageBucketAnonymousAccessFlagsArgs']] anonymous_access_flags: Provides various access to objects.
               See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
               for more infomation.
        :param pulumi.Input[str] bucket_domain_name: The bucket domain name.
        :param pulumi.Input[str] bucket_prefix: Creates a unique bucket name beginning with the specified prefix.
               Conflicts with `bucket`.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketCorsRuleArgs']]]] cors_rules: A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        :param pulumi.Input[str] default_storage_class: Storage class which is used for storing objects by default.
               Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
               See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        :param pulumi.Input[str] folder_id: Allow to create bucket in different folder.
               
               > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        :param pulumi.Input[bool] force_destroy: A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketGrantArgs']]]] grants: An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        :param pulumi.Input[pulumi.InputType['StorageBucketHttpsArgs']] https: Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLifecycleRuleArgs']]]] lifecycle_rules: A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['StorageBucketLoggingArgs']]]] loggings: A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        :param pulumi.Input[int] max_size: The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        :param pulumi.Input[pulumi.InputType['StorageBucketObjectLockConfigurationArgs']] object_lock_configuration: A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        :param pulumi.Input[str] secret_key: The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
               provider config (explicitly or within `shared_credentials_file`) is used.
        :param pulumi.Input[pulumi.InputType['StorageBucketServerSideEncryptionConfigurationArgs']] server_side_encryption_configuration: A configuration of server-side encryption for the bucket (documented below)
        :param pulumi.Input[pulumi.InputType['StorageBucketVersioningArgs']] versioning: A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)
               
               > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        :param pulumi.Input[pulumi.InputType['StorageBucketWebsiteArgs']] website: A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        :param pulumi.Input[str] website_domain: The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        :param pulumi.Input[str] website_endpoint: The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _StorageBucketState.__new__(_StorageBucketState)

        __props__.__dict__["access_key"] = access_key
        __props__.__dict__["acl"] = acl
        __props__.__dict__["anonymous_access_flags"] = anonymous_access_flags
        __props__.__dict__["bucket"] = bucket
        __props__.__dict__["bucket_domain_name"] = bucket_domain_name
        __props__.__dict__["bucket_prefix"] = bucket_prefix
        __props__.__dict__["cors_rules"] = cors_rules
        __props__.__dict__["default_storage_class"] = default_storage_class
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["force_destroy"] = force_destroy
        __props__.__dict__["grants"] = grants
        __props__.__dict__["https"] = https
        __props__.__dict__["lifecycle_rules"] = lifecycle_rules
        __props__.__dict__["loggings"] = loggings
        __props__.__dict__["max_size"] = max_size
        __props__.__dict__["object_lock_configuration"] = object_lock_configuration
        __props__.__dict__["policy"] = policy
        __props__.__dict__["secret_key"] = secret_key
        __props__.__dict__["server_side_encryption_configuration"] = server_side_encryption_configuration
        __props__.__dict__["tags"] = tags
        __props__.__dict__["versioning"] = versioning
        __props__.__dict__["website"] = website
        __props__.__dict__["website_domain"] = website_domain
        __props__.__dict__["website_endpoint"] = website_endpoint
        return StorageBucket(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accessKey")
    def access_key(self) -> pulumi.Output[Optional[str]]:
        """
        The access key to use when applying changes. If omitted, `storage_access_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "access_key")

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output[Optional[str]]:
        """
        The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply.
        Defaults to `private`. Conflicts with `grant`.

        > **Note:** To change ACL after creation, service account with `storage.admin` role should be used, though this role is not necessary to create a bucket with any ACL.
        """
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter(name="anonymousAccessFlags")
    def anonymous_access_flags(self) -> pulumi.Output['outputs.StorageBucketAnonymousAccessFlags']:
        """
        Provides various access to objects.
        See [bucket availability](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/bucket-availability)
        for more infomation.
        """
        return pulumi.get(self, "anonymous_access_flags")

    @property
    @pulumi.getter
    def bucket(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="bucketDomainName")
    def bucket_domain_name(self) -> pulumi.Output[str]:
        """
        The bucket domain name.
        """
        return pulumi.get(self, "bucket_domain_name")

    @property
    @pulumi.getter(name="bucketPrefix")
    def bucket_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        Creates a unique bucket name beginning with the specified prefix.
        Conflicts with `bucket`.
        """
        return pulumi.get(self, "bucket_prefix")

    @property
    @pulumi.getter(name="corsRules")
    def cors_rules(self) -> pulumi.Output[Optional[Sequence['outputs.StorageBucketCorsRule']]]:
        """
        A rule of [Cross-Origin Resource Sharing](https://cloud.yandex.com/docs/storage/concepts/cors) (documented below).
        """
        return pulumi.get(self, "cors_rules")

    @property
    @pulumi.getter(name="defaultStorageClass")
    def default_storage_class(self) -> pulumi.Output[str]:
        """
        Storage class which is used for storing objects by default.
        Available values are: "STANDARD", "COLD", "ICE". Default is `"STANDARD"`.
        See [storage class](https://cloud.yandex.com/en-ru/docs/storage/concepts/storage-class) for more inforamtion.
        """
        return pulumi.get(self, "default_storage_class")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        """
        Allow to create bucket in different folder.

        > **NOTE:** it will try to create bucket using `IAM-token`, not using `access keys`.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="forceDestroy")
    def force_destroy(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean that indicates all objects should be deleted from the bucket so that the bucket can be destroyed without error. These objects are *not* recoverable.
        """
        return pulumi.get(self, "force_destroy")

    @property
    @pulumi.getter
    def grants(self) -> pulumi.Output[Optional[Sequence['outputs.StorageBucketGrant']]]:
        """
        An [ACL policy grant](https://cloud.yandex.com/docs/storage/concepts/acl#permissions-types). Conflicts with `acl`.
        """
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def https(self) -> pulumi.Output[Optional['outputs.StorageBucketHttps']]:
        """
        Manages https certificates for bucket. See [https](https://cloud.yandex.com/en-ru/docs/storage/operations/hosting/certificate) for more infomation.
        """
        return pulumi.get(self, "https")

    @property
    @pulumi.getter(name="lifecycleRules")
    def lifecycle_rules(self) -> pulumi.Output[Optional[Sequence['outputs.StorageBucketLifecycleRule']]]:
        """
        A configuration of [object lifecycle management](https://cloud.yandex.com/docs/storage/concepts/lifecycles) (documented below).
        """
        return pulumi.get(self, "lifecycle_rules")

    @property
    @pulumi.getter
    def loggings(self) -> pulumi.Output[Optional[Sequence['outputs.StorageBucketLogging']]]:
        """
        A settings of [bucket logging](https://cloud.yandex.com/docs/storage/concepts/server-logs) (documented below).
        """
        return pulumi.get(self, "loggings")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> pulumi.Output[Optional[int]]:
        """
        The size of bucket, in bytes. See [size limiting](https://cloud.yandex.com/en-ru/docs/storage/operations/buckets/limit-max-volume) for more information.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="objectLockConfiguration")
    def object_lock_configuration(self) -> pulumi.Output[Optional['outputs.StorageBucketObjectLockConfiguration']]:
        """
        A configuration of [object lock management](https://cloud.yandex.com/en/docs/storage/concepts/object-lock) (documented below).
        """
        return pulumi.get(self, "object_lock_configuration")

    @property
    @pulumi.getter
    def policy(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="secretKey")
    def secret_key(self) -> pulumi.Output[Optional[str]]:
        """
        The secret key to use when applying changes. If omitted, `storage_secret_key` specified in
        provider config (explicitly or within `shared_credentials_file`) is used.
        """
        return pulumi.get(self, "secret_key")

    @property
    @pulumi.getter(name="serverSideEncryptionConfiguration")
    def server_side_encryption_configuration(self) -> pulumi.Output[Optional['outputs.StorageBucketServerSideEncryptionConfiguration']]:
        """
        A configuration of server-side encryption for the bucket (documented below)
        """
        return pulumi.get(self, "server_side_encryption_configuration")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def versioning(self) -> pulumi.Output['outputs.StorageBucketVersioning']:
        """
        A state of [versioning](https://cloud.yandex.com/docs/storage/concepts/versioning) (documented below)

        > **Note:** To manage `versioning` argument, service account with `storage.admin` role should be used.
        """
        return pulumi.get(self, "versioning")

    @property
    @pulumi.getter
    def website(self) -> pulumi.Output[Optional['outputs.StorageBucketWebsite']]:
        """
        A [website object](https://cloud.yandex.com/docs/storage/concepts/hosting) (documented below).
        """
        return pulumi.get(self, "website")

    @property
    @pulumi.getter(name="websiteDomain")
    def website_domain(self) -> pulumi.Output[str]:
        """
        The domain of the website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_domain")

    @property
    @pulumi.getter(name="websiteEndpoint")
    def website_endpoint(self) -> pulumi.Output[str]:
        """
        The website endpoint, if the bucket is configured with a website. If not, this will be an empty string.
        """
        return pulumi.get(self, "website_endpoint")

