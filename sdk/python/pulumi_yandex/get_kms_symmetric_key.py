# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetKmsSymmetricKeyResult',
    'AwaitableGetKmsSymmetricKeyResult',
    'get_kms_symmetric_key',
    'get_kms_symmetric_key_output',
]

@pulumi.output_type
class GetKmsSymmetricKeyResult:
    """
    A collection of values returned by getKmsSymmetricKey.
    """
    def __init__(__self__, created_at=None, default_algorithm=None, deletion_protection=None, description=None, folder_id=None, id=None, labels=None, name=None, rotated_at=None, rotation_period=None, status=None, symmetric_key_id=None):
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if default_algorithm and not isinstance(default_algorithm, str):
            raise TypeError("Expected argument 'default_algorithm' to be a str")
        pulumi.set(__self__, "default_algorithm", default_algorithm)
        if deletion_protection and not isinstance(deletion_protection, bool):
            raise TypeError("Expected argument 'deletion_protection' to be a bool")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if rotated_at and not isinstance(rotated_at, str):
            raise TypeError("Expected argument 'rotated_at' to be a str")
        pulumi.set(__self__, "rotated_at", rotated_at)
        if rotation_period and not isinstance(rotation_period, str):
            raise TypeError("Expected argument 'rotation_period' to be a str")
        pulumi.set(__self__, "rotation_period", rotation_period)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if symmetric_key_id and not isinstance(symmetric_key_id, str):
            raise TypeError("Expected argument 'symmetric_key_id' to be a str")
        pulumi.set(__self__, "symmetric_key_id", symmetric_key_id)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="defaultAlgorithm")
    def default_algorithm(self) -> Optional[str]:
        return pulumi.get(self, "default_algorithm")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[bool]:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="rotatedAt")
    def rotated_at(self) -> str:
        return pulumi.get(self, "rotated_at")

    @property
    @pulumi.getter(name="rotationPeriod")
    def rotation_period(self) -> Optional[str]:
        return pulumi.get(self, "rotation_period")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="symmetricKeyId")
    def symmetric_key_id(self) -> Optional[str]:
        return pulumi.get(self, "symmetric_key_id")


class AwaitableGetKmsSymmetricKeyResult(GetKmsSymmetricKeyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKmsSymmetricKeyResult(
            created_at=self.created_at,
            default_algorithm=self.default_algorithm,
            deletion_protection=self.deletion_protection,
            description=self.description,
            folder_id=self.folder_id,
            id=self.id,
            labels=self.labels,
            name=self.name,
            rotated_at=self.rotated_at,
            rotation_period=self.rotation_period,
            status=self.status,
            symmetric_key_id=self.symmetric_key_id)


def get_kms_symmetric_key(default_algorithm: Optional[str] = None,
                          deletion_protection: Optional[bool] = None,
                          description: Optional[str] = None,
                          folder_id: Optional[str] = None,
                          labels: Optional[Mapping[str, str]] = None,
                          name: Optional[str] = None,
                          rotation_period: Optional[str] = None,
                          symmetric_key_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKmsSymmetricKeyResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['defaultAlgorithm'] = default_algorithm
    __args__['deletionProtection'] = deletion_protection
    __args__['description'] = description
    __args__['folderId'] = folder_id
    __args__['labels'] = labels
    __args__['name'] = name
    __args__['rotationPeriod'] = rotation_period
    __args__['symmetricKeyId'] = symmetric_key_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getKmsSymmetricKey:getKmsSymmetricKey', __args__, opts=opts, typ=GetKmsSymmetricKeyResult).value

    return AwaitableGetKmsSymmetricKeyResult(
        created_at=pulumi.get(__ret__, 'created_at'),
        default_algorithm=pulumi.get(__ret__, 'default_algorithm'),
        deletion_protection=pulumi.get(__ret__, 'deletion_protection'),
        description=pulumi.get(__ret__, 'description'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        name=pulumi.get(__ret__, 'name'),
        rotated_at=pulumi.get(__ret__, 'rotated_at'),
        rotation_period=pulumi.get(__ret__, 'rotation_period'),
        status=pulumi.get(__ret__, 'status'),
        symmetric_key_id=pulumi.get(__ret__, 'symmetric_key_id'))


@_utilities.lift_output_func(get_kms_symmetric_key)
def get_kms_symmetric_key_output(default_algorithm: Optional[pulumi.Input[Optional[str]]] = None,
                                 deletion_protection: Optional[pulumi.Input[Optional[bool]]] = None,
                                 description: Optional[pulumi.Input[Optional[str]]] = None,
                                 folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 labels: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                 name: Optional[pulumi.Input[Optional[str]]] = None,
                                 rotation_period: Optional[pulumi.Input[Optional[str]]] = None,
                                 symmetric_key_id: Optional[pulumi.Input[Optional[str]]] = None,
                                 opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKmsSymmetricKeyResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
