# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetAuditTrailsTrailResult',
    'AwaitableGetAuditTrailsTrailResult',
    'get_audit_trails_trail',
    'get_audit_trails_trail_output',
]

@pulumi.output_type
class GetAuditTrailsTrailResult:
    """
    A collection of values returned by getAuditTrailsTrail.
    """
    def __init__(__self__, data_stream_destinations=None, description=None, filters=None, folder_id=None, id=None, labels=None, logging_destinations=None, name=None, service_account_id=None, status=None, storage_destinations=None, trail_id=None):
        if data_stream_destinations and not isinstance(data_stream_destinations, list):
            raise TypeError("Expected argument 'data_stream_destinations' to be a list")
        pulumi.set(__self__, "data_stream_destinations", data_stream_destinations)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if logging_destinations and not isinstance(logging_destinations, list):
            raise TypeError("Expected argument 'logging_destinations' to be a list")
        pulumi.set(__self__, "logging_destinations", logging_destinations)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if storage_destinations and not isinstance(storage_destinations, list):
            raise TypeError("Expected argument 'storage_destinations' to be a list")
        pulumi.set(__self__, "storage_destinations", storage_destinations)
        if trail_id and not isinstance(trail_id, str):
            raise TypeError("Expected argument 'trail_id' to be a str")
        pulumi.set(__self__, "trail_id", trail_id)

    @property
    @pulumi.getter(name="dataStreamDestinations")
    def data_stream_destinations(self) -> Sequence['outputs.GetAuditTrailsTrailDataStreamDestinationResult']:
        return pulumi.get(self, "data_stream_destinations")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterResult']:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="loggingDestinations")
    def logging_destinations(self) -> Sequence['outputs.GetAuditTrailsTrailLoggingDestinationResult']:
        return pulumi.get(self, "logging_destinations")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageDestinations")
    def storage_destinations(self) -> Sequence['outputs.GetAuditTrailsTrailStorageDestinationResult']:
        return pulumi.get(self, "storage_destinations")

    @property
    @pulumi.getter(name="trailId")
    def trail_id(self) -> str:
        return pulumi.get(self, "trail_id")


class AwaitableGetAuditTrailsTrailResult(GetAuditTrailsTrailResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAuditTrailsTrailResult(
            data_stream_destinations=self.data_stream_destinations,
            description=self.description,
            filters=self.filters,
            folder_id=self.folder_id,
            id=self.id,
            labels=self.labels,
            logging_destinations=self.logging_destinations,
            name=self.name,
            service_account_id=self.service_account_id,
            status=self.status,
            storage_destinations=self.storage_destinations,
            trail_id=self.trail_id)


def get_audit_trails_trail(trail_id: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetAuditTrailsTrailResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['trailId'] = trail_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getAuditTrailsTrail:getAuditTrailsTrail', __args__, opts=opts, typ=GetAuditTrailsTrailResult).value

    return AwaitableGetAuditTrailsTrailResult(
        data_stream_destinations=pulumi.get(__ret__, 'data_stream_destinations'),
        description=pulumi.get(__ret__, 'description'),
        filters=pulumi.get(__ret__, 'filters'),
        folder_id=pulumi.get(__ret__, 'folder_id'),
        id=pulumi.get(__ret__, 'id'),
        labels=pulumi.get(__ret__, 'labels'),
        logging_destinations=pulumi.get(__ret__, 'logging_destinations'),
        name=pulumi.get(__ret__, 'name'),
        service_account_id=pulumi.get(__ret__, 'service_account_id'),
        status=pulumi.get(__ret__, 'status'),
        storage_destinations=pulumi.get(__ret__, 'storage_destinations'),
        trail_id=pulumi.get(__ret__, 'trail_id'))


@_utilities.lift_output_func(get_audit_trails_trail)
def get_audit_trails_trail_output(trail_id: Optional[pulumi.Input[str]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetAuditTrailsTrailResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
