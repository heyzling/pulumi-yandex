# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetContainerRegistryIpPermissionResult',
    'AwaitableGetContainerRegistryIpPermissionResult',
    'get_container_registry_ip_permission',
    'get_container_registry_ip_permission_output',
]

@pulumi.output_type
class GetContainerRegistryIpPermissionResult:
    """
    A collection of values returned by getContainerRegistryIpPermission.
    """
    def __init__(__self__, id=None, pulls=None, pushes=None, registry_id=None, registry_name=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pulls and not isinstance(pulls, list):
            raise TypeError("Expected argument 'pulls' to be a list")
        pulumi.set(__self__, "pulls", pulls)
        if pushes and not isinstance(pushes, list):
            raise TypeError("Expected argument 'pushes' to be a list")
        pulumi.set(__self__, "pushes", pushes)
        if registry_id and not isinstance(registry_id, str):
            raise TypeError("Expected argument 'registry_id' to be a str")
        pulumi.set(__self__, "registry_id", registry_id)
        if registry_name and not isinstance(registry_name, str):
            raise TypeError("Expected argument 'registry_name' to be a str")
        pulumi.set(__self__, "registry_name", registry_name)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def pulls(self) -> Sequence[str]:
        return pulumi.get(self, "pulls")

    @property
    @pulumi.getter
    def pushes(self) -> Sequence[str]:
        return pulumi.get(self, "pushes")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="registryName")
    def registry_name(self) -> str:
        return pulumi.get(self, "registry_name")


class AwaitableGetContainerRegistryIpPermissionResult(GetContainerRegistryIpPermissionResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetContainerRegistryIpPermissionResult(
            id=self.id,
            pulls=self.pulls,
            pushes=self.pushes,
            registry_id=self.registry_id,
            registry_name=self.registry_name)


def get_container_registry_ip_permission(registry_id: Optional[str] = None,
                                         registry_name: Optional[str] = None,
                                         opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetContainerRegistryIpPermissionResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['registryId'] = registry_id
    __args__['registryName'] = registry_name
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getContainerRegistryIpPermission:getContainerRegistryIpPermission', __args__, opts=opts, typ=GetContainerRegistryIpPermissionResult).value

    return AwaitableGetContainerRegistryIpPermissionResult(
        id=pulumi.get(__ret__, 'id'),
        pulls=pulumi.get(__ret__, 'pulls'),
        pushes=pulumi.get(__ret__, 'pushes'),
        registry_id=pulumi.get(__ret__, 'registry_id'),
        registry_name=pulumi.get(__ret__, 'registry_name'))


@_utilities.lift_output_func(get_container_registry_ip_permission)
def get_container_registry_ip_permission_output(registry_id: Optional[pulumi.Input[Optional[str]]] = None,
                                                registry_name: Optional[pulumi.Input[Optional[str]]] = None,
                                                opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetContainerRegistryIpPermissionResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
