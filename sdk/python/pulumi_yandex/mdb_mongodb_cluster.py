# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['MdbMongodbClusterArgs', 'MdbMongodbCluster']

@pulumi.input_type
class MdbMongodbClusterArgs:
    def __init__(__self__, *,
                 cluster_config: pulumi.Input['MdbMongodbClusterClusterConfigArgs'],
                 environment: pulumi.Input[str],
                 hosts: pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]],
                 network_id: pulumi.Input[str],
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size_autoscaling_mongocfg: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']] = None,
                 disk_size_autoscaling_mongod: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']] = None,
                 disk_size_autoscaling_mongoinfra: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']] = None,
                 disk_size_autoscaling_mongos: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 maintenance_window: Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']] = None,
                 resources_mongocfg: Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']] = None,
                 resources_mongod: Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']] = None,
                 resources_mongoinfra: Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']] = None,
                 resources_mongos: Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']] = None,
                 restore: Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]] = None):
        """
        The set of arguments for constructing a MdbMongodbCluster resource.
        :param pulumi.Input['MdbMongodbClusterClusterConfigArgs'] cluster_config: Configuration of the MongoDB subcluster. The structure is documented below.
        :param pulumi.Input[str] environment: Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]] hosts: A host of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[str] network_id: ID of the network, to which the MongoDB cluster belongs.
        :param pulumi.Input[str] cluster_id: The ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]] databases: A database of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[bool] deletion_protection: Inhibits deletion of the cluster.  Can be either `true` or `false`.
               - - -
        :param pulumi.Input[str] description: Description of the MongoDB cluster.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it
               is not provided, the default provider folder is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the MongoDB cluster.
        :param pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs'] maintenance_window: Maintenance window settings of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[str] name: Name of the MongoDB cluster. Provided by the client when the cluster is created.
        :param pulumi.Input['MdbMongodbClusterResourcesArgs'] resources: Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
               
               - - -
        :param pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs'] resources_mongocfg: Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongodArgs'] resources_mongod: Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs'] resources_mongoinfra: Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongosArgs'] resources_mongos: Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterRestoreArgs'] restore: The cluster will be created from the specified backup. The structure is documented below.
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]] users: A user of the MongoDB cluster. The structure is documented below.
        """
        pulumi.set(__self__, "cluster_config", cluster_config)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "network_id", network_id)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if databases is not None:
            warnings.warn("""to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""", DeprecationWarning)
            pulumi.log.warn("""databases is deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""")
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size_autoscaling_mongocfg is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongocfg", disk_size_autoscaling_mongocfg)
        if disk_size_autoscaling_mongod is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongod", disk_size_autoscaling_mongod)
        if disk_size_autoscaling_mongoinfra is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongoinfra", disk_size_autoscaling_mongoinfra)
        if disk_size_autoscaling_mongos is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongos", disk_size_autoscaling_mongos)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if resources is not None:
            warnings.warn("""to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""", DeprecationWarning)
            pulumi.log.warn("""resources is deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""")
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if resources_mongocfg is not None:
            pulumi.set(__self__, "resources_mongocfg", resources_mongocfg)
        if resources_mongod is not None:
            pulumi.set(__self__, "resources_mongod", resources_mongod)
        if resources_mongoinfra is not None:
            pulumi.set(__self__, "resources_mongoinfra", resources_mongoinfra)
        if resources_mongos is not None:
            pulumi.set(__self__, "resources_mongos", resources_mongos)
        if restore is not None:
            pulumi.set(__self__, "restore", restore)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if users is not None:
            warnings.warn("""to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""", DeprecationWarning)
            pulumi.log.warn("""users is deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""")
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Input['MdbMongodbClusterClusterConfigArgs']:
        """
        Configuration of the MongoDB subcluster. The structure is documented below.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: pulumi.Input['MdbMongodbClusterClusterConfigArgs']):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Input[str]:
        """
        Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: pulumi.Input[str]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]]:
        """
        A host of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Input[str]:
        """
        ID of the network, to which the MongoDB cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]]:
        """
        A database of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""", DeprecationWarning)
        pulumi.log.warn("""databases is deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""")

        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Inhibits deletion of the cluster.  Can be either `true` or `false`.
        - - -
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the MongoDB cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongocfg")
    def disk_size_autoscaling_mongocfg(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongocfg")

    @disk_size_autoscaling_mongocfg.setter
    def disk_size_autoscaling_mongocfg(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongocfg", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongod")
    def disk_size_autoscaling_mongod(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongod")

    @disk_size_autoscaling_mongod.setter
    def disk_size_autoscaling_mongod(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongod", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongoinfra")
    def disk_size_autoscaling_mongoinfra(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongoinfra")

    @disk_size_autoscaling_mongoinfra.setter
    def disk_size_autoscaling_mongoinfra(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongoinfra", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongos")
    def disk_size_autoscaling_mongos(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongos")

    @disk_size_autoscaling_mongos.setter
    def disk_size_autoscaling_mongos(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongos", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the resource belongs to. If it
        is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the MongoDB cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']]:
        """
        Maintenance window settings of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the MongoDB cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']]:
        """
        Resources allocated to hosts of the MongoDB cluster. The structure is documented below.

        - - -
        """
        warnings.warn("""to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""", DeprecationWarning)
        pulumi.log.warn("""resources is deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""")

        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="resourcesMongocfg")
    def resources_mongocfg(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']]:
        """
        Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongocfg")

    @resources_mongocfg.setter
    def resources_mongocfg(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']]):
        pulumi.set(self, "resources_mongocfg", value)

    @property
    @pulumi.getter(name="resourcesMongod")
    def resources_mongod(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']]:
        """
        Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongod")

    @resources_mongod.setter
    def resources_mongod(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']]):
        pulumi.set(self, "resources_mongod", value)

    @property
    @pulumi.getter(name="resourcesMongoinfra")
    def resources_mongoinfra(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']]:
        """
        Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongoinfra")

    @resources_mongoinfra.setter
    def resources_mongoinfra(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']]):
        pulumi.set(self, "resources_mongoinfra", value)

    @property
    @pulumi.getter(name="resourcesMongos")
    def resources_mongos(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']]:
        """
        Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongos")

    @resources_mongos.setter
    def resources_mongos(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']]):
        pulumi.set(self, "resources_mongos", value)

    @property
    @pulumi.getter
    def restore(self) -> Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.

        - - -
        """
        return pulumi.get(self, "restore")

    @restore.setter
    def restore(self, value: Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']]):
        pulumi.set(self, "restore", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]]:
        """
        A user of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""", DeprecationWarning)
        pulumi.log.warn("""users is deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""")

        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]]):
        pulumi.set(self, "users", value)


@pulumi.input_type
class _MdbMongodbClusterState:
    def __init__(__self__, *,
                 cluster_config: Optional[pulumi.Input['MdbMongodbClusterClusterConfigArgs']] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 created_at: Optional[pulumi.Input[str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size_autoscaling_mongocfg: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']] = None,
                 disk_size_autoscaling_mongod: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']] = None,
                 disk_size_autoscaling_mongoinfra: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']] = None,
                 disk_size_autoscaling_mongos: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 health: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 maintenance_window: Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']] = None,
                 resources_mongocfg: Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']] = None,
                 resources_mongod: Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']] = None,
                 resources_mongoinfra: Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']] = None,
                 resources_mongos: Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']] = None,
                 restore: Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 sharded: Optional[pulumi.Input[bool]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]] = None):
        """
        Input properties used for looking up and filtering MdbMongodbCluster resources.
        :param pulumi.Input['MdbMongodbClusterClusterConfigArgs'] cluster_config: Configuration of the MongoDB subcluster. The structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the cluster.
        :param pulumi.Input[str] created_at: Creation timestamp of the key.
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]] databases: A database of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[bool] deletion_protection: Inhibits deletion of the cluster.  Can be either `true` or `false`.
               - - -
        :param pulumi.Input[str] description: Description of the MongoDB cluster.
        :param pulumi.Input[str] environment: Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it
               is not provided, the default provider folder is used.
        :param pulumi.Input[str] health: The health of the host.
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]] hosts: A host of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the MongoDB cluster.
        :param pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs'] maintenance_window: Maintenance window settings of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[str] name: Name of the MongoDB cluster. Provided by the client when the cluster is created.
        :param pulumi.Input[str] network_id: ID of the network, to which the MongoDB cluster belongs.
        :param pulumi.Input['MdbMongodbClusterResourcesArgs'] resources: Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
               
               - - -
        :param pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs'] resources_mongocfg: Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongodArgs'] resources_mongod: Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs'] resources_mongoinfra: Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterResourcesMongosArgs'] resources_mongos: Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input['MdbMongodbClusterRestoreArgs'] restore: The cluster will be created from the specified backup. The structure is documented below.
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[bool] sharded: MongoDB Cluster mode enabled/disabled.
        :param pulumi.Input[str] status: Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
               For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
        :param pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]] users: A user of the MongoDB cluster. The structure is documented below.
        """
        if cluster_config is not None:
            pulumi.set(__self__, "cluster_config", cluster_config)
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if databases is not None:
            warnings.warn("""to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""", DeprecationWarning)
            pulumi.log.warn("""databases is deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""")
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if deletion_protection is not None:
            pulumi.set(__self__, "deletion_protection", deletion_protection)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disk_size_autoscaling_mongocfg is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongocfg", disk_size_autoscaling_mongocfg)
        if disk_size_autoscaling_mongod is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongod", disk_size_autoscaling_mongod)
        if disk_size_autoscaling_mongoinfra is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongoinfra", disk_size_autoscaling_mongoinfra)
        if disk_size_autoscaling_mongos is not None:
            pulumi.set(__self__, "disk_size_autoscaling_mongos", disk_size_autoscaling_mongos)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if maintenance_window is not None:
            pulumi.set(__self__, "maintenance_window", maintenance_window)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if resources is not None:
            warnings.warn("""to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""", DeprecationWarning)
            pulumi.log.warn("""resources is deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""")
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if resources_mongocfg is not None:
            pulumi.set(__self__, "resources_mongocfg", resources_mongocfg)
        if resources_mongod is not None:
            pulumi.set(__self__, "resources_mongod", resources_mongod)
        if resources_mongoinfra is not None:
            pulumi.set(__self__, "resources_mongoinfra", resources_mongoinfra)
        if resources_mongos is not None:
            pulumi.set(__self__, "resources_mongos", resources_mongos)
        if restore is not None:
            pulumi.set(__self__, "restore", restore)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if sharded is not None:
            pulumi.set(__self__, "sharded", sharded)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if users is not None:
            warnings.warn("""to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""", DeprecationWarning)
            pulumi.log.warn("""users is deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""")
        if users is not None:
            pulumi.set(__self__, "users", users)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> Optional[pulumi.Input['MdbMongodbClusterClusterConfigArgs']]:
        """
        Configuration of the MongoDB subcluster. The structure is documented below.
        """
        return pulumi.get(self, "cluster_config")

    @cluster_config.setter
    def cluster_config(self, value: Optional[pulumi.Input['MdbMongodbClusterClusterConfigArgs']]):
        pulumi.set(self, "cluster_config", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation timestamp of the key.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def databases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]]:
        """
        A database of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""", DeprecationWarning)
        pulumi.log.warn("""databases is deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""")

        return pulumi.get(self, "databases")

    @databases.setter
    def databases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterDatabaseArgs']]]]):
        pulumi.set(self, "databases", value)

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[pulumi.Input[bool]]:
        """
        Inhibits deletion of the cluster.  Can be either `true` or `false`.
        - - -
        """
        return pulumi.get(self, "deletion_protection")

    @deletion_protection.setter
    def deletion_protection(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "deletion_protection", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the MongoDB cluster.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongocfg")
    def disk_size_autoscaling_mongocfg(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongocfg")

    @disk_size_autoscaling_mongocfg.setter
    def disk_size_autoscaling_mongocfg(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongocfg", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongod")
    def disk_size_autoscaling_mongod(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongod")

    @disk_size_autoscaling_mongod.setter
    def disk_size_autoscaling_mongod(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongod", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongoinfra")
    def disk_size_autoscaling_mongoinfra(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongoinfra")

    @disk_size_autoscaling_mongoinfra.setter
    def disk_size_autoscaling_mongoinfra(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongoinfra", value)

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongos")
    def disk_size_autoscaling_mongos(self) -> Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]:
        return pulumi.get(self, "disk_size_autoscaling_mongos")

    @disk_size_autoscaling_mongos.setter
    def disk_size_autoscaling_mongos(self, value: Optional[pulumi.Input['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]):
        pulumi.set(self, "disk_size_autoscaling_mongos", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        """
        Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        """
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the resource belongs to. If it
        is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def health(self) -> Optional[pulumi.Input[str]]:
        """
        The health of the host.
        """
        return pulumi.get(self, "health")

    @health.setter
    def health(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "health", value)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]]]:
        """
        A host of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @hosts.setter
    def hosts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterHostArgs']]]]):
        pulumi.set(self, "hosts", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the MongoDB cluster.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']]:
        """
        Maintenance window settings of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "maintenance_window")

    @maintenance_window.setter
    def maintenance_window(self, value: Optional[pulumi.Input['MdbMongodbClusterMaintenanceWindowArgs']]):
        pulumi.set(self, "maintenance_window", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the MongoDB cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the network, to which the MongoDB cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @network_id.setter
    def network_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network_id", value)

    @property
    @pulumi.getter
    def resources(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']]:
        """
        Resources allocated to hosts of the MongoDB cluster. The structure is documented below.

        - - -
        """
        warnings.warn("""to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""", DeprecationWarning)
        pulumi.log.warn("""resources is deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""")

        return pulumi.get(self, "resources")

    @resources.setter
    def resources(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesArgs']]):
        pulumi.set(self, "resources", value)

    @property
    @pulumi.getter(name="resourcesMongocfg")
    def resources_mongocfg(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']]:
        """
        Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongocfg")

    @resources_mongocfg.setter
    def resources_mongocfg(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongocfgArgs']]):
        pulumi.set(self, "resources_mongocfg", value)

    @property
    @pulumi.getter(name="resourcesMongod")
    def resources_mongod(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']]:
        """
        Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongod")

    @resources_mongod.setter
    def resources_mongod(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongodArgs']]):
        pulumi.set(self, "resources_mongod", value)

    @property
    @pulumi.getter(name="resourcesMongoinfra")
    def resources_mongoinfra(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']]:
        """
        Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongoinfra")

    @resources_mongoinfra.setter
    def resources_mongoinfra(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongoinfraArgs']]):
        pulumi.set(self, "resources_mongoinfra", value)

    @property
    @pulumi.getter(name="resourcesMongos")
    def resources_mongos(self) -> Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']]:
        """
        Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongos")

    @resources_mongos.setter
    def resources_mongos(self, value: Optional[pulumi.Input['MdbMongodbClusterResourcesMongosArgs']]):
        pulumi.set(self, "resources_mongos", value)

    @property
    @pulumi.getter
    def restore(self) -> Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.

        - - -
        """
        return pulumi.get(self, "restore")

    @restore.setter
    def restore(self, value: Optional[pulumi.Input['MdbMongodbClusterRestoreArgs']]):
        pulumi.set(self, "restore", value)

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @security_group_ids.setter
    def security_group_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "security_group_ids", value)

    @property
    @pulumi.getter
    def sharded(self) -> Optional[pulumi.Input[bool]]:
        """
        MongoDB Cluster mode enabled/disabled.
        """
        return pulumi.get(self, "sharded")

    @sharded.setter
    def sharded(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "sharded", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
        For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def users(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]]:
        """
        A user of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""", DeprecationWarning)
        pulumi.log.warn("""users is deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""")

        return pulumi.get(self, "users")

    @users.setter
    def users(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['MdbMongodbClusterUserArgs']]]]):
        pulumi.set(self, "users", value)


class MdbMongodbCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_config: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterClusterConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterDatabaseArgs']]]]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size_autoscaling_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]] = None,
                 disk_size_autoscaling_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]] = None,
                 disk_size_autoscaling_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]] = None,
                 disk_size_autoscaling_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterHostArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 maintenance_window: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterMaintenanceWindowArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesArgs']]] = None,
                 resources_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongocfgArgs']]] = None,
                 resources_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongodArgs']]] = None,
                 resources_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongoinfraArgs']]] = None,
                 resources_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongosArgs']]] = None,
                 restore: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterRestoreArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterUserArgs']]]]] = None,
                 __props__=None):
        """
        Manages a MongoDB cluster within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).

        ## Example Usage

        Example of creating a Single Node MongoDB.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"],
            zone="ru-central1-a")
        foo_mdb_mongodb_cluster = yandex.MdbMongodbCluster("fooMdbMongodbCluster",
            cluster_config=yandex.MdbMongodbClusterClusterConfigArgs(
                version="4.2",
            ),
            databases=[yandex.MdbMongodbClusterDatabaseArgs(
                name="testdb",
            )],
            environment="PRESTABLE",
            hosts=[yandex.MdbMongodbClusterHostArgs(
                subnet_id=foo_vpc_subnet.id,
                zone_id="ru-central1-a",
            )],
            labels={
                "test_key": "test_value",
            },
            maintenance_window=yandex.MdbMongodbClusterMaintenanceWindowArgs(
                type="ANYTIME",
            ),
            network_id=foo_vpc_network.id,
            resources_mongocfg=yandex.MdbMongodbClusterResourcesMongocfgArgs(
                disk_size=14,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            resources_mongod=yandex.MdbMongodbClusterResourcesMongodArgs(
                disk_size=16,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            resources_mongos=yandex.MdbMongodbClusterResourcesMongosArgs(
                disk_size=14,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            users=[yandex.MdbMongodbClusterUserArgs(
                name="john",
                password="password",
                permissions=[yandex.MdbMongodbClusterUserPermissionArgs(
                    database_name="testdb",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A cluster can be imported using the `id` of the resource, e.g.

        ```sh
        $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster foo cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterClusterConfigArgs']] cluster_config: Configuration of the MongoDB subcluster. The structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterDatabaseArgs']]]] databases: A database of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[bool] deletion_protection: Inhibits deletion of the cluster.  Can be either `true` or `false`.
               - - -
        :param pulumi.Input[str] description: Description of the MongoDB cluster.
        :param pulumi.Input[str] environment: Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it
               is not provided, the default provider folder is used.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterHostArgs']]]] hosts: A host of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the MongoDB cluster.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterMaintenanceWindowArgs']] maintenance_window: Maintenance window settings of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[str] name: Name of the MongoDB cluster. Provided by the client when the cluster is created.
        :param pulumi.Input[str] network_id: ID of the network, to which the MongoDB cluster belongs.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesArgs']] resources: Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
               
               - - -
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongocfgArgs']] resources_mongocfg: Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongodArgs']] resources_mongod: Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongoinfraArgs']] resources_mongoinfra: Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongosArgs']] resources_mongos: Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterRestoreArgs']] restore: The cluster will be created from the specified backup. The structure is documented below.
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterUserArgs']]]] users: A user of the MongoDB cluster. The structure is documented below.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MdbMongodbClusterArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a MongoDB cluster within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).

        ## Example Usage

        Example of creating a Single Node MongoDB.

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.1.0.0/24"],
            zone="ru-central1-a")
        foo_mdb_mongodb_cluster = yandex.MdbMongodbCluster("fooMdbMongodbCluster",
            cluster_config=yandex.MdbMongodbClusterClusterConfigArgs(
                version="4.2",
            ),
            databases=[yandex.MdbMongodbClusterDatabaseArgs(
                name="testdb",
            )],
            environment="PRESTABLE",
            hosts=[yandex.MdbMongodbClusterHostArgs(
                subnet_id=foo_vpc_subnet.id,
                zone_id="ru-central1-a",
            )],
            labels={
                "test_key": "test_value",
            },
            maintenance_window=yandex.MdbMongodbClusterMaintenanceWindowArgs(
                type="ANYTIME",
            ),
            network_id=foo_vpc_network.id,
            resources_mongocfg=yandex.MdbMongodbClusterResourcesMongocfgArgs(
                disk_size=14,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            resources_mongod=yandex.MdbMongodbClusterResourcesMongodArgs(
                disk_size=16,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            resources_mongos=yandex.MdbMongodbClusterResourcesMongosArgs(
                disk_size=14,
                disk_type_id="network-hdd",
                resource_preset_id="s2.small",
            ),
            users=[yandex.MdbMongodbClusterUserArgs(
                name="john",
                password="password",
                permissions=[yandex.MdbMongodbClusterUserPermissionArgs(
                    database_name="testdb",
                )],
            )])
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A cluster can be imported using the `id` of the resource, e.g.

        ```sh
        $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster foo cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param MdbMongodbClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MdbMongodbClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_config: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterClusterConfigArgs']]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterDatabaseArgs']]]]] = None,
                 deletion_protection: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disk_size_autoscaling_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]] = None,
                 disk_size_autoscaling_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]] = None,
                 disk_size_autoscaling_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]] = None,
                 disk_size_autoscaling_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterHostArgs']]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 maintenance_window: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterMaintenanceWindowArgs']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 network_id: Optional[pulumi.Input[str]] = None,
                 resources: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesArgs']]] = None,
                 resources_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongocfgArgs']]] = None,
                 resources_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongodArgs']]] = None,
                 resources_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongoinfraArgs']]] = None,
                 resources_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongosArgs']]] = None,
                 restore: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterRestoreArgs']]] = None,
                 security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterUserArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MdbMongodbClusterArgs.__new__(MdbMongodbClusterArgs)

            if cluster_config is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_config'")
            __props__.__dict__["cluster_config"] = cluster_config
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["databases"] = databases
            __props__.__dict__["deletion_protection"] = deletion_protection
            __props__.__dict__["description"] = description
            __props__.__dict__["disk_size_autoscaling_mongocfg"] = disk_size_autoscaling_mongocfg
            __props__.__dict__["disk_size_autoscaling_mongod"] = disk_size_autoscaling_mongod
            __props__.__dict__["disk_size_autoscaling_mongoinfra"] = disk_size_autoscaling_mongoinfra
            __props__.__dict__["disk_size_autoscaling_mongos"] = disk_size_autoscaling_mongos
            if environment is None and not opts.urn:
                raise TypeError("Missing required property 'environment'")
            __props__.__dict__["environment"] = environment
            __props__.__dict__["folder_id"] = folder_id
            if hosts is None and not opts.urn:
                raise TypeError("Missing required property 'hosts'")
            __props__.__dict__["hosts"] = hosts
            __props__.__dict__["labels"] = labels
            __props__.__dict__["maintenance_window"] = maintenance_window
            __props__.__dict__["name"] = name
            if network_id is None and not opts.urn:
                raise TypeError("Missing required property 'network_id'")
            __props__.__dict__["network_id"] = network_id
            __props__.__dict__["resources"] = resources
            __props__.__dict__["resources_mongocfg"] = resources_mongocfg
            __props__.__dict__["resources_mongod"] = resources_mongod
            __props__.__dict__["resources_mongoinfra"] = resources_mongoinfra
            __props__.__dict__["resources_mongos"] = resources_mongos
            __props__.__dict__["restore"] = restore
            __props__.__dict__["security_group_ids"] = security_group_ids
            __props__.__dict__["users"] = users
            __props__.__dict__["created_at"] = None
            __props__.__dict__["health"] = None
            __props__.__dict__["sharded"] = None
            __props__.__dict__["status"] = None
        super(MdbMongodbCluster, __self__).__init__(
            'yandex:index/mdbMongodbCluster:MdbMongodbCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_config: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterClusterConfigArgs']]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            databases: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterDatabaseArgs']]]]] = None,
            deletion_protection: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disk_size_autoscaling_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongocfgArgs']]] = None,
            disk_size_autoscaling_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongodArgs']]] = None,
            disk_size_autoscaling_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs']]] = None,
            disk_size_autoscaling_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterDiskSizeAutoscalingMongosArgs']]] = None,
            environment: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            health: Optional[pulumi.Input[str]] = None,
            hosts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterHostArgs']]]]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            maintenance_window: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterMaintenanceWindowArgs']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            network_id: Optional[pulumi.Input[str]] = None,
            resources: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesArgs']]] = None,
            resources_mongocfg: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongocfgArgs']]] = None,
            resources_mongod: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongodArgs']]] = None,
            resources_mongoinfra: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongoinfraArgs']]] = None,
            resources_mongos: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongosArgs']]] = None,
            restore: Optional[pulumi.Input[pulumi.InputType['MdbMongodbClusterRestoreArgs']]] = None,
            security_group_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            sharded: Optional[pulumi.Input[bool]] = None,
            status: Optional[pulumi.Input[str]] = None,
            users: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterUserArgs']]]]] = None) -> 'MdbMongodbCluster':
        """
        Get an existing MdbMongodbCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterClusterConfigArgs']] cluster_config: Configuration of the MongoDB subcluster. The structure is documented below.
        :param pulumi.Input[str] cluster_id: The ID of the cluster.
        :param pulumi.Input[str] created_at: Creation timestamp of the key.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterDatabaseArgs']]]] databases: A database of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[bool] deletion_protection: Inhibits deletion of the cluster.  Can be either `true` or `false`.
               - - -
        :param pulumi.Input[str] description: Description of the MongoDB cluster.
        :param pulumi.Input[str] environment: Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        :param pulumi.Input[str] folder_id: The ID of the folder that the resource belongs to. If it
               is not provided, the default provider folder is used.
        :param pulumi.Input[str] health: The health of the host.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterHostArgs']]]] hosts: A host of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the MongoDB cluster.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterMaintenanceWindowArgs']] maintenance_window: Maintenance window settings of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[str] name: Name of the MongoDB cluster. Provided by the client when the cluster is created.
        :param pulumi.Input[str] network_id: ID of the network, to which the MongoDB cluster belongs.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesArgs']] resources: Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
               
               - - -
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongocfgArgs']] resources_mongocfg: Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongodArgs']] resources_mongod: Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongoinfraArgs']] resources_mongoinfra: Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterResourcesMongosArgs']] resources_mongos: Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        :param pulumi.Input[pulumi.InputType['MdbMongodbClusterRestoreArgs']] restore: The cluster will be created from the specified backup. The structure is documented below.
               
               - - -
        :param pulumi.Input[Sequence[pulumi.Input[str]]] security_group_ids: A set of ids of security groups assigned to hosts of the cluster.
        :param pulumi.Input[bool] sharded: MongoDB Cluster mode enabled/disabled.
        :param pulumi.Input[str] status: Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
               For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['MdbMongodbClusterUserArgs']]]] users: A user of the MongoDB cluster. The structure is documented below.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MdbMongodbClusterState.__new__(_MdbMongodbClusterState)

        __props__.__dict__["cluster_config"] = cluster_config
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["databases"] = databases
        __props__.__dict__["deletion_protection"] = deletion_protection
        __props__.__dict__["description"] = description
        __props__.__dict__["disk_size_autoscaling_mongocfg"] = disk_size_autoscaling_mongocfg
        __props__.__dict__["disk_size_autoscaling_mongod"] = disk_size_autoscaling_mongod
        __props__.__dict__["disk_size_autoscaling_mongoinfra"] = disk_size_autoscaling_mongoinfra
        __props__.__dict__["disk_size_autoscaling_mongos"] = disk_size_autoscaling_mongos
        __props__.__dict__["environment"] = environment
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["health"] = health
        __props__.__dict__["hosts"] = hosts
        __props__.__dict__["labels"] = labels
        __props__.__dict__["maintenance_window"] = maintenance_window
        __props__.__dict__["name"] = name
        __props__.__dict__["network_id"] = network_id
        __props__.__dict__["resources"] = resources
        __props__.__dict__["resources_mongocfg"] = resources_mongocfg
        __props__.__dict__["resources_mongod"] = resources_mongod
        __props__.__dict__["resources_mongoinfra"] = resources_mongoinfra
        __props__.__dict__["resources_mongos"] = resources_mongos
        __props__.__dict__["restore"] = restore
        __props__.__dict__["security_group_ids"] = security_group_ids
        __props__.__dict__["sharded"] = sharded
        __props__.__dict__["status"] = status
        __props__.__dict__["users"] = users
        return MdbMongodbCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterConfig")
    def cluster_config(self) -> pulumi.Output['outputs.MdbMongodbClusterClusterConfig']:
        """
        Configuration of the MongoDB subcluster. The structure is documented below.
        """
        return pulumi.get(self, "cluster_config")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        The ID of the cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Creation timestamp of the key.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def databases(self) -> pulumi.Output[Sequence['outputs.MdbMongodbClusterDatabase']]:
        """
        A database of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""", DeprecationWarning)
        pulumi.log.warn("""databases is deprecated: to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database""")

        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> pulumi.Output[bool]:
        """
        Inhibits deletion of the cluster.  Can be either `true` or `false`.
        - - -
        """
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the MongoDB cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongocfg")
    def disk_size_autoscaling_mongocfg(self) -> pulumi.Output['outputs.MdbMongodbClusterDiskSizeAutoscalingMongocfg']:
        return pulumi.get(self, "disk_size_autoscaling_mongocfg")

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongod")
    def disk_size_autoscaling_mongod(self) -> pulumi.Output['outputs.MdbMongodbClusterDiskSizeAutoscalingMongod']:
        return pulumi.get(self, "disk_size_autoscaling_mongod")

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongoinfra")
    def disk_size_autoscaling_mongoinfra(self) -> pulumi.Output['outputs.MdbMongodbClusterDiskSizeAutoscalingMongoinfra']:
        return pulumi.get(self, "disk_size_autoscaling_mongoinfra")

    @property
    @pulumi.getter(name="diskSizeAutoscalingMongos")
    def disk_size_autoscaling_mongos(self) -> pulumi.Output['outputs.MdbMongodbClusterDiskSizeAutoscalingMongos']:
        return pulumi.get(self, "disk_size_autoscaling_mongos")

    @property
    @pulumi.getter
    def environment(self) -> pulumi.Output[str]:
        """
        Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
        """
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        """
        The ID of the folder that the resource belongs to. If it
        is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def health(self) -> pulumi.Output[str]:
        """
        The health of the host.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def hosts(self) -> pulumi.Output[Sequence['outputs.MdbMongodbClusterHost']]:
        """
        A host of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Mapping[str, str]]:
        """
        A set of key/value label pairs to assign to the MongoDB cluster.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="maintenanceWindow")
    def maintenance_window(self) -> pulumi.Output['outputs.MdbMongodbClusterMaintenanceWindow']:
        """
        Maintenance window settings of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "maintenance_window")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the MongoDB cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> pulumi.Output[str]:
        """
        ID of the network, to which the MongoDB cluster belongs.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter
    def resources(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterResources']]:
        """
        Resources allocated to hosts of the MongoDB cluster. The structure is documented below.

        - - -
        """
        warnings.warn("""to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""", DeprecationWarning)
        pulumi.log.warn("""resources is deprecated: to manage `resources`s, please switch to using a separate resource type `resources_mongo*`""")

        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="resourcesMongocfg")
    def resources_mongocfg(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterResourcesMongocfg']]:
        """
        Resources allocated to `mongocfg` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongocfg")

    @property
    @pulumi.getter(name="resourcesMongod")
    def resources_mongod(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterResourcesMongod']]:
        """
        Resources allocated to `mongod` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongod")

    @property
    @pulumi.getter(name="resourcesMongoinfra")
    def resources_mongoinfra(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterResourcesMongoinfra']]:
        """
        Resources allocated to `mongoinfra` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongoinfra")

    @property
    @pulumi.getter(name="resourcesMongos")
    def resources_mongos(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterResourcesMongos']]:
        """
        Resources allocated to `mongos` hosts of the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources_mongos")

    @property
    @pulumi.getter
    def restore(self) -> pulumi.Output[Optional['outputs.MdbMongodbClusterRestore']]:
        """
        The cluster will be created from the specified backup. The structure is documented below.

        - - -
        """
        return pulumi.get(self, "restore")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A set of ids of security groups assigned to hosts of the cluster.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def sharded(self) -> pulumi.Output[bool]:
        """
        MongoDB Cluster mode enabled/disabled.
        """
        return pulumi.get(self, "sharded")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
        For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def users(self) -> pulumi.Output[Sequence['outputs.MdbMongodbClusterUser']]:
        """
        A user of the MongoDB cluster. The structure is documented below.
        """
        warnings.warn("""to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""", DeprecationWarning)
        pulumi.log.warn("""users is deprecated: to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user""")

        return pulumi.get(self, "users")

