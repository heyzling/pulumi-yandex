# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['MdbMysqlDatabaseArgs', 'MdbMysqlDatabase']

@pulumi.input_type
class MdbMysqlDatabaseArgs:
    def __init__(__self__, *,
                 cluster_id: pulumi.Input[str],
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a MdbMysqlDatabase resource.
        :param pulumi.Input[str] name: The name of the database.
        """
        pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _MdbMysqlDatabaseState:
    def __init__(__self__, *,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering MdbMysqlDatabase resources.
        :param pulumi.Input[str] name: The name of the database.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


class MdbMysqlDatabase(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a MySQL database within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-mysql/).

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_mysql_cluster = yandex.MdbMysqlCluster("fooMdbMysqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            version="8.0",
            resources=yandex.MdbMysqlClusterResourcesArgs(
                resource_preset_id="s2.micro",
                disk_type_id="network-ssd",
                disk_size=16,
            ),
            hosts=[yandex.MdbMysqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        foo_mdb_mysql_database = yandex.MdbMysqlDatabase("fooMdbMysqlDatabase", cluster_id=foo_mdb_mysql_cluster.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A MySQL database can be imported using the following format:

        ```sh
        $ pulumi import yandex:index/mdbMysqlDatabase:MdbMysqlDatabase foo {{cluster_id}}:{{database_name}}
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the database.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: MdbMysqlDatabaseArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a MySQL database within the Yandex.Cloud. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-mysql/).

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        foo_vpc_network = yandex.VpcNetwork("fooVpcNetwork")
        foo_vpc_subnet = yandex.VpcSubnet("fooVpcSubnet",
            zone="ru-central1-a",
            network_id=foo_vpc_network.id,
            v4_cidr_blocks=["10.5.0.0/24"])
        foo_mdb_mysql_cluster = yandex.MdbMysqlCluster("fooMdbMysqlCluster",
            environment="PRESTABLE",
            network_id=foo_vpc_network.id,
            version="8.0",
            resources=yandex.MdbMysqlClusterResourcesArgs(
                resource_preset_id="s2.micro",
                disk_type_id="network-ssd",
                disk_size=16,
            ),
            hosts=[yandex.MdbMysqlClusterHostArgs(
                zone="ru-central1-a",
                subnet_id=foo_vpc_subnet.id,
            )])
        foo_mdb_mysql_database = yandex.MdbMysqlDatabase("fooMdbMysqlDatabase", cluster_id=foo_mdb_mysql_cluster.id)
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A MySQL database can be imported using the following format:

        ```sh
        $ pulumi import yandex:index/mdbMysqlDatabase:MdbMysqlDatabase foo {{cluster_id}}:{{database_name}}
        ```

        :param str resource_name: The name of the resource.
        :param MdbMysqlDatabaseArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(MdbMysqlDatabaseArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = MdbMysqlDatabaseArgs.__new__(MdbMysqlDatabaseArgs)

            if cluster_id is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_id'")
            __props__.__dict__["cluster_id"] = cluster_id
            __props__.__dict__["name"] = name
        super(MdbMysqlDatabase, __self__).__init__(
            'yandex:index/mdbMysqlDatabase:MdbMysqlDatabase',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None) -> 'MdbMysqlDatabase':
        """
        Get an existing MdbMysqlDatabase resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] name: The name of the database.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _MdbMysqlDatabaseState.__new__(_MdbMysqlDatabaseState)

        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["name"] = name
        return MdbMysqlDatabase(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")

