# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'AlbBackendGroupGrpcBackend',
    'AlbBackendGroupGrpcBackendHealthcheck',
    'AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck',
    'AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck',
    'AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck',
    'AlbBackendGroupGrpcBackendLoadBalancingConfig',
    'AlbBackendGroupGrpcBackendTls',
    'AlbBackendGroupGrpcBackendTlsValidationContext',
    'AlbBackendGroupHttpBackend',
    'AlbBackendGroupHttpBackendHealthcheck',
    'AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck',
    'AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck',
    'AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck',
    'AlbBackendGroupHttpBackendLoadBalancingConfig',
    'AlbBackendGroupHttpBackendTls',
    'AlbBackendGroupHttpBackendTlsValidationContext',
    'AlbBackendGroupSessionAffinity',
    'AlbBackendGroupSessionAffinityConnection',
    'AlbBackendGroupSessionAffinityCookie',
    'AlbBackendGroupSessionAffinityHeader',
    'AlbBackendGroupStreamBackend',
    'AlbBackendGroupStreamBackendHealthcheck',
    'AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck',
    'AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck',
    'AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck',
    'AlbBackendGroupStreamBackendLoadBalancingConfig',
    'AlbBackendGroupStreamBackendTls',
    'AlbBackendGroupStreamBackendTlsValidationContext',
    'AlbHttpRouterRouteOptions',
    'AlbHttpRouterRouteOptionsRbac',
    'AlbHttpRouterRouteOptionsRbacPrincipal',
    'AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal',
    'AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader',
    'AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue',
    'AlbLoadBalancerAllocationPolicy',
    'AlbLoadBalancerAllocationPolicyLocation',
    'AlbLoadBalancerListener',
    'AlbLoadBalancerListenerEndpoint',
    'AlbLoadBalancerListenerEndpointAddress',
    'AlbLoadBalancerListenerEndpointAddressExternalIpv4Address',
    'AlbLoadBalancerListenerEndpointAddressExternalIpv6Address',
    'AlbLoadBalancerListenerEndpointAddressInternalIpv4Address',
    'AlbLoadBalancerListenerHttp',
    'AlbLoadBalancerListenerHttpHandler',
    'AlbLoadBalancerListenerHttpHandlerHttp2Options',
    'AlbLoadBalancerListenerHttpRedirects',
    'AlbLoadBalancerListenerStream',
    'AlbLoadBalancerListenerStreamHandler',
    'AlbLoadBalancerListenerTls',
    'AlbLoadBalancerListenerTlsDefaultHandler',
    'AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler',
    'AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options',
    'AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler',
    'AlbLoadBalancerListenerTlsSniHandler',
    'AlbLoadBalancerListenerTlsSniHandlerHandler',
    'AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler',
    'AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options',
    'AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler',
    'AlbLoadBalancerLogOptions',
    'AlbLoadBalancerLogOptionsDiscardRule',
    'AlbTargetGroupTarget',
    'AlbVirtualHostModifyRequestHeader',
    'AlbVirtualHostModifyResponseHeader',
    'AlbVirtualHostRoute',
    'AlbVirtualHostRouteGrpcRoute',
    'AlbVirtualHostRouteGrpcRouteGrpcMatch',
    'AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn',
    'AlbVirtualHostRouteGrpcRouteGrpcRouteAction',
    'AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction',
    'AlbVirtualHostRouteHttpRoute',
    'AlbVirtualHostRouteHttpRouteDirectResponseAction',
    'AlbVirtualHostRouteHttpRouteHttpMatch',
    'AlbVirtualHostRouteHttpRouteHttpMatchPath',
    'AlbVirtualHostRouteHttpRouteHttpRouteAction',
    'AlbVirtualHostRouteHttpRouteRedirectAction',
    'AlbVirtualHostRouteOptions',
    'AlbVirtualHostRouteOptionsRbac',
    'AlbVirtualHostRouteOptionsRbacPrincipal',
    'AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal',
    'AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader',
    'AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue',
    'AlbVirtualHostRouteRouteOptions',
    'AlbVirtualHostRouteRouteOptionsRbac',
    'AlbVirtualHostRouteRouteOptionsRbacPrincipal',
    'AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal',
    'AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader',
    'AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue',
    'ApiGatewayCanary',
    'ApiGatewayConnectivity',
    'ApiGatewayCustomDomain',
    'ApiGatewayLogOptions',
    'AuditTrailsTrailDataStreamDestination',
    'AuditTrailsTrailFilter',
    'AuditTrailsTrailFilterEventFilter',
    'AuditTrailsTrailFilterEventFilterCategory',
    'AuditTrailsTrailFilterEventFilterPathFilter',
    'AuditTrailsTrailFilterEventFilterPathFilterAnyFilter',
    'AuditTrailsTrailFilterEventFilterPathFilterSomeFilter',
    'AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter',
    'AuditTrailsTrailFilterPathFilter',
    'AuditTrailsTrailFilterPathFilterAnyFilter',
    'AuditTrailsTrailFilterPathFilterSomeFilter',
    'AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter',
    'AuditTrailsTrailLoggingDestination',
    'AuditTrailsTrailStorageDestination',
    'BackupPolicyReattempts',
    'BackupPolicyRetention',
    'BackupPolicyRetentionRule',
    'BackupPolicyScheduling',
    'BackupPolicySchedulingBackupSet',
    'BackupPolicySchedulingBackupSetExecuteByTime',
    'BackupPolicySchedulingExecuteByTime',
    'BackupPolicyVmSnapshotReattempts',
    'CdnOriginGroupOrigin',
    'CdnResourceOptions',
    'CdnResourceOptionsIpAddressAcl',
    'CdnResourceSslCertificate',
    'CmCertificateChallenge',
    'CmCertificateManaged',
    'CmCertificateSelfManaged',
    'CmCertificateSelfManagedPrivateKeyLockboxSecret',
    'ComputeDiskDiskPlacementPolicy',
    'ComputeInstanceBootDisk',
    'ComputeInstanceBootDiskInitializeParams',
    'ComputeInstanceFilesystem',
    'ComputeInstanceGroupAllocationPolicy',
    'ComputeInstanceGroupAllocationPolicyInstanceTagsPool',
    'ComputeInstanceGroupApplicationLoadBalancer',
    'ComputeInstanceGroupDeployPolicy',
    'ComputeInstanceGroupHealthCheck',
    'ComputeInstanceGroupHealthCheckHttpOptions',
    'ComputeInstanceGroupHealthCheckTcpOptions',
    'ComputeInstanceGroupInstance',
    'ComputeInstanceGroupInstanceNetworkInterface',
    'ComputeInstanceGroupInstanceTemplate',
    'ComputeInstanceGroupInstanceTemplateBootDisk',
    'ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams',
    'ComputeInstanceGroupInstanceTemplateFilesystem',
    'ComputeInstanceGroupInstanceTemplateMetadataOptions',
    'ComputeInstanceGroupInstanceTemplateNetworkInterface',
    'ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord',
    'ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord',
    'ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord',
    'ComputeInstanceGroupInstanceTemplateNetworkSetting',
    'ComputeInstanceGroupInstanceTemplatePlacementPolicy',
    'ComputeInstanceGroupInstanceTemplateResources',
    'ComputeInstanceGroupInstanceTemplateSchedulingPolicy',
    'ComputeInstanceGroupInstanceTemplateSecondaryDisk',
    'ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams',
    'ComputeInstanceGroupLoadBalancer',
    'ComputeInstanceGroupScalePolicy',
    'ComputeInstanceGroupScalePolicyAutoScale',
    'ComputeInstanceGroupScalePolicyAutoScaleCustomRule',
    'ComputeInstanceGroupScalePolicyFixedScale',
    'ComputeInstanceGroupScalePolicyTestAutoScale',
    'ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule',
    'ComputeInstanceLocalDisk',
    'ComputeInstanceMetadataOptions',
    'ComputeInstanceNetworkInterface',
    'ComputeInstanceNetworkInterfaceDnsRecord',
    'ComputeInstanceNetworkInterfaceIpv6DnsRecord',
    'ComputeInstanceNetworkInterfaceNatDnsRecord',
    'ComputeInstancePlacementPolicy',
    'ComputeInstancePlacementPolicyHostAffinityRule',
    'ComputeInstanceResources',
    'ComputeInstanceSchedulingPolicy',
    'ComputeInstanceSecondaryDisk',
    'ComputeSnapshotScheduleSchedulePolicy',
    'ComputeSnapshotScheduleSnapshotSpec',
    'ContainerRepositoryLifecyclePolicyRule',
    'DataprocClusterClusterConfig',
    'DataprocClusterClusterConfigHadoop',
    'DataprocClusterClusterConfigHadoopInitializationAction',
    'DataprocClusterClusterConfigSubclusterSpec',
    'DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig',
    'DataprocClusterClusterConfigSubclusterSpecResources',
    'DatatransferEndpointSettings',
    'DatatransferEndpointSettingsClickhouseSource',
    'DatatransferEndpointSettingsClickhouseSourceConnection',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword',
    'DatatransferEndpointSettingsClickhouseTarget',
    'DatatransferEndpointSettingsClickhouseTargetAltName',
    'DatatransferEndpointSettingsClickhouseTargetConnection',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword',
    'DatatransferEndpointSettingsClickhouseTargetSharding',
    'DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash',
    'DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping',
    'DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping',
    'DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue',
    'DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin',
    'DatatransferEndpointSettingsClickhouseTargetShardingTransferId',
    'DatatransferEndpointSettingsKafkaSource',
    'DatatransferEndpointSettingsKafkaSourceAuth',
    'DatatransferEndpointSettingsKafkaSourceAuthNoAuth',
    'DatatransferEndpointSettingsKafkaSourceAuthSasl',
    'DatatransferEndpointSettingsKafkaSourceAuthSaslPassword',
    'DatatransferEndpointSettingsKafkaSourceConnection',
    'DatatransferEndpointSettingsKafkaSourceConnectionOnPremise',
    'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsKafkaSourceParser',
    'DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser',
    'DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser',
    'DatatransferEndpointSettingsKafkaSourceParserJsonParser',
    'DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema',
    'DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields',
    'DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField',
    'DatatransferEndpointSettingsKafkaSourceParserTskvParser',
    'DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema',
    'DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields',
    'DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField',
    'DatatransferEndpointSettingsKafkaSourceTransformer',
    'DatatransferEndpointSettingsKafkaTarget',
    'DatatransferEndpointSettingsKafkaTargetAuth',
    'DatatransferEndpointSettingsKafkaTargetAuthNoAuth',
    'DatatransferEndpointSettingsKafkaTargetAuthSasl',
    'DatatransferEndpointSettingsKafkaTargetAuthSaslPassword',
    'DatatransferEndpointSettingsKafkaTargetConnection',
    'DatatransferEndpointSettingsKafkaTargetConnectionOnPremise',
    'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsKafkaTargetSerializer',
    'DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto',
    'DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium',
    'DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter',
    'DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson',
    'DatatransferEndpointSettingsKafkaTargetTopicSettings',
    'DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic',
    'DatatransferEndpointSettingsMetrikaSource',
    'DatatransferEndpointSettingsMetrikaSourceStream',
    'DatatransferEndpointSettingsMetrikaSourceToken',
    'DatatransferEndpointSettingsMongoSource',
    'DatatransferEndpointSettingsMongoSourceCollection',
    'DatatransferEndpointSettingsMongoSourceConnection',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword',
    'DatatransferEndpointSettingsMongoSourceExcludedCollection',
    'DatatransferEndpointSettingsMongoTarget',
    'DatatransferEndpointSettingsMongoTargetConnection',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword',
    'DatatransferEndpointSettingsMysqlSource',
    'DatatransferEndpointSettingsMysqlSourceConnection',
    'DatatransferEndpointSettingsMysqlSourceConnectionOnPremise',
    'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsMysqlSourceObjectTransferSettings',
    'DatatransferEndpointSettingsMysqlSourcePassword',
    'DatatransferEndpointSettingsMysqlTarget',
    'DatatransferEndpointSettingsMysqlTargetConnection',
    'DatatransferEndpointSettingsMysqlTargetConnectionOnPremise',
    'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsMysqlTargetPassword',
    'DatatransferEndpointSettingsPostgresSource',
    'DatatransferEndpointSettingsPostgresSourceConnection',
    'DatatransferEndpointSettingsPostgresSourceConnectionOnPremise',
    'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsPostgresSourceObjectTransferSettings',
    'DatatransferEndpointSettingsPostgresSourcePassword',
    'DatatransferEndpointSettingsPostgresTarget',
    'DatatransferEndpointSettingsPostgresTargetConnection',
    'DatatransferEndpointSettingsPostgresTargetConnectionOnPremise',
    'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode',
    'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled',
    'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled',
    'DatatransferEndpointSettingsPostgresTargetPassword',
    'DatatransferEndpointSettingsYdbSource',
    'DatatransferEndpointSettingsYdbTarget',
    'DatatransferEndpointSettingsYdsSource',
    'DatatransferEndpointSettingsYdsSourceParser',
    'DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser',
    'DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser',
    'DatatransferEndpointSettingsYdsSourceParserJsonParser',
    'DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema',
    'DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields',
    'DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField',
    'DatatransferEndpointSettingsYdsSourceParserTskvParser',
    'DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema',
    'DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields',
    'DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField',
    'DatatransferEndpointSettingsYdsTarget',
    'DatatransferEndpointSettingsYdsTargetSerializer',
    'DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto',
    'DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium',
    'DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter',
    'DatatransferEndpointSettingsYdsTargetSerializerSerializerJson',
    'DatatransferTransferRuntime',
    'DatatransferTransferRuntimeYcRuntime',
    'DatatransferTransferRuntimeYcRuntimeUploadShardParams',
    'DatatransferTransferTransformation',
    'DatatransferTransferTransformationTransformer',
    'DatatransferTransferTransformationTransformerConvertToString',
    'DatatransferTransferTransformationTransformerConvertToStringColumns',
    'DatatransferTransferTransformationTransformerConvertToStringTables',
    'DatatransferTransferTransformationTransformerFilterColumns',
    'DatatransferTransferTransformationTransformerFilterColumnsColumns',
    'DatatransferTransferTransformationTransformerFilterColumnsTables',
    'DatatransferTransferTransformationTransformerFilterRows',
    'DatatransferTransferTransformationTransformerFilterRowsTables',
    'DatatransferTransferTransformationTransformerMaskField',
    'DatatransferTransferTransformationTransformerMaskFieldFunction',
    'DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash',
    'DatatransferTransferTransformationTransformerMaskFieldTables',
    'DatatransferTransferTransformationTransformerRenameTables',
    'DatatransferTransferTransformationTransformerRenameTablesRenameTable',
    'DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName',
    'DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName',
    'DatatransferTransferTransformationTransformerReplacePrimaryKey',
    'DatatransferTransferTransformationTransformerReplacePrimaryKeyTables',
    'DatatransferTransferTransformationTransformerSharderTransformer',
    'DatatransferTransferTransformationTransformerSharderTransformerColumns',
    'DatatransferTransferTransformationTransformerSharderTransformerTables',
    'DatatransferTransferTransformationTransformerTableSplitterTransformer',
    'DatatransferTransferTransformationTransformerTableSplitterTransformerTables',
    'FunctionAsyncInvocation',
    'FunctionAsyncInvocationYmqFailureTarget',
    'FunctionAsyncInvocationYmqSuccessTarget',
    'FunctionConnectivity',
    'FunctionContent',
    'FunctionLogOptions',
    'FunctionPackage',
    'FunctionScalingPolicyPolicy',
    'FunctionSecret',
    'FunctionStorageMount',
    'FunctionTriggerContainer',
    'FunctionTriggerContainerRegistry',
    'FunctionTriggerDataStreams',
    'FunctionTriggerDlq',
    'FunctionTriggerFunction',
    'FunctionTriggerIot',
    'FunctionTriggerLogGroup',
    'FunctionTriggerLogging',
    'FunctionTriggerMail',
    'FunctionTriggerMessageQueue',
    'FunctionTriggerObjectStorage',
    'FunctionTriggerTimer',
    'IamServiceAccountApiKeyOutputToLockbox',
    'IamServiceAccountKeyOutputToLockbox',
    'IamServiceAccountStaticAccessKeyOutputToLockbox',
    'IotCoreBrokerLogOptions',
    'IotCoreRegistryLogOptions',
    'KubernetesClusterKmsProvider',
    'KubernetesClusterMaster',
    'KubernetesClusterMasterMaintenancePolicy',
    'KubernetesClusterMasterMaintenancePolicyMaintenanceWindow',
    'KubernetesClusterMasterMasterLocation',
    'KubernetesClusterMasterMasterLogging',
    'KubernetesClusterMasterRegional',
    'KubernetesClusterMasterRegionalLocation',
    'KubernetesClusterMasterVersionInfo',
    'KubernetesClusterMasterZonal',
    'KubernetesClusterNetworkImplementation',
    'KubernetesClusterNetworkImplementationCilium',
    'KubernetesNodeGroupAllocationPolicy',
    'KubernetesNodeGroupAllocationPolicyLocation',
    'KubernetesNodeGroupDeployPolicy',
    'KubernetesNodeGroupInstanceTemplate',
    'KubernetesNodeGroupInstanceTemplateBootDisk',
    'KubernetesNodeGroupInstanceTemplateContainerNetwork',
    'KubernetesNodeGroupInstanceTemplateContainerRuntime',
    'KubernetesNodeGroupInstanceTemplateGpuSettings',
    'KubernetesNodeGroupInstanceTemplateNetworkInterface',
    'KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord',
    'KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord',
    'KubernetesNodeGroupInstanceTemplatePlacementPolicy',
    'KubernetesNodeGroupInstanceTemplateResources',
    'KubernetesNodeGroupInstanceTemplateSchedulingPolicy',
    'KubernetesNodeGroupMaintenancePolicy',
    'KubernetesNodeGroupMaintenancePolicyMaintenanceWindow',
    'KubernetesNodeGroupScalePolicy',
    'KubernetesNodeGroupScalePolicyAutoScale',
    'KubernetesNodeGroupScalePolicyFixedScale',
    'KubernetesNodeGroupVersionInfo',
    'LbNetworkLoadBalancerAttachedTargetGroup',
    'LbNetworkLoadBalancerAttachedTargetGroupHealthcheck',
    'LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions',
    'LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions',
    'LbNetworkLoadBalancerListener',
    'LbNetworkLoadBalancerListenerExternalAddressSpec',
    'LbNetworkLoadBalancerListenerInternalAddressSpec',
    'LbTargetGroupTarget',
    'LoadtestingAgentComputeInstance',
    'LoadtestingAgentComputeInstanceBootDisk',
    'LoadtestingAgentComputeInstanceBootDiskInitializeParams',
    'LoadtestingAgentComputeInstanceNetworkInterface',
    'LoadtestingAgentComputeInstanceResources',
    'LockboxSecretVersionEntry',
    'LockboxSecretVersionEntryCommand',
    'MdbClickhouseClusterAccess',
    'MdbClickhouseClusterBackupWindowStart',
    'MdbClickhouseClusterClickhouse',
    'MdbClickhouseClusterClickhouseConfig',
    'MdbClickhouseClusterClickhouseConfigCompression',
    'MdbClickhouseClusterClickhouseConfigGraphiteRollup',
    'MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern',
    'MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention',
    'MdbClickhouseClusterClickhouseConfigKafka',
    'MdbClickhouseClusterClickhouseConfigKafkaTopic',
    'MdbClickhouseClusterClickhouseConfigKafkaTopicSettings',
    'MdbClickhouseClusterClickhouseConfigMergeTree',
    'MdbClickhouseClusterClickhouseConfigQueryCache',
    'MdbClickhouseClusterClickhouseConfigQueryMaskingRule',
    'MdbClickhouseClusterClickhouseConfigRabbitmq',
    'MdbClickhouseClusterClickhouseResources',
    'MdbClickhouseClusterCloudStorage',
    'MdbClickhouseClusterDatabase',
    'MdbClickhouseClusterFormatSchema',
    'MdbClickhouseClusterHost',
    'MdbClickhouseClusterMaintenanceWindow',
    'MdbClickhouseClusterMlModel',
    'MdbClickhouseClusterShard',
    'MdbClickhouseClusterShardGroup',
    'MdbClickhouseClusterShardResources',
    'MdbClickhouseClusterUser',
    'MdbClickhouseClusterUserPermission',
    'MdbClickhouseClusterUserQuota',
    'MdbClickhouseClusterUserSettings',
    'MdbClickhouseClusterZookeeper',
    'MdbClickhouseClusterZookeeperResources',
    'MdbElasticsearchClusterConfig',
    'MdbElasticsearchClusterConfigDataNode',
    'MdbElasticsearchClusterConfigDataNodeResources',
    'MdbElasticsearchClusterConfigMasterNode',
    'MdbElasticsearchClusterConfigMasterNodeResources',
    'MdbElasticsearchClusterHost',
    'MdbElasticsearchClusterMaintenanceWindow',
    'MdbGreenplumClusterAccess',
    'MdbGreenplumClusterBackupWindowStart',
    'MdbGreenplumClusterCloudStorage',
    'MdbGreenplumClusterMaintenanceWindow',
    'MdbGreenplumClusterMasterHost',
    'MdbGreenplumClusterMasterSubcluster',
    'MdbGreenplumClusterMasterSubclusterResources',
    'MdbGreenplumClusterPoolerConfig',
    'MdbGreenplumClusterPxfConfig',
    'MdbGreenplumClusterSegmentHost',
    'MdbGreenplumClusterSegmentSubcluster',
    'MdbGreenplumClusterSegmentSubclusterResources',
    'MdbKafkaClusterConfig',
    'MdbKafkaClusterConfigAccess',
    'MdbKafkaClusterConfigDiskSizeAutoscaling',
    'MdbKafkaClusterConfigKafka',
    'MdbKafkaClusterConfigKafkaKafkaConfig',
    'MdbKafkaClusterConfigKafkaResources',
    'MdbKafkaClusterConfigZookeeper',
    'MdbKafkaClusterConfigZookeeperResources',
    'MdbKafkaClusterHost',
    'MdbKafkaClusterMaintenanceWindow',
    'MdbKafkaClusterTopic',
    'MdbKafkaClusterTopicTopicConfig',
    'MdbKafkaClusterUser',
    'MdbKafkaClusterUserPermission',
    'MdbKafkaConnectorConnectorConfigMirrormaker',
    'MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster',
    'MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster',
    'MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster',
    'MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster',
    'MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster',
    'MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster',
    'MdbKafkaConnectorConnectorConfigS3Sink',
    'MdbKafkaConnectorConnectorConfigS3SinkS3Connection',
    'MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3',
    'MdbKafkaTopicTopicConfig',
    'MdbKafkaUserPermission',
    'MdbMongodbClusterClusterConfig',
    'MdbMongodbClusterClusterConfigAccess',
    'MdbMongodbClusterClusterConfigBackupWindowStart',
    'MdbMongodbClusterClusterConfigMongocfg',
    'MdbMongodbClusterClusterConfigMongocfgNet',
    'MdbMongodbClusterClusterConfigMongocfgOperationProfiling',
    'MdbMongodbClusterClusterConfigMongocfgStorage',
    'MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger',
    'MdbMongodbClusterClusterConfigMongod',
    'MdbMongodbClusterClusterConfigMongodAuditLog',
    'MdbMongodbClusterClusterConfigMongodNet',
    'MdbMongodbClusterClusterConfigMongodOperationProfiling',
    'MdbMongodbClusterClusterConfigMongodSecurity',
    'MdbMongodbClusterClusterConfigMongodSecurityKmip',
    'MdbMongodbClusterClusterConfigMongodSetParameter',
    'MdbMongodbClusterClusterConfigMongodStorage',
    'MdbMongodbClusterClusterConfigMongodStorageJournal',
    'MdbMongodbClusterClusterConfigMongodStorageWiredTiger',
    'MdbMongodbClusterClusterConfigMongos',
    'MdbMongodbClusterClusterConfigMongosNet',
    'MdbMongodbClusterClusterConfigPerformanceDiagnostics',
    'MdbMongodbClusterDatabase',
    'MdbMongodbClusterDiskSizeAutoscalingMongocfg',
    'MdbMongodbClusterDiskSizeAutoscalingMongod',
    'MdbMongodbClusterDiskSizeAutoscalingMongoinfra',
    'MdbMongodbClusterDiskSizeAutoscalingMongos',
    'MdbMongodbClusterHost',
    'MdbMongodbClusterHostHostParameters',
    'MdbMongodbClusterMaintenanceWindow',
    'MdbMongodbClusterResources',
    'MdbMongodbClusterResourcesMongocfg',
    'MdbMongodbClusterResourcesMongod',
    'MdbMongodbClusterResourcesMongoinfra',
    'MdbMongodbClusterResourcesMongos',
    'MdbMongodbClusterRestore',
    'MdbMongodbClusterUser',
    'MdbMongodbClusterUserPermission',
    'MdbMysqlClusterAccess',
    'MdbMysqlClusterBackupWindowStart',
    'MdbMysqlClusterDatabase',
    'MdbMysqlClusterHost',
    'MdbMysqlClusterMaintenanceWindow',
    'MdbMysqlClusterPerformanceDiagnostics',
    'MdbMysqlClusterResources',
    'MdbMysqlClusterRestore',
    'MdbMysqlClusterUser',
    'MdbMysqlClusterUserConnectionLimits',
    'MdbMysqlClusterUserPermission',
    'MdbMysqlUserConnectionLimits',
    'MdbMysqlUserPermission',
    'MdbPostgresqlClusterConfig',
    'MdbPostgresqlClusterConfigAccess',
    'MdbPostgresqlClusterConfigBackupWindowStart',
    'MdbPostgresqlClusterConfigDiskSizeAutoscaling',
    'MdbPostgresqlClusterConfigPerformanceDiagnostics',
    'MdbPostgresqlClusterConfigPoolerConfig',
    'MdbPostgresqlClusterConfigResources',
    'MdbPostgresqlClusterDatabase',
    'MdbPostgresqlClusterDatabaseExtension',
    'MdbPostgresqlClusterHost',
    'MdbPostgresqlClusterMaintenanceWindow',
    'MdbPostgresqlClusterRestore',
    'MdbPostgresqlClusterUser',
    'MdbPostgresqlClusterUserPermission',
    'MdbPostgresqlDatabaseExtension',
    'MdbPostgresqlUserPermission',
    'MdbRedisClusterConfig',
    'MdbRedisClusterDiskSizeAutoscaling',
    'MdbRedisClusterHost',
    'MdbRedisClusterMaintenanceWindow',
    'MdbRedisClusterResources',
    'MdbSqlserverClusterBackupWindowStart',
    'MdbSqlserverClusterDatabase',
    'MdbSqlserverClusterHost',
    'MdbSqlserverClusterResources',
    'MdbSqlserverClusterUser',
    'MdbSqlserverClusterUserPermission',
    'MonitoringDashboardParametrization',
    'MonitoringDashboardParametrizationParameter',
    'MonitoringDashboardParametrizationParameterCustom',
    'MonitoringDashboardParametrizationParameterLabelValue',
    'MonitoringDashboardParametrizationParameterText',
    'MonitoringDashboardWidget',
    'MonitoringDashboardWidgetChart',
    'MonitoringDashboardWidgetChartNameHidingSetting',
    'MonitoringDashboardWidgetChartQuery',
    'MonitoringDashboardWidgetChartQueryDownsampling',
    'MonitoringDashboardWidgetChartQueryTarget',
    'MonitoringDashboardWidgetChartSeriesOverride',
    'MonitoringDashboardWidgetChartSeriesOverrideSetting',
    'MonitoringDashboardWidgetChartVisualizationSetting',
    'MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting',
    'MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic',
    'MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient',
    'MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard',
    'MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting',
    'MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting',
    'MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft',
    'MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight',
    'MonitoringDashboardWidgetPosition',
    'MonitoringDashboardWidgetText',
    'MonitoringDashboardWidgetTitle',
    'OrganizationmanagerOsLoginSettingsSshCertificateSettings',
    'OrganizationmanagerOsLoginSettingsUserSshKeySettings',
    'OrganizationmanagerSamlFederationSecuritySettings',
    'ServerlessContainerConnectivity',
    'ServerlessContainerImage',
    'ServerlessContainerLogOptions',
    'ServerlessContainerProvisionPolicy',
    'ServerlessContainerSecret',
    'ServerlessContainerStorageMount',
    'SmartcaptchaCaptchaOverrideVariant',
    'SmartcaptchaCaptchaSecurityRule',
    'SmartcaptchaCaptchaSecurityRuleCondition',
    'SmartcaptchaCaptchaSecurityRuleConditionHeader',
    'SmartcaptchaCaptchaSecurityRuleConditionHeaderValue',
    'SmartcaptchaCaptchaSecurityRuleConditionHost',
    'SmartcaptchaCaptchaSecurityRuleConditionHostHost',
    'SmartcaptchaCaptchaSecurityRuleConditionSourceIp',
    'SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch',
    'SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch',
    'SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch',
    'SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch',
    'SmartcaptchaCaptchaSecurityRuleConditionUri',
    'SmartcaptchaCaptchaSecurityRuleConditionUriPath',
    'SmartcaptchaCaptchaSecurityRuleConditionUriQuery',
    'SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue',
    'StorageBucketAnonymousAccessFlags',
    'StorageBucketCorsRule',
    'StorageBucketGrant',
    'StorageBucketHttps',
    'StorageBucketLifecycleRule',
    'StorageBucketLifecycleRuleExpiration',
    'StorageBucketLifecycleRuleFilter',
    'StorageBucketLifecycleRuleFilterAnd',
    'StorageBucketLifecycleRuleFilterTag',
    'StorageBucketLifecycleRuleNoncurrentVersionExpiration',
    'StorageBucketLifecycleRuleNoncurrentVersionTransition',
    'StorageBucketLifecycleRuleTransition',
    'StorageBucketLogging',
    'StorageBucketObjectLockConfiguration',
    'StorageBucketObjectLockConfigurationRule',
    'StorageBucketObjectLockConfigurationRuleDefaultRetention',
    'StorageBucketServerSideEncryptionConfiguration',
    'StorageBucketServerSideEncryptionConfigurationRule',
    'StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault',
    'StorageBucketVersioning',
    'StorageBucketWebsite',
    'SwsSecurityProfileSecurityRule',
    'SwsSecurityProfileSecurityRuleRuleCondition',
    'SwsSecurityProfileSecurityRuleRuleConditionCondition',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionHeader',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch',
    'SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch',
    'SwsSecurityProfileSecurityRuleSmartProtection',
    'SwsSecurityProfileSecurityRuleSmartProtectionCondition',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch',
    'SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch',
    'VpcAddressDnsRecord',
    'VpcAddressExternalIpv4Address',
    'VpcDefaultSecurityGroupEgress',
    'VpcDefaultSecurityGroupIngress',
    'VpcGatewaySharedEgressGateway',
    'VpcRouteTableStaticRoute',
    'VpcSecurityGroupEgress',
    'VpcSecurityGroupIngress',
    'VpcSubnetDhcpOptions',
    'YdbDatabaseDedicatedLocation',
    'YdbDatabaseDedicatedLocationRegion',
    'YdbDatabaseDedicatedScalePolicy',
    'YdbDatabaseDedicatedScalePolicyFixedScale',
    'YdbDatabaseDedicatedStorageConfig',
    'YdbDatabaseServerlessServerlessDatabase',
    'YdbTableChangefeedConsumer',
    'YdbTableColumn',
    'YdbTableFamily',
    'YdbTablePartitioningSettings',
    'YdbTablePartitioningSettingsPartitionAtKey',
    'YdbTableTtl',
    'YdbTopicConsumer',
    'GetAlbBackendGroupGrpcBackendResult',
    'GetAlbBackendGroupGrpcBackendHealthcheckResult',
    'GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckResult',
    'GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckResult',
    'GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckResult',
    'GetAlbBackendGroupGrpcBackendLoadBalancingConfigResult',
    'GetAlbBackendGroupGrpcBackendTlsResult',
    'GetAlbBackendGroupGrpcBackendTlsValidationContextResult',
    'GetAlbBackendGroupHttpBackendResult',
    'GetAlbBackendGroupHttpBackendHealthcheckResult',
    'GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckResult',
    'GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckResult',
    'GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckResult',
    'GetAlbBackendGroupHttpBackendLoadBalancingConfigResult',
    'GetAlbBackendGroupHttpBackendTlsResult',
    'GetAlbBackendGroupHttpBackendTlsValidationContextResult',
    'GetAlbBackendGroupSessionAffinityResult',
    'GetAlbBackendGroupSessionAffinityConnectionResult',
    'GetAlbBackendGroupSessionAffinityCookieResult',
    'GetAlbBackendGroupSessionAffinityHeaderResult',
    'GetAlbBackendGroupStreamBackendResult',
    'GetAlbBackendGroupStreamBackendHealthcheckResult',
    'GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckResult',
    'GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckResult',
    'GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckResult',
    'GetAlbBackendGroupStreamBackendLoadBalancingConfigResult',
    'GetAlbBackendGroupStreamBackendTlsResult',
    'GetAlbBackendGroupStreamBackendTlsValidationContextResult',
    'GetAlbHttpRouterRouteOptionResult',
    'GetAlbHttpRouterRouteOptionRbacResult',
    'GetAlbHttpRouterRouteOptionRbacPrincipalResult',
    'GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalResult',
    'GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderResult',
    'GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValueResult',
    'GetAlbLoadBalancerAllocationPolicyResult',
    'GetAlbLoadBalancerAllocationPolicyLocationResult',
    'GetAlbLoadBalancerListenerResult',
    'GetAlbLoadBalancerListenerEndpointResult',
    'GetAlbLoadBalancerListenerEndpointAddressResult',
    'GetAlbLoadBalancerListenerEndpointAddressExternalIpv4AddressResult',
    'GetAlbLoadBalancerListenerEndpointAddressExternalIpv6AddressResult',
    'GetAlbLoadBalancerListenerEndpointAddressInternalIpv4AddressResult',
    'GetAlbLoadBalancerListenerHttpResult',
    'GetAlbLoadBalancerListenerHttpHandlerResult',
    'GetAlbLoadBalancerListenerHttpHandlerHttp2OptionResult',
    'GetAlbLoadBalancerListenerHttpRedirectResult',
    'GetAlbLoadBalancerListenerStreamResult',
    'GetAlbLoadBalancerListenerStreamHandlerResult',
    'GetAlbLoadBalancerListenerTlResult',
    'GetAlbLoadBalancerListenerTlDefaultHandlerResult',
    'GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerResult',
    'GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2OptionResult',
    'GetAlbLoadBalancerListenerTlDefaultHandlerStreamHandlerResult',
    'GetAlbLoadBalancerListenerTlSniHandlerResult',
    'GetAlbLoadBalancerListenerTlSniHandlerHandlerResult',
    'GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerResult',
    'GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2OptionResult',
    'GetAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandlerResult',
    'GetAlbLoadBalancerLogOptionResult',
    'GetAlbLoadBalancerLogOptionDiscardRuleResult',
    'GetAlbTargetGroupTargetResult',
    'GetAlbVirtualHostModifyRequestHeaderResult',
    'GetAlbVirtualHostModifyResponseHeaderResult',
    'GetAlbVirtualHostRouteResult',
    'GetAlbVirtualHostRouteGrpcRouteResult',
    'GetAlbVirtualHostRouteGrpcRouteGrpcMatchResult',
    'GetAlbVirtualHostRouteGrpcRouteGrpcMatchFqmnResult',
    'GetAlbVirtualHostRouteGrpcRouteGrpcRouteActionResult',
    'GetAlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionResult',
    'GetAlbVirtualHostRouteHttpRouteResult',
    'GetAlbVirtualHostRouteHttpRouteDirectResponseActionResult',
    'GetAlbVirtualHostRouteHttpRouteHttpMatchResult',
    'GetAlbVirtualHostRouteHttpRouteHttpMatchPathResult',
    'GetAlbVirtualHostRouteHttpRouteHttpRouteActionResult',
    'GetAlbVirtualHostRouteHttpRouteRedirectActionResult',
    'GetAlbVirtualHostRouteOptionResult',
    'GetAlbVirtualHostRouteOptionRbacResult',
    'GetAlbVirtualHostRouteOptionRbacPrincipalResult',
    'GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalResult',
    'GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderResult',
    'GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValueResult',
    'GetAlbVirtualHostRouteRouteOptionResult',
    'GetAlbVirtualHostRouteRouteOptionRbacResult',
    'GetAlbVirtualHostRouteRouteOptionRbacPrincipalResult',
    'GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalResult',
    'GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderResult',
    'GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValueResult',
    'GetApiGatewayCanaryResult',
    'GetApiGatewayConnectivityResult',
    'GetApiGatewayCustomDomainResult',
    'GetApiGatewayLogOptionResult',
    'GetAuditTrailsTrailDataStreamDestinationResult',
    'GetAuditTrailsTrailFilterResult',
    'GetAuditTrailsTrailFilterEventFilterResult',
    'GetAuditTrailsTrailFilterEventFilterCategoryResult',
    'GetAuditTrailsTrailFilterEventFilterPathFilterResult',
    'GetAuditTrailsTrailFilterEventFilterPathFilterAnyFilterResult',
    'GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterResult',
    'GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilterResult',
    'GetAuditTrailsTrailFilterPathFilterResult',
    'GetAuditTrailsTrailFilterPathFilterAnyFilterResult',
    'GetAuditTrailsTrailFilterPathFilterSomeFilterResult',
    'GetAuditTrailsTrailFilterPathFilterSomeFilterAnyFilterResult',
    'GetAuditTrailsTrailLoggingDestinationResult',
    'GetAuditTrailsTrailStorageDestinationResult',
    'GetBackupPolicyReattemptResult',
    'GetBackupPolicyRetentionResult',
    'GetBackupPolicyRetentionRuleResult',
    'GetBackupPolicySchedulingResult',
    'GetBackupPolicySchedulingBackupSetResult',
    'GetBackupPolicySchedulingBackupSetExecuteByTimeResult',
    'GetBackupPolicyVmSnapshotReattemptResult',
    'GetCdnOriginGroupOriginResult',
    'GetCdnResourceOptionsResult',
    'GetCdnResourceOptionsIpAddressAclResult',
    'GetCdnResourceSslCertificateResult',
    'GetCmCertificateChallengeResult',
    'GetComputeDiskDiskPlacementPolicyResult',
    'GetComputeInstanceBootDiskResult',
    'GetComputeInstanceBootDiskInitializeParamResult',
    'GetComputeInstanceFilesystemResult',
    'GetComputeInstanceGroupAllocationPolicyResult',
    'GetComputeInstanceGroupAllocationPolicyInstanceTagsPoolResult',
    'GetComputeInstanceGroupApplicationBalancerStateResult',
    'GetComputeInstanceGroupApplicationLoadBalancerResult',
    'GetComputeInstanceGroupDeployPolicyResult',
    'GetComputeInstanceGroupHealthCheckResult',
    'GetComputeInstanceGroupHealthCheckHttpOptionResult',
    'GetComputeInstanceGroupHealthCheckTcpOptionResult',
    'GetComputeInstanceGroupInstanceResult',
    'GetComputeInstanceGroupInstanceNetworkInterfaceResult',
    'GetComputeInstanceGroupInstanceTemplateResult',
    'GetComputeInstanceGroupInstanceTemplateBootDiskResult',
    'GetComputeInstanceGroupInstanceTemplateBootDiskInitializeParamResult',
    'GetComputeInstanceGroupInstanceTemplateFilesystemResult',
    'GetComputeInstanceGroupInstanceTemplateMetadataOptionsResult',
    'GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult',
    'GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult',
    'GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult',
    'GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult',
    'GetComputeInstanceGroupInstanceTemplateNetworkSettingResult',
    'GetComputeInstanceGroupInstanceTemplatePlacementPolicyResult',
    'GetComputeInstanceGroupInstanceTemplateResourceResult',
    'GetComputeInstanceGroupInstanceTemplateSchedulingPolicyResult',
    'GetComputeInstanceGroupInstanceTemplateSecondaryDiskResult',
    'GetComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParamResult',
    'GetComputeInstanceGroupLoadBalancerResult',
    'GetComputeInstanceGroupLoadBalancerStateResult',
    'GetComputeInstanceGroupScalePolicyResult',
    'GetComputeInstanceGroupScalePolicyAutoScaleResult',
    'GetComputeInstanceGroupScalePolicyAutoScaleCustomRuleResult',
    'GetComputeInstanceGroupScalePolicyFixedScaleResult',
    'GetComputeInstanceGroupScalePolicyTestAutoScaleResult',
    'GetComputeInstanceGroupScalePolicyTestAutoScaleCustomRuleResult',
    'GetComputeInstanceLocalDiskResult',
    'GetComputeInstanceMetadataOptionsResult',
    'GetComputeInstanceNetworkInterfaceResult',
    'GetComputeInstanceNetworkInterfaceDnsRecordResult',
    'GetComputeInstanceNetworkInterfaceIpv6DnsRecordResult',
    'GetComputeInstanceNetworkInterfaceNatDnsRecordResult',
    'GetComputeInstancePlacementPolicyResult',
    'GetComputeInstancePlacementPolicyHostAffinityRuleResult',
    'GetComputeInstanceResourceResult',
    'GetComputeInstanceSchedulingPolicyResult',
    'GetComputeInstanceSecondaryDiskResult',
    'GetComputeSnapshotScheduleSchedulePolicyResult',
    'GetComputeSnapshotScheduleSnapshotSpecResult',
    'GetContainerRepositoryLifecyclePolicyRuleResult',
    'GetDataprocClusterClusterConfigResult',
    'GetDataprocClusterClusterConfigHadoopResult',
    'GetDataprocClusterClusterConfigHadoopInitializationActionResult',
    'GetDataprocClusterClusterConfigSubclusterSpecResult',
    'GetDataprocClusterClusterConfigSubclusterSpecAutoscalingConfigResult',
    'GetDataprocClusterClusterConfigSubclusterSpecResourceResult',
    'GetFunctionAsyncInvocationResult',
    'GetFunctionAsyncInvocationYmqFailureTargetResult',
    'GetFunctionAsyncInvocationYmqSuccessTargetResult',
    'GetFunctionConnectivityResult',
    'GetFunctionLogOptionResult',
    'GetFunctionScalingPolicyPolicyResult',
    'GetFunctionSecretResult',
    'GetFunctionStorageMountResult',
    'GetFunctionTriggerContainerResult',
    'GetFunctionTriggerContainerRegistryResult',
    'GetFunctionTriggerDataStreamResult',
    'GetFunctionTriggerDlqResult',
    'GetFunctionTriggerFunctionResult',
    'GetFunctionTriggerIotResult',
    'GetFunctionTriggerLogGroupResult',
    'GetFunctionTriggerLoggingResult',
    'GetFunctionTriggerMailResult',
    'GetFunctionTriggerMessageQueueResult',
    'GetFunctionTriggerObjectStorageResult',
    'GetFunctionTriggerTimerResult',
    'GetIamPolicyBindingResult',
    'GetIotCoreBrokerLogOptionResult',
    'GetIotCoreRegistryLogOptionResult',
    'GetKubernetesClusterKmsProviderResult',
    'GetKubernetesClusterMasterResult',
    'GetKubernetesClusterMasterMaintenancePolicyResult',
    'GetKubernetesClusterMasterMaintenancePolicyMaintenanceWindowResult',
    'GetKubernetesClusterMasterMasterLocationResult',
    'GetKubernetesClusterMasterMasterLoggingResult',
    'GetKubernetesClusterMasterRegionalResult',
    'GetKubernetesClusterMasterVersionInfoResult',
    'GetKubernetesClusterMasterZonalResult',
    'GetKubernetesClusterNetworkImplementationResult',
    'GetKubernetesClusterNetworkImplementationCiliumResult',
    'GetKubernetesNodeGroupAllocationPolicyResult',
    'GetKubernetesNodeGroupAllocationPolicyLocationResult',
    'GetKubernetesNodeGroupDeployPolicyResult',
    'GetKubernetesNodeGroupInstanceTemplateResult',
    'GetKubernetesNodeGroupInstanceTemplateBootDiskResult',
    'GetKubernetesNodeGroupInstanceTemplateContainerNetworkResult',
    'GetKubernetesNodeGroupInstanceTemplateContainerRuntimeResult',
    'GetKubernetesNodeGroupInstanceTemplateGpuSettingResult',
    'GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceResult',
    'GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordResult',
    'GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult',
    'GetKubernetesNodeGroupInstanceTemplatePlacementPolicyResult',
    'GetKubernetesNodeGroupInstanceTemplateResourceResult',
    'GetKubernetesNodeGroupInstanceTemplateSchedulingPolicyResult',
    'GetKubernetesNodeGroupMaintenancePolicyResult',
    'GetKubernetesNodeGroupMaintenancePolicyMaintenanceWindowResult',
    'GetKubernetesNodeGroupScalePolicyResult',
    'GetKubernetesNodeGroupScalePolicyAutoScaleResult',
    'GetKubernetesNodeGroupScalePolicyFixedScaleResult',
    'GetKubernetesNodeGroupVersionInfoResult',
    'GetLbNetworkLoadBalancerAttachedTargetGroupResult',
    'GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckResult',
    'GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionResult',
    'GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionResult',
    'GetLbNetworkLoadBalancerListenerResult',
    'GetLbNetworkLoadBalancerListenerExternalAddressSpecResult',
    'GetLbNetworkLoadBalancerListenerInternalAddressSpecResult',
    'GetLbTargetGroupTargetResult',
    'GetLoadtestingAgentComputeInstanceResult',
    'GetLoadtestingAgentComputeInstanceBootDiskResult',
    'GetLoadtestingAgentComputeInstanceBootDiskInitializeParamResult',
    'GetLoadtestingAgentComputeInstanceNetworkInterfaceResult',
    'GetLoadtestingAgentComputeInstanceResourceResult',
    'GetLockboxSecretCurrentVersionResult',
    'GetLockboxSecretVersionEntryResult',
    'GetMdbClickhouseClusterAccessResult',
    'GetMdbClickhouseClusterBackupWindowStartResult',
    'GetMdbClickhouseClusterClickhouseResult',
    'GetMdbClickhouseClusterClickhouseConfigResult',
    'GetMdbClickhouseClusterClickhouseConfigCompressionResult',
    'GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult',
    'GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternResult',
    'GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionResult',
    'GetMdbClickhouseClusterClickhouseConfigKafkaResult',
    'GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult',
    'GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsResult',
    'GetMdbClickhouseClusterClickhouseConfigMergeTreeResult',
    'GetMdbClickhouseClusterClickhouseConfigQueryCacheResult',
    'GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult',
    'GetMdbClickhouseClusterClickhouseConfigRabbitmqResult',
    'GetMdbClickhouseClusterClickhouseResourcesResult',
    'GetMdbClickhouseClusterCloudStorageResult',
    'GetMdbClickhouseClusterDatabaseResult',
    'GetMdbClickhouseClusterFormatSchemaResult',
    'GetMdbClickhouseClusterHostResult',
    'GetMdbClickhouseClusterMaintenanceWindowResult',
    'GetMdbClickhouseClusterMlModelResult',
    'GetMdbClickhouseClusterShardResult',
    'GetMdbClickhouseClusterShardGroupResult',
    'GetMdbClickhouseClusterShardResourcesResult',
    'GetMdbClickhouseClusterUserResult',
    'GetMdbClickhouseClusterUserPermissionResult',
    'GetMdbClickhouseClusterUserQuotaResult',
    'GetMdbClickhouseClusterUserSettingsResult',
    'GetMdbClickhouseClusterZookeeperResult',
    'GetMdbClickhouseClusterZookeeperResourcesResult',
    'GetMdbElasticsearchClusterConfigResult',
    'GetMdbElasticsearchClusterConfigDataNodeResult',
    'GetMdbElasticsearchClusterConfigDataNodeResourceResult',
    'GetMdbElasticsearchClusterConfigMasterNodeResult',
    'GetMdbElasticsearchClusterConfigMasterNodeResourceResult',
    'GetMdbElasticsearchClusterHostResult',
    'GetMdbElasticsearchClusterMaintenanceWindowResult',
    'GetMdbGreenplumClusterAccessResult',
    'GetMdbGreenplumClusterBackupWindowStartResult',
    'GetMdbGreenplumClusterCloudStorageResult',
    'GetMdbGreenplumClusterMaintenanceWindowResult',
    'GetMdbGreenplumClusterMasterHostResult',
    'GetMdbGreenplumClusterMasterSubclusterResult',
    'GetMdbGreenplumClusterMasterSubclusterResourceResult',
    'GetMdbGreenplumClusterPoolerConfigResult',
    'GetMdbGreenplumClusterPxfConfigResult',
    'GetMdbGreenplumClusterSegmentHostResult',
    'GetMdbGreenplumClusterSegmentSubclusterResult',
    'GetMdbGreenplumClusterSegmentSubclusterResourceResult',
    'GetMdbKafkaClusterAccessResult',
    'GetMdbKafkaClusterConfigResult',
    'GetMdbKafkaClusterConfigAccessResult',
    'GetMdbKafkaClusterConfigDiskSizeAutoscalingResult',
    'GetMdbKafkaClusterConfigKafkaResult',
    'GetMdbKafkaClusterConfigKafkaKafkaConfigResult',
    'GetMdbKafkaClusterConfigKafkaResourcesResult',
    'GetMdbKafkaClusterConfigZookeeperResult',
    'GetMdbKafkaClusterConfigZookeeperResourcesResult',
    'GetMdbKafkaClusterDiskSizeAutoscalingResult',
    'GetMdbKafkaClusterHostResult',
    'GetMdbKafkaClusterMaintenanceWindowResult',
    'GetMdbKafkaClusterTopicResult',
    'GetMdbKafkaClusterTopicTopicConfigResult',
    'GetMdbKafkaClusterUserResult',
    'GetMdbKafkaClusterUserPermissionResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterResult',
    'GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterResult',
    'GetMdbKafkaConnectorConnectorConfigS3SinkResult',
    'GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionResult',
    'GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3Result',
    'GetMdbKafkaTopicTopicConfigResult',
    'GetMdbKafkaUserPermissionResult',
    'GetMdbMongodbClusterClusterConfigResult',
    'GetMdbMongodbClusterClusterConfigAccessResult',
    'GetMdbMongodbClusterClusterConfigBackupWindowStartResult',
    'GetMdbMongodbClusterClusterConfigMongocfgResult',
    'GetMdbMongodbClusterClusterConfigMongocfgNetResult',
    'GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingResult',
    'GetMdbMongodbClusterClusterConfigMongocfgStorageResult',
    'GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerResult',
    'GetMdbMongodbClusterClusterConfigMongodResult',
    'GetMdbMongodbClusterClusterConfigMongodAuditLogResult',
    'GetMdbMongodbClusterClusterConfigMongodNetResult',
    'GetMdbMongodbClusterClusterConfigMongodOperationProfilingResult',
    'GetMdbMongodbClusterClusterConfigMongodSecurityResult',
    'GetMdbMongodbClusterClusterConfigMongodSecurityKmipResult',
    'GetMdbMongodbClusterClusterConfigMongodSetParameterResult',
    'GetMdbMongodbClusterClusterConfigMongodStorageResult',
    'GetMdbMongodbClusterClusterConfigMongodStorageJournalResult',
    'GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerResult',
    'GetMdbMongodbClusterClusterConfigMongosResult',
    'GetMdbMongodbClusterClusterConfigMongosNetResult',
    'GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsResult',
    'GetMdbMongodbClusterDatabaseResult',
    'GetMdbMongodbClusterDiskSizeAutoscalingMongocfgResult',
    'GetMdbMongodbClusterDiskSizeAutoscalingMongodResult',
    'GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraResult',
    'GetMdbMongodbClusterDiskSizeAutoscalingMongosResult',
    'GetMdbMongodbClusterHostResult',
    'GetMdbMongodbClusterHostHostParametersResult',
    'GetMdbMongodbClusterMaintenanceWindowResult',
    'GetMdbMongodbClusterResourcesResult',
    'GetMdbMongodbClusterResourcesMongocfgResult',
    'GetMdbMongodbClusterResourcesMongodResult',
    'GetMdbMongodbClusterResourcesMongoinfraResult',
    'GetMdbMongodbClusterResourcesMongosResult',
    'GetMdbMongodbClusterRestoreResult',
    'GetMdbMongodbClusterUserResult',
    'GetMdbMongodbClusterUserPermissionResult',
    'GetMdbMysqlClusterAccessResult',
    'GetMdbMysqlClusterBackupWindowStartResult',
    'GetMdbMysqlClusterDatabaseResult',
    'GetMdbMysqlClusterHostResult',
    'GetMdbMysqlClusterMaintenanceWindowResult',
    'GetMdbMysqlClusterPerformanceDiagnosticResult',
    'GetMdbMysqlClusterResourceResult',
    'GetMdbMysqlClusterUserResult',
    'GetMdbMysqlClusterUserConnectionLimitResult',
    'GetMdbMysqlClusterUserPermissionResult',
    'GetMdbMysqlUserConnectionLimitResult',
    'GetMdbMysqlUserPermissionResult',
    'GetMdbPostgresqlClusterConfigResult',
    'GetMdbPostgresqlClusterConfigAccessResult',
    'GetMdbPostgresqlClusterConfigBackupWindowStartResult',
    'GetMdbPostgresqlClusterConfigDiskSizeAutoscalingResult',
    'GetMdbPostgresqlClusterConfigPerformanceDiagnosticResult',
    'GetMdbPostgresqlClusterConfigPoolerConfigResult',
    'GetMdbPostgresqlClusterConfigResourceResult',
    'GetMdbPostgresqlClusterDatabaseResult',
    'GetMdbPostgresqlClusterDatabaseExtensionResult',
    'GetMdbPostgresqlClusterHostResult',
    'GetMdbPostgresqlClusterMaintenanceWindowResult',
    'GetMdbPostgresqlClusterUserResult',
    'GetMdbPostgresqlClusterUserPermissionResult',
    'GetMdbPostgresqlDatabaseExtensionResult',
    'GetMdbPostgresqlUserPermissionResult',
    'GetMdbRedisClusterConfigResult',
    'GetMdbRedisClusterDiskSizeAutoscalingResult',
    'GetMdbRedisClusterHostResult',
    'GetMdbRedisClusterMaintenanceWindowResult',
    'GetMdbRedisClusterResourceResult',
    'GetMdbSqlserverClusterBackupWindowStartResult',
    'GetMdbSqlserverClusterDatabaseResult',
    'GetMdbSqlserverClusterHostResult',
    'GetMdbSqlserverClusterResourceResult',
    'GetMdbSqlserverClusterUserResult',
    'GetMdbSqlserverClusterUserPermissionResult',
    'GetMonitoringDashboardParametrizationResult',
    'GetMonitoringDashboardParametrizationParameterResult',
    'GetMonitoringDashboardParametrizationParameterCustomResult',
    'GetMonitoringDashboardParametrizationParameterLabelValueResult',
    'GetMonitoringDashboardParametrizationParameterTextResult',
    'GetMonitoringDashboardWidgetResult',
    'GetMonitoringDashboardWidgetChartResult',
    'GetMonitoringDashboardWidgetChartNameHidingSettingResult',
    'GetMonitoringDashboardWidgetChartQueryResult',
    'GetMonitoringDashboardWidgetChartQueryDownsamplingResult',
    'GetMonitoringDashboardWidgetChartQueryTargetResult',
    'GetMonitoringDashboardWidgetChartSeriesOverrideResult',
    'GetMonitoringDashboardWidgetChartSeriesOverrideSettingResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftResult',
    'GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightResult',
    'GetMonitoringDashboardWidgetPositionResult',
    'GetMonitoringDashboardWidgetTextResult',
    'GetMonitoringDashboardWidgetTitleResult',
    'GetOrganizationmanagerGroupMemberResult',
    'GetOrganizationmanagerOsLoginSettingsSshCertificateSettingsResult',
    'GetOrganizationmanagerOsLoginSettingsUserSshKeySettingsResult',
    'GetOrganizationmanagerSamlFederationSecuritySettingResult',
    'GetServerlessContainerConnectivityResult',
    'GetServerlessContainerImageResult',
    'GetServerlessContainerLogOptionResult',
    'GetServerlessContainerSecretResult',
    'GetServerlessContainerStorageMountResult',
    'GetSmartcaptchaCaptchaOverrideVariantResult',
    'GetSmartcaptchaCaptchaSecurityRuleResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionHeaderResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionHeaderValueResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionHostResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionHostHostResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatchResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatchResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatchResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatchResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionUriResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionUriPathResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryResult',
    'GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryValueResult',
    'GetSwsSecurityProfileSecurityRuleResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthorityResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValueResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethodResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPathResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValueResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatchResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatchResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatchResult',
    'GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatchResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthorityResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValueResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethodResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPathResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValueResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatchResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatchResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatchResult',
    'GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatchResult',
    'GetVpcAddressDnsRecordResult',
    'GetVpcAddressExternalIpv4AddressResult',
    'GetVpcGatewaySharedEgressGatewayResult',
    'GetVpcRouteTableStaticRouteResult',
    'GetVpcSecurityGroupEgressResult',
    'GetVpcSecurityGroupIngressResult',
    'GetVpcSubnetDhcpOptionResult',
    'GetYdbDatabaseDedicatedLocationResult',
    'GetYdbDatabaseDedicatedLocationRegionResult',
    'GetYdbDatabaseDedicatedLocationZoneResult',
    'GetYdbDatabaseDedicatedScalePolicyResult',
    'GetYdbDatabaseDedicatedScalePolicyFixedScaleResult',
    'GetYdbDatabaseDedicatedStorageConfigResult',
    'GetYdbDatabaseServerlessServerlessDatabaseResult',
]

@pulumi.output_type
class AlbBackendGroupGrpcBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroupIds":
            suggest = "target_group_ids"
        elif key == "loadBalancingConfig":
            suggest = "load_balancing_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 target_group_ids: Sequence[str],
                 healthcheck: Optional['outputs.AlbBackendGroupGrpcBackendHealthcheck'] = None,
                 load_balancing_config: Optional['outputs.AlbBackendGroupGrpcBackendLoadBalancingConfig'] = None,
                 port: Optional[int] = None,
                 tls: Optional['outputs.AlbBackendGroupGrpcBackendTls'] = None,
                 weight: Optional[int] = None):
        """
        :param str name: Name of the backend.
        :param Sequence[str] target_group_ids: References target groups for the backend.
        :param 'AlbBackendGroupGrpcBackendHealthcheckArgs' healthcheck: Healthcheck specification that will be used by this backend. Structure is documented below.
        :param 'AlbBackendGroupGrpcBackendLoadBalancingConfigArgs' load_balancing_config: Load Balancing Config specification that will be used by this backend. Structure is documented below.
        :param int port: Port for incoming traffic.
        :param 'AlbBackendGroupGrpcBackendTlsArgs' tls: Tls specification that will be used by this backend. Structure is documented below.
        :param int weight: Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if load_balancing_config is not None:
            pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the backend.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Sequence[str]:
        """
        References target groups for the backend.
        """
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional['outputs.AlbBackendGroupGrpcBackendHealthcheck']:
        """
        Healthcheck specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> Optional['outputs.AlbBackendGroupGrpcBackendLoadBalancingConfig']:
        """
        Load Balancing Config specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for incoming traffic.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.AlbBackendGroupGrpcBackendTls']:
        """
        Tls specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class AlbBackendGroupGrpcBackendHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grpcHealthcheck":
            suggest = "grpc_healthcheck"
        elif key == "healthcheckPort":
            suggest = "healthcheck_port"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "httpHealthcheck":
            suggest = "http_healthcheck"
        elif key == "intervalJitterPercent":
            suggest = "interval_jitter_percent"
        elif key == "streamHealthcheck":
            suggest = "stream_healthcheck"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackendHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackendHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackendHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: str,
                 timeout: str,
                 grpc_healthcheck: Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck'] = None,
                 healthcheck_port: Optional[int] = None,
                 healthy_threshold: Optional[int] = None,
                 http_healthcheck: Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck'] = None,
                 interval_jitter_percent: Optional[float] = None,
                 stream_healthcheck: Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck'] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param str interval: Interval between health checks.
        :param str timeout: Time to wait for a health check response.
        :param 'AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckArgs' grpc_healthcheck: Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.
               
               > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        :param int healthcheck_port: Optional alternative port for health checking.
        :param int healthy_threshold: Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        :param 'AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckArgs' http_healthcheck: Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param float interval_jitter_percent: An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        :param 'AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckArgs' stream_healthcheck: Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param int unhealthy_threshold: Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "timeout", timeout)
        if grpc_healthcheck is not None:
            pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        if healthcheck_port is not None:
            pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_healthcheck is not None:
            pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        if interval_jitter_percent is not None:
            pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        if stream_healthcheck is not None:
            pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        Interval between health checks.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Time to wait for a health check response.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck']:
        """
        Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.

        > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        """
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> Optional[int]:
        """
        Optional alternative port for health checking.
        """
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck']:
        """
        Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> Optional[float]:
        """
        An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        """
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> Optional['outputs.AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck']:
        """
        Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: Optional[str] = None):
        """
        :param str service_name: Service name for grpc.health.v1.HealthCheckRequest message.
        """
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Service name for grpc.health.v1.HealthCheckRequest message.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AlbBackendGroupGrpcBackendHealthcheckHttpHealthcheck(dict):
    def __init__(__self__, *,
                 path: str,
                 host: Optional[str] = None,
                 http2: Optional[bool] = None):
        """
        :param str path: HTTP path.
        :param str host: "Host" HTTP header value.
        :param bool http2: If set, health checks will use HTTP2.
        """
        pulumi.set(__self__, "path", path)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        HTTP path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        "Host" HTTP header value.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> Optional[bool]:
        """
        If set, health checks will use HTTP2.
        """
        return pulumi.get(self, "http2")


@pulumi.output_type
class AlbBackendGroupGrpcBackendHealthcheckStreamHealthcheck(dict):
    def __init__(__self__, *,
                 receive: Optional[str] = None,
                 send: Optional[str] = None):
        """
        :param str receive: Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        :param str send: Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> Optional[str]:
        """
        Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> Optional[str]:
        """
        Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        return pulumi.get(self, "send")


@pulumi.output_type
class AlbBackendGroupGrpcBackendLoadBalancingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localityAwareRoutingPercent":
            suggest = "locality_aware_routing_percent"
        elif key == "panicThreshold":
            suggest = "panic_threshold"
        elif key == "strictLocality":
            suggest = "strict_locality"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackendLoadBalancingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackendLoadBalancingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackendLoadBalancingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 locality_aware_routing_percent: Optional[int] = None,
                 mode: Optional[str] = None,
                 panic_threshold: Optional[int] = None,
                 strict_locality: Optional[bool] = None):
        """
        :param int locality_aware_routing_percent: Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        :param str mode: Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        :param int panic_threshold: If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        :param bool strict_locality: If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        if locality_aware_routing_percent is not None:
            pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if panic_threshold is not None:
            pulumi.set(__self__, "panic_threshold", panic_threshold)
        if strict_locality is not None:
            pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> Optional[int]:
        """
        Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        """
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> Optional[int]:
        """
        If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        """
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> Optional[bool]:
        """
        If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class AlbBackendGroupGrpcBackendTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationContext":
            suggest = "validation_context"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackendTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackendTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackendTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sni: Optional[str] = None,
                 validation_context: Optional['outputs.AlbBackendGroupGrpcBackendTlsValidationContext'] = None):
        """
        :param str sni: [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
               * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
               * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.
               
               > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if validation_context is not None:
            pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        """
        [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
        * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
        * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.

        > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> Optional['outputs.AlbBackendGroupGrpcBackendTlsValidationContext']:
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class AlbBackendGroupGrpcBackendTlsValidationContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustedCaBytes":
            suggest = "trusted_ca_bytes"
        elif key == "trustedCaId":
            suggest = "trusted_ca_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupGrpcBackendTlsValidationContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupGrpcBackendTlsValidationContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupGrpcBackendTlsValidationContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trusted_ca_bytes: Optional[str] = None,
                 trusted_ca_id: Optional[str] = None):
        if trusted_ca_bytes is not None:
            pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        if trusted_ca_id is not None:
            pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class AlbBackendGroupHttpBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "loadBalancingConfig":
            suggest = "load_balancing_config"
        elif key == "storageBucket":
            suggest = "storage_bucket"
        elif key == "targetGroupIds":
            suggest = "target_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 healthcheck: Optional['outputs.AlbBackendGroupHttpBackendHealthcheck'] = None,
                 http2: Optional[bool] = None,
                 load_balancing_config: Optional['outputs.AlbBackendGroupHttpBackendLoadBalancingConfig'] = None,
                 port: Optional[int] = None,
                 storage_bucket: Optional[str] = None,
                 target_group_ids: Optional[Sequence[str]] = None,
                 tls: Optional['outputs.AlbBackendGroupHttpBackendTls'] = None,
                 weight: Optional[int] = None):
        """
        :param str name: Name of the backend.
        :param 'AlbBackendGroupHttpBackendHealthcheckArgs' healthcheck: Healthcheck specification that will be used by this backend. Structure is documented below.
        :param bool http2: Enables HTTP2 for upstream requests. If not set, HTTP 1.1 will be used by default.
        :param 'AlbBackendGroupHttpBackendLoadBalancingConfigArgs' load_balancing_config: Load Balancing Config specification that will be used by this backend. Structure is documented below.
        :param int port: Port for incoming traffic.
        :param Sequence[str] target_group_ids: References target groups for the backend.
        :param 'AlbBackendGroupHttpBackendTlsArgs' tls: Tls specification that will be used by this backend. Structure is documented below.
        :param int weight: Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        pulumi.set(__self__, "name", name)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)
        if load_balancing_config is not None:
            pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if storage_bucket is not None:
            pulumi.set(__self__, "storage_bucket", storage_bucket)
        if target_group_ids is not None:
            pulumi.set(__self__, "target_group_ids", target_group_ids)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the backend.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional['outputs.AlbBackendGroupHttpBackendHealthcheck']:
        """
        Healthcheck specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter
    def http2(self) -> Optional[bool]:
        """
        Enables HTTP2 for upstream requests. If not set, HTTP 1.1 will be used by default.
        """
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> Optional['outputs.AlbBackendGroupHttpBackendLoadBalancingConfig']:
        """
        Load Balancing Config specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for incoming traffic.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> Optional[str]:
        return pulumi.get(self, "storage_bucket")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Optional[Sequence[str]]:
        """
        References target groups for the backend.
        """
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.AlbBackendGroupHttpBackendTls']:
        """
        Tls specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class AlbBackendGroupHttpBackendHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grpcHealthcheck":
            suggest = "grpc_healthcheck"
        elif key == "healthcheckPort":
            suggest = "healthcheck_port"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "httpHealthcheck":
            suggest = "http_healthcheck"
        elif key == "intervalJitterPercent":
            suggest = "interval_jitter_percent"
        elif key == "streamHealthcheck":
            suggest = "stream_healthcheck"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackendHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackendHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackendHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: str,
                 timeout: str,
                 grpc_healthcheck: Optional['outputs.AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck'] = None,
                 healthcheck_port: Optional[int] = None,
                 healthy_threshold: Optional[int] = None,
                 http_healthcheck: Optional['outputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck'] = None,
                 interval_jitter_percent: Optional[float] = None,
                 stream_healthcheck: Optional['outputs.AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck'] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param str interval: Interval between health checks.
        :param str timeout: Time to wait for a health check response.
        :param 'AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckArgs' grpc_healthcheck: Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.
               
               > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        :param int healthcheck_port: Optional alternative port for health checking.
        :param int healthy_threshold: Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        :param 'AlbBackendGroupHttpBackendHealthcheckHttpHealthcheckArgs' http_healthcheck: Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param float interval_jitter_percent: An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        :param 'AlbBackendGroupHttpBackendHealthcheckStreamHealthcheckArgs' stream_healthcheck: Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param int unhealthy_threshold: Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "timeout", timeout)
        if grpc_healthcheck is not None:
            pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        if healthcheck_port is not None:
            pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_healthcheck is not None:
            pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        if interval_jitter_percent is not None:
            pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        if stream_healthcheck is not None:
            pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        Interval between health checks.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Time to wait for a health check response.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> Optional['outputs.AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck']:
        """
        Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.

        > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        """
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> Optional[int]:
        """
        Optional alternative port for health checking.
        """
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> Optional['outputs.AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck']:
        """
        Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> Optional[float]:
        """
        An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        """
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> Optional['outputs.AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck']:
        """
        Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: Optional[str] = None):
        """
        :param str service_name: Service name for grpc.health.v1.HealthCheckRequest message.
        """
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Service name for grpc.health.v1.HealthCheckRequest message.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AlbBackendGroupHttpBackendHealthcheckHttpHealthcheck(dict):
    def __init__(__self__, *,
                 path: str,
                 host: Optional[str] = None,
                 http2: Optional[bool] = None):
        """
        :param str path: HTTP path.
        :param str host: "Host" HTTP header value.
        :param bool http2: If set, health checks will use HTTP2.
        """
        pulumi.set(__self__, "path", path)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        HTTP path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        "Host" HTTP header value.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> Optional[bool]:
        """
        If set, health checks will use HTTP2.
        """
        return pulumi.get(self, "http2")


@pulumi.output_type
class AlbBackendGroupHttpBackendHealthcheckStreamHealthcheck(dict):
    def __init__(__self__, *,
                 receive: Optional[str] = None,
                 send: Optional[str] = None):
        """
        :param str receive: Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        :param str send: Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> Optional[str]:
        """
        Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> Optional[str]:
        """
        Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        return pulumi.get(self, "send")


@pulumi.output_type
class AlbBackendGroupHttpBackendLoadBalancingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localityAwareRoutingPercent":
            suggest = "locality_aware_routing_percent"
        elif key == "panicThreshold":
            suggest = "panic_threshold"
        elif key == "strictLocality":
            suggest = "strict_locality"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackendLoadBalancingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackendLoadBalancingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackendLoadBalancingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 locality_aware_routing_percent: Optional[int] = None,
                 mode: Optional[str] = None,
                 panic_threshold: Optional[int] = None,
                 strict_locality: Optional[bool] = None):
        """
        :param int locality_aware_routing_percent: Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        :param str mode: Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        :param int panic_threshold: If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        :param bool strict_locality: If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        if locality_aware_routing_percent is not None:
            pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if panic_threshold is not None:
            pulumi.set(__self__, "panic_threshold", panic_threshold)
        if strict_locality is not None:
            pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> Optional[int]:
        """
        Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        """
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> Optional[int]:
        """
        If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        """
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> Optional[bool]:
        """
        If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class AlbBackendGroupHttpBackendTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationContext":
            suggest = "validation_context"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackendTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackendTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackendTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sni: Optional[str] = None,
                 validation_context: Optional['outputs.AlbBackendGroupHttpBackendTlsValidationContext'] = None):
        """
        :param str sni: [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
               * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
               * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.
               
               > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if validation_context is not None:
            pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        """
        [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
        * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
        * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.

        > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> Optional['outputs.AlbBackendGroupHttpBackendTlsValidationContext']:
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class AlbBackendGroupHttpBackendTlsValidationContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustedCaBytes":
            suggest = "trusted_ca_bytes"
        elif key == "trustedCaId":
            suggest = "trusted_ca_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupHttpBackendTlsValidationContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupHttpBackendTlsValidationContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupHttpBackendTlsValidationContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trusted_ca_bytes: Optional[str] = None,
                 trusted_ca_id: Optional[str] = None):
        if trusted_ca_bytes is not None:
            pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        if trusted_ca_id is not None:
            pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class AlbBackendGroupSessionAffinity(dict):
    def __init__(__self__, *,
                 connection: Optional['outputs.AlbBackendGroupSessionAffinityConnection'] = None,
                 cookie: Optional['outputs.AlbBackendGroupSessionAffinityCookie'] = None,
                 header: Optional['outputs.AlbBackendGroupSessionAffinityHeader'] = None):
        """
        :param 'AlbBackendGroupSessionAffinityConnectionArgs' connection: Requests received from the same IP are combined into a session. Stream backend groups only support session affinity by client IP address. Structure is documented below.
        :param 'AlbBackendGroupSessionAffinityCookieArgs' cookie: Requests with the same cookie value and the specified file name are combined into a session. Allowed only for HTTP and gRPC backend groups. Structure is documented below.
        :param 'AlbBackendGroupSessionAffinityHeaderArgs' header: Requests with the same value of the specified HTTP header, such as with user authentication data, are combined into a session. Allowed only for HTTP and gRPC backend groups. Structure is documented below.
               
               > **NOTE:** Only one type( `connection` or `cookie` or `header` ) of session affinity should be specified.
        """
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if cookie is not None:
            pulumi.set(__self__, "cookie", cookie)
        if header is not None:
            pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.AlbBackendGroupSessionAffinityConnection']:
        """
        Requests received from the same IP are combined into a session. Stream backend groups only support session affinity by client IP address. Structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def cookie(self) -> Optional['outputs.AlbBackendGroupSessionAffinityCookie']:
        """
        Requests with the same cookie value and the specified file name are combined into a session. Allowed only for HTTP and gRPC backend groups. Structure is documented below.
        """
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.AlbBackendGroupSessionAffinityHeader']:
        """
        Requests with the same value of the specified HTTP header, such as with user authentication data, are combined into a session. Allowed only for HTTP and gRPC backend groups. Structure is documented below.

        > **NOTE:** Only one type( `connection` or `cookie` or `header` ) of session affinity should be specified.
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class AlbBackendGroupSessionAffinityConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupSessionAffinityConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupSessionAffinityConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupSessionAffinityConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source_ip: Optional[bool] = None):
        """
        :param bool source_ip: Source IP address to use with affinity.
        """
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional[bool]:
        """
        Source IP address to use with affinity.
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class AlbBackendGroupSessionAffinityCookie(dict):
    def __init__(__self__, *,
                 name: str,
                 ttl: Optional[str] = None):
        """
        :param str name: Name of the HTTP cookie to use with affinity.
        :param str ttl: TTL for the cookie (if not set, session cookie will be used)
        """
        pulumi.set(__self__, "name", name)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the HTTP cookie to use with affinity.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[str]:
        """
        TTL for the cookie (if not set, session cookie will be used)
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class AlbBackendGroupSessionAffinityHeader(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "headerName":
            suggest = "header_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupSessionAffinityHeader. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupSessionAffinityHeader.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupSessionAffinityHeader.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 header_name: str):
        """
        :param str header_name: The name of the request header that will be used with affinity.
        """
        pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        The name of the request header that will be used with affinity.
        """
        return pulumi.get(self, "header_name")


@pulumi.output_type
class AlbBackendGroupStreamBackend(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroupIds":
            suggest = "target_group_ids"
        elif key == "enableProxyProtocol":
            suggest = "enable_proxy_protocol"
        elif key == "loadBalancingConfig":
            suggest = "load_balancing_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackend. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackend.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackend.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 target_group_ids: Sequence[str],
                 enable_proxy_protocol: Optional[bool] = None,
                 healthcheck: Optional['outputs.AlbBackendGroupStreamBackendHealthcheck'] = None,
                 load_balancing_config: Optional['outputs.AlbBackendGroupStreamBackendLoadBalancingConfig'] = None,
                 port: Optional[int] = None,
                 tls: Optional['outputs.AlbBackendGroupStreamBackendTls'] = None,
                 weight: Optional[int] = None):
        """
        :param str name: Name of the backend.
        :param Sequence[str] target_group_ids: References target groups for the backend.
        :param 'AlbBackendGroupStreamBackendHealthcheckArgs' healthcheck: Healthcheck specification that will be used by this backend. Structure is documented below.
        :param 'AlbBackendGroupStreamBackendLoadBalancingConfigArgs' load_balancing_config: Load Balancing Config specification that will be used by this backend. Structure is documented below.
        :param int port: Port for incoming traffic.
        :param 'AlbBackendGroupStreamBackendTlsArgs' tls: Tls specification that will be used by this backend. Structure is documented below.
        :param int weight: Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        if enable_proxy_protocol is not None:
            pulumi.set(__self__, "enable_proxy_protocol", enable_proxy_protocol)
        if healthcheck is not None:
            pulumi.set(__self__, "healthcheck", healthcheck)
        if load_balancing_config is not None:
            pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the backend.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Sequence[str]:
        """
        References target groups for the backend.
        """
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter(name="enableProxyProtocol")
    def enable_proxy_protocol(self) -> Optional[bool]:
        return pulumi.get(self, "enable_proxy_protocol")

    @property
    @pulumi.getter
    def healthcheck(self) -> Optional['outputs.AlbBackendGroupStreamBackendHealthcheck']:
        """
        Healthcheck specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> Optional['outputs.AlbBackendGroupStreamBackendLoadBalancingConfig']:
        """
        Load Balancing Config specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port for incoming traffic.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.AlbBackendGroupStreamBackendTls']:
        """
        Tls specification that will be used by this backend. Structure is documented below.
        """
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        Weight of the backend. Traffic will be split between backends of the same BackendGroup according to their weights.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class AlbBackendGroupStreamBackendHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grpcHealthcheck":
            suggest = "grpc_healthcheck"
        elif key == "healthcheckPort":
            suggest = "healthcheck_port"
        elif key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "httpHealthcheck":
            suggest = "http_healthcheck"
        elif key == "intervalJitterPercent":
            suggest = "interval_jitter_percent"
        elif key == "streamHealthcheck":
            suggest = "stream_healthcheck"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackendHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackendHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackendHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval: str,
                 timeout: str,
                 grpc_healthcheck: Optional['outputs.AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck'] = None,
                 healthcheck_port: Optional[int] = None,
                 healthy_threshold: Optional[int] = None,
                 http_healthcheck: Optional['outputs.AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck'] = None,
                 interval_jitter_percent: Optional[float] = None,
                 stream_healthcheck: Optional['outputs.AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck'] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param str interval: Interval between health checks.
        :param str timeout: Time to wait for a health check response.
        :param 'AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckArgs' grpc_healthcheck: Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.
               
               > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        :param int healthcheck_port: Optional alternative port for health checking.
        :param int healthy_threshold: Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        :param 'AlbBackendGroupStreamBackendHealthcheckHttpHealthcheckArgs' http_healthcheck: Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param float interval_jitter_percent: An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        :param 'AlbBackendGroupStreamBackendHealthcheckStreamHealthcheckArgs' stream_healthcheck: Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        :param int unhealthy_threshold: Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "timeout", timeout)
        if grpc_healthcheck is not None:
            pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        if healthcheck_port is not None:
            pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_healthcheck is not None:
            pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        if interval_jitter_percent is not None:
            pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        if stream_healthcheck is not None:
            pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def interval(self) -> str:
        """
        Interval between health checks.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        """
        Time to wait for a health check response.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> Optional['outputs.AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck']:
        """
        Grpc Healthcheck specification that will be used by this healthcheck. Structure is documented below.

        > **NOTE:** Only one of `stream_healthcheck` or `http_healthcheck` or `grpc_healthcheck` should be specified.
        """
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> Optional[int]:
        """
        Optional alternative port for health checking.
        """
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive successful health checks required to promote endpoint into the healthy state. 0 means 1. Note that during startup, only a single successful health check is required to mark a host healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> Optional['outputs.AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck']:
        """
        Http Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> Optional[float]:
        """
        An optional jitter amount as a percentage of interval. If specified, during every interval value of (interval_ms * interval_jitter_percent / 100) will be added to the wait time.
        """
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> Optional['outputs.AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck']:
        """
        Stream Healthcheck specification that will be used by this healthcheck. Structure is documented below.
        """
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        Number of consecutive failed health checks required to demote endpoint into the unhealthy state. 0 means 1. Note that for HTTP health checks, a single 503 immediately makes endpoint unhealthy.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceName":
            suggest = "service_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackendHealthcheckGrpcHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 service_name: Optional[str] = None):
        """
        :param str service_name: Service name for grpc.health.v1.HealthCheckRequest message.
        """
        if service_name is not None:
            pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> Optional[str]:
        """
        Service name for grpc.health.v1.HealthCheckRequest message.
        """
        return pulumi.get(self, "service_name")


@pulumi.output_type
class AlbBackendGroupStreamBackendHealthcheckHttpHealthcheck(dict):
    def __init__(__self__, *,
                 path: str,
                 host: Optional[str] = None,
                 http2: Optional[bool] = None):
        """
        :param str path: HTTP path.
        :param str host: "Host" HTTP header value.
        :param bool http2: If set, health checks will use HTTP2.
        """
        pulumi.set(__self__, "path", path)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if http2 is not None:
            pulumi.set(__self__, "http2", http2)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        HTTP path.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def host(self) -> Optional[str]:
        """
        "Host" HTTP header value.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> Optional[bool]:
        """
        If set, health checks will use HTTP2.
        """
        return pulumi.get(self, "http2")


@pulumi.output_type
class AlbBackendGroupStreamBackendHealthcheckStreamHealthcheck(dict):
    def __init__(__self__, *,
                 receive: Optional[str] = None,
                 send: Optional[str] = None):
        """
        :param str receive: Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        :param str send: Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        if receive is not None:
            pulumi.set(__self__, "receive", receive)
        if send is not None:
            pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> Optional[str]:
        """
        Data that must be contained in the messages received from targets for a successful health check. If not specified, no messages are expected from targets, and those that are received are not checked.
        """
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> Optional[str]:
        """
        Message sent to targets during TCP data transfer.  If not specified, no data is sent to the target.
        """
        return pulumi.get(self, "send")


@pulumi.output_type
class AlbBackendGroupStreamBackendLoadBalancingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "localityAwareRoutingPercent":
            suggest = "locality_aware_routing_percent"
        elif key == "panicThreshold":
            suggest = "panic_threshold"
        elif key == "strictLocality":
            suggest = "strict_locality"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackendLoadBalancingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackendLoadBalancingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackendLoadBalancingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 locality_aware_routing_percent: Optional[int] = None,
                 mode: Optional[str] = None,
                 panic_threshold: Optional[int] = None,
                 strict_locality: Optional[bool] = None):
        """
        :param int locality_aware_routing_percent: Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        :param str mode: Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        :param int panic_threshold: If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        :param bool strict_locality: If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        if locality_aware_routing_percent is not None:
            pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if panic_threshold is not None:
            pulumi.set(__self__, "panic_threshold", panic_threshold)
        if strict_locality is not None:
            pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> Optional[int]:
        """
        Percent of traffic to be sent to the same availability zone. The rest will be equally divided between other zones.
        """
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Load balancing mode for the backend. Possible values: "ROUND_ROBIN", "RANDOM", "LEAST_REQUEST", "MAGLEV_HASH".
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> Optional[int]:
        """
        If percentage of healthy hosts in the backend is lower than panic_threshold, traffic will be routed to all backends no matter what the health status is. This helps to avoid healthy backends overloading  when everything is bad. Zero means no panic threshold.
        """
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> Optional[bool]:
        """
        If set, will route requests only to the same availability zone. Balancer won't know about endpoints in other zones.
        """
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class AlbBackendGroupStreamBackendTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "validationContext":
            suggest = "validation_context"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackendTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackendTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackendTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sni: Optional[str] = None,
                 validation_context: Optional['outputs.AlbBackendGroupStreamBackendTlsValidationContext'] = None):
        """
        :param str sni: [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
               * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
               * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.
               
               > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        if sni is not None:
            pulumi.set(__self__, "sni", sni)
        if validation_context is not None:
            pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> Optional[str]:
        """
        [SNI](https://en.wikipedia.org/wiki/Server_Name_Indication) string for TLS connections.
        * `validation_context.0.trusted_ca_id` - (Optional) Trusted CA certificate ID in the Certificate Manager.
        * `validation_context.0.trusted_ca_bytes` - (Optional) PEM-encoded trusted CA certificate chain.

        > **NOTE:** Only one of `validation_context.0.trusted_ca_id` or `validation_context.0.trusted_ca_bytes` should be specified.
        """
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> Optional['outputs.AlbBackendGroupStreamBackendTlsValidationContext']:
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class AlbBackendGroupStreamBackendTlsValidationContext(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "trustedCaBytes":
            suggest = "trusted_ca_bytes"
        elif key == "trustedCaId":
            suggest = "trusted_ca_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbBackendGroupStreamBackendTlsValidationContext. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbBackendGroupStreamBackendTlsValidationContext.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbBackendGroupStreamBackendTlsValidationContext.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 trusted_ca_bytes: Optional[str] = None,
                 trusted_ca_id: Optional[str] = None):
        if trusted_ca_bytes is not None:
            pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        if trusted_ca_id is not None:
            pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> Optional[str]:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class AlbHttpRouterRouteOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityProfileId":
            suggest = "security_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbHttpRouterRouteOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbHttpRouterRouteOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbHttpRouterRouteOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rbac: Optional['outputs.AlbHttpRouterRouteOptionsRbac'] = None,
                 security_profile_id: Optional[str] = None):
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbac(self) -> Optional['outputs.AlbHttpRouterRouteOptionsRbac']:
        return pulumi.get(self, "rbac")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class AlbHttpRouterRouteOptionsRbac(dict):
    def __init__(__self__, *,
                 principals: Sequence['outputs.AlbHttpRouterRouteOptionsRbacPrincipal'],
                 action: Optional[str] = None):
        pulumi.set(__self__, "principals", principals)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.AlbHttpRouterRouteOptionsRbacPrincipal']:
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")


@pulumi.output_type
class AlbHttpRouterRouteOptionsRbacPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "andPrincipals":
            suggest = "and_principals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbHttpRouterRouteOptionsRbacPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbHttpRouterRouteOptionsRbacPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbHttpRouterRouteOptionsRbacPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_principals: Sequence['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteIp":
            suggest = "remote_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any: Optional[bool] = None,
                 header: Optional['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader'] = None,
                 remote_ip: Optional[str] = None):
        if any is not None:
            pulumi.set(__self__, "any", any)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> Optional[bool]:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader']:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[str]:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue'] = None):
        """
        :param str name: Name of the HTTP Router. Provided by the client when the HTTP Router is created.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the HTTP Router. Provided by the client when the HTTP Router is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlbHttpRouterRouteOptionsRbacPrincipalAndPrincipalHeaderValue(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        return pulumi.get(self, "regex")


@pulumi.output_type
class AlbLoadBalancerAllocationPolicy(dict):
    def __init__(__self__, *,
                 locations: Sequence['outputs.AlbLoadBalancerAllocationPolicyLocation']):
        """
        :param Sequence['AlbLoadBalancerAllocationPolicyLocationArgs'] locations: Unique set of locations. The structure is documented below.
        """
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.AlbLoadBalancerAllocationPolicyLocation']:
        """
        Unique set of locations. The structure is documented below.
        """
        return pulumi.get(self, "locations")


@pulumi.output_type
class AlbLoadBalancerAllocationPolicyLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "zoneId":
            suggest = "zone_id"
        elif key == "disableTraffic":
            suggest = "disable_traffic"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerAllocationPolicyLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerAllocationPolicyLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerAllocationPolicyLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 zone_id: str,
                 disable_traffic: Optional[bool] = None):
        """
        :param str subnet_id: ID of the subnet that location is located at.
        :param str zone_id: ID of the zone that location is located at.
        :param bool disable_traffic: If set, will disable all L7 instances in the zone for request handling.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if disable_traffic is not None:
            pulumi.set(__self__, "disable_traffic", disable_traffic)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet that location is located at.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        ID of the zone that location is located at.
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="disableTraffic")
    def disable_traffic(self) -> Optional[bool]:
        """
        If set, will disable all L7 instances in the zone for request handling.
        """
        return pulumi.get(self, "disable_traffic")


@pulumi.output_type
class AlbLoadBalancerListener(dict):
    def __init__(__self__, *,
                 name: str,
                 endpoints: Optional[Sequence['outputs.AlbLoadBalancerListenerEndpoint']] = None,
                 http: Optional['outputs.AlbLoadBalancerListenerHttp'] = None,
                 stream: Optional['outputs.AlbLoadBalancerListenerStream'] = None,
                 tls: Optional['outputs.AlbLoadBalancerListenerTls'] = None):
        """
        :param str name: name of the listener.
        :param Sequence['AlbLoadBalancerListenerEndpointArgs'] endpoints: Network endpoints (addresses and ports) of the listener. The structure is documented below.
        :param 'AlbLoadBalancerListenerHttpArgs' http: HTTP listener resource. The structure is documented below.
        :param 'AlbLoadBalancerListenerStreamArgs' stream: Stream listener resource. The structure is documented below.
        :param 'AlbLoadBalancerListenerTlsArgs' tls: TLS listener resource. The structure is documented below.
               
               > **NOTE:** Exactly one listener type: `http` or `tls` or `stream` should be specified.
        """
        pulumi.set(__self__, "name", name)
        if endpoints is not None:
            pulumi.set(__self__, "endpoints", endpoints)
        if http is not None:
            pulumi.set(__self__, "http", http)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the listener.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def endpoints(self) -> Optional[Sequence['outputs.AlbLoadBalancerListenerEndpoint']]:
        """
        Network endpoints (addresses and ports) of the listener. The structure is documented below.
        """
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def http(self) -> Optional['outputs.AlbLoadBalancerListenerHttp']:
        """
        HTTP listener resource. The structure is documented below.
        """
        return pulumi.get(self, "http")

    @property
    @pulumi.getter
    def stream(self) -> Optional['outputs.AlbLoadBalancerListenerStream']:
        """
        Stream listener resource. The structure is documented below.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def tls(self) -> Optional['outputs.AlbLoadBalancerListenerTls']:
        """
        TLS listener resource. The structure is documented below.

        > **NOTE:** Exactly one listener type: `http` or `tls` or `stream` should be specified.
        """
        return pulumi.get(self, "tls")


@pulumi.output_type
class AlbLoadBalancerListenerEndpoint(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.AlbLoadBalancerListenerEndpointAddress'],
                 ports: Sequence[int]):
        """
        :param Sequence['AlbLoadBalancerListenerEndpointAddressArgs'] addresses: One or more addresses to listen on. The structure is documented below.
        :param Sequence[int] ports: One or more ports to listen on.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.AlbLoadBalancerListenerEndpointAddress']:
        """
        One or more addresses to listen on. The structure is documented below.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[int]:
        """
        One or more ports to listen on.
        """
        return pulumi.get(self, "ports")


@pulumi.output_type
class AlbLoadBalancerListenerEndpointAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalIpv4Address":
            suggest = "external_ipv4_address"
        elif key == "externalIpv6Address":
            suggest = "external_ipv6_address"
        elif key == "internalIpv4Address":
            suggest = "internal_ipv4_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerEndpointAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerEndpointAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerEndpointAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 external_ipv4_address: Optional['outputs.AlbLoadBalancerListenerEndpointAddressExternalIpv4Address'] = None,
                 external_ipv6_address: Optional['outputs.AlbLoadBalancerListenerEndpointAddressExternalIpv6Address'] = None,
                 internal_ipv4_address: Optional['outputs.AlbLoadBalancerListenerEndpointAddressInternalIpv4Address'] = None):
        """
        :param 'AlbLoadBalancerListenerEndpointAddressExternalIpv4AddressArgs' external_ipv4_address: External IPv4 address. The structure is documented below.
        :param 'AlbLoadBalancerListenerEndpointAddressExternalIpv6AddressArgs' external_ipv6_address: External IPv6 address. The structure is documented below.
               
               > **NOTE:** Exactly one type of addresses `external_ipv4_address` or `internal_ipv4_address` or `external_ipv6_address`
               should be specified.
        :param 'AlbLoadBalancerListenerEndpointAddressInternalIpv4AddressArgs' internal_ipv4_address: Internal IPv4 address. The structure is documented below.
        """
        if external_ipv4_address is not None:
            pulumi.set(__self__, "external_ipv4_address", external_ipv4_address)
        if external_ipv6_address is not None:
            pulumi.set(__self__, "external_ipv6_address", external_ipv6_address)
        if internal_ipv4_address is not None:
            pulumi.set(__self__, "internal_ipv4_address", internal_ipv4_address)

    @property
    @pulumi.getter(name="externalIpv4Address")
    def external_ipv4_address(self) -> Optional['outputs.AlbLoadBalancerListenerEndpointAddressExternalIpv4Address']:
        """
        External IPv4 address. The structure is documented below.
        """
        return pulumi.get(self, "external_ipv4_address")

    @property
    @pulumi.getter(name="externalIpv6Address")
    def external_ipv6_address(self) -> Optional['outputs.AlbLoadBalancerListenerEndpointAddressExternalIpv6Address']:
        """
        External IPv6 address. The structure is documented below.

        > **NOTE:** Exactly one type of addresses `external_ipv4_address` or `internal_ipv4_address` or `external_ipv6_address`
        should be specified.
        """
        return pulumi.get(self, "external_ipv6_address")

    @property
    @pulumi.getter(name="internalIpv4Address")
    def internal_ipv4_address(self) -> Optional['outputs.AlbLoadBalancerListenerEndpointAddressInternalIpv4Address']:
        """
        Internal IPv4 address. The structure is documented below.
        """
        return pulumi.get(self, "internal_ipv4_address")


@pulumi.output_type
class AlbLoadBalancerListenerEndpointAddressExternalIpv4Address(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Provided by the client or computed automatically.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Provided by the client or computed automatically.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class AlbLoadBalancerListenerEndpointAddressExternalIpv6Address(dict):
    def __init__(__self__, *,
                 address: Optional[str] = None):
        """
        :param str address: Provided by the client or computed automatically.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Provided by the client or computed automatically.
        """
        return pulumi.get(self, "address")


@pulumi.output_type
class AlbLoadBalancerListenerEndpointAddressInternalIpv4Address(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerEndpointAddressInternalIpv4Address. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerEndpointAddressInternalIpv4Address.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerEndpointAddressInternalIpv4Address.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str address: Provided by the client or computed automatically.
        :param str subnet_id: Provided by the client or computed automatically.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Provided by the client or computed automatically.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Provided by the client or computed automatically.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AlbLoadBalancerListenerHttp(dict):
    def __init__(__self__, *,
                 handler: Optional['outputs.AlbLoadBalancerListenerHttpHandler'] = None,
                 redirects: Optional['outputs.AlbLoadBalancerListenerHttpRedirects'] = None):
        """
        :param 'AlbLoadBalancerListenerHttpHandlerArgs' handler: HTTP handler that sets plaintext HTTP router. The structure is documented below.
        :param 'AlbLoadBalancerListenerHttpRedirectsArgs' redirects: Shortcut for adding http > https redirects. The structure is documented below.
               
               > **NOTE:** Only one type of fields `handler` or `redirects` should be specified.
        """
        if handler is not None:
            pulumi.set(__self__, "handler", handler)
        if redirects is not None:
            pulumi.set(__self__, "redirects", redirects)

    @property
    @pulumi.getter
    def handler(self) -> Optional['outputs.AlbLoadBalancerListenerHttpHandler']:
        """
        HTTP handler that sets plaintext HTTP router. The structure is documented below.
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def redirects(self) -> Optional['outputs.AlbLoadBalancerListenerHttpRedirects']:
        """
        Shortcut for adding http > https redirects. The structure is documented below.

        > **NOTE:** Only one type of fields `handler` or `redirects` should be specified.
        """
        return pulumi.get(self, "redirects")


@pulumi.output_type
class AlbLoadBalancerListenerHttpHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowHttp10":
            suggest = "allow_http10"
        elif key == "http2Options":
            suggest = "http2_options"
        elif key == "httpRouterId":
            suggest = "http_router_id"
        elif key == "rewriteRequestId":
            suggest = "rewrite_request_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerHttpHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerHttpHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerHttpHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_http10: Optional[bool] = None,
                 http2_options: Optional['outputs.AlbLoadBalancerListenerHttpHandlerHttp2Options'] = None,
                 http_router_id: Optional[str] = None,
                 rewrite_request_id: Optional[bool] = None):
        """
        :param bool allow_http10: If set, will enable only HTTP1 protocol with HTTP1.0 support.
               
               > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        :param 'AlbLoadBalancerListenerHttpHandlerHttp2OptionsArgs' http2_options: If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        :param str http_router_id: HTTP router id.
        :param bool rewrite_request_id: When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)
        if http2_options is not None:
            pulumi.set(__self__, "http2_options", http2_options)
        if http_router_id is not None:
            pulumi.set(__self__, "http_router_id", http_router_id)
        if rewrite_request_id is not None:
            pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        """
        If set, will enable only HTTP1 protocol with HTTP1.0 support.

        > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        """
        return pulumi.get(self, "allow_http10")

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Optional['outputs.AlbLoadBalancerListenerHttpHandlerHttp2Options']:
        """
        If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        """
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> Optional[str]:
        """
        HTTP router id.
        """
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> Optional[bool]:
        """
        When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        return pulumi.get(self, "rewrite_request_id")


@pulumi.output_type
class AlbLoadBalancerListenerHttpHandlerHttp2Options(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentStreams":
            suggest = "max_concurrent_streams"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerHttpHandlerHttp2Options. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerHttpHandlerHttp2Options.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerHttpHandlerHttp2Options.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent_streams: Optional[int] = None):
        """
        :param int max_concurrent_streams: Maximum number of concurrent streams.
        """
        if max_concurrent_streams is not None:
            pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> Optional[int]:
        """
        Maximum number of concurrent streams.
        """
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class AlbLoadBalancerListenerHttpRedirects(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpToHttps":
            suggest = "http_to_https"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerHttpRedirects. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerHttpRedirects.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerHttpRedirects.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_to_https: Optional[bool] = None):
        """
        :param bool http_to_https: If set redirects all unencrypted HTTP requests to the same URI with scheme changed to `https`.
        """
        if http_to_https is not None:
            pulumi.set(__self__, "http_to_https", http_to_https)

    @property
    @pulumi.getter(name="httpToHttps")
    def http_to_https(self) -> Optional[bool]:
        """
        If set redirects all unencrypted HTTP requests to the same URI with scheme changed to `https`.
        """
        return pulumi.get(self, "http_to_https")


@pulumi.output_type
class AlbLoadBalancerListenerStream(dict):
    def __init__(__self__, *,
                 handler: Optional['outputs.AlbLoadBalancerListenerStreamHandler'] = None):
        """
        :param 'AlbLoadBalancerListenerStreamHandlerArgs' handler: Stream handler that sets plaintext Stream backend group. The structure is documented below.
        """
        if handler is not None:
            pulumi.set(__self__, "handler", handler)

    @property
    @pulumi.getter
    def handler(self) -> Optional['outputs.AlbLoadBalancerListenerStreamHandler']:
        """
        Stream handler that sets plaintext Stream backend group. The structure is documented below.
        """
        return pulumi.get(self, "handler")


@pulumi.output_type
class AlbLoadBalancerListenerStreamHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendGroupId":
            suggest = "backend_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerStreamHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerStreamHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerStreamHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_group_id: Optional[str] = None):
        """
        :param str backend_group_id: Backend group id.
        """
        if backend_group_id is not None:
            pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> Optional[str]:
        """
        Backend group id.
        """
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class AlbLoadBalancerListenerTls(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultHandler":
            suggest = "default_handler"
        elif key == "sniHandlers":
            suggest = "sni_handlers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTls. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTls.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTls.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_handler: 'outputs.AlbLoadBalancerListenerTlsDefaultHandler',
                 sni_handlers: Optional[Sequence['outputs.AlbLoadBalancerListenerTlsSniHandler']] = None):
        """
        :param 'AlbLoadBalancerListenerTlsDefaultHandlerArgs' default_handler: TLS handler resource. The structure is documented below.
        :param Sequence['AlbLoadBalancerListenerTlsSniHandlerArgs'] sni_handlers: SNI match resource. The structure is documented below.
        """
        pulumi.set(__self__, "default_handler", default_handler)
        if sni_handlers is not None:
            pulumi.set(__self__, "sni_handlers", sni_handlers)

    @property
    @pulumi.getter(name="defaultHandler")
    def default_handler(self) -> 'outputs.AlbLoadBalancerListenerTlsDefaultHandler':
        """
        TLS handler resource. The structure is documented below.
        """
        return pulumi.get(self, "default_handler")

    @property
    @pulumi.getter(name="sniHandlers")
    def sni_handlers(self) -> Optional[Sequence['outputs.AlbLoadBalancerListenerTlsSniHandler']]:
        """
        SNI match resource. The structure is documented below.
        """
        return pulumi.get(self, "sni_handlers")


@pulumi.output_type
class AlbLoadBalancerListenerTlsDefaultHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateIds":
            suggest = "certificate_ids"
        elif key == "httpHandler":
            suggest = "http_handler"
        elif key == "streamHandler":
            suggest = "stream_handler"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsDefaultHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_ids: Sequence[str],
                 http_handler: Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler'] = None,
                 stream_handler: Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler'] = None):
        """
        :param Sequence[str] certificate_ids: Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated
               with the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.
               
               > **NOTE:** Exactly one handler type `http_handler` or `stream_handler` should be specified.
        :param 'AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerArgs' http_handler: HTTP handler resource. The structure is documented below.
        :param 'AlbLoadBalancerListenerTlsDefaultHandlerStreamHandlerArgs' stream_handler: Stream handler resource. The structure is documented below.
        """
        pulumi.set(__self__, "certificate_ids", certificate_ids)
        if http_handler is not None:
            pulumi.set(__self__, "http_handler", http_handler)
        if stream_handler is not None:
            pulumi.set(__self__, "stream_handler", stream_handler)

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Sequence[str]:
        """
        Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated
        with the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.

        > **NOTE:** Exactly one handler type `http_handler` or `stream_handler` should be specified.
        """
        return pulumi.get(self, "certificate_ids")

    @property
    @pulumi.getter(name="httpHandler")
    def http_handler(self) -> Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler']:
        """
        HTTP handler resource. The structure is documented below.
        """
        return pulumi.get(self, "http_handler")

    @property
    @pulumi.getter(name="streamHandler")
    def stream_handler(self) -> Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler']:
        """
        Stream handler resource. The structure is documented below.
        """
        return pulumi.get(self, "stream_handler")


@pulumi.output_type
class AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowHttp10":
            suggest = "allow_http10"
        elif key == "http2Options":
            suggest = "http2_options"
        elif key == "httpRouterId":
            suggest = "http_router_id"
        elif key == "rewriteRequestId":
            suggest = "rewrite_request_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerHttpHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_http10: Optional[bool] = None,
                 http2_options: Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options'] = None,
                 http_router_id: Optional[str] = None,
                 rewrite_request_id: Optional[bool] = None):
        """
        :param bool allow_http10: If set, will enable only HTTP1 protocol with HTTP1.0 support.
               
               > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        :param 'AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2OptionsArgs' http2_options: If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        :param str http_router_id: HTTP router id.
        :param bool rewrite_request_id: When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)
        if http2_options is not None:
            pulumi.set(__self__, "http2_options", http2_options)
        if http_router_id is not None:
            pulumi.set(__self__, "http_router_id", http_router_id)
        if rewrite_request_id is not None:
            pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        """
        If set, will enable only HTTP1 protocol with HTTP1.0 support.

        > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        """
        return pulumi.get(self, "allow_http10")

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Optional['outputs.AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options']:
        """
        If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        """
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> Optional[str]:
        """
        HTTP router id.
        """
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> Optional[bool]:
        """
        When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        return pulumi.get(self, "rewrite_request_id")


@pulumi.output_type
class AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentStreams":
            suggest = "max_concurrent_streams"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerHttpHandlerHttp2Options.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent_streams: Optional[int] = None):
        """
        :param int max_concurrent_streams: Maximum number of concurrent streams.
        """
        if max_concurrent_streams is not None:
            pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> Optional[int]:
        """
        Maximum number of concurrent streams.
        """
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendGroupId":
            suggest = "backend_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsDefaultHandlerStreamHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_group_id: Optional[str] = None):
        """
        :param str backend_group_id: Backend group id.
        """
        if backend_group_id is not None:
            pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> Optional[str]:
        """
        Backend group id.
        """
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class AlbLoadBalancerListenerTlsSniHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serverNames":
            suggest = "server_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsSniHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsSniHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsSniHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 handler: 'outputs.AlbLoadBalancerListenerTlsSniHandlerHandler',
                 name: str,
                 server_names: Sequence[str]):
        """
        :param 'AlbLoadBalancerListenerTlsSniHandlerHandlerArgs' handler: TLS handler resource. The structure is documented below.
        :param str name: name of SNI match.
        :param Sequence[str] server_names: A set of server names.
        """
        pulumi.set(__self__, "handler", handler)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def handler(self) -> 'outputs.AlbLoadBalancerListenerTlsSniHandlerHandler':
        """
        TLS handler resource. The structure is documented below.
        """
        return pulumi.get(self, "handler")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of SNI match.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Sequence[str]:
        """
        A set of server names.
        """
        return pulumi.get(self, "server_names")


@pulumi.output_type
class AlbLoadBalancerListenerTlsSniHandlerHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateIds":
            suggest = "certificate_ids"
        elif key == "httpHandler":
            suggest = "http_handler"
        elif key == "streamHandler":
            suggest = "stream_handler"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsSniHandlerHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_ids: Sequence[str],
                 http_handler: Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler'] = None,
                 stream_handler: Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler'] = None):
        """
        :param Sequence[str] certificate_ids: Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated
               with the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.
               
               > **NOTE:** Exactly one handler type `http_handler` or `stream_handler` should be specified.
        :param 'AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerArgs' http_handler: HTTP handler resource. The structure is documented below.
        :param 'AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandlerArgs' stream_handler: Stream handler resource. The structure is documented below.
        """
        pulumi.set(__self__, "certificate_ids", certificate_ids)
        if http_handler is not None:
            pulumi.set(__self__, "http_handler", http_handler)
        if stream_handler is not None:
            pulumi.set(__self__, "stream_handler", stream_handler)

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Sequence[str]:
        """
        Certificate IDs in the Certificate Manager. Multiple TLS certificates can be associated
        with the same context to allow both RSA and ECDSA certificates. Only the first certificate of each type will be used.

        > **NOTE:** Exactly one handler type `http_handler` or `stream_handler` should be specified.
        """
        return pulumi.get(self, "certificate_ids")

    @property
    @pulumi.getter(name="httpHandler")
    def http_handler(self) -> Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler']:
        """
        HTTP handler resource. The structure is documented below.
        """
        return pulumi.get(self, "http_handler")

    @property
    @pulumi.getter(name="streamHandler")
    def stream_handler(self) -> Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler']:
        """
        Stream handler resource. The structure is documented below.
        """
        return pulumi.get(self, "stream_handler")


@pulumi.output_type
class AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowHttp10":
            suggest = "allow_http10"
        elif key == "http2Options":
            suggest = "http2_options"
        elif key == "httpRouterId":
            suggest = "http_router_id"
        elif key == "rewriteRequestId":
            suggest = "rewrite_request_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_http10: Optional[bool] = None,
                 http2_options: Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options'] = None,
                 http_router_id: Optional[str] = None,
                 rewrite_request_id: Optional[bool] = None):
        """
        :param bool allow_http10: If set, will enable only HTTP1 protocol with HTTP1.0 support.
               
               > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        :param 'AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2OptionsArgs' http2_options: If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        :param str http_router_id: HTTP router id.
        :param bool rewrite_request_id: When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)
        if http2_options is not None:
            pulumi.set(__self__, "http2_options", http2_options)
        if http_router_id is not None:
            pulumi.set(__self__, "http_router_id", http_router_id)
        if rewrite_request_id is not None:
            pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        """
        If set, will enable only HTTP1 protocol with HTTP1.0 support.

        > **NOTE:** Only one type of protocol settings `http2_options` or `allow_http10` should be specified.
        """
        return pulumi.get(self, "allow_http10")

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Optional['outputs.AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options']:
        """
        If set, will enable HTTP2 protocol for the handler. The structure is documented below.
        """
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> Optional[str]:
        """
        HTTP router id.
        """
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> Optional[bool]:
        """
        When unset, will preserve the incoming x-request-id header, otherwise would rewrite it with a new value.
        """
        return pulumi.get(self, "rewrite_request_id")


@pulumi.output_type
class AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConcurrentStreams":
            suggest = "max_concurrent_streams"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerHttpHandlerHttp2Options.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_concurrent_streams: Optional[int] = None):
        """
        :param int max_concurrent_streams: Maximum number of concurrent streams.
        """
        if max_concurrent_streams is not None:
            pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> Optional[int]:
        """
        Maximum number of concurrent streams.
        """
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendGroupId":
            suggest = "backend_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerListenerTlsSniHandlerHandlerStreamHandler.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_group_id: Optional[str] = None):
        """
        :param str backend_group_id: Backend group id.
        """
        if backend_group_id is not None:
            pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> Optional[str]:
        """
        Backend group id.
        """
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class AlbLoadBalancerLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "discardRules":
            suggest = "discard_rules"
        elif key == "logGroupId":
            suggest = "log_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disable: Optional[bool] = None,
                 discard_rules: Optional[Sequence['outputs.AlbLoadBalancerLogOptionsDiscardRule']] = None,
                 log_group_id: Optional[str] = None):
        """
        :param bool disable: Set to true to disable Cloud Logging for the balancer
        :param Sequence['AlbLoadBalancerLogOptionsDiscardRuleArgs'] discard_rules: List of rules to discard a fraction of logs. The structure is documented below.
        :param str log_group_id: Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
        """
        if disable is not None:
            pulumi.set(__self__, "disable", disable)
        if discard_rules is not None:
            pulumi.set(__self__, "discard_rules", discard_rules)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter
    def disable(self) -> Optional[bool]:
        """
        Set to true to disable Cloud Logging for the balancer
        """
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter(name="discardRules")
    def discard_rules(self) -> Optional[Sequence['outputs.AlbLoadBalancerLogOptionsDiscardRule']]:
        """
        List of rules to discard a fraction of logs. The structure is documented below.
        """
        return pulumi.get(self, "discard_rules")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Cloud Logging group ID to send logs to. Leave empty to use the balancer folder default log group.
        """
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class AlbLoadBalancerLogOptionsDiscardRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "discardPercent":
            suggest = "discard_percent"
        elif key == "grpcCodes":
            suggest = "grpc_codes"
        elif key == "httpCodeIntervals":
            suggest = "http_code_intervals"
        elif key == "httpCodes":
            suggest = "http_codes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbLoadBalancerLogOptionsDiscardRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbLoadBalancerLogOptionsDiscardRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbLoadBalancerLogOptionsDiscardRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 discard_percent: Optional[int] = None,
                 grpc_codes: Optional[Sequence[str]] = None,
                 http_code_intervals: Optional[Sequence[str]] = None,
                 http_codes: Optional[Sequence[int]] = None):
        """
        :param Sequence[str] grpc_codes: list of grpc codes by name, e.g, _["NOT_FOUND", "RESOURCE_EXHAUSTED"]_
        :param Sequence[str] http_code_intervals: list of http code intervals _1XX_-_5XX_ or _ALL_
        :param Sequence[int] http_codes: list of http codes _100_-_599_
        """
        if discard_percent is not None:
            pulumi.set(__self__, "discard_percent", discard_percent)
        if grpc_codes is not None:
            pulumi.set(__self__, "grpc_codes", grpc_codes)
        if http_code_intervals is not None:
            pulumi.set(__self__, "http_code_intervals", http_code_intervals)
        if http_codes is not None:
            pulumi.set(__self__, "http_codes", http_codes)

    @property
    @pulumi.getter(name="discardPercent")
    def discard_percent(self) -> Optional[int]:
        return pulumi.get(self, "discard_percent")

    @property
    @pulumi.getter(name="grpcCodes")
    def grpc_codes(self) -> Optional[Sequence[str]]:
        """
        list of grpc codes by name, e.g, _["NOT_FOUND", "RESOURCE_EXHAUSTED"]_
        """
        return pulumi.get(self, "grpc_codes")

    @property
    @pulumi.getter(name="httpCodeIntervals")
    def http_code_intervals(self) -> Optional[Sequence[str]]:
        """
        list of http code intervals _1XX_-_5XX_ or _ALL_
        """
        return pulumi.get(self, "http_code_intervals")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Optional[Sequence[int]]:
        """
        list of http codes _100_-_599_
        """
        return pulumi.get(self, "http_codes")


@pulumi.output_type
class AlbTargetGroupTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "privateIpv4Address":
            suggest = "private_ipv4_address"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbTargetGroupTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbTargetGroupTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbTargetGroupTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_address: str,
                 private_ipv4_address: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str ip_address: IP address of the target.
        :param str subnet_id: ID of the subnet that targets are connected to.
               All targets in the target group must be connected to the same subnet within a single availability zone.
        """
        pulumi.set(__self__, "ip_address", ip_address)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        """
        IP address of the target.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[bool]:
        return pulumi.get(self, "private_ipv4_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of the subnet that targets are connected to.
        All targets in the target group must be connected to the same subnet within a single availability zone.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class AlbVirtualHostModifyRequestHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 append: Optional[str] = None,
                 remove: Optional[bool] = None,
                 replace: Optional[str] = None):
        """
        :param str name: name of the header to modify.
        :param str append: Append string to the header value.
        :param bool remove: If set, remove the header.
               
               > **NOTE:** Only one type of actions `append` or `replace` or `remove` should be specified.
        :param str replace: New value for a header. Header values support the following 
               [formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).
        """
        pulumi.set(__self__, "name", name)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the header to modify.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def append(self) -> Optional[str]:
        """
        Append string to the header value.
        """
        return pulumi.get(self, "append")

    @property
    @pulumi.getter
    def remove(self) -> Optional[bool]:
        """
        If set, remove the header.

        > **NOTE:** Only one type of actions `append` or `replace` or `remove` should be specified.
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        """
        New value for a header. Header values support the following 
        [formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).
        """
        return pulumi.get(self, "replace")


@pulumi.output_type
class AlbVirtualHostModifyResponseHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 append: Optional[str] = None,
                 remove: Optional[bool] = None,
                 replace: Optional[str] = None):
        """
        :param str name: name of the header to modify.
        :param str append: Append string to the header value.
        :param bool remove: If set, remove the header.
               
               > **NOTE:** Only one type of actions `append` or `replace` or `remove` should be specified.
        :param str replace: New value for a header. Header values support the following 
               [formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).
        """
        pulumi.set(__self__, "name", name)
        if append is not None:
            pulumi.set(__self__, "append", append)
        if remove is not None:
            pulumi.set(__self__, "remove", remove)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the header to modify.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def append(self) -> Optional[str]:
        """
        Append string to the header value.
        """
        return pulumi.get(self, "append")

    @property
    @pulumi.getter
    def remove(self) -> Optional[bool]:
        """
        If set, remove the header.

        > **NOTE:** Only one type of actions `append` or `replace` or `remove` should be specified.
        """
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        """
        New value for a header. Header values support the following 
        [formatters](https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_conn_man/headers#custom-request-response-headers).
        """
        return pulumi.get(self, "replace")


@pulumi.output_type
class AlbVirtualHostRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grpcRoute":
            suggest = "grpc_route"
        elif key == "httpRoute":
            suggest = "http_route"
        elif key == "routeOptions":
            suggest = "route_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grpc_route: Optional['outputs.AlbVirtualHostRouteGrpcRoute'] = None,
                 http_route: Optional['outputs.AlbVirtualHostRouteHttpRoute'] = None,
                 name: Optional[str] = None,
                 route_options: Optional['outputs.AlbVirtualHostRouteRouteOptions'] = None):
        """
        :param 'AlbVirtualHostRouteGrpcRouteArgs' grpc_route: GRPC route resource. The structure is documented below.
               
               > **NOTE:** Exactly one type of routes `http_route` or `grpc_route` should be specified.
        :param 'AlbVirtualHostRouteHttpRouteArgs' http_route: HTTP route resource. The structure is documented below.
        :param str name: name of the route.
        :param 'AlbVirtualHostRouteRouteOptionsArgs' route_options: Route options for the virtual host. The structure is documented below.
        """
        if grpc_route is not None:
            pulumi.set(__self__, "grpc_route", grpc_route)
        if http_route is not None:
            pulumi.set(__self__, "http_route", http_route)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if route_options is not None:
            pulumi.set(__self__, "route_options", route_options)

    @property
    @pulumi.getter(name="grpcRoute")
    def grpc_route(self) -> Optional['outputs.AlbVirtualHostRouteGrpcRoute']:
        """
        GRPC route resource. The structure is documented below.

        > **NOTE:** Exactly one type of routes `http_route` or `grpc_route` should be specified.
        """
        return pulumi.get(self, "grpc_route")

    @property
    @pulumi.getter(name="httpRoute")
    def http_route(self) -> Optional['outputs.AlbVirtualHostRouteHttpRoute']:
        """
        HTTP route resource. The structure is documented below.
        """
        return pulumi.get(self, "http_route")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        name of the route.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeOptions")
    def route_options(self) -> Optional['outputs.AlbVirtualHostRouteRouteOptions']:
        """
        Route options for the virtual host. The structure is documented below.
        """
        return pulumi.get(self, "route_options")


@pulumi.output_type
class AlbVirtualHostRouteGrpcRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "grpcMatches":
            suggest = "grpc_matches"
        elif key == "grpcRouteAction":
            suggest = "grpc_route_action"
        elif key == "grpcStatusResponseAction":
            suggest = "grpc_status_response_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteGrpcRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteGrpcRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteGrpcRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 grpc_matches: Optional[Sequence['outputs.AlbVirtualHostRouteGrpcRouteGrpcMatch']] = None,
                 grpc_route_action: Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcRouteAction'] = None,
                 grpc_status_response_action: Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction'] = None):
        """
        :param Sequence['AlbVirtualHostRouteGrpcRouteGrpcMatchArgs'] grpc_matches: Checks "/" prefix by default. The structure is documented below.
        :param 'AlbVirtualHostRouteGrpcRouteGrpcRouteActionArgs' grpc_route_action: GRPC route action resource. The structure is documented below.
        :param 'AlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionArgs' grpc_status_response_action: GRPC status response action resource. The structure is documented below.
               
               > **NOTE:** Exactly one type of actions `grpc_route_action` or `grpc_status_response_action` should be specified.
        """
        if grpc_matches is not None:
            pulumi.set(__self__, "grpc_matches", grpc_matches)
        if grpc_route_action is not None:
            pulumi.set(__self__, "grpc_route_action", grpc_route_action)
        if grpc_status_response_action is not None:
            pulumi.set(__self__, "grpc_status_response_action", grpc_status_response_action)

    @property
    @pulumi.getter(name="grpcMatches")
    def grpc_matches(self) -> Optional[Sequence['outputs.AlbVirtualHostRouteGrpcRouteGrpcMatch']]:
        """
        Checks "/" prefix by default. The structure is documented below.
        """
        return pulumi.get(self, "grpc_matches")

    @property
    @pulumi.getter(name="grpcRouteAction")
    def grpc_route_action(self) -> Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcRouteAction']:
        """
        GRPC route action resource. The structure is documented below.
        """
        return pulumi.get(self, "grpc_route_action")

    @property
    @pulumi.getter(name="grpcStatusResponseAction")
    def grpc_status_response_action(self) -> Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction']:
        """
        GRPC status response action resource. The structure is documented below.

        > **NOTE:** Exactly one type of actions `grpc_route_action` or `grpc_status_response_action` should be specified.
        """
        return pulumi.get(self, "grpc_status_response_action")


@pulumi.output_type
class AlbVirtualHostRouteGrpcRouteGrpcMatch(dict):
    def __init__(__self__, *,
                 fqmn: Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn'] = None):
        """
        :param 'AlbVirtualHostRouteGrpcRouteGrpcMatchFqmnArgs' fqmn: If not set, all services/methods are assumed. The structure is documented below.
        """
        if fqmn is not None:
            pulumi.set(__self__, "fqmn", fqmn)

    @property
    @pulumi.getter
    def fqmn(self) -> Optional['outputs.AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn']:
        """
        If not set, all services/methods are assumed. The structure is documented below.
        """
        return pulumi.get(self, "fqmn")


@pulumi.output_type
class AlbVirtualHostRouteGrpcRouteGrpcMatchFqmn(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        """
        :param str exact: Match exactly.
        :param str prefix: Match prefix.
        :param str regex: Match regex.
               
               > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
               specified.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        """
        Match exactly.
        """
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Match prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Match regex.

        > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
        specified.
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class AlbVirtualHostRouteGrpcRouteGrpcRouteAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendGroupId":
            suggest = "backend_group_id"
        elif key == "autoHostRewrite":
            suggest = "auto_host_rewrite"
        elif key == "hostRewrite":
            suggest = "host_rewrite"
        elif key == "idleTimeout":
            suggest = "idle_timeout"
        elif key == "maxTimeout":
            suggest = "max_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteGrpcRouteGrpcRouteAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteGrpcRouteGrpcRouteAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteGrpcRouteGrpcRouteAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_group_id: str,
                 auto_host_rewrite: Optional[bool] = None,
                 host_rewrite: Optional[str] = None,
                 idle_timeout: Optional[str] = None,
                 max_timeout: Optional[str] = None):
        """
        :param str backend_group_id: Backend group to route requests.
        :param bool auto_host_rewrite: If set, will automatically rewrite host.
               
               > **NOTE:** Only one type of host rewrite specifiers `host_rewrite` or `auto_host_rewrite` should be
               specified.
        :param str host_rewrite: Host rewrite specifier.
        :param str idle_timeout: Specifies the idle timeout (time without any data transfer for the active request) for the
               route. It is useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout
               to the maximum time the stream is allowed to be alive. If not specified, there is no
               per-route idle timeout.
        :param str max_timeout: Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 
               60 seconds.
        """
        pulumi.set(__self__, "backend_group_id", backend_group_id)
        if auto_host_rewrite is not None:
            pulumi.set(__self__, "auto_host_rewrite", auto_host_rewrite)
        if host_rewrite is not None:
            pulumi.set(__self__, "host_rewrite", host_rewrite)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if max_timeout is not None:
            pulumi.set(__self__, "max_timeout", max_timeout)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        """
        Backend group to route requests.
        """
        return pulumi.get(self, "backend_group_id")

    @property
    @pulumi.getter(name="autoHostRewrite")
    def auto_host_rewrite(self) -> Optional[bool]:
        """
        If set, will automatically rewrite host.

        > **NOTE:** Only one type of host rewrite specifiers `host_rewrite` or `auto_host_rewrite` should be
        specified.
        """
        return pulumi.get(self, "auto_host_rewrite")

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[str]:
        """
        Host rewrite specifier.
        """
        return pulumi.get(self, "host_rewrite")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[str]:
        """
        Specifies the idle timeout (time without any data transfer for the active request) for the
        route. It is useful for streaming scenarios - one should set idle_timeout to something meaningful and max_timeout
        to the maximum time the stream is allowed to be alive. If not specified, there is no
        per-route idle timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="maxTimeout")
    def max_timeout(self) -> Optional[str]:
        """
        Lower timeout may be specified by the client (using grpc-timeout header). If not set, default is 
        60 seconds.
        """
        return pulumi.get(self, "max_timeout")


@pulumi.output_type
class AlbVirtualHostRouteGrpcRouteGrpcStatusResponseAction(dict):
    def __init__(__self__, *,
                 status: Optional[str] = None):
        """
        :param str status: The status of the response. Supported values are: ok, invalid_argumet, not_found, 
               permission_denied, unauthenticated, unimplemented, internal, unavailable.
        """
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the response. Supported values are: ok, invalid_argumet, not_found, 
        permission_denied, unauthenticated, unimplemented, internal, unavailable.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AlbVirtualHostRouteHttpRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "directResponseAction":
            suggest = "direct_response_action"
        elif key == "httpMatches":
            suggest = "http_matches"
        elif key == "httpRouteAction":
            suggest = "http_route_action"
        elif key == "redirectAction":
            suggest = "redirect_action"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteHttpRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteHttpRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteHttpRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 direct_response_action: Optional['outputs.AlbVirtualHostRouteHttpRouteDirectResponseAction'] = None,
                 http_matches: Optional[Sequence['outputs.AlbVirtualHostRouteHttpRouteHttpMatch']] = None,
                 http_route_action: Optional['outputs.AlbVirtualHostRouteHttpRouteHttpRouteAction'] = None,
                 redirect_action: Optional['outputs.AlbVirtualHostRouteHttpRouteRedirectAction'] = None):
        """
        :param 'AlbVirtualHostRouteHttpRouteDirectResponseActionArgs' direct_response_action: Direct response action resource. The structure is documented below.
               
               > **NOTE:** Exactly one type of actions `http_route_action` or `redirect_action` or `direct_response_action` should be
               specified.
        :param Sequence['AlbVirtualHostRouteHttpRouteHttpMatchArgs'] http_matches: Checks "/" prefix by default. The structure is documented below.
        :param 'AlbVirtualHostRouteHttpRouteHttpRouteActionArgs' http_route_action: HTTP route action resource. The structure is documented below.
        :param 'AlbVirtualHostRouteHttpRouteRedirectActionArgs' redirect_action: Redirect action resource. The structure is documented below.
        """
        if direct_response_action is not None:
            pulumi.set(__self__, "direct_response_action", direct_response_action)
        if http_matches is not None:
            pulumi.set(__self__, "http_matches", http_matches)
        if http_route_action is not None:
            pulumi.set(__self__, "http_route_action", http_route_action)
        if redirect_action is not None:
            pulumi.set(__self__, "redirect_action", redirect_action)

    @property
    @pulumi.getter(name="directResponseAction")
    def direct_response_action(self) -> Optional['outputs.AlbVirtualHostRouteHttpRouteDirectResponseAction']:
        """
        Direct response action resource. The structure is documented below.

        > **NOTE:** Exactly one type of actions `http_route_action` or `redirect_action` or `direct_response_action` should be
        specified.
        """
        return pulumi.get(self, "direct_response_action")

    @property
    @pulumi.getter(name="httpMatches")
    def http_matches(self) -> Optional[Sequence['outputs.AlbVirtualHostRouteHttpRouteHttpMatch']]:
        """
        Checks "/" prefix by default. The structure is documented below.
        """
        return pulumi.get(self, "http_matches")

    @property
    @pulumi.getter(name="httpRouteAction")
    def http_route_action(self) -> Optional['outputs.AlbVirtualHostRouteHttpRouteHttpRouteAction']:
        """
        HTTP route action resource. The structure is documented below.
        """
        return pulumi.get(self, "http_route_action")

    @property
    @pulumi.getter(name="redirectAction")
    def redirect_action(self) -> Optional['outputs.AlbVirtualHostRouteHttpRouteRedirectAction']:
        """
        Redirect action resource. The structure is documented below.
        """
        return pulumi.get(self, "redirect_action")


@pulumi.output_type
class AlbVirtualHostRouteHttpRouteDirectResponseAction(dict):
    def __init__(__self__, *,
                 body: Optional[str] = None,
                 status: Optional[int] = None):
        """
        :param str body: Response body text.
        :param int status: HTTP response status. Should be between 100 and 599.
        """
        if body is not None:
            pulumi.set(__self__, "body", body)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def body(self) -> Optional[str]:
        """
        Response body text.
        """
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def status(self) -> Optional[int]:
        """
        HTTP response status. Should be between 100 and 599.
        """
        return pulumi.get(self, "status")


@pulumi.output_type
class AlbVirtualHostRouteHttpRouteHttpMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMethods":
            suggest = "http_methods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteHttpRouteHttpMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteHttpRouteHttpMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteHttpRouteHttpMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_methods: Optional[Sequence[str]] = None,
                 path: Optional['outputs.AlbVirtualHostRouteHttpRouteHttpMatchPath'] = None):
        """
        :param Sequence[str] http_methods: List of methods(strings).
        :param 'AlbVirtualHostRouteHttpRouteHttpMatchPathArgs' path: If not set, '/' is assumed. The structure is documented below.
        """
        if http_methods is not None:
            pulumi.set(__self__, "http_methods", http_methods)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Optional[Sequence[str]]:
        """
        List of methods(strings).
        """
        return pulumi.get(self, "http_methods")

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.AlbVirtualHostRouteHttpRouteHttpMatchPath']:
        """
        If not set, '/' is assumed. The structure is documented below.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class AlbVirtualHostRouteHttpRouteHttpMatchPath(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        """
        :param str exact: Match exactly.
        :param str prefix: Match prefix.
        :param str regex: Match regex.
               
               > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
               specified.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        """
        Match exactly.
        """
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Match prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Match regex.

        > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
        specified.
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class AlbVirtualHostRouteHttpRouteHttpRouteAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backendGroupId":
            suggest = "backend_group_id"
        elif key == "autoHostRewrite":
            suggest = "auto_host_rewrite"
        elif key == "hostRewrite":
            suggest = "host_rewrite"
        elif key == "idleTimeout":
            suggest = "idle_timeout"
        elif key == "prefixRewrite":
            suggest = "prefix_rewrite"
        elif key == "upgradeTypes":
            suggest = "upgrade_types"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteHttpRouteHttpRouteAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteHttpRouteHttpRouteAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteHttpRouteHttpRouteAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backend_group_id: str,
                 auto_host_rewrite: Optional[bool] = None,
                 host_rewrite: Optional[str] = None,
                 idle_timeout: Optional[str] = None,
                 prefix_rewrite: Optional[str] = None,
                 timeout: Optional[str] = None,
                 upgrade_types: Optional[Sequence[str]] = None):
        """
        :param str backend_group_id: Backend group to route requests.
        :param bool auto_host_rewrite: If set, will automatically rewrite host.
        :param str host_rewrite: Host rewrite specifier.
        :param str idle_timeout: Specifies the idle timeout (time without any data transfer for the active request) for the 
               route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to
               something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no
               per-route idle timeout.
        :param str prefix_rewrite: If not empty, matched path prefix will be replaced by this value.
        :param str timeout: Specifies the request timeout (overall time request processing is allowed to take) for the 
               route. If not set, default is 60 seconds.
        :param Sequence[str] upgrade_types: List of upgrade types. Only specified upgrade types will be allowed. For example, 
               "websocket".
               
               > **NOTE:** Only one type of host rewrite specifiers `host_rewrite` or `auto_host_rewrite` should be
               specified.
        """
        pulumi.set(__self__, "backend_group_id", backend_group_id)
        if auto_host_rewrite is not None:
            pulumi.set(__self__, "auto_host_rewrite", auto_host_rewrite)
        if host_rewrite is not None:
            pulumi.set(__self__, "host_rewrite", host_rewrite)
        if idle_timeout is not None:
            pulumi.set(__self__, "idle_timeout", idle_timeout)
        if prefix_rewrite is not None:
            pulumi.set(__self__, "prefix_rewrite", prefix_rewrite)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if upgrade_types is not None:
            pulumi.set(__self__, "upgrade_types", upgrade_types)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        """
        Backend group to route requests.
        """
        return pulumi.get(self, "backend_group_id")

    @property
    @pulumi.getter(name="autoHostRewrite")
    def auto_host_rewrite(self) -> Optional[bool]:
        """
        If set, will automatically rewrite host.
        """
        return pulumi.get(self, "auto_host_rewrite")

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> Optional[str]:
        """
        Host rewrite specifier.
        """
        return pulumi.get(self, "host_rewrite")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> Optional[str]:
        """
        Specifies the idle timeout (time without any data transfer for the active request) for the 
        route. It is useful for streaming scenarios (i.e. long-polling, server-sent events) - one should set idle_timeout to
        something meaningful and timeout to the maximum time the stream is allowed to be alive. If not specified, there is no
        per-route idle timeout.
        """
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="prefixRewrite")
    def prefix_rewrite(self) -> Optional[str]:
        """
        If not empty, matched path prefix will be replaced by this value.
        """
        return pulumi.get(self, "prefix_rewrite")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        Specifies the request timeout (overall time request processing is allowed to take) for the 
        route. If not set, default is 60 seconds.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="upgradeTypes")
    def upgrade_types(self) -> Optional[Sequence[str]]:
        """
        List of upgrade types. Only specified upgrade types will be allowed. For example, 
        "websocket".

        > **NOTE:** Only one type of host rewrite specifiers `host_rewrite` or `auto_host_rewrite` should be
        specified.
        """
        return pulumi.get(self, "upgrade_types")


@pulumi.output_type
class AlbVirtualHostRouteHttpRouteRedirectAction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "removeQuery":
            suggest = "remove_query"
        elif key == "replaceHost":
            suggest = "replace_host"
        elif key == "replacePath":
            suggest = "replace_path"
        elif key == "replacePort":
            suggest = "replace_port"
        elif key == "replacePrefix":
            suggest = "replace_prefix"
        elif key == "replaceScheme":
            suggest = "replace_scheme"
        elif key == "responseCode":
            suggest = "response_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteHttpRouteRedirectAction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteHttpRouteRedirectAction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteHttpRouteRedirectAction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 remove_query: Optional[bool] = None,
                 replace_host: Optional[str] = None,
                 replace_path: Optional[str] = None,
                 replace_port: Optional[int] = None,
                 replace_prefix: Optional[str] = None,
                 replace_scheme: Optional[str] = None,
                 response_code: Optional[str] = None):
        """
        :param str replace_host: Replaces hostname.
        :param str replace_path: Replace path.
        :param int replace_port: Replaces port.
        :param str replace_prefix: Replace only matched prefix. Example:<br/> match:{ prefix_match: "/some" } <br/> 
               redirect: { replace_prefix: "/other" } <br/> will redirect "/something" to "/otherthing".
               
               * `remove query` - (Optional) If set, remove query part.
        :param str replace_scheme: Replaces scheme. If the original scheme is `http` or `https`, will also remove the 
               80 or 443 port, if present.
        :param str response_code: The HTTP status code to use in the redirect response. Supported values are: 
               moved_permanently, found, see_other, temporary_redirect, permanent_redirect.
               
               > **NOTE:** Only one type of paths `replace_path` or `replace_prefix` should be specified.
        """
        if remove_query is not None:
            pulumi.set(__self__, "remove_query", remove_query)
        if replace_host is not None:
            pulumi.set(__self__, "replace_host", replace_host)
        if replace_path is not None:
            pulumi.set(__self__, "replace_path", replace_path)
        if replace_port is not None:
            pulumi.set(__self__, "replace_port", replace_port)
        if replace_prefix is not None:
            pulumi.set(__self__, "replace_prefix", replace_prefix)
        if replace_scheme is not None:
            pulumi.set(__self__, "replace_scheme", replace_scheme)
        if response_code is not None:
            pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="removeQuery")
    def remove_query(self) -> Optional[bool]:
        return pulumi.get(self, "remove_query")

    @property
    @pulumi.getter(name="replaceHost")
    def replace_host(self) -> Optional[str]:
        """
        Replaces hostname.
        """
        return pulumi.get(self, "replace_host")

    @property
    @pulumi.getter(name="replacePath")
    def replace_path(self) -> Optional[str]:
        """
        Replace path.
        """
        return pulumi.get(self, "replace_path")

    @property
    @pulumi.getter(name="replacePort")
    def replace_port(self) -> Optional[int]:
        """
        Replaces port.
        """
        return pulumi.get(self, "replace_port")

    @property
    @pulumi.getter(name="replacePrefix")
    def replace_prefix(self) -> Optional[str]:
        """
        Replace only matched prefix. Example:<br/> match:{ prefix_match: "/some" } <br/> 
        redirect: { replace_prefix: "/other" } <br/> will redirect "/something" to "/otherthing".

        * `remove query` - (Optional) If set, remove query part.
        """
        return pulumi.get(self, "replace_prefix")

    @property
    @pulumi.getter(name="replaceScheme")
    def replace_scheme(self) -> Optional[str]:
        """
        Replaces scheme. If the original scheme is `http` or `https`, will also remove the 
        80 or 443 port, if present.
        """
        return pulumi.get(self, "replace_scheme")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> Optional[str]:
        """
        The HTTP status code to use in the redirect response. Supported values are: 
        moved_permanently, found, see_other, temporary_redirect, permanent_redirect.

        > **NOTE:** Only one type of paths `replace_path` or `replace_prefix` should be specified.
        """
        return pulumi.get(self, "response_code")


@pulumi.output_type
class AlbVirtualHostRouteOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityProfileId":
            suggest = "security_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rbac: Optional['outputs.AlbVirtualHostRouteOptionsRbac'] = None,
                 security_profile_id: Optional[str] = None):
        """
        :param 'AlbVirtualHostRouteOptionsRbacArgs' rbac: RBAC configuration.
        :param str security_profile_id: SWS profile ID.
        """
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbac(self) -> Optional['outputs.AlbVirtualHostRouteOptionsRbac']:
        """
        RBAC configuration.
        """
        return pulumi.get(self, "rbac")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        """
        SWS profile ID.
        """
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class AlbVirtualHostRouteOptionsRbac(dict):
    def __init__(__self__, *,
                 principals: Sequence['outputs.AlbVirtualHostRouteOptionsRbacPrincipal'],
                 action: Optional[str] = None):
        pulumi.set(__self__, "principals", principals)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.AlbVirtualHostRouteOptionsRbacPrincipal']:
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")


@pulumi.output_type
class AlbVirtualHostRouteOptionsRbacPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "andPrincipals":
            suggest = "and_principals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteOptionsRbacPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteOptionsRbacPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteOptionsRbacPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_principals: Sequence['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteIp":
            suggest = "remote_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any: Optional[bool] = None,
                 header: Optional['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader'] = None,
                 remote_ip: Optional[str] = None):
        if any is not None:
            pulumi.set(__self__, "any", any)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> Optional[bool]:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader']:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[str]:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue'] = None):
        """
        :param str name: name of the header to modify.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the header to modify.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlbVirtualHostRouteOptionsRbacPrincipalAndPrincipalHeaderValue(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        """
        :param str exact: Match exactly.
        :param str prefix: Match prefix.
        :param str regex: Match regex.
               
               > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
               specified.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        """
        Match exactly.
        """
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Match prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Match regex.

        > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
        specified.
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityProfileId":
            suggest = "security_profile_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteRouteOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteRouteOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteRouteOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rbac: Optional['outputs.AlbVirtualHostRouteRouteOptionsRbac'] = None,
                 security_profile_id: Optional[str] = None):
        """
        :param 'AlbVirtualHostRouteRouteOptionsRbacArgs' rbac: RBAC configuration.
        :param str security_profile_id: SWS profile ID.
        """
        if rbac is not None:
            pulumi.set(__self__, "rbac", rbac)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbac(self) -> Optional['outputs.AlbVirtualHostRouteRouteOptionsRbac']:
        """
        RBAC configuration.
        """
        return pulumi.get(self, "rbac")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        """
        SWS profile ID.
        """
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptionsRbac(dict):
    def __init__(__self__, *,
                 principals: Sequence['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipal'],
                 action: Optional[str] = None):
        pulumi.set(__self__, "principals", principals)
        if action is not None:
            pulumi.set(__self__, "action", action)

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipal']:
        return pulumi.get(self, "principals")

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptionsRbacPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "andPrincipals":
            suggest = "and_principals"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteRouteOptionsRbacPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteRouteOptionsRbacPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteRouteOptionsRbacPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_principals: Sequence['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "remoteIp":
            suggest = "remote_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any: Optional[bool] = None,
                 header: Optional['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader'] = None,
                 remote_ip: Optional[str] = None):
        if any is not None:
            pulumi.set(__self__, "any", any)
        if header is not None:
            pulumi.set(__self__, "header", header)
        if remote_ip is not None:
            pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> Optional[bool]:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def header(self) -> Optional['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader']:
        return pulumi.get(self, "header")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> Optional[str]:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeader(dict):
    def __init__(__self__, *,
                 name: str,
                 value: Optional['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue'] = None):
        """
        :param str name: name of the header to modify.
        """
        pulumi.set(__self__, "name", name)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        name of the header to modify.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def value(self) -> Optional['outputs.AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue']:
        return pulumi.get(self, "value")


@pulumi.output_type
class AlbVirtualHostRouteRouteOptionsRbacPrincipalAndPrincipalHeaderValue(dict):
    def __init__(__self__, *,
                 exact: Optional[str] = None,
                 prefix: Optional[str] = None,
                 regex: Optional[str] = None):
        """
        :param str exact: Match exactly.
        :param str prefix: Match prefix.
        :param str regex: Match regex.
               
               > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
               specified.
        """
        if exact is not None:
            pulumi.set(__self__, "exact", exact)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if regex is not None:
            pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> Optional[str]:
        """
        Match exactly.
        """
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Match prefix.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> Optional[str]:
        """
        Match regex.

        > **NOTE:** Exactly one type of string matches `exact`, `prefix` or `regex` should be
        specified.
        """
        return pulumi.get(self, "regex")


@pulumi.output_type
class ApiGatewayCanary(dict):
    def __init__(__self__, *,
                 variables: Optional[Mapping[str, str]] = None,
                 weight: Optional[int] = None):
        """
        :param Mapping[str, str] variables: A set of values for variables in gateway specification.
        """
        if variables is not None:
            pulumi.set(__self__, "variables", variables)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, str]]:
        """
        A set of values for variables in gateway specification.
        """
        return pulumi.get(self, "variables")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class ApiGatewayConnectivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayConnectivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayConnectivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayConnectivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class ApiGatewayCustomDomain(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"
        elif key == "domainId":
            suggest = "domain_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayCustomDomain. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayCustomDomain.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayCustomDomain.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: str,
                 fqdn: str,
                 domain_id: Optional[str] = None):
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "fqdn", fqdn)
        if domain_id is not None:
            pulumi.set(__self__, "domain_id", domain_id)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> Optional[str]:
        return pulumi.get(self, "domain_id")


@pulumi.output_type
class ApiGatewayLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderId":
            suggest = "folder_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "minLevel":
            suggest = "min_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ApiGatewayLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ApiGatewayLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ApiGatewayLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 min_level: Optional[str] = None):
        """
        :param bool disabled: Is logging from API Gateway disabled
        :param str folder_id: Folder ID for the Yandex Cloud API Gateway. If it is not provided, the default provider folder is used.
        :param str log_group_id: Log entries are written to specified log group
        :param str min_level: Minimum log entry level
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if min_level is not None:
            pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Is logging from API Gateway disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Folder ID for the Yandex Cloud API Gateway. If it is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Log entries are written to specified log group
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> Optional[str]:
        """
        Minimum log entry level
        """
        return pulumi.get(self, "min_level")


@pulumi.output_type
class AuditTrailsTrailDataStreamDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseId":
            suggest = "database_id"
        elif key == "streamName":
            suggest = "stream_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailDataStreamDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailDataStreamDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailDataStreamDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_id: str,
                 stream_name: str):
        """
        :param str database_id: ID of the [YDB](https://cloud.yandex.ru/ru/docs/ydb/concepts/resources) hosting the destination data stream.
        :param str stream_name: Name of the [YDS stream](https://cloud.yandex.ru/ru/docs/data-streams/concepts/glossary#stream-concepts) belonging to the specified YDB.
        """
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        """
        ID of the [YDB](https://cloud.yandex.ru/ru/docs/ydb/concepts/resources) hosting the destination data stream.
        """
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        """
        Name of the [YDS stream](https://cloud.yandex.ru/ru/docs/data-streams/concepts/glossary#stream-concepts) belonging to the specified YDB.
        """
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class AuditTrailsTrailFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "eventFilters":
            suggest = "event_filters"
        elif key == "pathFilter":
            suggest = "path_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 event_filters: Optional[Sequence['outputs.AuditTrailsTrailFilterEventFilter']] = None,
                 path_filter: Optional['outputs.AuditTrailsTrailFilterPathFilter'] = None):
        """
        :param Sequence['AuditTrailsTrailFilterEventFilterArgs'] event_filters: Structure describing filtering process for the service-specific data plane events
        :param 'AuditTrailsTrailFilterPathFilterArgs' path_filter: Structure describing filtering process based on cloud resources for the described event set. Structurally equal to the `filter.path_filter`
        """
        if event_filters is not None:
            pulumi.set(__self__, "event_filters", event_filters)
        if path_filter is not None:
            pulumi.set(__self__, "path_filter", path_filter)

    @property
    @pulumi.getter(name="eventFilters")
    def event_filters(self) -> Optional[Sequence['outputs.AuditTrailsTrailFilterEventFilter']]:
        """
        Structure describing filtering process for the service-specific data plane events
        """
        return pulumi.get(self, "event_filters")

    @property
    @pulumi.getter(name="pathFilter")
    def path_filter(self) -> Optional['outputs.AuditTrailsTrailFilterPathFilter']:
        """
        Structure describing filtering process based on cloud resources for the described event set. Structurally equal to the `filter.path_filter`
        """
        return pulumi.get(self, "path_filter")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathFilter":
            suggest = "path_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterEventFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterEventFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterEventFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 categories: Sequence['outputs.AuditTrailsTrailFilterEventFilterCategory'],
                 path_filter: 'outputs.AuditTrailsTrailFilterEventFilterPathFilter',
                 service: str):
        """
        :param Sequence['AuditTrailsTrailFilterEventFilterCategoryArgs'] categories: List of structures describing categories of gathered data plane events
        :param 'AuditTrailsTrailFilterEventFilterPathFilterArgs' path_filter: Structure describing filtering process based on cloud resources for the described event set. Structurally equal to the `filter.path_filter`
        :param str service: ID of the service which events will be gathered
        """
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "path_filter", path_filter)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.AuditTrailsTrailFilterEventFilterCategory']:
        """
        List of structures describing categories of gathered data plane events
        """
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="pathFilter")
    def path_filter(self) -> 'outputs.AuditTrailsTrailFilterEventFilterPathFilter':
        """
        Structure describing filtering process based on cloud resources for the described event set. Structurally equal to the `filter.path_filter`
        """
        return pulumi.get(self, "path_filter")

    @property
    @pulumi.getter
    def service(self) -> str:
        """
        ID of the service which events will be gathered
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilterCategory(dict):
    def __init__(__self__, *,
                 plane: str,
                 type: str):
        """
        :param str plane: Type of the event by its relation to the cloud resource model. Possible values: `CONTROL_PLANE`/`DATA_PLANE`
        :param str type: Type of the event by its operation effect on the resource. Possible values: `READ`/`WRITE`
        """
        pulumi.set(__self__, "plane", plane)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def plane(self) -> str:
        """
        Type of the event by its relation to the cloud resource model. Possible values: `CONTROL_PLANE`/`DATA_PLANE`
        """
        return pulumi.get(self, "plane")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the event by its operation effect on the resource. Possible values: `READ`/`WRITE`
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilterPathFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyFilter":
            suggest = "any_filter"
        elif key == "someFilter":
            suggest = "some_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterEventFilterPathFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_filter: Optional['outputs.AuditTrailsTrailFilterEventFilterPathFilterAnyFilter'] = None,
                 some_filter: Optional['outputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilter'] = None):
        """
        :param 'AuditTrailsTrailFilterEventFilterPathFilterAnyFilterArgs' any_filter: Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with `some_filter`.
        :param 'AuditTrailsTrailFilterEventFilterPathFilterSomeFilterArgs' some_filter: Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with `any_filter`.
        """
        if any_filter is not None:
            pulumi.set(__self__, "any_filter", any_filter)
        if some_filter is not None:
            pulumi.set(__self__, "some_filter", some_filter)

    @property
    @pulumi.getter(name="anyFilter")
    def any_filter(self) -> Optional['outputs.AuditTrailsTrailFilterEventFilterPathFilterAnyFilter']:
        """
        Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with `some_filter`.
        """
        return pulumi.get(self, "any_filter")

    @property
    @pulumi.getter(name="someFilter")
    def some_filter(self) -> Optional['outputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilter']:
        """
        Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with `any_filter`.
        """
        return pulumi.get(self, "some_filter")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilterPathFilterAnyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterEventFilterPathFilterAnyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterAnyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterAnyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilterPathFilterSomeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyFilters":
            suggest = "any_filters"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterEventFilterPathFilterSomeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterSomeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterSomeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_filters: Sequence['outputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter'],
                 resource_id: str,
                 resource_type: str):
        """
        :param Sequence['AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilterArgs'] any_filters: List of child resources from which events will be gathered
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter']:
        """
        List of child resources from which events will be gathered
        """
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailFilterPathFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyFilter":
            suggest = "any_filter"
        elif key == "someFilter":
            suggest = "some_filter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterPathFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterPathFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterPathFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_filter: Optional['outputs.AuditTrailsTrailFilterPathFilterAnyFilter'] = None,
                 some_filter: Optional['outputs.AuditTrailsTrailFilterPathFilterSomeFilter'] = None):
        """
        :param 'AuditTrailsTrailFilterPathFilterAnyFilterArgs' any_filter: Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with `some_filter`.
        :param 'AuditTrailsTrailFilterPathFilterSomeFilterArgs' some_filter: Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with `any_filter`.
        """
        if any_filter is not None:
            pulumi.set(__self__, "any_filter", any_filter)
        if some_filter is not None:
            pulumi.set(__self__, "some_filter", some_filter)

    @property
    @pulumi.getter(name="anyFilter")
    def any_filter(self) -> Optional['outputs.AuditTrailsTrailFilterPathFilterAnyFilter']:
        """
        Structure describing that events will be gathered from all cloud resources that belong to the parent resource. Mutually exclusive with `some_filter`.
        """
        return pulumi.get(self, "any_filter")

    @property
    @pulumi.getter(name="someFilter")
    def some_filter(self) -> Optional['outputs.AuditTrailsTrailFilterPathFilterSomeFilter']:
        """
        Structure describing that events will be gathered from some of the cloud resources that belong to the parent resource. Mutually exclusive with `any_filter`.
        """
        return pulumi.get(self, "some_filter")


@pulumi.output_type
class AuditTrailsTrailFilterPathFilterAnyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterPathFilterAnyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterPathFilterAnyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterPathFilterAnyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailFilterPathFilterSomeFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "anyFilters":
            suggest = "any_filters"
        elif key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterPathFilterSomeFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterPathFilterSomeFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterPathFilterSomeFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 any_filters: Sequence['outputs.AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter'],
                 resource_id: str,
                 resource_type: str):
        """
        :param Sequence['AuditTrailsTrailFilterPathFilterSomeFilterAnyFilterArgs'] any_filters: List of child resources from which events will be gathered
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter']:
        """
        List of child resources from which events will be gathered
        """
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "resourceId":
            suggest = "resource_id"
        elif key == "resourceType":
            suggest = "resource_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailFilterPathFilterSomeFilterAnyFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        """
        :param str resource_id: ID of the child resource.
        :param str resource_type: Resource type of the child resource.
        """
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        """
        ID of the child resource.
        """
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        """
        Resource type of the child resource.
        """
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class AuditTrailsTrailLoggingDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "logGroupId":
            suggest = "log_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailLoggingDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailLoggingDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailLoggingDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 log_group_id: str):
        """
        :param str log_group_id: ID of the destination [Cloud Logging Group](https://cloud.yandex.ru/ru/docs/logging/concepts/log-group)
        """
        pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        ID of the destination [Cloud Logging Group](https://cloud.yandex.ru/ru/docs/logging/concepts/log-group)
        """
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class AuditTrailsTrailStorageDestination(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "objectPrefix":
            suggest = "object_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in AuditTrailsTrailStorageDestination. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        AuditTrailsTrailStorageDestination.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        AuditTrailsTrailStorageDestination.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 object_prefix: Optional[str] = None):
        """
        :param str bucket_name: Name of the [destination bucket](https://cloud.yandex.ru/en/docs/storage/concepts/bucket)
        :param str object_prefix: Additional prefix of the uploaded objects. If not specified, objects will be uploaded with prefix equal to `trail_id`
        """
        pulumi.set(__self__, "bucket_name", bucket_name)
        if object_prefix is not None:
            pulumi.set(__self__, "object_prefix", object_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        """
        Name of the [destination bucket](https://cloud.yandex.ru/en/docs/storage/concepts/bucket)
        """
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="objectPrefix")
    def object_prefix(self) -> Optional[str]:
        """
        Additional prefix of the uploaded objects. If not specified, objects will be uploaded with prefix equal to `trail_id`
        """
        return pulumi.get(self, "object_prefix")


@pulumi.output_type
class BackupPolicyReattempts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyReattempts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyReattempts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyReattempts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 interval: Optional[str] = None,
                 max_attempts: Optional[int] = None):
        """
        :param bool enabled: — enables or disables scheduling.
        :param str interval: — Retry interval. See `interval_type` for available values
        :param int max_attempts: — Maximum number of attempts before throwing an error
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_attempts is not None:
            pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        — enables or disables scheduling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        — Retry interval. See `interval_type` for available values
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> Optional[int]:
        """
        — Maximum number of attempts before throwing an error
        """
        return pulumi.get(self, "max_attempts")


@pulumi.output_type
class BackupPolicyRetention(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "afterBackup":
            suggest = "after_backup"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyRetention. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyRetention.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyRetention.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 after_backup: Optional[bool] = None,
                 rules: Optional[Sequence['outputs.BackupPolicyRetentionRule']] = None):
        """
        :param bool after_backup: — Defines whether retention rule applies after creating backup or before.
        """
        if after_backup is not None:
            pulumi.set(__self__, "after_backup", after_backup)
        if rules is not None:
            pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="afterBackup")
    def after_backup(self) -> Optional[bool]:
        """
        — Defines whether retention rule applies after creating backup or before.
        """
        return pulumi.get(self, "after_backup")

    @property
    @pulumi.getter
    def rules(self) -> Optional[Sequence['outputs.BackupPolicyRetentionRule']]:
        return pulumi.get(self, "rules")


@pulumi.output_type
class BackupPolicyRetentionRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAge":
            suggest = "max_age"
        elif key == "maxCount":
            suggest = "max_count"
        elif key == "repeatPeriods":
            suggest = "repeat_periods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyRetentionRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyRetentionRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyRetentionRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_age: Optional[str] = None,
                 max_count: Optional[int] = None,
                 repeat_periods: Optional[Sequence[str]] = None):
        """
        :param str max_age: — Deletes backups that older than `max_age`. Exactly one of `max_count` or `max_age` should be set.
        :param int max_count: — Deletes backups if it's count exceeds `max_count`. Exactly one of `max_count` or `max_age` should be set.
        """
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if repeat_periods is not None:
            pulumi.set(__self__, "repeat_periods", repeat_periods)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        """
        — Deletes backups that older than `max_age`. Exactly one of `max_count` or `max_age` should be set.
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[int]:
        """
        — Deletes backups if it's count exceeds `max_count`. Exactly one of `max_count` or `max_age` should be set.
        """
        return pulumi.get(self, "max_count")

    @property
    @pulumi.getter(name="repeatPeriods")
    def repeat_periods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repeat_periods")


@pulumi.output_type
class BackupPolicyScheduling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupSets":
            suggest = "backup_sets"
        elif key == "executeByInterval":
            suggest = "execute_by_interval"
        elif key == "executeByTimes":
            suggest = "execute_by_times"
        elif key == "maxParallelBackups":
            suggest = "max_parallel_backups"
        elif key == "randomMaxDelay":
            suggest = "random_max_delay"
        elif key == "weeklyBackupDay":
            suggest = "weekly_backup_day"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyScheduling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyScheduling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyScheduling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_sets: Optional[Sequence['outputs.BackupPolicySchedulingBackupSet']] = None,
                 enabled: Optional[bool] = None,
                 execute_by_interval: Optional[int] = None,
                 execute_by_times: Optional[Sequence['outputs.BackupPolicySchedulingExecuteByTime']] = None,
                 max_parallel_backups: Optional[int] = None,
                 random_max_delay: Optional[str] = None,
                 scheme: Optional[str] = None,
                 weekly_backup_day: Optional[str] = None):
        """
        :param Sequence['BackupPolicySchedulingBackupSetArgs'] backup_sets: A list of schedules with backup sets that compose the whole scheme.
        :param bool enabled: — enables or disables scheduling.
        :param int execute_by_interval: — Perform backup by interval, since last backup of the host. Maximum value is: 9999 days.
               See `interval_type` for available values. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        :param Sequence['BackupPolicySchedulingExecuteByTimeArgs'] execute_by_times: — Perform backup periodically at specific time. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        :param int max_parallel_backups: — Maximum number of backup processes allowed to run in parallel. 0 for unlimited.
        :param str random_max_delay: — Configuration of the random delay between the execution of parallel tasks.
               See `interval_type` for available values.
        :param str scheme: — Scheme of the backups.
               Available values are: `"ALWAYS_INCREMENTAL"`, `"ALWAYS_FULL"`, `"WEEKLY_FULL_DAILY_INCREMENTAL"`, `'WEEKLY_INCREMENTAL"`.
        :param str weekly_backup_day: — A day of week to start weekly backups.
               See `day_type` for available values.
        """
        if backup_sets is not None:
            pulumi.set(__self__, "backup_sets", backup_sets)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if execute_by_interval is not None:
            pulumi.set(__self__, "execute_by_interval", execute_by_interval)
        if execute_by_times is not None:
            pulumi.set(__self__, "execute_by_times", execute_by_times)
        if max_parallel_backups is not None:
            pulumi.set(__self__, "max_parallel_backups", max_parallel_backups)
        if random_max_delay is not None:
            pulumi.set(__self__, "random_max_delay", random_max_delay)
        if scheme is not None:
            pulumi.set(__self__, "scheme", scheme)
        if weekly_backup_day is not None:
            pulumi.set(__self__, "weekly_backup_day", weekly_backup_day)

    @property
    @pulumi.getter(name="backupSets")
    def backup_sets(self) -> Optional[Sequence['outputs.BackupPolicySchedulingBackupSet']]:
        """
        A list of schedules with backup sets that compose the whole scheme.
        """
        return pulumi.get(self, "backup_sets")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        — enables or disables scheduling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="executeByInterval")
    def execute_by_interval(self) -> Optional[int]:
        """
        — Perform backup by interval, since last backup of the host. Maximum value is: 9999 days.
        See `interval_type` for available values. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        """
        warnings.warn("""The 'execute_by_interval' field has been deprecated. Please use 'backup_sets' instead.""", DeprecationWarning)
        pulumi.log.warn("""execute_by_interval is deprecated: The 'execute_by_interval' field has been deprecated. Please use 'backup_sets' instead.""")

        return pulumi.get(self, "execute_by_interval")

    @property
    @pulumi.getter(name="executeByTimes")
    def execute_by_times(self) -> Optional[Sequence['outputs.BackupPolicySchedulingExecuteByTime']]:
        """
        — Perform backup periodically at specific time. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        """
        warnings.warn("""The 'execute_by_time' field has been deprecated. Please use 'backup_sets' instead.""", DeprecationWarning)
        pulumi.log.warn("""execute_by_times is deprecated: The 'execute_by_time' field has been deprecated. Please use 'backup_sets' instead.""")

        return pulumi.get(self, "execute_by_times")

    @property
    @pulumi.getter(name="maxParallelBackups")
    def max_parallel_backups(self) -> Optional[int]:
        """
        — Maximum number of backup processes allowed to run in parallel. 0 for unlimited.
        """
        return pulumi.get(self, "max_parallel_backups")

    @property
    @pulumi.getter(name="randomMaxDelay")
    def random_max_delay(self) -> Optional[str]:
        """
        — Configuration of the random delay between the execution of parallel tasks.
        See `interval_type` for available values.
        """
        return pulumi.get(self, "random_max_delay")

    @property
    @pulumi.getter
    def scheme(self) -> Optional[str]:
        """
        — Scheme of the backups.
        Available values are: `"ALWAYS_INCREMENTAL"`, `"ALWAYS_FULL"`, `"WEEKLY_FULL_DAILY_INCREMENTAL"`, `'WEEKLY_INCREMENTAL"`.
        """
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="weeklyBackupDay")
    def weekly_backup_day(self) -> Optional[str]:
        """
        — A day of week to start weekly backups.
        See `day_type` for available values.
        """
        return pulumi.get(self, "weekly_backup_day")


@pulumi.output_type
class BackupPolicySchedulingBackupSet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "executeByInterval":
            suggest = "execute_by_interval"
        elif key == "executeByTimes":
            suggest = "execute_by_times"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicySchedulingBackupSet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicySchedulingBackupSet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicySchedulingBackupSet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 execute_by_interval: Optional[int] = None,
                 execute_by_times: Optional[Sequence['outputs.BackupPolicySchedulingBackupSetExecuteByTime']] = None,
                 type: Optional[str] = None):
        """
        :param int execute_by_interval: — Perform backup by interval, since last backup of the host. Maximum value is: 9999 days.
               See `interval_type` for available values. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        :param Sequence['BackupPolicySchedulingBackupSetExecuteByTimeArgs'] execute_by_times: — Perform backup periodically at specific time. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        :param str type: — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        """
        if execute_by_interval is not None:
            pulumi.set(__self__, "execute_by_interval", execute_by_interval)
        if execute_by_times is not None:
            pulumi.set(__self__, "execute_by_times", execute_by_times)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="executeByInterval")
    def execute_by_interval(self) -> Optional[int]:
        """
        — Perform backup by interval, since last backup of the host. Maximum value is: 9999 days.
        See `interval_type` for available values. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        """
        return pulumi.get(self, "execute_by_interval")

    @property
    @pulumi.getter(name="executeByTimes")
    def execute_by_times(self) -> Optional[Sequence['outputs.BackupPolicySchedulingBackupSetExecuteByTime']]:
        """
        — Perform backup periodically at specific time. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        """
        return pulumi.get(self, "execute_by_times")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class BackupPolicySchedulingBackupSetExecuteByTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeLastDayOfMonth":
            suggest = "include_last_day_of_month"
        elif key == "repeatAts":
            suggest = "repeat_ats"
        elif key == "repeatEvery":
            suggest = "repeat_every"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicySchedulingBackupSetExecuteByTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicySchedulingBackupSetExecuteByTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicySchedulingBackupSetExecuteByTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 include_last_day_of_month: Optional[bool] = None,
                 monthdays: Optional[Sequence[int]] = None,
                 months: Optional[Sequence[int]] = None,
                 repeat_ats: Optional[Sequence[str]] = None,
                 repeat_every: Optional[str] = None,
                 weekdays: Optional[Sequence[str]] = None):
        """
        :param str type: — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        :param bool include_last_day_of_month: — If true, schedule will be applied on the last day of month.
               See `day_type` for available values.
        :param Sequence[int] monthdays: — List of days when schedule applies. Used in `"MONTHLY"` type.
        :param Sequence[str] repeat_ats: — List of time in format `"HH:MM" (24-hours format)`, when the schedule applies.
        :param str repeat_every: — Frequency of backup repetition. See `interval_type` for available values.
        :param Sequence[str] weekdays: — List of weekdays when the backup will be applied. Used in `"WEEKLY"` type.
        """
        pulumi.set(__self__, "type", type)
        if include_last_day_of_month is not None:
            pulumi.set(__self__, "include_last_day_of_month", include_last_day_of_month)
        if monthdays is not None:
            pulumi.set(__self__, "monthdays", monthdays)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if repeat_ats is not None:
            pulumi.set(__self__, "repeat_ats", repeat_ats)
        if repeat_every is not None:
            pulumi.set(__self__, "repeat_every", repeat_every)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="includeLastDayOfMonth")
    def include_last_day_of_month(self) -> Optional[bool]:
        """
        — If true, schedule will be applied on the last day of month.
        See `day_type` for available values.
        """
        return pulumi.get(self, "include_last_day_of_month")

    @property
    @pulumi.getter
    def monthdays(self) -> Optional[Sequence[int]]:
        """
        — List of days when schedule applies. Used in `"MONTHLY"` type.
        """
        return pulumi.get(self, "monthdays")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="repeatAts")
    def repeat_ats(self) -> Optional[Sequence[str]]:
        """
        — List of time in format `"HH:MM" (24-hours format)`, when the schedule applies.
        """
        return pulumi.get(self, "repeat_ats")

    @property
    @pulumi.getter(name="repeatEvery")
    def repeat_every(self) -> Optional[str]:
        """
        — Frequency of backup repetition. See `interval_type` for available values.
        """
        return pulumi.get(self, "repeat_every")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[str]]:
        """
        — List of weekdays when the backup will be applied. Used in `"WEEKLY"` type.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class BackupPolicySchedulingExecuteByTime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "includeLastDayOfMonth":
            suggest = "include_last_day_of_month"
        elif key == "repeatAts":
            suggest = "repeat_ats"
        elif key == "repeatEvery":
            suggest = "repeat_every"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicySchedulingExecuteByTime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicySchedulingExecuteByTime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicySchedulingExecuteByTime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 include_last_day_of_month: Optional[bool] = None,
                 monthdays: Optional[Sequence[int]] = None,
                 months: Optional[Sequence[int]] = None,
                 repeat_ats: Optional[Sequence[str]] = None,
                 repeat_every: Optional[str] = None,
                 weekdays: Optional[Sequence[str]] = None):
        """
        :param str type: — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        :param bool include_last_day_of_month: — If true, schedule will be applied on the last day of month.
               See `day_type` for available values.
        :param Sequence[int] monthdays: — List of days when schedule applies. Used in `"MONTHLY"` type.
        :param Sequence[str] repeat_ats: — List of time in format `"HH:MM" (24-hours format)`, when the schedule applies.
        :param str repeat_every: — Frequency of backup repetition. See `interval_type` for available values.
        :param Sequence[str] weekdays: — List of weekdays when the backup will be applied. Used in `"WEEKLY"` type.
        """
        pulumi.set(__self__, "type", type)
        if include_last_day_of_month is not None:
            pulumi.set(__self__, "include_last_day_of_month", include_last_day_of_month)
        if monthdays is not None:
            pulumi.set(__self__, "monthdays", monthdays)
        if months is not None:
            pulumi.set(__self__, "months", months)
        if repeat_ats is not None:
            pulumi.set(__self__, "repeat_ats", repeat_ats)
        if repeat_every is not None:
            pulumi.set(__self__, "repeat_every", repeat_every)
        if weekdays is not None:
            pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        — Type of the scheduling. Available values are: `"HOURLY"`, `"DAILY"`, `"WEEKLY"`, `"MONTHLY"`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="includeLastDayOfMonth")
    def include_last_day_of_month(self) -> Optional[bool]:
        """
        — If true, schedule will be applied on the last day of month.
        See `day_type` for available values.
        """
        return pulumi.get(self, "include_last_day_of_month")

    @property
    @pulumi.getter
    def monthdays(self) -> Optional[Sequence[int]]:
        """
        — List of days when schedule applies. Used in `"MONTHLY"` type.
        """
        return pulumi.get(self, "monthdays")

    @property
    @pulumi.getter
    def months(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="repeatAts")
    def repeat_ats(self) -> Optional[Sequence[str]]:
        """
        — List of time in format `"HH:MM" (24-hours format)`, when the schedule applies.
        """
        return pulumi.get(self, "repeat_ats")

    @property
    @pulumi.getter(name="repeatEvery")
    def repeat_every(self) -> Optional[str]:
        """
        — Frequency of backup repetition. See `interval_type` for available values.
        """
        return pulumi.get(self, "repeat_every")

    @property
    @pulumi.getter
    def weekdays(self) -> Optional[Sequence[str]]:
        """
        — List of weekdays when the backup will be applied. Used in `"WEEKLY"` type.
        """
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class BackupPolicyVmSnapshotReattempts(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxAttempts":
            suggest = "max_attempts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in BackupPolicyVmSnapshotReattempts. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        BackupPolicyVmSnapshotReattempts.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        BackupPolicyVmSnapshotReattempts.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: Optional[bool] = None,
                 interval: Optional[str] = None,
                 max_attempts: Optional[int] = None):
        """
        :param bool enabled: — enables or disables scheduling.
        :param str interval: — Retry interval. See `interval_type` for available values
        :param int max_attempts: — Maximum number of attempts before throwing an error
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if max_attempts is not None:
            pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        — enables or disables scheduling.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> Optional[str]:
        """
        — Retry interval. See `interval_type` for available values
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> Optional[int]:
        """
        — Maximum number of attempts before throwing an error
        """
        return pulumi.get(self, "max_attempts")


@pulumi.output_type
class CdnOriginGroupOrigin(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "originGroupId":
            suggest = "origin_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdnOriginGroupOrigin. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdnOriginGroupOrigin.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdnOriginGroupOrigin.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 source: str,
                 backup: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 origin_group_id: Optional[int] = None):
        pulumi.set(__self__, "source", source)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if origin_group_id is not None:
            pulumi.set(__self__, "origin_group_id", origin_group_id)

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def backup(self) -> Optional[bool]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="originGroupId")
    def origin_group_id(self) -> Optional[int]:
        return pulumi.get(self, "origin_group_id")


@pulumi.output_type
class CdnResourceOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedHttpMethods":
            suggest = "allowed_http_methods"
        elif key == "browserCacheSettings":
            suggest = "browser_cache_settings"
        elif key == "cacheHttpHeaders":
            suggest = "cache_http_headers"
        elif key == "customHostHeader":
            suggest = "custom_host_header"
        elif key == "customServerName":
            suggest = "custom_server_name"
        elif key == "disableCache":
            suggest = "disable_cache"
        elif key == "disableProxyForceRanges":
            suggest = "disable_proxy_force_ranges"
        elif key == "edgeCacheSettings":
            suggest = "edge_cache_settings"
        elif key == "enableIpUrlSigning":
            suggest = "enable_ip_url_signing"
        elif key == "fetchedCompressed":
            suggest = "fetched_compressed"
        elif key == "forwardHostHeader":
            suggest = "forward_host_header"
        elif key == "gzipOn":
            suggest = "gzip_on"
        elif key == "ignoreCookie":
            suggest = "ignore_cookie"
        elif key == "ignoreQueryParams":
            suggest = "ignore_query_params"
        elif key == "ipAddressAcl":
            suggest = "ip_address_acl"
        elif key == "proxyCacheMethodsSet":
            suggest = "proxy_cache_methods_set"
        elif key == "queryParamsBlacklists":
            suggest = "query_params_blacklists"
        elif key == "queryParamsWhitelists":
            suggest = "query_params_whitelists"
        elif key == "redirectHttpToHttps":
            suggest = "redirect_http_to_https"
        elif key == "redirectHttpsToHttp":
            suggest = "redirect_https_to_http"
        elif key == "secureKey":
            suggest = "secure_key"
        elif key == "staticRequestHeaders":
            suggest = "static_request_headers"
        elif key == "staticResponseHeaders":
            suggest = "static_response_headers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdnResourceOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdnResourceOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdnResourceOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_http_methods: Optional[Sequence[str]] = None,
                 browser_cache_settings: Optional[int] = None,
                 cache_http_headers: Optional[Sequence[str]] = None,
                 cors: Optional[Sequence[str]] = None,
                 custom_host_header: Optional[str] = None,
                 custom_server_name: Optional[str] = None,
                 disable_cache: Optional[bool] = None,
                 disable_proxy_force_ranges: Optional[bool] = None,
                 edge_cache_settings: Optional[int] = None,
                 enable_ip_url_signing: Optional[bool] = None,
                 fetched_compressed: Optional[bool] = None,
                 forward_host_header: Optional[bool] = None,
                 gzip_on: Optional[bool] = None,
                 ignore_cookie: Optional[bool] = None,
                 ignore_query_params: Optional[bool] = None,
                 ip_address_acl: Optional['outputs.CdnResourceOptionsIpAddressAcl'] = None,
                 proxy_cache_methods_set: Optional[bool] = None,
                 query_params_blacklists: Optional[Sequence[str]] = None,
                 query_params_whitelists: Optional[Sequence[str]] = None,
                 redirect_http_to_https: Optional[bool] = None,
                 redirect_https_to_http: Optional[bool] = None,
                 secure_key: Optional[str] = None,
                 slice: Optional[bool] = None,
                 static_request_headers: Optional[Mapping[str, str]] = None,
                 static_response_headers: Optional[Mapping[str, str]] = None):
        """
        :param Sequence[str] allowed_http_methods: HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.
        :param int browser_cache_settings: set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.
        :param Sequence[str] cache_http_headers: list HTTP headers that must be included in responses to clients.
        :param Sequence[str] cors: parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.
        :param str custom_host_header: custom value for the Host header. Your server must be able to process requests with the chosen header.
        :param str custom_server_name: wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.
        :param bool disable_cache: setup a cache status.
        :param bool disable_proxy_force_ranges: disabling proxy force ranges.
        :param int edge_cache_settings: content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
        :param bool enable_ip_url_signing: enable access limiting by IP addresses, option available only with setting secure_key.
               
               * `ip_address_acl.excepted_values` - the list of specified IP addresses to be allowed or denied depending on acl policy type.
               
               * `ip_address_acl.policy_type` - the policy type for ip_address_acl option, one of "allow" or "deny" values.
        :param bool fetched_compressed: option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.
        :param bool forward_host_header: choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.
        :param bool gzip_on: GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.
        :param bool ignore_cookie: set for ignoring cookie.
        :param bool ignore_query_params: files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.
        :param bool proxy_cache_methods_set: allows caching for GET, HEAD and POST requests.
        :param Sequence[str] query_params_blacklists: files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.
        :param Sequence[str] query_params_whitelists: files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.
        :param bool redirect_http_to_https: set up a redirect from HTTP to HTTPS.
        :param bool redirect_https_to_http: set up a redirect from HTTPS to HTTP.
        :param str secure_key: set secure key for url encoding to protect contect and limit access by IP addresses and time limits.
        :param bool slice: files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.
        :param Mapping[str, str] static_request_headers: set up custom headers that CDN servers will send in requests to origins.
        :param Mapping[str, str] static_response_headers: set up custom headers that CDN servers will send in response to clients.
        """
        if allowed_http_methods is not None:
            pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        if browser_cache_settings is not None:
            pulumi.set(__self__, "browser_cache_settings", browser_cache_settings)
        if cache_http_headers is not None:
            pulumi.set(__self__, "cache_http_headers", cache_http_headers)
        if cors is not None:
            pulumi.set(__self__, "cors", cors)
        if custom_host_header is not None:
            pulumi.set(__self__, "custom_host_header", custom_host_header)
        if custom_server_name is not None:
            pulumi.set(__self__, "custom_server_name", custom_server_name)
        if disable_cache is not None:
            pulumi.set(__self__, "disable_cache", disable_cache)
        if disable_proxy_force_ranges is not None:
            pulumi.set(__self__, "disable_proxy_force_ranges", disable_proxy_force_ranges)
        if edge_cache_settings is not None:
            pulumi.set(__self__, "edge_cache_settings", edge_cache_settings)
        if enable_ip_url_signing is not None:
            pulumi.set(__self__, "enable_ip_url_signing", enable_ip_url_signing)
        if fetched_compressed is not None:
            pulumi.set(__self__, "fetched_compressed", fetched_compressed)
        if forward_host_header is not None:
            pulumi.set(__self__, "forward_host_header", forward_host_header)
        if gzip_on is not None:
            pulumi.set(__self__, "gzip_on", gzip_on)
        if ignore_cookie is not None:
            pulumi.set(__self__, "ignore_cookie", ignore_cookie)
        if ignore_query_params is not None:
            pulumi.set(__self__, "ignore_query_params", ignore_query_params)
        if ip_address_acl is not None:
            pulumi.set(__self__, "ip_address_acl", ip_address_acl)
        if proxy_cache_methods_set is not None:
            pulumi.set(__self__, "proxy_cache_methods_set", proxy_cache_methods_set)
        if query_params_blacklists is not None:
            pulumi.set(__self__, "query_params_blacklists", query_params_blacklists)
        if query_params_whitelists is not None:
            pulumi.set(__self__, "query_params_whitelists", query_params_whitelists)
        if redirect_http_to_https is not None:
            pulumi.set(__self__, "redirect_http_to_https", redirect_http_to_https)
        if redirect_https_to_http is not None:
            pulumi.set(__self__, "redirect_https_to_http", redirect_https_to_http)
        if secure_key is not None:
            pulumi.set(__self__, "secure_key", secure_key)
        if slice is not None:
            pulumi.set(__self__, "slice", slice)
        if static_request_headers is not None:
            pulumi.set(__self__, "static_request_headers", static_request_headers)
        if static_response_headers is not None:
            pulumi.set(__self__, "static_response_headers", static_response_headers)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Optional[Sequence[str]]:
        """
        HTTP methods for your CDN content. By default the following methods are allowed: GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS. In case some methods are not allowed to the user, they will get the 405 (Method Not Allowed) response. If the method is not supported, the user gets the 501 (Not Implemented) response.
        """
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="browserCacheSettings")
    def browser_cache_settings(self) -> Optional[int]:
        """
        set up a cache period for the end-users browser. Content will be cached due to origin settings. If there are no cache settings on your origin, the content will not be cached. The list of HTTP response codes that can be cached in browsers: 200, 201, 204, 206, 301, 302, 303, 304, 307, 308. Other response codes will not be cached. The default value is 4 days.
        """
        return pulumi.get(self, "browser_cache_settings")

    @property
    @pulumi.getter(name="cacheHttpHeaders")
    def cache_http_headers(self) -> Optional[Sequence[str]]:
        """
        list HTTP headers that must be included in responses to clients.
        """
        return pulumi.get(self, "cache_http_headers")

    @property
    @pulumi.getter
    def cors(self) -> Optional[Sequence[str]]:
        """
        parameter that lets browsers get access to selected resources from a domain different to a domain from which the request is received.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="customHostHeader")
    def custom_host_header(self) -> Optional[str]:
        """
        custom value for the Host header. Your server must be able to process requests with the chosen header.
        """
        return pulumi.get(self, "custom_host_header")

    @property
    @pulumi.getter(name="customServerName")
    def custom_server_name(self) -> Optional[str]:
        """
        wildcard additional CNAME. If a resource has a wildcard additional CNAME, you can use your own certificate for content delivery via HTTPS. Read-only.
        """
        return pulumi.get(self, "custom_server_name")

    @property
    @pulumi.getter(name="disableCache")
    def disable_cache(self) -> Optional[bool]:
        """
        setup a cache status.
        """
        return pulumi.get(self, "disable_cache")

    @property
    @pulumi.getter(name="disableProxyForceRanges")
    def disable_proxy_force_ranges(self) -> Optional[bool]:
        """
        disabling proxy force ranges.
        """
        return pulumi.get(self, "disable_proxy_force_ranges")

    @property
    @pulumi.getter(name="edgeCacheSettings")
    def edge_cache_settings(self) -> Optional[int]:
        """
        content will be cached according to origin cache settings. The value applies for a response with codes 200, 201, 204, 206, 301, 302, 303, 304, 307, 308 if an origin server does not have caching HTTP headers. Responses with other codes will not be cached.
        """
        return pulumi.get(self, "edge_cache_settings")

    @property
    @pulumi.getter(name="enableIpUrlSigning")
    def enable_ip_url_signing(self) -> Optional[bool]:
        """
        enable access limiting by IP addresses, option available only with setting secure_key.

        * `ip_address_acl.excepted_values` - the list of specified IP addresses to be allowed or denied depending on acl policy type.

        * `ip_address_acl.policy_type` - the policy type for ip_address_acl option, one of "allow" or "deny" values.
        """
        return pulumi.get(self, "enable_ip_url_signing")

    @property
    @pulumi.getter(name="fetchedCompressed")
    def fetched_compressed(self) -> Optional[bool]:
        """
        option helps you to reduce the bandwidth between origin and CDN servers. Also, content delivery speed becomes higher because of reducing the time for compressing files in a CDN.
        """
        return pulumi.get(self, "fetched_compressed")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> Optional[bool]:
        """
        choose the Forward Host header option if is important to send in the request to the Origin the same Host header as was sent in the request to CDN server.
        """
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter(name="gzipOn")
    def gzip_on(self) -> Optional[bool]:
        """
        GZip compression at CDN servers reduces file size by 70% and can be as high as 90%.
        """
        return pulumi.get(self, "gzip_on")

    @property
    @pulumi.getter(name="ignoreCookie")
    def ignore_cookie(self) -> Optional[bool]:
        """
        set for ignoring cookie.
        """
        return pulumi.get(self, "ignore_cookie")

    @property
    @pulumi.getter(name="ignoreQueryParams")
    def ignore_query_params(self) -> Optional[bool]:
        """
        files with different query parameters are cached as objects with the same key regardless of the parameter value. selected by default.
        """
        return pulumi.get(self, "ignore_query_params")

    @property
    @pulumi.getter(name="ipAddressAcl")
    def ip_address_acl(self) -> Optional['outputs.CdnResourceOptionsIpAddressAcl']:
        return pulumi.get(self, "ip_address_acl")

    @property
    @pulumi.getter(name="proxyCacheMethodsSet")
    def proxy_cache_methods_set(self) -> Optional[bool]:
        """
        allows caching for GET, HEAD and POST requests.
        """
        return pulumi.get(self, "proxy_cache_methods_set")

    @property
    @pulumi.getter(name="queryParamsBlacklists")
    def query_params_blacklists(self) -> Optional[Sequence[str]]:
        """
        files with the specified query parameters are cached as objects with the same key, files with other parameters are cached as objects with different keys.
        """
        return pulumi.get(self, "query_params_blacklists")

    @property
    @pulumi.getter(name="queryParamsWhitelists")
    def query_params_whitelists(self) -> Optional[Sequence[str]]:
        """
        files with the specified query parameters are cached as objects with different keys, files with other parameters are cached as objects with the same key.
        """
        return pulumi.get(self, "query_params_whitelists")

    @property
    @pulumi.getter(name="redirectHttpToHttps")
    def redirect_http_to_https(self) -> Optional[bool]:
        """
        set up a redirect from HTTP to HTTPS.
        """
        return pulumi.get(self, "redirect_http_to_https")

    @property
    @pulumi.getter(name="redirectHttpsToHttp")
    def redirect_https_to_http(self) -> Optional[bool]:
        """
        set up a redirect from HTTPS to HTTP.
        """
        return pulumi.get(self, "redirect_https_to_http")

    @property
    @pulumi.getter(name="secureKey")
    def secure_key(self) -> Optional[str]:
        """
        set secure key for url encoding to protect contect and limit access by IP addresses and time limits.
        """
        return pulumi.get(self, "secure_key")

    @property
    @pulumi.getter
    def slice(self) -> Optional[bool]:
        """
        files larger than 10 MB will be requested and cached in parts (no larger than 10 MB each part). It reduces time to first byte. The origin must support HTTP Range requests.
        """
        return pulumi.get(self, "slice")

    @property
    @pulumi.getter(name="staticRequestHeaders")
    def static_request_headers(self) -> Optional[Mapping[str, str]]:
        """
        set up custom headers that CDN servers will send in requests to origins.
        """
        return pulumi.get(self, "static_request_headers")

    @property
    @pulumi.getter(name="staticResponseHeaders")
    def static_response_headers(self) -> Optional[Mapping[str, str]]:
        """
        set up custom headers that CDN servers will send in response to clients.
        """
        return pulumi.get(self, "static_response_headers")


@pulumi.output_type
class CdnResourceOptionsIpAddressAcl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exceptedValues":
            suggest = "excepted_values"
        elif key == "policyType":
            suggest = "policy_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdnResourceOptionsIpAddressAcl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdnResourceOptionsIpAddressAcl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdnResourceOptionsIpAddressAcl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 excepted_values: Optional[Sequence[str]] = None,
                 policy_type: Optional[str] = None):
        if excepted_values is not None:
            pulumi.set(__self__, "excepted_values", excepted_values)
        if policy_type is not None:
            pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="exceptedValues")
    def excepted_values(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "excepted_values")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> Optional[str]:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class CdnResourceSslCertificate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateManagerId":
            suggest = "certificate_manager_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CdnResourceSslCertificate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CdnResourceSslCertificate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CdnResourceSslCertificate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 certificate_manager_id: Optional[str] = None,
                 status: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if certificate_manager_id is not None:
            pulumi.set(__self__, "certificate_manager_id", certificate_manager_id)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="certificateManagerId")
    def certificate_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_manager_id")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")


@pulumi.output_type
class CmCertificateChallenge(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "createdAt":
            suggest = "created_at"
        elif key == "dnsName":
            suggest = "dns_name"
        elif key == "dnsType":
            suggest = "dns_type"
        elif key == "dnsValue":
            suggest = "dns_value"
        elif key == "httpContent":
            suggest = "http_content"
        elif key == "httpUrl":
            suggest = "http_url"
        elif key == "updatedAt":
            suggest = "updated_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CmCertificateChallenge. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CmCertificateChallenge.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CmCertificateChallenge.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 created_at: Optional[str] = None,
                 dns_name: Optional[str] = None,
                 dns_type: Optional[str] = None,
                 dns_value: Optional[str] = None,
                 domain: Optional[str] = None,
                 http_content: Optional[str] = None,
                 http_url: Optional[str] = None,
                 message: Optional[str] = None,
                 type: Optional[str] = None,
                 updated_at: Optional[str] = None):
        """
        :param str created_at: Time the challenge was created.
        :param str dns_name: DNS record name (only for DNS challenge).
        :param str dns_type: DNS record type: `"TXT"` or `"CNAME"` (only for DNS challenge).
        :param str dns_value: DNS record value (only for DNS challenge).
        :param str domain: Validated domain.
        :param str http_content: The content that should be made accessible with the given `http_url` (only for HTTP challenge).
        :param str http_url: URL where the challenge content http_content should be placed (only for HTTP challenge).
        :param str message: Current status message.
        :param str type: Challenge type `"DNS"` or `"HTTP"`.
        :param str updated_at: Last time the challenge was updated.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if dns_name is not None:
            pulumi.set(__self__, "dns_name", dns_name)
        if dns_type is not None:
            pulumi.set(__self__, "dns_type", dns_type)
        if dns_value is not None:
            pulumi.set(__self__, "dns_value", dns_value)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if http_content is not None:
            pulumi.set(__self__, "http_content", http_content)
        if http_url is not None:
            pulumi.set(__self__, "http_url", http_url)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if updated_at is not None:
            pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[str]:
        """
        Time the challenge was created.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> Optional[str]:
        """
        DNS record name (only for DNS challenge).
        """
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> Optional[str]:
        """
        DNS record type: `"TXT"` or `"CNAME"` (only for DNS challenge).
        """
        return pulumi.get(self, "dns_type")

    @property
    @pulumi.getter(name="dnsValue")
    def dns_value(self) -> Optional[str]:
        """
        DNS record value (only for DNS challenge).
        """
        return pulumi.get(self, "dns_value")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        """
        Validated domain.
        """
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="httpContent")
    def http_content(self) -> Optional[str]:
        """
        The content that should be made accessible with the given `http_url` (only for HTTP challenge).
        """
        return pulumi.get(self, "http_content")

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> Optional[str]:
        """
        URL where the challenge content http_content should be placed (only for HTTP challenge).
        """
        return pulumi.get(self, "http_url")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Current status message.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Challenge type `"DNS"` or `"HTTP"`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> Optional[str]:
        """
        Last time the challenge was updated.
        """
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class CmCertificateManaged(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "challengeType":
            suggest = "challenge_type"
        elif key == "challengeCount":
            suggest = "challenge_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CmCertificateManaged. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CmCertificateManaged.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CmCertificateManaged.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 challenge_type: str,
                 challenge_count: Optional[int] = None):
        """
        :param str challenge_type: Domain owner-check method. Possible values:
               - "DNS_CNAME" - you will need to create a CNAME dns record with the specified value. Recommended for fully automated certificate renewal;
               - "DNS_TXT" - you will need to create a TXT dns record with specified value;
               - "HTTP" - you will need to place specified value into specified url.
        :param int challenge_count: . Expected number of challenge count needed to validate certificate. 
               Resource creation will fail if the specified value does not match the actual number of challenges received from issue provider.
               This argument is helpful for safe automatic resource creation for passing challenges for multi-domain certificates.
               
               > **NOTE:** Resource creation awaits getting challenges from issue provider.
        """
        pulumi.set(__self__, "challenge_type", challenge_type)
        if challenge_count is not None:
            pulumi.set(__self__, "challenge_count", challenge_count)

    @property
    @pulumi.getter(name="challengeType")
    def challenge_type(self) -> str:
        """
        Domain owner-check method. Possible values:
        - "DNS_CNAME" - you will need to create a CNAME dns record with the specified value. Recommended for fully automated certificate renewal;
        - "DNS_TXT" - you will need to create a TXT dns record with specified value;
        - "HTTP" - you will need to place specified value into specified url.
        """
        return pulumi.get(self, "challenge_type")

    @property
    @pulumi.getter(name="challengeCount")
    def challenge_count(self) -> Optional[int]:
        """
        . Expected number of challenge count needed to validate certificate. 
        Resource creation will fail if the specified value does not match the actual number of challenges received from issue provider.
        This argument is helpful for safe automatic resource creation for passing challenges for multi-domain certificates.

        > **NOTE:** Resource creation awaits getting challenges from issue provider.
        """
        return pulumi.get(self, "challenge_count")


@pulumi.output_type
class CmCertificateSelfManaged(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privateKey":
            suggest = "private_key"
        elif key == "privateKeyLockboxSecret":
            suggest = "private_key_lockbox_secret"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in CmCertificateSelfManaged. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        CmCertificateSelfManaged.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        CmCertificateSelfManaged.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate: str,
                 private_key: Optional[str] = None,
                 private_key_lockbox_secret: Optional['outputs.CmCertificateSelfManagedPrivateKeyLockboxSecret'] = None):
        """
        :param str certificate: Certificate with chain.
        :param str private_key: Private key of certificate.
        :param 'CmCertificateSelfManagedPrivateKeyLockboxSecretArgs' private_key_lockbox_secret: Lockbox secret specification for getting private key. Structure is documented below.
               
               > **NOTE:** Only one type `private_key` or `private_key_lockbox_secret` should be specified.
        """
        pulumi.set(__self__, "certificate", certificate)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if private_key_lockbox_secret is not None:
            pulumi.set(__self__, "private_key_lockbox_secret", private_key_lockbox_secret)

    @property
    @pulumi.getter
    def certificate(self) -> str:
        """
        Certificate with chain.
        """
        return pulumi.get(self, "certificate")

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[str]:
        """
        Private key of certificate.
        """
        return pulumi.get(self, "private_key")

    @property
    @pulumi.getter(name="privateKeyLockboxSecret")
    def private_key_lockbox_secret(self) -> Optional['outputs.CmCertificateSelfManagedPrivateKeyLockboxSecret']:
        """
        Lockbox secret specification for getting private key. Structure is documented below.

        > **NOTE:** Only one type `private_key` or `private_key_lockbox_secret` should be specified.
        """
        return pulumi.get(self, "private_key_lockbox_secret")


@pulumi.output_type
class CmCertificateSelfManagedPrivateKeyLockboxSecret(dict):
    def __init__(__self__, *,
                 id: str,
                 key: str):
        """
        :param str id: Lockbox secret Id.
        :param str key: Key of the Lockbox secret, the value of which contains the private key of the certificate.
        """
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Lockbox secret Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Key of the Lockbox secret, the value of which contains the private key of the certificate.
        """
        return pulumi.get(self, "key")


@pulumi.output_type
class ComputeDiskDiskPlacementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskPlacementGroupId":
            suggest = "disk_placement_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeDiskDiskPlacementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeDiskDiskPlacementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeDiskDiskPlacementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_placement_group_id: str):
        """
        :param str disk_placement_group_id: Specifies Disk Placement Group id.
               
               > **NOTE:** Only one of `image_id` or `snapshot_id` can be specified.
        """
        pulumi.set(__self__, "disk_placement_group_id", disk_placement_group_id)

    @property
    @pulumi.getter(name="diskPlacementGroupId")
    def disk_placement_group_id(self) -> str:
        """
        Specifies Disk Placement Group id.

        > **NOTE:** Only one of `image_id` or `snapshot_id` can be specified.
        """
        return pulumi.get(self, "disk_placement_group_id")


@pulumi.output_type
class ComputeInstanceBootDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoDelete":
            suggest = "auto_delete"
        elif key == "deviceName":
            suggest = "device_name"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "initializeParams":
            suggest = "initialize_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceBootDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceBootDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceBootDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_delete: Optional[bool] = None,
                 device_name: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 initialize_params: Optional['outputs.ComputeInstanceBootDiskInitializeParams'] = None,
                 mode: Optional[str] = None):
        """
        :param bool auto_delete: Defines whether the disk will be auto-deleted when the instance
               is deleted. The default value is `True`.
        :param str device_name: Name that can be used to access an attached disk.
        :param str disk_id: The ID of the existing disk (such as those managed by
               `ComputeDisk`) to attach as a boot disk.
        :param 'ComputeInstanceBootDiskInitializeParamsArgs' initialize_params: Parameters for a new disk that will be created
               alongside the new instance. Either `initialize_params` or `disk_id` must be set. The structure is documented below.
               
               > **NOTE:** Either `initialize_params` or `disk_id` must be specified.
        :param str mode: Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.
        """
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if initialize_params is not None:
            pulumi.set(__self__, "initialize_params", initialize_params)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[bool]:
        """
        Defines whether the disk will be auto-deleted when the instance
        is deleted. The default value is `True`.
        """
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        Name that can be used to access an attached disk.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        """
        The ID of the existing disk (such as those managed by
        `ComputeDisk`) to attach as a boot disk.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Optional['outputs.ComputeInstanceBootDiskInitializeParams']:
        """
        Parameters for a new disk that will be created
        alongside the new instance. Either `initialize_params` or `disk_id` must be set. The structure is documented below.

        > **NOTE:** Either `initialize_params` or `disk_id` must be specified.
        """
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ComputeInstanceBootDiskInitializeParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSize":
            suggest = "block_size"
        elif key == "imageId":
            suggest = "image_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceBootDiskInitializeParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceBootDiskInitializeParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceBootDiskInitializeParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_size: Optional[int] = None,
                 description: Optional[str] = None,
                 image_id: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param int block_size: Block size of the disk, specified in bytes.
        :param str description: Description of the boot disk.
        :param str image_id: A disk image to initialize this disk from.
        :param str name: Name of the boot disk.
        :param int size: Size of the disk in GB.
        :param str snapshot_id: A snapshot to initialize this disk from.
               
               > **NOTE:** Either `image_id` or `snapshot_id` must be specified.
        :param str type: Disk type.
        """
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        """
        Block size of the disk, specified in bytes.
        """
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the boot disk.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        A disk image to initialize this disk from.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the boot disk.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        Size of the disk in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        A snapshot to initialize this disk from.

        > **NOTE:** Either `image_id` or `snapshot_id` must be specified.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComputeInstanceFilesystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filesystemId":
            suggest = "filesystem_id"
        elif key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceFilesystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceFilesystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceFilesystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filesystem_id: str,
                 device_name: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str filesystem_id: ID of the filesystem that should be attached.
        :param str device_name: Name of the device representing the filesystem on the instance.
        :param str mode: Mode of access to the filesystem that should be attached. By default, filesystem is attached 
               in `READ_WRITE` mode.
        """
        pulumi.set(__self__, "filesystem_id", filesystem_id)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="filesystemId")
    def filesystem_id(self) -> str:
        """
        ID of the filesystem that should be attached.
        """
        return pulumi.get(self, "filesystem_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        Name of the device representing the filesystem on the instance.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Mode of access to the filesystem that should be attached. By default, filesystem is attached 
        in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ComputeInstanceGroupAllocationPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceTagsPools":
            suggest = "instance_tags_pools"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupAllocationPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupAllocationPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupAllocationPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zones: Sequence[str],
                 instance_tags_pools: Optional[Sequence['outputs.ComputeInstanceGroupAllocationPolicyInstanceTagsPool']] = None):
        """
        :param Sequence[str] zones: A list of availability zones.
        :param Sequence['ComputeInstanceGroupAllocationPolicyInstanceTagsPoolArgs'] instance_tags_pools: Array of availability zone IDs with list of instance tags.
        """
        pulumi.set(__self__, "zones", zones)
        if instance_tags_pools is not None:
            pulumi.set(__self__, "instance_tags_pools", instance_tags_pools)

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        """
        A list of availability zones.
        """
        return pulumi.get(self, "zones")

    @property
    @pulumi.getter(name="instanceTagsPools")
    def instance_tags_pools(self) -> Optional[Sequence['outputs.ComputeInstanceGroupAllocationPolicyInstanceTagsPool']]:
        """
        Array of availability zone IDs with list of instance tags.
        """
        return pulumi.get(self, "instance_tags_pools")


@pulumi.output_type
class ComputeInstanceGroupAllocationPolicyInstanceTagsPool(dict):
    def __init__(__self__, *,
                 tags: Sequence[str],
                 zone: str):
        """
        :param Sequence[str] tags: List of tags for instances in zone.
        :param str zone: Availability zone.
        """
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        """
        List of tags for instances in zone.
        """
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Availability zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class ComputeInstanceGroupApplicationLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreHealthChecks":
            suggest = "ignore_health_checks"
        elif key == "maxOpeningTrafficDuration":
            suggest = "max_opening_traffic_duration"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "targetGroupDescription":
            suggest = "target_group_description"
        elif key == "targetGroupId":
            suggest = "target_group_id"
        elif key == "targetGroupLabels":
            suggest = "target_group_labels"
        elif key == "targetGroupName":
            suggest = "target_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupApplicationLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupApplicationLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupApplicationLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ignore_health_checks: Optional[bool] = None,
                 max_opening_traffic_duration: Optional[int] = None,
                 status_message: Optional[str] = None,
                 target_group_description: Optional[str] = None,
                 target_group_id: Optional[str] = None,
                 target_group_labels: Optional[Mapping[str, str]] = None,
                 target_group_name: Optional[str] = None):
        """
        :param bool ignore_health_checks: Do not wait load balancer health checks.
        :param int max_opening_traffic_duration: Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.
        :param str status_message: The status message of the instance.
        :param str target_group_description: A description of the target group.
        :param Mapping[str, str] target_group_labels: A set of key/value label pairs.
        :param str target_group_name: The name of the target group.
        """
        if ignore_health_checks is not None:
            pulumi.set(__self__, "ignore_health_checks", ignore_health_checks)
        if max_opening_traffic_duration is not None:
            pulumi.set(__self__, "max_opening_traffic_duration", max_opening_traffic_duration)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if target_group_description is not None:
            pulumi.set(__self__, "target_group_description", target_group_description)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)
        if target_group_labels is not None:
            pulumi.set(__self__, "target_group_labels", target_group_labels)
        if target_group_name is not None:
            pulumi.set(__self__, "target_group_name", target_group_name)

    @property
    @pulumi.getter(name="ignoreHealthChecks")
    def ignore_health_checks(self) -> Optional[bool]:
        """
        Do not wait load balancer health checks.
        """
        return pulumi.get(self, "ignore_health_checks")

    @property
    @pulumi.getter(name="maxOpeningTrafficDuration")
    def max_opening_traffic_duration(self) -> Optional[int]:
        """
        Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.
        """
        return pulumi.get(self, "max_opening_traffic_duration")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        """
        The status message of the instance.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupDescription")
    def target_group_description(self) -> Optional[str]:
        """
        A description of the target group.
        """
        return pulumi.get(self, "target_group_description")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[str]:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupLabels")
    def target_group_labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value label pairs.
        """
        return pulumi.get(self, "target_group_labels")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> Optional[str]:
        """
        The name of the target group.
        """
        return pulumi.get(self, "target_group_name")


@pulumi.output_type
class ComputeInstanceGroupDeployPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxExpansion":
            suggest = "max_expansion"
        elif key == "maxUnavailable":
            suggest = "max_unavailable"
        elif key == "maxCreating":
            suggest = "max_creating"
        elif key == "maxDeleting":
            suggest = "max_deleting"
        elif key == "startupDuration":
            suggest = "startup_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupDeployPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupDeployPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupDeployPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_expansion: int,
                 max_unavailable: int,
                 max_creating: Optional[int] = None,
                 max_deleting: Optional[int] = None,
                 startup_duration: Optional[int] = None,
                 strategy: Optional[str] = None):
        """
        :param int max_expansion: The maximum number of instances that can be temporarily allocated above the group's target size
               during the update process.
               
               - - -
        :param int max_unavailable: The maximum number of running instances that can be taken offline (stopped or deleted) at the same time
               during the update process.
        :param int max_creating: The maximum number of instances that can be created at the same time.
        :param int max_deleting: The maximum number of instances that can be deleted at the same time.
        :param int startup_duration: The amount of time in seconds to allow for an instance to start.
               Instance will be considered up and running (and start receiving traffic) only after the startup_duration
               has elapsed and all health checks are passed.
        :param str strategy: Affects the lifecycle of the instance during deployment. If set to `proactive` (default), Instance Groups
               can forcefully stop a running instance. If `opportunistic`, Instance Groups does not stop a running instance. Instead,
               it will wait until the instance stops itself or becomes unhealthy.
        """
        pulumi.set(__self__, "max_expansion", max_expansion)
        pulumi.set(__self__, "max_unavailable", max_unavailable)
        if max_creating is not None:
            pulumi.set(__self__, "max_creating", max_creating)
        if max_deleting is not None:
            pulumi.set(__self__, "max_deleting", max_deleting)
        if startup_duration is not None:
            pulumi.set(__self__, "startup_duration", startup_duration)
        if strategy is not None:
            pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="maxExpansion")
    def max_expansion(self) -> int:
        """
        The maximum number of instances that can be temporarily allocated above the group's target size
        during the update process.

        - - -
        """
        return pulumi.get(self, "max_expansion")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> int:
        """
        The maximum number of running instances that can be taken offline (stopped or deleted) at the same time
        during the update process.
        """
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="maxCreating")
    def max_creating(self) -> Optional[int]:
        """
        The maximum number of instances that can be created at the same time.
        """
        return pulumi.get(self, "max_creating")

    @property
    @pulumi.getter(name="maxDeleting")
    def max_deleting(self) -> Optional[int]:
        """
        The maximum number of instances that can be deleted at the same time.
        """
        return pulumi.get(self, "max_deleting")

    @property
    @pulumi.getter(name="startupDuration")
    def startup_duration(self) -> Optional[int]:
        """
        The amount of time in seconds to allow for an instance to start.
        Instance will be considered up and running (and start receiving traffic) only after the startup_duration
        has elapsed and all health checks are passed.
        """
        return pulumi.get(self, "startup_duration")

    @property
    @pulumi.getter
    def strategy(self) -> Optional[str]:
        """
        Affects the lifecycle of the instance during deployment. If set to `proactive` (default), Instance Groups
        can forcefully stop a running instance. If `opportunistic`, Instance Groups does not stop a running instance. Instead,
        it will wait until the instance stops itself or becomes unhealthy.
        """
        return pulumi.get(self, "strategy")


@pulumi.output_type
class ComputeInstanceGroupHealthCheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "httpOptions":
            suggest = "http_options"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupHealthCheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupHealthCheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupHealthCheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 healthy_threshold: Optional[int] = None,
                 http_options: Optional['outputs.ComputeInstanceGroupHealthCheckHttpOptions'] = None,
                 interval: Optional[int] = None,
                 tcp_options: Optional['outputs.ComputeInstanceGroupHealthCheckTcpOptions'] = None,
                 timeout: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param int healthy_threshold: The number of successful health checks before the managed instance is declared healthy.
        :param 'ComputeInstanceGroupHealthCheckHttpOptionsArgs' http_options: HTTP check options. The structure is documented below.
        :param int interval: The interval to wait between health checks in seconds.
        :param 'ComputeInstanceGroupHealthCheckTcpOptionsArgs' tcp_options: TCP check options. The structure is documented below.
        :param int timeout: The length of time to wait for a response before the health check times out in seconds.
        :param int unhealthy_threshold: The number of failed health checks before the managed instance is declared unhealthy.
        """
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_options is not None:
            pulumi.set(__self__, "http_options", http_options)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        The number of successful health checks before the managed instance is declared healthy.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpOptions")
    def http_options(self) -> Optional['outputs.ComputeInstanceGroupHealthCheckHttpOptions']:
        """
        HTTP check options. The structure is documented below.
        """
        return pulumi.get(self, "http_options")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval to wait between health checks in seconds.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.ComputeInstanceGroupHealthCheckTcpOptions']:
        """
        TCP check options. The structure is documented below.
        """
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        The length of time to wait for a response before the health check times out in seconds.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        The number of failed health checks before the managed instance is declared unhealthy.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class ComputeInstanceGroupHealthCheckHttpOptions(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int):
        """
        :param str path: The URL path used for health check requests.
        :param int port: The port used for HTTP health checks.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The URL path used for health check requests.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port used for HTTP health checks.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComputeInstanceGroupHealthCheckTcpOptions(dict):
    def __init__(__self__, *,
                 port: int):
        """
        :param int port: The port used for TCP health checks.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port used for TCP health checks.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class ComputeInstanceGroupInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "instanceId":
            suggest = "instance_id"
        elif key == "instanceTag":
            suggest = "instance_tag"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "statusChangedAt":
            suggest = "status_changed_at"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: Optional[str] = None,
                 instance_id: Optional[str] = None,
                 instance_tag: Optional[str] = None,
                 name: Optional[str] = None,
                 network_interfaces: Optional[Sequence['outputs.ComputeInstanceGroupInstanceNetworkInterface']] = None,
                 status: Optional[str] = None,
                 status_changed_at: Optional[str] = None,
                 status_message: Optional[str] = None,
                 zone_id: Optional[str] = None):
        """
        :param str fqdn: DNS record fqdn (must have dot at the end).
        :param str instance_id: The ID of the instance.
        :param str name: The name of the instance group.
        :param Sequence['ComputeInstanceGroupInstanceNetworkInterfaceArgs'] network_interfaces: Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        :param str status: The status of the instance.
        :param str status_message: The status message of the instance.
        :param str zone_id: The ID of the availability zone where the instance resides.
        """
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if instance_id is not None:
            pulumi.set(__self__, "instance_id", instance_id)
        if instance_tag is not None:
            pulumi.set(__self__, "instance_tag", instance_tag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if status_changed_at is not None:
            pulumi.set(__self__, "status_changed_at", status_changed_at)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        DNS record fqdn (must have dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> Optional[str]:
        """
        The ID of the instance.
        """
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceTag")
    def instance_tag(self) -> Optional[str]:
        return pulumi.get(self, "instance_tag")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the instance group.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceNetworkInterface']]:
        """
        Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        """
        The status of the instance.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusChangedAt")
    def status_changed_at(self) -> Optional[str]:
        return pulumi.get(self, "status_changed_at")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        """
        The status message of the instance.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The ID of the availability zone where the instance resides.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class ComputeInstanceGroupInstanceNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "natIpAddress":
            suggest = "nat_ip_address"
        elif key == "natIpVersion":
            suggest = "nat_ip_version"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 index: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 ipv4: Optional[bool] = None,
                 ipv6: Optional[bool] = None,
                 ipv6_address: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 nat: Optional[bool] = None,
                 nat_ip_address: Optional[str] = None,
                 nat_ip_version: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param int index: The index of the network interface as generated by the server.
        :param str ip_address: Manual set static IP address.
        :param bool ipv4: True if IPv4 address allocated for the network interface.
        :param str ipv6_address: Manual set static IPv6 address.
        :param str mac_address: The MAC address assigned to the network interface.
        :param bool nat: Flag for using NAT.
        :param str nat_ip_address: A public address that can be used to access the internet over NAT. Use `variables` to set.
        :param str nat_ip_version: The IP version for the public address.
        :param str subnet_id: The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.
        """
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_ip_address is not None:
            pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        if nat_ip_version is not None:
            pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        The index of the network interface as generated by the server.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Manual set static IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[bool]:
        """
        True if IPv4 address allocated for the network interface.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        Manual set static IPv6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        """
        The MAC address assigned to the network interface.
        """
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        Flag for using NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> Optional[str]:
        """
        A public address that can be used to access the internet over NAT. Use `variables` to set.
        """
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> Optional[str]:
        """
        The IP version for the public address.
        """
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDisk":
            suggest = "boot_disk"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "metadataOptions":
            suggest = "metadata_options"
        elif key == "networkSettings":
            suggest = "network_settings"
        elif key == "placementPolicy":
            suggest = "placement_policy"
        elif key == "platformId":
            suggest = "platform_id"
        elif key == "schedulingPolicy":
            suggest = "scheduling_policy"
        elif key == "secondaryDisks":
            suggest = "secondary_disks"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk: 'outputs.ComputeInstanceGroupInstanceTemplateBootDisk',
                 network_interfaces: Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterface'],
                 resources: 'outputs.ComputeInstanceGroupInstanceTemplateResources',
                 description: Optional[str] = None,
                 filesystems: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateFilesystem']] = None,
                 hostname: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 metadata_options: Optional['outputs.ComputeInstanceGroupInstanceTemplateMetadataOptions'] = None,
                 name: Optional[str] = None,
                 network_settings: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkSetting']] = None,
                 placement_policy: Optional['outputs.ComputeInstanceGroupInstanceTemplatePlacementPolicy'] = None,
                 platform_id: Optional[str] = None,
                 scheduling_policy: Optional['outputs.ComputeInstanceGroupInstanceTemplateSchedulingPolicy'] = None,
                 secondary_disks: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateSecondaryDisk']] = None,
                 service_account_id: Optional[str] = None):
        """
        :param 'ComputeInstanceGroupInstanceTemplateBootDiskArgs' boot_disk: Boot disk specifications for the instance. The structure is documented below.
        :param Sequence['ComputeInstanceGroupInstanceTemplateNetworkInterfaceArgs'] network_interfaces: Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        :param 'ComputeInstanceGroupInstanceTemplateResourcesArgs' resources: Compute resource specifications for the instance. The structure is documented below.
        :param str description: A description of the instance.
        :param Sequence['ComputeInstanceGroupInstanceTemplateFilesystemArgs'] filesystems: List of filesystems to attach to the instance. The structure is documented below.
        :param str hostname: Hostname template for the instance.   
               This field is used to generate the FQDN value of instance.
               The hostname must be unique within the network and region.
               If not specified, the hostname will be equal to id of the instance
               and FQDN will be `<id>.auto.internal`. Otherwise FQDN will be `<hostname>.<region_id>.internal`.
               In order to be unique it must contain at least on of instance unique placeholders:
               {instance.short_id}
               {instance.index}
               combination of {instance.zone_id} and {instance.index_in_zone}
               Example: my-instance-{instance.index}
               If not set, `name` value will be used
               It may also contain another placeholders, see metadata doc for full list.
        :param Mapping[str, str] labels: A set of key/value label pairs to assign to the instance.
        :param Mapping[str, str] metadata: A set of metadata key/value pairs to make available from within the instance.
        :param 'ComputeInstanceGroupInstanceTemplateMetadataOptionsArgs' metadata_options: Options allow user to configure access to managed instances metadata
        :param str name: Name template of the instance.  
               In order to be unique it must contain at least one of instance unique placeholders:
               {instance.short_id}
               {instance.index}
               combination of {instance.zone_id} and {instance.index_in_zone}
               Example: my-instance-{instance.index}
               If not set, default is used: {instance_group.id}-{instance.short_id}
               It may also contain another placeholders, see metadata doc for full list.
        :param Sequence['ComputeInstanceGroupInstanceTemplateNetworkSettingArgs'] network_settings: Network acceleration type for instance. The structure is documented below.
        :param 'ComputeInstanceGroupInstanceTemplatePlacementPolicyArgs' placement_policy: The placement policy configuration. The structure is documented below.
        :param str platform_id: The ID of the hardware platform configuration for the instance. The default is 'standard-v1'.
        :param 'ComputeInstanceGroupInstanceTemplateSchedulingPolicyArgs' scheduling_policy: The scheduling policy configuration. The structure is documented below.
        :param Sequence['ComputeInstanceGroupInstanceTemplateSecondaryDiskArgs'] secondary_disks: A list of disks to attach to the instance. The structure is documented below.
        :param str service_account_id: The ID of the service account authorized for this instance.
        """
        pulumi.set(__self__, "boot_disk", boot_disk)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "resources", resources)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if filesystems is not None:
            pulumi.set(__self__, "filesystems", filesystems)
        if hostname is not None:
            pulumi.set(__self__, "hostname", hostname)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if metadata_options is not None:
            pulumi.set(__self__, "metadata_options", metadata_options)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if network_settings is not None:
            pulumi.set(__self__, "network_settings", network_settings)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if scheduling_policy is not None:
            pulumi.set(__self__, "scheduling_policy", scheduling_policy)
        if secondary_disks is not None:
            pulumi.set(__self__, "secondary_disks", secondary_disks)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> 'outputs.ComputeInstanceGroupInstanceTemplateBootDisk':
        """
        Boot disk specifications for the instance. The structure is documented below.
        """
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterface']:
        """
        Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.ComputeInstanceGroupInstanceTemplateResources':
        """
        Compute resource specifications for the instance. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the instance.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def filesystems(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateFilesystem']]:
        """
        List of filesystems to attach to the instance. The structure is documented below.
        """
        return pulumi.get(self, "filesystems")

    @property
    @pulumi.getter
    def hostname(self) -> Optional[str]:
        """
        Hostname template for the instance.   
        This field is used to generate the FQDN value of instance.
        The hostname must be unique within the network and region.
        If not specified, the hostname will be equal to id of the instance
        and FQDN will be `<id>.auto.internal`. Otherwise FQDN will be `<hostname>.<region_id>.internal`.
        In order to be unique it must contain at least on of instance unique placeholders:
        {instance.short_id}
        {instance.index}
        combination of {instance.zone_id} and {instance.index_in_zone}
        Example: my-instance-{instance.index}
        If not set, `name` value will be used
        It may also contain another placeholders, see metadata doc for full list.
        """
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value label pairs to assign to the instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        A set of metadata key/value pairs to make available from within the instance.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> Optional['outputs.ComputeInstanceGroupInstanceTemplateMetadataOptions']:
        """
        Options allow user to configure access to managed instances metadata
        """
        return pulumi.get(self, "metadata_options")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name template of the instance.  
        In order to be unique it must contain at least one of instance unique placeholders:
        {instance.short_id}
        {instance.index}
        combination of {instance.zone_id} and {instance.index_in_zone}
        Example: my-instance-{instance.index}
        If not set, default is used: {instance_group.id}-{instance.short_id}
        It may also contain another placeholders, see metadata doc for full list.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkSettings")
    def network_settings(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkSetting']]:
        """
        Network acceleration type for instance. The structure is documented below.
        """
        return pulumi.get(self, "network_settings")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional['outputs.ComputeInstanceGroupInstanceTemplatePlacementPolicy']:
        """
        The placement policy configuration. The structure is documented below.
        """
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[str]:
        """
        The ID of the hardware platform configuration for the instance. The default is 'standard-v1'.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> Optional['outputs.ComputeInstanceGroupInstanceTemplateSchedulingPolicy']:
        """
        The scheduling policy configuration. The structure is documented below.
        """
        return pulumi.get(self, "scheduling_policy")

    @property
    @pulumi.getter(name="secondaryDisks")
    def secondary_disks(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateSecondaryDisk']]:
        """
        A list of disks to attach to the instance. The structure is documented below.
        """
        return pulumi.get(self, "secondary_disks")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        The ID of the service account authorized for this instance.
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateBootDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "initializeParams":
            suggest = "initialize_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateBootDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateBootDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateBootDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 initialize_params: Optional['outputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams'] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str device_name: This value can be used to reference the device under `/dev/disk/by-id/`.
        :param str disk_id: ID of the existing disk. To set use variables.
        :param 'ComputeInstanceGroupInstanceTemplateBootDiskInitializeParamsArgs' initialize_params: Parameters for creating a disk alongside the instance. The structure is documented below.
        :param str mode: The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        :param str name: When set can be later used to change DiskSpec of actual disk.
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if initialize_params is not None:
            pulumi.set(__self__, "initialize_params", initialize_params)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        This value can be used to reference the device under `/dev/disk/by-id/`.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        """
        ID of the existing disk. To set use variables.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Optional['outputs.ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams']:
        """
        Parameters for creating a disk alongside the instance. The structure is documented below.
        """
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        When set can be later used to change DiskSpec of actual disk.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateBootDiskInitializeParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 image_id: Optional[str] = None,
                 size: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: A description of the boot disk.
        :param str image_id: The disk image to initialize this disk from.
        :param int size: The size of the disk in GB.
        :param str snapshot_id: The snapshot to initialize this disk from.
               
               > **NOTE:** `image_id` or `snapshot_id` must be specified.
        :param str type: The disk type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the boot disk.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        The disk image to initialize this disk from.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the disk in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The snapshot to initialize this disk from.

        > **NOTE:** `image_id` or `snapshot_id` must be specified.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateFilesystem(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "filesystemId":
            suggest = "filesystem_id"
        elif key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateFilesystem. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateFilesystem.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateFilesystem.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filesystem_id: str,
                 device_name: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str filesystem_id: (Required) ID of the filesystem that should be attached.
        :param str device_name: This value can be used to reference the device under `/dev/disk/by-id/`.
        :param str mode: The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        """
        pulumi.set(__self__, "filesystem_id", filesystem_id)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="filesystemId")
    def filesystem_id(self) -> str:
        """
        (Required) ID of the filesystem that should be attached.
        """
        return pulumi.get(self, "filesystem_id")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        This value can be used to reference the device under `/dev/disk/by-id/`.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateMetadataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsV1HttpEndpoint":
            suggest = "aws_v1_http_endpoint"
        elif key == "awsV1HttpToken":
            suggest = "aws_v1_http_token"
        elif key == "gceHttpEndpoint":
            suggest = "gce_http_endpoint"
        elif key == "gceHttpToken":
            suggest = "gce_http_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateMetadataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateMetadataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateMetadataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_v1_http_endpoint: Optional[int] = None,
                 aws_v1_http_token: Optional[int] = None,
                 gce_http_endpoint: Optional[int] = None,
                 gce_http_token: Optional[int] = None):
        if aws_v1_http_endpoint is not None:
            pulumi.set(__self__, "aws_v1_http_endpoint", aws_v1_http_endpoint)
        if aws_v1_http_token is not None:
            pulumi.set(__self__, "aws_v1_http_token", aws_v1_http_token)
        if gce_http_endpoint is not None:
            pulumi.set(__self__, "gce_http_endpoint", gce_http_endpoint)
        if gce_http_token is not None:
            pulumi.set(__self__, "gce_http_token", gce_http_token)

    @property
    @pulumi.getter(name="awsV1HttpEndpoint")
    def aws_v1_http_endpoint(self) -> Optional[int]:
        return pulumi.get(self, "aws_v1_http_endpoint")

    @property
    @pulumi.getter(name="awsV1HttpToken")
    def aws_v1_http_token(self) -> Optional[int]:
        return pulumi.get(self, "aws_v1_http_token")

    @property
    @pulumi.getter(name="gceHttpEndpoint")
    def gce_http_endpoint(self) -> Optional[int]:
        return pulumi.get(self, "gce_http_endpoint")

    @property
    @pulumi.getter(name="gceHttpToken")
    def gce_http_token(self) -> Optional[int]:
        return pulumi.get(self, "gce_http_token")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsRecords":
            suggest = "dns_records"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6DnsRecords":
            suggest = "ipv6_dns_records"
        elif key == "natDnsRecords":
            suggest = "nat_dns_records"
        elif key == "natIpAddress":
            suggest = "nat_ip_address"
        elif key == "networkId":
            suggest = "network_id"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "subnetIds":
            suggest = "subnet_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_records: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord']] = None,
                 ip_address: Optional[str] = None,
                 ipv4: Optional[bool] = None,
                 ipv6: Optional[bool] = None,
                 ipv6_address: Optional[str] = None,
                 ipv6_dns_records: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord']] = None,
                 nat: Optional[bool] = None,
                 nat_dns_records: Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord']] = None,
                 nat_ip_address: Optional[str] = None,
                 network_id: Optional[str] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 subnet_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence['ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordArgs'] dns_records: List of dns records.  The structure is documented below.
        :param str ip_address: Manual set static IP address.
        :param bool ipv4: True if IPv4 address allocated for the network interface.
        :param str ipv6_address: Manual set static IPv6 address.
        :param Sequence['ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordArgs'] ipv6_dns_records: List of ipv6 dns records.  The structure is documented below.
        :param bool nat: Flag for using NAT.
        :param Sequence['ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordArgs'] nat_dns_records: List of nat dns records.  The structure is documented below.
        :param str nat_ip_address: A public address that can be used to access the internet over NAT. Use `variables` to set.
        :param str network_id: The ID of the network.
        :param Sequence[str] security_group_ids: Security group ids for network interface.
        :param Sequence[str] subnet_ids: The ID of the subnets to attach this interface to.
        """
        if dns_records is not None:
            pulumi.set(__self__, "dns_records", dns_records)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_dns_records is not None:
            pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_dns_records is not None:
            pulumi.set(__self__, "nat_dns_records", nat_dns_records)
        if nat_ip_address is not None:
            pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        if network_id is not None:
            pulumi.set(__self__, "network_id", network_id)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if subnet_ids is not None:
            pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord']]:
        """
        List of dns records.  The structure is documented below.
        """
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Manual set static IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[bool]:
        """
        True if IPv4 address allocated for the network interface.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        Manual set static IPv6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord']]:
        """
        List of ipv6 dns records.  The structure is documented below.
        """
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        Flag for using NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natDnsRecords")
    def nat_dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord']]:
        """
        List of nat dns records.  The structure is documented below.
        """
        return pulumi.get(self, "nat_dns_records")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> Optional[str]:
        """
        A public address that can be used to access the internet over NAT. Use `variables` to set.
        """
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> Optional[str]:
        """
        The ID of the network.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security group ids for network interface.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Optional[Sequence[str]]:
        """
        The ID of the subnets to attach this interface to.
        """
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record fqdn (must have dot at the end).
        :param str dns_zone_id: DNS zone id (if not set, private zone used).
        :param bool ptr: When set to true, also create PTR DNS record.
        :param int ttl: DNS record TTL.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record fqdn (must have dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone id (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record fqdn (must have dot at the end).
        :param str dns_zone_id: DNS zone id (if not set, private zone used).
        :param bool ptr: When set to true, also create PTR DNS record.
        :param int ttl: DNS record TTL.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record fqdn (must have dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone id (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record fqdn (must have dot at the end).
        :param str dns_zone_id: DNS zone id (if not set, private zone used).
        :param bool ptr: When set to true, also create PTR DNS record.
        :param int ttl: DNS record TTL.
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record fqdn (must have dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone id (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL.
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateNetworkSetting(dict):
    def __init__(__self__, *,
                 type: Optional[str] = None):
        """
        :param str type: Network acceleration type. By default a network is in `STANDARD` mode.
        """
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Network acceleration type. By default a network is in `STANDARD` mode.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplatePlacementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "placementGroupId":
            suggest = "placement_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplatePlacementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplatePlacementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplatePlacementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 placement_group_id: str):
        """
        :param str placement_group_id: Specifies the id of the Placement Group to assign to the instances.
        """
        pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> str:
        """
        Specifies the id of the Placement Group to assign to the instances.
        """
        return pulumi.get(self, "placement_group_id")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreFraction":
            suggest = "core_fraction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cores: int,
                 memory: float,
                 core_fraction: Optional[int] = None,
                 gpus: Optional[int] = None):
        """
        :param int cores: The number of CPU cores for the instance.
               
               - - -
        :param float memory: The memory size in GB.
        :param int core_fraction: If provided, specifies baseline core performance as a percent.
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "memory", memory)
        if core_fraction is not None:
            pulumi.set(__self__, "core_fraction", core_fraction)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        The number of CPU cores for the instance.

        - - -
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def memory(self) -> float:
        """
        The memory size in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> Optional[int]:
        """
        If provided, specifies baseline core performance as a percent.
        """
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateSchedulingPolicy(dict):
    def __init__(__self__, *,
                 preemptible: Optional[bool] = None):
        """
        :param bool preemptible: Specifies if the instance is preemptible. Defaults to false.
        """
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        Specifies if the instance is preemptible. Defaults to false.
        """
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateSecondaryDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deviceName":
            suggest = "device_name"
        elif key == "diskId":
            suggest = "disk_id"
        elif key == "initializeParams":
            suggest = "initialize_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateSecondaryDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateSecondaryDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateSecondaryDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 device_name: Optional[str] = None,
                 disk_id: Optional[str] = None,
                 initialize_params: Optional['outputs.ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams'] = None,
                 mode: Optional[str] = None,
                 name: Optional[str] = None):
        """
        :param str device_name: This value can be used to reference the device under `/dev/disk/by-id/`.
        :param str disk_id: ID of the existing disk. To set use variables.
        :param 'ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParamsArgs' initialize_params: Parameters used for creating a disk alongside the instance. The structure is documented below.
        :param str mode: The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        :param str name: When set can be later used to change DiskSpec of actual disk.
        """
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)
        if initialize_params is not None:
            pulumi.set(__self__, "initialize_params", initialize_params)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        This value can be used to reference the device under `/dev/disk/by-id/`.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        """
        ID of the existing disk. To set use variables.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Optional['outputs.ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams']:
        """
        Parameters used for creating a disk alongside the instance. The structure is documented below.
        """
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        The access mode to the disk resource. By default a disk is attached in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        When set can be later used to change DiskSpec of actual disk.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "imageId":
            suggest = "image_id"
        elif key == "snapshotId":
            suggest = "snapshot_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 image_id: Optional[str] = None,
                 size: Optional[int] = None,
                 snapshot_id: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str description: A description of the boot disk.
        :param str image_id: The disk image to initialize this disk from.
        :param int size: The size of the disk in GB.
        :param str snapshot_id: The snapshot to initialize this disk from.
               
               > **NOTE:** `image_id` or `snapshot_id` must be specified.
        :param str type: The disk type.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if image_id is not None:
            pulumi.set(__self__, "image_id", image_id)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if snapshot_id is not None:
            pulumi.set(__self__, "snapshot_id", snapshot_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the boot disk.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> Optional[str]:
        """
        The disk image to initialize this disk from.
        """
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the disk in GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> Optional[str]:
        """
        The snapshot to initialize this disk from.

        > **NOTE:** `image_id` or `snapshot_id` must be specified.
        """
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class ComputeInstanceGroupLoadBalancer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ignoreHealthChecks":
            suggest = "ignore_health_checks"
        elif key == "maxOpeningTrafficDuration":
            suggest = "max_opening_traffic_duration"
        elif key == "statusMessage":
            suggest = "status_message"
        elif key == "targetGroupDescription":
            suggest = "target_group_description"
        elif key == "targetGroupId":
            suggest = "target_group_id"
        elif key == "targetGroupLabels":
            suggest = "target_group_labels"
        elif key == "targetGroupName":
            suggest = "target_group_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupLoadBalancer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupLoadBalancer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupLoadBalancer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ignore_health_checks: Optional[bool] = None,
                 max_opening_traffic_duration: Optional[int] = None,
                 status_message: Optional[str] = None,
                 target_group_description: Optional[str] = None,
                 target_group_id: Optional[str] = None,
                 target_group_labels: Optional[Mapping[str, str]] = None,
                 target_group_name: Optional[str] = None):
        """
        :param bool ignore_health_checks: Do not wait load balancer health checks.
        :param int max_opening_traffic_duration: Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.
        :param str status_message: The status message of the target group.
        :param str target_group_description: A description of the target group.
        :param str target_group_id: The ID of the target group.
        :param Mapping[str, str] target_group_labels: A set of key/value label pairs.
        :param str target_group_name: The name of the target group.
        """
        if ignore_health_checks is not None:
            pulumi.set(__self__, "ignore_health_checks", ignore_health_checks)
        if max_opening_traffic_duration is not None:
            pulumi.set(__self__, "max_opening_traffic_duration", max_opening_traffic_duration)
        if status_message is not None:
            pulumi.set(__self__, "status_message", status_message)
        if target_group_description is not None:
            pulumi.set(__self__, "target_group_description", target_group_description)
        if target_group_id is not None:
            pulumi.set(__self__, "target_group_id", target_group_id)
        if target_group_labels is not None:
            pulumi.set(__self__, "target_group_labels", target_group_labels)
        if target_group_name is not None:
            pulumi.set(__self__, "target_group_name", target_group_name)

    @property
    @pulumi.getter(name="ignoreHealthChecks")
    def ignore_health_checks(self) -> Optional[bool]:
        """
        Do not wait load balancer health checks.
        """
        return pulumi.get(self, "ignore_health_checks")

    @property
    @pulumi.getter(name="maxOpeningTrafficDuration")
    def max_opening_traffic_duration(self) -> Optional[int]:
        """
        Timeout for waiting for the VM to be checked by the load balancer. If the timeout is exceeded, the VM will be turned off based on the deployment policy. Specified in seconds.
        """
        return pulumi.get(self, "max_opening_traffic_duration")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> Optional[str]:
        """
        The status message of the target group.
        """
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupDescription")
    def target_group_description(self) -> Optional[str]:
        """
        A description of the target group.
        """
        return pulumi.get(self, "target_group_description")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> Optional[str]:
        """
        The ID of the target group.
        """
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupLabels")
    def target_group_labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value label pairs.
        """
        return pulumi.get(self, "target_group_labels")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> Optional[str]:
        """
        The name of the target group.
        """
        return pulumi.get(self, "target_group_name")


@pulumi.output_type
class ComputeInstanceGroupScalePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScale":
            suggest = "auto_scale"
        elif key == "fixedScale":
            suggest = "fixed_scale"
        elif key == "testAutoScale":
            suggest = "test_auto_scale"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupScalePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupScalePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupScalePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scale: Optional['outputs.ComputeInstanceGroupScalePolicyAutoScale'] = None,
                 fixed_scale: Optional['outputs.ComputeInstanceGroupScalePolicyFixedScale'] = None,
                 test_auto_scale: Optional['outputs.ComputeInstanceGroupScalePolicyTestAutoScale'] = None):
        """
        :param 'ComputeInstanceGroupScalePolicyAutoScaleArgs' auto_scale: The auto scaling policy of the instance group. The structure is documented below.
               
               > **NOTE:** Either `fixed_scale` or `auto_scale` must be specified.
        :param 'ComputeInstanceGroupScalePolicyFixedScaleArgs' fixed_scale: The fixed scaling policy of the instance group. The structure is documented below.
        :param 'ComputeInstanceGroupScalePolicyTestAutoScaleArgs' test_auto_scale: The test auto scaling policy of the instance group. Use it to test how the auto scale works. The structure is documented below.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if fixed_scale is not None:
            pulumi.set(__self__, "fixed_scale", fixed_scale)
        if test_auto_scale is not None:
            pulumi.set(__self__, "test_auto_scale", test_auto_scale)

    @property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional['outputs.ComputeInstanceGroupScalePolicyAutoScale']:
        """
        The auto scaling policy of the instance group. The structure is documented below.

        > **NOTE:** Either `fixed_scale` or `auto_scale` must be specified.
        """
        return pulumi.get(self, "auto_scale")

    @property
    @pulumi.getter(name="fixedScale")
    def fixed_scale(self) -> Optional['outputs.ComputeInstanceGroupScalePolicyFixedScale']:
        """
        The fixed scaling policy of the instance group. The structure is documented below.
        """
        return pulumi.get(self, "fixed_scale")

    @property
    @pulumi.getter(name="testAutoScale")
    def test_auto_scale(self) -> Optional['outputs.ComputeInstanceGroupScalePolicyTestAutoScale']:
        """
        The test auto scaling policy of the instance group. Use it to test how the auto scale works. The structure is documented below.
        """
        return pulumi.get(self, "test_auto_scale")


@pulumi.output_type
class ComputeInstanceGroupScalePolicyAutoScale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialSize":
            suggest = "initial_size"
        elif key == "measurementDuration":
            suggest = "measurement_duration"
        elif key == "autoScaleType":
            suggest = "auto_scale_type"
        elif key == "cpuUtilizationTarget":
            suggest = "cpu_utilization_target"
        elif key == "customRules":
            suggest = "custom_rules"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minZoneSize":
            suggest = "min_zone_size"
        elif key == "stabilizationDuration":
            suggest = "stabilization_duration"
        elif key == "warmupDuration":
            suggest = "warmup_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupScalePolicyAutoScale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupScalePolicyAutoScale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupScalePolicyAutoScale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initial_size: int,
                 measurement_duration: int,
                 auto_scale_type: Optional[str] = None,
                 cpu_utilization_target: Optional[float] = None,
                 custom_rules: Optional[Sequence['outputs.ComputeInstanceGroupScalePolicyAutoScaleCustomRule']] = None,
                 max_size: Optional[int] = None,
                 min_zone_size: Optional[int] = None,
                 stabilization_duration: Optional[int] = None,
                 warmup_duration: Optional[int] = None):
        """
        :param int initial_size: The initial number of instances in the instance group.
        :param int measurement_duration: The amount of time, in seconds, that metrics are averaged for.
               If the average value at the end of the interval is higher than the `cpu_utilization_target`,
               the instance group will increase the number of virtual machines in the group.
        :param str auto_scale_type: . Autoscale type, can be `ZONAL` or `REGIONAL`. By default `ZONAL` type is used.
        :param float cpu_utilization_target: Target CPU load level.
        :param Sequence['ComputeInstanceGroupScalePolicyAutoScaleCustomRuleArgs'] custom_rules: A list of custom rules. The structure is documented below.
        :param int max_size: The maximum number of virtual machines in the group.
        :param int min_zone_size: The minimum number of virtual machines in a single availability zone.
        :param int stabilization_duration: The minimum time interval, in seconds, to monitor the load before
               an instance group can reduce the number of virtual machines in the group. During this time, the group
               will not decrease even if the average load falls below the value of `cpu_utilization_target`.
        :param int warmup_duration: The warm-up time of the virtual machine, in seconds. During this time,
               traffic is fed to the virtual machine, but load metrics are not taken into account.
        """
        pulumi.set(__self__, "initial_size", initial_size)
        pulumi.set(__self__, "measurement_duration", measurement_duration)
        if auto_scale_type is not None:
            pulumi.set(__self__, "auto_scale_type", auto_scale_type)
        if cpu_utilization_target is not None:
            pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        if custom_rules is not None:
            pulumi.set(__self__, "custom_rules", custom_rules)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_zone_size is not None:
            pulumi.set(__self__, "min_zone_size", min_zone_size)
        if stabilization_duration is not None:
            pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        if warmup_duration is not None:
            pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="initialSize")
    def initial_size(self) -> int:
        """
        The initial number of instances in the instance group.
        """
        return pulumi.get(self, "initial_size")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> int:
        """
        The amount of time, in seconds, that metrics are averaged for.
        If the average value at the end of the interval is higher than the `cpu_utilization_target`,
        the instance group will increase the number of virtual machines in the group.
        """
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter(name="autoScaleType")
    def auto_scale_type(self) -> Optional[str]:
        """
        . Autoscale type, can be `ZONAL` or `REGIONAL`. By default `ZONAL` type is used.
        """
        return pulumi.get(self, "auto_scale_type")

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> Optional[float]:
        """
        Target CPU load level.
        """
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="customRules")
    def custom_rules(self) -> Optional[Sequence['outputs.ComputeInstanceGroupScalePolicyAutoScaleCustomRule']]:
        """
        A list of custom rules. The structure is documented below.
        """
        return pulumi.get(self, "custom_rules")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        The maximum number of virtual machines in the group.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minZoneSize")
    def min_zone_size(self) -> Optional[int]:
        """
        The minimum number of virtual machines in a single availability zone.
        """
        return pulumi.get(self, "min_zone_size")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> Optional[int]:
        """
        The minimum time interval, in seconds, to monitor the load before
        an instance group can reduce the number of virtual machines in the group. During this time, the group
        will not decrease even if the average load falls below the value of `cpu_utilization_target`.
        """
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> Optional[int]:
        """
        The warm-up time of the virtual machine, in seconds. During this time,
        traffic is fed to the virtual machine, but load metrics are not taken into account.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class ComputeInstanceGroupScalePolicyAutoScaleCustomRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "ruleType":
            suggest = "rule_type"
        elif key == "folderId":
            suggest = "folder_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupScalePolicyAutoScaleCustomRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupScalePolicyAutoScaleCustomRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupScalePolicyAutoScaleCustomRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: str,
                 metric_type: str,
                 rule_type: str,
                 target: float,
                 folder_id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 service: Optional[str] = None):
        """
        :param str metric_name: The name of metric.
        :param str metric_type: Metric type, `GAUGE` or `COUNTER`.
        :param str rule_type: Rule type: `UTILIZATION` - This type means that the metric applies to one instance.
               First, Instance Groups calculates the average metric value for each instance,
               then averages the values for instances in one availability zone.
               This type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.
               This type of metric must have the `zone_id` label.
        :param float target: Target metric value level.
        :param str folder_id: Folder ID of custom metric in Yandex Monitoring that should be used for scaling.
        :param Mapping[str, str] labels: A map of labels of metric.
        :param str service: Service of custom metric in Yandex Monitoring that should be used for scaling.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "target", target)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The name of metric.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type, `GAUGE` or `COUNTER`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Rule type: `UTILIZATION` - This type means that the metric applies to one instance.
        First, Instance Groups calculates the average metric value for each instance,
        then averages the values for instances in one availability zone.
        This type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.
        This type of metric must have the `zone_id` label.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def target(self) -> float:
        """
        Target metric value level.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Folder ID of custom metric in Yandex Monitoring that should be used for scaling.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        A map of labels of metric.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        Service of custom metric in Yandex Monitoring that should be used for scaling.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class ComputeInstanceGroupScalePolicyFixedScale(dict):
    def __init__(__self__, *,
                 size: int):
        """
        :param int size: The number of instances in the instance group.
        """
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        The number of instances in the instance group.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class ComputeInstanceGroupScalePolicyTestAutoScale(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initialSize":
            suggest = "initial_size"
        elif key == "measurementDuration":
            suggest = "measurement_duration"
        elif key == "autoScaleType":
            suggest = "auto_scale_type"
        elif key == "cpuUtilizationTarget":
            suggest = "cpu_utilization_target"
        elif key == "customRules":
            suggest = "custom_rules"
        elif key == "maxSize":
            suggest = "max_size"
        elif key == "minZoneSize":
            suggest = "min_zone_size"
        elif key == "stabilizationDuration":
            suggest = "stabilization_duration"
        elif key == "warmupDuration":
            suggest = "warmup_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupScalePolicyTestAutoScale. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupScalePolicyTestAutoScale.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupScalePolicyTestAutoScale.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initial_size: int,
                 measurement_duration: int,
                 auto_scale_type: Optional[str] = None,
                 cpu_utilization_target: Optional[float] = None,
                 custom_rules: Optional[Sequence['outputs.ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule']] = None,
                 max_size: Optional[int] = None,
                 min_zone_size: Optional[int] = None,
                 stabilization_duration: Optional[int] = None,
                 warmup_duration: Optional[int] = None):
        """
        :param int initial_size: The initial number of instances in the instance group.
        :param int measurement_duration: The amount of time, in seconds, that metrics are averaged for.
               If the average value at the end of the interval is higher than the `cpu_utilization_target`,
               the instance group will increase the number of virtual machines in the group.
        :param str auto_scale_type: . Autoscale type, can be `ZONAL` or `REGIONAL`. By default `ZONAL` type is used.
        :param float cpu_utilization_target: Target CPU load level.
        :param Sequence['ComputeInstanceGroupScalePolicyTestAutoScaleCustomRuleArgs'] custom_rules: A list of custom rules. The structure is documented below.
        :param int max_size: The maximum number of virtual machines in the group.
        :param int min_zone_size: The minimum number of virtual machines in a single availability zone.
        :param int stabilization_duration: The minimum time interval, in seconds, to monitor the load before
               an instance group can reduce the number of virtual machines in the group. During this time, the group
               will not decrease even if the average load falls below the value of `cpu_utilization_target`.
        :param int warmup_duration: The warm-up time of the virtual machine, in seconds. During this time,
               traffic is fed to the virtual machine, but load metrics are not taken into account.
        """
        pulumi.set(__self__, "initial_size", initial_size)
        pulumi.set(__self__, "measurement_duration", measurement_duration)
        if auto_scale_type is not None:
            pulumi.set(__self__, "auto_scale_type", auto_scale_type)
        if cpu_utilization_target is not None:
            pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        if custom_rules is not None:
            pulumi.set(__self__, "custom_rules", custom_rules)
        if max_size is not None:
            pulumi.set(__self__, "max_size", max_size)
        if min_zone_size is not None:
            pulumi.set(__self__, "min_zone_size", min_zone_size)
        if stabilization_duration is not None:
            pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        if warmup_duration is not None:
            pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="initialSize")
    def initial_size(self) -> int:
        """
        The initial number of instances in the instance group.
        """
        return pulumi.get(self, "initial_size")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> int:
        """
        The amount of time, in seconds, that metrics are averaged for.
        If the average value at the end of the interval is higher than the `cpu_utilization_target`,
        the instance group will increase the number of virtual machines in the group.
        """
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter(name="autoScaleType")
    def auto_scale_type(self) -> Optional[str]:
        """
        . Autoscale type, can be `ZONAL` or `REGIONAL`. By default `ZONAL` type is used.
        """
        return pulumi.get(self, "auto_scale_type")

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> Optional[float]:
        """
        Target CPU load level.
        """
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="customRules")
    def custom_rules(self) -> Optional[Sequence['outputs.ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule']]:
        """
        A list of custom rules. The structure is documented below.
        """
        return pulumi.get(self, "custom_rules")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> Optional[int]:
        """
        The maximum number of virtual machines in the group.
        """
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="minZoneSize")
    def min_zone_size(self) -> Optional[int]:
        """
        The minimum number of virtual machines in a single availability zone.
        """
        return pulumi.get(self, "min_zone_size")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> Optional[int]:
        """
        The minimum time interval, in seconds, to monitor the load before
        an instance group can reduce the number of virtual machines in the group. During this time, the group
        will not decrease even if the average load falls below the value of `cpu_utilization_target`.
        """
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> Optional[int]:
        """
        The warm-up time of the virtual machine, in seconds. During this time,
        traffic is fed to the virtual machine, but load metrics are not taken into account.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "metricName":
            suggest = "metric_name"
        elif key == "metricType":
            suggest = "metric_type"
        elif key == "ruleType":
            suggest = "rule_type"
        elif key == "folderId":
            suggest = "folder_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceGroupScalePolicyTestAutoScaleCustomRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 metric_name: str,
                 metric_type: str,
                 rule_type: str,
                 target: float,
                 folder_id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 service: Optional[str] = None):
        """
        :param str metric_name: The name of metric.
        :param str metric_type: Metric type, `GAUGE` or `COUNTER`.
        :param str rule_type: Rule type: `UTILIZATION` - This type means that the metric applies to one instance.
               First, Instance Groups calculates the average metric value for each instance,
               then averages the values for instances in one availability zone.
               This type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.
               This type of metric must have the `zone_id` label.
        :param float target: Target metric value level.
        :param str folder_id: Folder ID of custom metric in Yandex Monitoring that should be used for scaling.
        :param Mapping[str, str] labels: A map of labels of metric.
        :param str service: Service of custom metric in Yandex Monitoring that should be used for scaling.
        """
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "target", target)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if service is not None:
            pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        """
        The name of metric.
        """
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        """
        Metric type, `GAUGE` or `COUNTER`.
        """
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        """
        Rule type: `UTILIZATION` - This type means that the metric applies to one instance.
        First, Instance Groups calculates the average metric value for each instance,
        then averages the values for instances in one availability zone.
        This type of metric must have the `instance_id` label. `WORKLOAD` - This type means that the metric applies to instances in one availability zone.
        This type of metric must have the `zone_id` label.
        """
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def target(self) -> float:
        """
        Target metric value level.
        """
        return pulumi.get(self, "target")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Folder ID of custom metric in Yandex Monitoring that should be used for scaling.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        A map of labels of metric.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def service(self) -> Optional[str]:
        """
        Service of custom metric in Yandex Monitoring that should be used for scaling.
        """
        return pulumi.get(self, "service")


@pulumi.output_type
class ComputeInstanceLocalDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sizeBytes":
            suggest = "size_bytes"
        elif key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceLocalDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceLocalDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceLocalDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 size_bytes: int,
                 device_name: Optional[str] = None):
        """
        :param int size_bytes: Size of the disk, specified in bytes.
               
               > **NOTE:** Local disks are not available for all users by default.
        :param str device_name: Name that can be used to access an attached disk.
        """
        pulumi.set(__self__, "size_bytes", size_bytes)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> int:
        """
        Size of the disk, specified in bytes.

        > **NOTE:** Local disks are not available for all users by default.
        """
        return pulumi.get(self, "size_bytes")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        Name that can be used to access an attached disk.
        """
        return pulumi.get(self, "device_name")


@pulumi.output_type
class ComputeInstanceMetadataOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "awsV1HttpEndpoint":
            suggest = "aws_v1_http_endpoint"
        elif key == "awsV1HttpToken":
            suggest = "aws_v1_http_token"
        elif key == "gceHttpEndpoint":
            suggest = "gce_http_endpoint"
        elif key == "gceHttpToken":
            suggest = "gce_http_token"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceMetadataOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceMetadataOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceMetadataOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aws_v1_http_endpoint: Optional[int] = None,
                 aws_v1_http_token: Optional[int] = None,
                 gce_http_endpoint: Optional[int] = None,
                 gce_http_token: Optional[int] = None):
        if aws_v1_http_endpoint is not None:
            pulumi.set(__self__, "aws_v1_http_endpoint", aws_v1_http_endpoint)
        if aws_v1_http_token is not None:
            pulumi.set(__self__, "aws_v1_http_token", aws_v1_http_token)
        if gce_http_endpoint is not None:
            pulumi.set(__self__, "gce_http_endpoint", gce_http_endpoint)
        if gce_http_token is not None:
            pulumi.set(__self__, "gce_http_token", gce_http_token)

    @property
    @pulumi.getter(name="awsV1HttpEndpoint")
    def aws_v1_http_endpoint(self) -> Optional[int]:
        return pulumi.get(self, "aws_v1_http_endpoint")

    @property
    @pulumi.getter(name="awsV1HttpToken")
    def aws_v1_http_token(self) -> Optional[int]:
        return pulumi.get(self, "aws_v1_http_token")

    @property
    @pulumi.getter(name="gceHttpEndpoint")
    def gce_http_endpoint(self) -> Optional[int]:
        return pulumi.get(self, "gce_http_endpoint")

    @property
    @pulumi.getter(name="gceHttpToken")
    def gce_http_token(self) -> Optional[int]:
        return pulumi.get(self, "gce_http_token")


@pulumi.output_type
class ComputeInstanceNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "dnsRecords":
            suggest = "dns_records"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "ipv6DnsRecords":
            suggest = "ipv6_dns_records"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "natDnsRecords":
            suggest = "nat_dns_records"
        elif key == "natIpAddress":
            suggest = "nat_ip_address"
        elif key == "natIpVersion":
            suggest = "nat_ip_version"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 dns_records: Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceDnsRecord']] = None,
                 index: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 ipv4: Optional[bool] = None,
                 ipv6: Optional[bool] = None,
                 ipv6_address: Optional[str] = None,
                 ipv6_dns_records: Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceIpv6DnsRecord']] = None,
                 mac_address: Optional[str] = None,
                 nat: Optional[bool] = None,
                 nat_dns_records: Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceNatDnsRecord']] = None,
                 nat_ip_address: Optional[str] = None,
                 nat_ip_version: Optional[str] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param str subnet_id: ID of the subnet to attach this
               interface to. The subnet must exist in the same zone where this instance will be
               created.
        :param Sequence['ComputeInstanceNetworkInterfaceDnsRecordArgs'] dns_records: List of configurations for creating ipv4 DNS records. The structure is documented below.
        :param int index: Index of network interface, will be calculated automatically for instance create or update operations
               if not specified. Required for attach/detach operations.
        :param str ip_address: The private IP address to assign to the instance. If
               empty, the address will be automatically assigned from the specified subnet.
        :param bool ipv4: Allocate an IPv4 address for the interface. The default value is `true`.
        :param bool ipv6: If true, allocate an IPv6 address for the interface.
               The address will be automatically assigned from the specified subnet.
        :param str ipv6_address: The private IPv6 address to assign to the instance.
        :param Sequence['ComputeInstanceNetworkInterfaceIpv6DnsRecordArgs'] ipv6_dns_records: List of configurations for creating ipv6 DNS records. The structure is documented below.
        :param bool nat: Provide a public address, for instance, to access the internet over NAT.
        :param Sequence['ComputeInstanceNetworkInterfaceNatDnsRecordArgs'] nat_dns_records: List of configurations for creating ipv4 NAT DNS records. The structure is documented below.
        :param str nat_ip_address: Provide a public address, for instance, to access the internet over NAT. Address should be already reserved in web UI.
        :param Sequence[str] security_group_ids: Security group ids for network interface.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if dns_records is not None:
            pulumi.set(__self__, "dns_records", dns_records)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if ipv6_dns_records is not None:
            pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_dns_records is not None:
            pulumi.set(__self__, "nat_dns_records", nat_dns_records)
        if nat_ip_address is not None:
            pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        if nat_ip_version is not None:
            pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet to attach this
        interface to. The subnet must exist in the same zone where this instance will be
        created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceDnsRecord']]:
        """
        List of configurations for creating ipv4 DNS records. The structure is documented below.
        """
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        """
        Index of network interface, will be calculated automatically for instance create or update operations
        if not specified. Required for attach/detach operations.
        """
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        The private IP address to assign to the instance. If
        empty, the address will be automatically assigned from the specified subnet.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[bool]:
        """
        Allocate an IPv4 address for the interface. The default value is `true`.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        """
        If true, allocate an IPv6 address for the interface.
        The address will be automatically assigned from the specified subnet.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        The private IPv6 address to assign to the instance.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceIpv6DnsRecord']]:
        """
        List of configurations for creating ipv6 DNS records. The structure is documented below.
        """
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        Provide a public address, for instance, to access the internet over NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natDnsRecords")
    def nat_dns_records(self) -> Optional[Sequence['outputs.ComputeInstanceNetworkInterfaceNatDnsRecord']]:
        """
        List of configurations for creating ipv4 NAT DNS records. The structure is documented below.
        """
        return pulumi.get(self, "nat_dns_records")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> Optional[str]:
        """
        Provide a public address, for instance, to access the internet over NAT. Address should be already reserved in web UI.
        """
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> Optional[str]:
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security group ids for network interface.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class ComputeInstanceNetworkInterfaceDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceNetworkInterfaceDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceNetworkInterfaceDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceNetworkInterfaceDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record FQDN (must have a dot at the end).
        :param str dns_zone_id: DNS zone ID (if not set, private zone used).
        :param bool ptr: When set to true, also create a PTR DNS record.
        :param int ttl: DNS record TTL. in seconds
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record FQDN (must have a dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone ID (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create a PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL. in seconds
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstanceNetworkInterfaceIpv6DnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceNetworkInterfaceIpv6DnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record FQDN (must have a dot at the end).
        :param str dns_zone_id: DNS zone ID (if not set, private zone used).
        :param bool ptr: When set to true, also create a PTR DNS record.
        :param int ttl: DNS record TTL. in seconds
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record FQDN (must have a dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone ID (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create a PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL. in seconds
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstanceNetworkInterfaceNatDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceNetworkInterfaceNatDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceNetworkInterfaceNatDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceNetworkInterfaceNatDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record FQDN (must have a dot at the end).
        :param str dns_zone_id: DNS zone ID (if not set, private zone used).
        :param bool ptr: When set to true, also create a PTR DNS record.
        :param int ttl: DNS record TTL. in seconds
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record FQDN (must have a dot at the end).
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone ID (if not set, private zone used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create a PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL. in seconds
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class ComputeInstancePlacementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostAffinityRules":
            suggest = "host_affinity_rules"
        elif key == "placementGroupId":
            suggest = "placement_group_id"
        elif key == "placementGroupPartition":
            suggest = "placement_group_partition"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstancePlacementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstancePlacementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstancePlacementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host_affinity_rules: Optional[Sequence['outputs.ComputeInstancePlacementPolicyHostAffinityRule']] = None,
                 placement_group_id: Optional[str] = None,
                 placement_group_partition: Optional[int] = None):
        """
        :param str placement_group_id: Specifies the id of the Placement Group to assign to the instance.
        """
        if host_affinity_rules is not None:
            pulumi.set(__self__, "host_affinity_rules", host_affinity_rules)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)
        if placement_group_partition is not None:
            pulumi.set(__self__, "placement_group_partition", placement_group_partition)

    @property
    @pulumi.getter(name="hostAffinityRules")
    def host_affinity_rules(self) -> Optional[Sequence['outputs.ComputeInstancePlacementPolicyHostAffinityRule']]:
        return pulumi.get(self, "host_affinity_rules")

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[str]:
        """
        Specifies the id of the Placement Group to assign to the instance.
        """
        return pulumi.get(self, "placement_group_id")

    @property
    @pulumi.getter(name="placementGroupPartition")
    def placement_group_partition(self) -> Optional[int]:
        return pulumi.get(self, "placement_group_partition")


@pulumi.output_type
class ComputeInstancePlacementPolicyHostAffinityRule(dict):
    def __init__(__self__, *,
                 key: str,
                 op: str,
                 values: Sequence[str]):
        """
        :param str key: Affinity label or one of reserved values - `yc.hostId`, `yc.hostGroupId`.
        :param str op: Affinity action. The only value supported is `IN`.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        Affinity label or one of reserved values - `yc.hostId`, `yc.hostGroupId`.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def op(self) -> str:
        """
        Affinity action. The only value supported is `IN`.
        """
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class ComputeInstanceResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreFraction":
            suggest = "core_fraction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cores: int,
                 memory: float,
                 core_fraction: Optional[int] = None,
                 gpus: Optional[int] = None):
        """
        :param int cores: CPU cores for the instance.
        :param float memory: Memory size in GB.
        :param int core_fraction: If provided, specifies baseline performance for a core as a percent.
        :param int gpus: If provided, specifies the number of GPU devices for the instance
        """
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "memory", memory)
        if core_fraction is not None:
            pulumi.set(__self__, "core_fraction", core_fraction)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)

    @property
    @pulumi.getter
    def cores(self) -> int:
        """
        CPU cores for the instance.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def memory(self) -> float:
        """
        Memory size in GB.
        """
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> Optional[int]:
        """
        If provided, specifies baseline performance for a core as a percent.
        """
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        """
        If provided, specifies the number of GPU devices for the instance
        """
        return pulumi.get(self, "gpus")


@pulumi.output_type
class ComputeInstanceSchedulingPolicy(dict):
    def __init__(__self__, *,
                 preemptible: Optional[bool] = None):
        """
        :param bool preemptible: Specifies if the instance is preemptible. Defaults to false.
        """
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        Specifies if the instance is preemptible. Defaults to false.
        """
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class ComputeInstanceSecondaryDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskId":
            suggest = "disk_id"
        elif key == "autoDelete":
            suggest = "auto_delete"
        elif key == "deviceName":
            suggest = "device_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeInstanceSecondaryDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeInstanceSecondaryDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeInstanceSecondaryDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_id: str,
                 auto_delete: Optional[bool] = None,
                 device_name: Optional[str] = None,
                 mode: Optional[str] = None):
        """
        :param str disk_id: ID of the disk that is attached to the instance.
        :param bool auto_delete: Whether the disk is auto-deleted when the instance
               is deleted. The default value is false.
        :param str device_name: Name that can be used to access an attached disk
               under `/dev/disk/by-id/`.
        :param str mode: Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.
        """
        pulumi.set(__self__, "disk_id", disk_id)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        """
        ID of the disk that is attached to the instance.
        """
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[bool]:
        """
        Whether the disk is auto-deleted when the instance
        is deleted. The default value is false.
        """
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        Name that can be used to access an attached disk
        under `/dev/disk/by-id/`.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Type of access to the disk resource. By default, a disk is attached in `READ_WRITE` mode.
        """
        return pulumi.get(self, "mode")


@pulumi.output_type
class ComputeSnapshotScheduleSchedulePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startAt":
            suggest = "start_at"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ComputeSnapshotScheduleSchedulePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ComputeSnapshotScheduleSchedulePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ComputeSnapshotScheduleSchedulePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 expression: Optional[str] = None,
                 start_at: Optional[str] = None):
        """
        :param str expression: Cron expression to schedule snapshots (in cron format "* * * * *").
        :param str start_at: Time to start the snapshot schedule (in format RFC3339 "2006-01-02T15:04:05Z07:00"). If empty current time will be used. Unlike an `expression` that specifies regularity rules, the `start_at` parameter determines from what point these rules will be applied.
        """
        if expression is not None:
            pulumi.set(__self__, "expression", expression)
        if start_at is not None:
            pulumi.set(__self__, "start_at", start_at)

    @property
    @pulumi.getter
    def expression(self) -> Optional[str]:
        """
        Cron expression to schedule snapshots (in cron format "* * * * *").
        """
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> Optional[str]:
        """
        Time to start the snapshot schedule (in format RFC3339 "2006-01-02T15:04:05Z07:00"). If empty current time will be used. Unlike an `expression` that specifies regularity rules, the `start_at` parameter determines from what point these rules will be applied.
        """
        return pulumi.get(self, "start_at")


@pulumi.output_type
class ComputeSnapshotScheduleSnapshotSpec(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        :param str description: Description to assign to snapshots created by this snapshot schedule.
        :param Mapping[str, str] labels: A set of key/value label pairs to assign to snapshots created by this snapshot schedule.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description to assign to snapshots created by this snapshot schedule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value label pairs to assign to snapshots created by this snapshot schedule.
        """
        return pulumi.get(self, "labels")


@pulumi.output_type
class ContainerRepositoryLifecyclePolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirePeriod":
            suggest = "expire_period"
        elif key == "retainedTop":
            suggest = "retained_top"
        elif key == "tagRegexp":
            suggest = "tag_regexp"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ContainerRepositoryLifecyclePolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ContainerRepositoryLifecyclePolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ContainerRepositoryLifecyclePolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 expire_period: Optional[str] = None,
                 retained_top: Optional[int] = None,
                 tag_regexp: Optional[str] = None,
                 untagged: Optional[bool] = None):
        """
        :param str description: Description of the lifecycle policy.
        :param str expire_period: The period of time that must pass after creating a image for it to suit the automatic deletion criteria. It must be a multiple of 24 hours.
        :param int retained_top: The number of images to be retained even if the expire_period already expired.
        :param str tag_regexp: Tag to specify a filter as a regular expression. For example `.*` - all images with tags.
        :param bool untagged: If enabled, rules apply to untagged Docker images.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if expire_period is not None:
            pulumi.set(__self__, "expire_period", expire_period)
        if retained_top is not None:
            pulumi.set(__self__, "retained_top", retained_top)
        if tag_regexp is not None:
            pulumi.set(__self__, "tag_regexp", tag_regexp)
        if untagged is not None:
            pulumi.set(__self__, "untagged", untagged)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the lifecycle policy.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirePeriod")
    def expire_period(self) -> Optional[str]:
        """
        The period of time that must pass after creating a image for it to suit the automatic deletion criteria. It must be a multiple of 24 hours.
        """
        return pulumi.get(self, "expire_period")

    @property
    @pulumi.getter(name="retainedTop")
    def retained_top(self) -> Optional[int]:
        """
        The number of images to be retained even if the expire_period already expired.
        """
        return pulumi.get(self, "retained_top")

    @property
    @pulumi.getter(name="tagRegexp")
    def tag_regexp(self) -> Optional[str]:
        """
        Tag to specify a filter as a regular expression. For example `.*` - all images with tags.
        """
        return pulumi.get(self, "tag_regexp")

    @property
    @pulumi.getter
    def untagged(self) -> Optional[bool]:
        """
        If enabled, rules apply to untagged Docker images.
        """
        return pulumi.get(self, "untagged")


@pulumi.output_type
class DataprocClusterClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subclusterSpecs":
            suggest = "subcluster_specs"
        elif key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataprocClusterClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataprocClusterClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataprocClusterClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subcluster_specs: Sequence['outputs.DataprocClusterClusterConfigSubclusterSpec'],
                 hadoop: Optional['outputs.DataprocClusterClusterConfigHadoop'] = None,
                 version_id: Optional[str] = None):
        """
        :param Sequence['DataprocClusterClusterConfigSubclusterSpecArgs'] subcluster_specs: Configuration of the Data Proc subcluster. The structure is documented below.
        :param 'DataprocClusterClusterConfigHadoopArgs' hadoop: Data Proc specific options. The structure is documented below.
        :param str version_id: Version of Data Proc image.
        """
        pulumi.set(__self__, "subcluster_specs", subcluster_specs)
        if hadoop is not None:
            pulumi.set(__self__, "hadoop", hadoop)
        if version_id is not None:
            pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="subclusterSpecs")
    def subcluster_specs(self) -> Sequence['outputs.DataprocClusterClusterConfigSubclusterSpec']:
        """
        Configuration of the Data Proc subcluster. The structure is documented below.
        """
        return pulumi.get(self, "subcluster_specs")

    @property
    @pulumi.getter
    def hadoop(self) -> Optional['outputs.DataprocClusterClusterConfigHadoop']:
        """
        Data Proc specific options. The structure is documented below.
        """
        return pulumi.get(self, "hadoop")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> Optional[str]:
        """
        Version of Data Proc image.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class DataprocClusterClusterConfigHadoop(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initializationActions":
            suggest = "initialization_actions"
        elif key == "sshPublicKeys":
            suggest = "ssh_public_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataprocClusterClusterConfigHadoop. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataprocClusterClusterConfigHadoop.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataprocClusterClusterConfigHadoop.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initialization_actions: Optional[Sequence['outputs.DataprocClusterClusterConfigHadoopInitializationAction']] = None,
                 properties: Optional[Mapping[str, str]] = None,
                 services: Optional[Sequence[str]] = None,
                 ssh_public_keys: Optional[Sequence[str]] = None):
        """
        :param Sequence['DataprocClusterClusterConfigHadoopInitializationActionArgs'] initialization_actions: List of initialization scripts. The structure is documented below.
        :param Mapping[str, str] properties: A set of key/value pairs that are used to configure cluster services.
        :param Sequence[str] services: List of services to run on Data Proc cluster.
        :param Sequence[str] ssh_public_keys: List of SSH public keys to put to the hosts of the cluster. For information on how to connect to the cluster, see [the official documentation](https://cloud.yandex.com/docs/data-proc/operations/connect).
        """
        if initialization_actions is not None:
            pulumi.set(__self__, "initialization_actions", initialization_actions)
        if properties is not None:
            pulumi.set(__self__, "properties", properties)
        if services is not None:
            pulumi.set(__self__, "services", services)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)

    @property
    @pulumi.getter(name="initializationActions")
    def initialization_actions(self) -> Optional[Sequence['outputs.DataprocClusterClusterConfigHadoopInitializationAction']]:
        """
        List of initialization scripts. The structure is documented below.
        """
        return pulumi.get(self, "initialization_actions")

    @property
    @pulumi.getter
    def properties(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value pairs that are used to configure cluster services.
        """
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def services(self) -> Optional[Sequence[str]]:
        """
        List of services to run on Data Proc cluster.
        """
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[Sequence[str]]:
        """
        List of SSH public keys to put to the hosts of the cluster. For information on how to connect to the cluster, see [the official documentation](https://cloud.yandex.com/docs/data-proc/operations/connect).
        """
        return pulumi.get(self, "ssh_public_keys")


@pulumi.output_type
class DataprocClusterClusterConfigHadoopInitializationAction(dict):
    def __init__(__self__, *,
                 uri: str,
                 args: Optional[Sequence[str]] = None,
                 timeout: Optional[str] = None):
        """
        :param str uri: Script URI.
        :param Sequence[str] args: List of arguments of the initialization script.
        :param str timeout: Script execution timeout, in seconds.
        """
        pulumi.set(__self__, "uri", uri)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Script URI.
        """
        return pulumi.get(self, "uri")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        List of arguments of the initialization script.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[str]:
        """
        Script execution timeout, in seconds.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class DataprocClusterClusterConfigSubclusterSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "hostsCount":
            suggest = "hosts_count"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "autoscalingConfig":
            suggest = "autoscaling_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataprocClusterClusterConfigSubclusterSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataprocClusterClusterConfigSubclusterSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataprocClusterClusterConfigSubclusterSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts_count: int,
                 name: str,
                 resources: 'outputs.DataprocClusterClusterConfigSubclusterSpecResources',
                 role: str,
                 subnet_id: str,
                 assign_public_ip: Optional[bool] = None,
                 autoscaling_config: Optional['outputs.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig'] = None,
                 id: Optional[str] = None):
        """
        :param int hosts_count: Number of hosts within Data Proc subcluster.
        :param str name: Name of the Data Proc subcluster.
        :param 'DataprocClusterClusterConfigSubclusterSpecResourcesArgs' resources: Resources allocated to each host of the Data Proc subcluster. The structure is documented below.
        :param str role: Role of the subcluster in the Data Proc cluster.
        :param str subnet_id: The ID of the subnet, to which hosts of the subcluster belong. Subnets of all the subclusters must belong to the same VPC network.
        :param bool assign_public_ip: If true then assign public IP addresses to the hosts of the subclusters.
        :param 'DataprocClusterClusterConfigSubclusterSpecAutoscalingConfigArgs' autoscaling_config: Autoscaling configuration for compute subclusters.
        :param str id: (Computed) ID of a new Data Proc cluster.
        """
        pulumi.set(__self__, "hosts_count", hosts_count)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if autoscaling_config is not None:
            pulumi.set(__self__, "autoscaling_config", autoscaling_config)
        if id is not None:
            pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter(name="hostsCount")
    def hosts_count(self) -> int:
        """
        Number of hosts within Data Proc subcluster.
        """
        return pulumi.get(self, "hosts_count")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Data Proc subcluster.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.DataprocClusterClusterConfigSubclusterSpecResources':
        """
        Resources allocated to each host of the Data Proc subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        Role of the subcluster in the Data Proc cluster.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet, to which hosts of the subcluster belong. Subnets of all the subclusters must belong to the same VPC network.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        If true then assign public IP addresses to the hosts of the subclusters.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="autoscalingConfig")
    def autoscaling_config(self) -> Optional['outputs.DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig']:
        """
        Autoscaling configuration for compute subclusters.
        """
        return pulumi.get(self, "autoscaling_config")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        (Computed) ID of a new Data Proc cluster.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxHostsCount":
            suggest = "max_hosts_count"
        elif key == "cpuUtilizationTarget":
            suggest = "cpu_utilization_target"
        elif key == "decommissionTimeout":
            suggest = "decommission_timeout"
        elif key == "measurementDuration":
            suggest = "measurement_duration"
        elif key == "stabilizationDuration":
            suggest = "stabilization_duration"
        elif key == "warmupDuration":
            suggest = "warmup_duration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataprocClusterClusterConfigSubclusterSpecAutoscalingConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_hosts_count: int,
                 cpu_utilization_target: Optional[str] = None,
                 decommission_timeout: Optional[str] = None,
                 measurement_duration: Optional[str] = None,
                 preemptible: Optional[bool] = None,
                 stabilization_duration: Optional[str] = None,
                 warmup_duration: Optional[str] = None):
        """
        :param int max_hosts_count: Maximum number of nodes in autoscaling subclusters.
        :param str cpu_utilization_target: Defines an autoscaling rule based on the average CPU utilization of the instance group. If not set default autoscaling metric will be used.
        :param str decommission_timeout: Timeout to gracefully decommission nodes during downscaling. In seconds.
        :param str measurement_duration: Time in seconds allotted for averaging metrics.
        :param bool preemptible: Bool flag -- whether to use preemptible compute instances. Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time if their resources are needed by Compute. For more information, see [Preemptible Virtual Machines](https://cloud.yandex.com/docs/compute/concepts/preemptible-vm).
        :param str stabilization_duration: Minimum amount of time in seconds allotted for monitoring before Instance Groups can reduce the number of instances in the group. During this time, the group size doesn't decrease, even if the new metric values indicate that it should.
        :param str warmup_duration: The warmup time of the instance in seconds. During this time, traffic is sent to the instance, but instance metrics are not collected.
        """
        pulumi.set(__self__, "max_hosts_count", max_hosts_count)
        if cpu_utilization_target is not None:
            pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        if decommission_timeout is not None:
            pulumi.set(__self__, "decommission_timeout", decommission_timeout)
        if measurement_duration is not None:
            pulumi.set(__self__, "measurement_duration", measurement_duration)
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)
        if stabilization_duration is not None:
            pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        if warmup_duration is not None:
            pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="maxHostsCount")
    def max_hosts_count(self) -> int:
        """
        Maximum number of nodes in autoscaling subclusters.
        """
        return pulumi.get(self, "max_hosts_count")

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> Optional[str]:
        """
        Defines an autoscaling rule based on the average CPU utilization of the instance group. If not set default autoscaling metric will be used.
        """
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="decommissionTimeout")
    def decommission_timeout(self) -> Optional[str]:
        """
        Timeout to gracefully decommission nodes during downscaling. In seconds.
        """
        return pulumi.get(self, "decommission_timeout")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> Optional[str]:
        """
        Time in seconds allotted for averaging metrics.
        """
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        Bool flag -- whether to use preemptible compute instances. Preemptible instances are stopped at least once every 24 hours, and can be stopped at any time if their resources are needed by Compute. For more information, see [Preemptible Virtual Machines](https://cloud.yandex.com/docs/compute/concepts/preemptible-vm).
        """
        return pulumi.get(self, "preemptible")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> Optional[str]:
        """
        Minimum amount of time in seconds allotted for monitoring before Instance Groups can reduce the number of instances in the group. During this time, the group size doesn't decrease, even if the new metric values indicate that it should.
        """
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> Optional[str]:
        """
        The warmup time of the instance in seconds. During this time, traffic is sent to the instance, but instance metrics are not collected.
        """
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class DataprocClusterClusterConfigSubclusterSpecResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"
        elif key == "diskTypeId":
            suggest = "disk_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DataprocClusterClusterConfigSubclusterSpecResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DataprocClusterClusterConfigSubclusterSpecResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DataprocClusterClusterConfigSubclusterSpecResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 resource_preset_id: str,
                 disk_type_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str resource_preset_id: The ID of the preset for computational resources available to a host. All available presets are listed in the [documentation](https://cloud.yandex.com/docs/data-proc/concepts/instance-types).
        :param str disk_type_id: Type of the storage of a host. One of `network-hdd` (default) or `network-ssd`.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        """
        The ID of the preset for computational resources available to a host. All available presets are listed in the [documentation](https://cloud.yandex.com/docs/data-proc/concepts/instance-types).
        """
        return pulumi.get(self, "resource_preset_id")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of a host. One of `network-hdd` (default) or `network-ssd`.
        """
        return pulumi.get(self, "disk_type_id")


@pulumi.output_type
class DatatransferEndpointSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clickhouseSource":
            suggest = "clickhouse_source"
        elif key == "clickhouseTarget":
            suggest = "clickhouse_target"
        elif key == "kafkaSource":
            suggest = "kafka_source"
        elif key == "kafkaTarget":
            suggest = "kafka_target"
        elif key == "metrikaSource":
            suggest = "metrika_source"
        elif key == "mongoSource":
            suggest = "mongo_source"
        elif key == "mongoTarget":
            suggest = "mongo_target"
        elif key == "mysqlSource":
            suggest = "mysql_source"
        elif key == "mysqlTarget":
            suggest = "mysql_target"
        elif key == "postgresSource":
            suggest = "postgres_source"
        elif key == "postgresTarget":
            suggest = "postgres_target"
        elif key == "ydbSource":
            suggest = "ydb_source"
        elif key == "ydbTarget":
            suggest = "ydb_target"
        elif key == "ydsSource":
            suggest = "yds_source"
        elif key == "ydsTarget":
            suggest = "yds_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 clickhouse_source: Optional['outputs.DatatransferEndpointSettingsClickhouseSource'] = None,
                 clickhouse_target: Optional['outputs.DatatransferEndpointSettingsClickhouseTarget'] = None,
                 kafka_source: Optional['outputs.DatatransferEndpointSettingsKafkaSource'] = None,
                 kafka_target: Optional['outputs.DatatransferEndpointSettingsKafkaTarget'] = None,
                 metrika_source: Optional['outputs.DatatransferEndpointSettingsMetrikaSource'] = None,
                 mongo_source: Optional['outputs.DatatransferEndpointSettingsMongoSource'] = None,
                 mongo_target: Optional['outputs.DatatransferEndpointSettingsMongoTarget'] = None,
                 mysql_source: Optional['outputs.DatatransferEndpointSettingsMysqlSource'] = None,
                 mysql_target: Optional['outputs.DatatransferEndpointSettingsMysqlTarget'] = None,
                 postgres_source: Optional['outputs.DatatransferEndpointSettingsPostgresSource'] = None,
                 postgres_target: Optional['outputs.DatatransferEndpointSettingsPostgresTarget'] = None,
                 ydb_source: Optional['outputs.DatatransferEndpointSettingsYdbSource'] = None,
                 ydb_target: Optional['outputs.DatatransferEndpointSettingsYdbTarget'] = None,
                 yds_source: Optional['outputs.DatatransferEndpointSettingsYdsSource'] = None,
                 yds_target: Optional['outputs.DatatransferEndpointSettingsYdsTarget'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseSourceArgs' clickhouse_source: Settings specific to the ClickHouse source endpoint.
        :param 'DatatransferEndpointSettingsClickhouseTargetArgs' clickhouse_target: Settings specific to the ClickHouse target endpoint.
        :param 'DatatransferEndpointSettingsKafkaSourceArgs' kafka_source: Settings specific to the Kafka source endpoint.
        :param 'DatatransferEndpointSettingsKafkaTargetArgs' kafka_target: Settings specific to the Kafka target endpoint.
        :param 'DatatransferEndpointSettingsMongoSourceArgs' mongo_source: Settings specific to the MongoDB source endpoint.
        :param 'DatatransferEndpointSettingsMongoTargetArgs' mongo_target: Settings specific to the MongoDB target endpoint.
        :param 'DatatransferEndpointSettingsMysqlSourceArgs' mysql_source: Settings specific to the MySQL source endpoint.
        :param 'DatatransferEndpointSettingsMysqlTargetArgs' mysql_target: Settings specific to the MySQL target endpoint.
        :param 'DatatransferEndpointSettingsPostgresSourceArgs' postgres_source: Settings specific to the PostgreSQL source endpoint.
        :param 'DatatransferEndpointSettingsPostgresTargetArgs' postgres_target: Settings specific to the PostgreSQL target endpoint.
        :param 'DatatransferEndpointSettingsYdbSourceArgs' ydb_source: Settings specific to the YDB source endpoint.
        :param 'DatatransferEndpointSettingsYdbTargetArgs' ydb_target: Settings specific to the YDB target endpoint.
        :param 'DatatransferEndpointSettingsYdsSourceArgs' yds_source: Settings specific to the YDS source endpoint.
        :param 'DatatransferEndpointSettingsYdsTargetArgs' yds_target: Settings specific to the YDS target endpoint.
               
               For the documentation of the specific endpoint settings see below.
        """
        if clickhouse_source is not None:
            pulumi.set(__self__, "clickhouse_source", clickhouse_source)
        if clickhouse_target is not None:
            pulumi.set(__self__, "clickhouse_target", clickhouse_target)
        if kafka_source is not None:
            pulumi.set(__self__, "kafka_source", kafka_source)
        if kafka_target is not None:
            pulumi.set(__self__, "kafka_target", kafka_target)
        if metrika_source is not None:
            pulumi.set(__self__, "metrika_source", metrika_source)
        if mongo_source is not None:
            pulumi.set(__self__, "mongo_source", mongo_source)
        if mongo_target is not None:
            pulumi.set(__self__, "mongo_target", mongo_target)
        if mysql_source is not None:
            pulumi.set(__self__, "mysql_source", mysql_source)
        if mysql_target is not None:
            pulumi.set(__self__, "mysql_target", mysql_target)
        if postgres_source is not None:
            pulumi.set(__self__, "postgres_source", postgres_source)
        if postgres_target is not None:
            pulumi.set(__self__, "postgres_target", postgres_target)
        if ydb_source is not None:
            pulumi.set(__self__, "ydb_source", ydb_source)
        if ydb_target is not None:
            pulumi.set(__self__, "ydb_target", ydb_target)
        if yds_source is not None:
            pulumi.set(__self__, "yds_source", yds_source)
        if yds_target is not None:
            pulumi.set(__self__, "yds_target", yds_target)

    @property
    @pulumi.getter(name="clickhouseSource")
    def clickhouse_source(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSource']:
        """
        Settings specific to the ClickHouse source endpoint.
        """
        return pulumi.get(self, "clickhouse_source")

    @property
    @pulumi.getter(name="clickhouseTarget")
    def clickhouse_target(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTarget']:
        """
        Settings specific to the ClickHouse target endpoint.
        """
        return pulumi.get(self, "clickhouse_target")

    @property
    @pulumi.getter(name="kafkaSource")
    def kafka_source(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSource']:
        """
        Settings specific to the Kafka source endpoint.
        """
        return pulumi.get(self, "kafka_source")

    @property
    @pulumi.getter(name="kafkaTarget")
    def kafka_target(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTarget']:
        """
        Settings specific to the Kafka target endpoint.
        """
        return pulumi.get(self, "kafka_target")

    @property
    @pulumi.getter(name="metrikaSource")
    def metrika_source(self) -> Optional['outputs.DatatransferEndpointSettingsMetrikaSource']:
        return pulumi.get(self, "metrika_source")

    @property
    @pulumi.getter(name="mongoSource")
    def mongo_source(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSource']:
        """
        Settings specific to the MongoDB source endpoint.
        """
        return pulumi.get(self, "mongo_source")

    @property
    @pulumi.getter(name="mongoTarget")
    def mongo_target(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTarget']:
        """
        Settings specific to the MongoDB target endpoint.
        """
        return pulumi.get(self, "mongo_target")

    @property
    @pulumi.getter(name="mysqlSource")
    def mysql_source(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSource']:
        """
        Settings specific to the MySQL source endpoint.
        """
        return pulumi.get(self, "mysql_source")

    @property
    @pulumi.getter(name="mysqlTarget")
    def mysql_target(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTarget']:
        """
        Settings specific to the MySQL target endpoint.
        """
        return pulumi.get(self, "mysql_target")

    @property
    @pulumi.getter(name="postgresSource")
    def postgres_source(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSource']:
        """
        Settings specific to the PostgreSQL source endpoint.
        """
        return pulumi.get(self, "postgres_source")

    @property
    @pulumi.getter(name="postgresTarget")
    def postgres_target(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTarget']:
        """
        Settings specific to the PostgreSQL target endpoint.
        """
        return pulumi.get(self, "postgres_target")

    @property
    @pulumi.getter(name="ydbSource")
    def ydb_source(self) -> Optional['outputs.DatatransferEndpointSettingsYdbSource']:
        """
        Settings specific to the YDB source endpoint.
        """
        return pulumi.get(self, "ydb_source")

    @property
    @pulumi.getter(name="ydbTarget")
    def ydb_target(self) -> Optional['outputs.DatatransferEndpointSettingsYdbTarget']:
        """
        Settings specific to the YDB target endpoint.
        """
        return pulumi.get(self, "ydb_target")

    @property
    @pulumi.getter(name="ydsSource")
    def yds_source(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSource']:
        """
        Settings specific to the YDS source endpoint.
        """
        return pulumi.get(self, "yds_source")

    @property
    @pulumi.getter(name="ydsTarget")
    def yds_target(self) -> Optional['outputs.DatatransferEndpointSettingsYdsTarget']:
        """
        Settings specific to the YDS target endpoint.

        For the documentation of the specific endpoint settings see below.
        """
        return pulumi.get(self, "yds_target")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clickhouseClusterName":
            suggest = "clickhouse_cluster_name"
        elif key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 clickhouse_cluster_name: Optional[str] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnection'] = None,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str clickhouse_cluster_name: Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionArgs' connection: Connection settings. The structure is documented below.
        :param Sequence[str] exclude_tables: The list of tables that should not be transferred.
        :param Sequence[str] include_tables: The list of tables that should be transferred. Leave empty if all tables should be transferred.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if clickhouse_cluster_name is not None:
            pulumi.set(__self__, "clickhouse_cluster_name", clickhouse_cluster_name)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="clickhouseClusterName")
    def clickhouse_cluster_name(self) -> Optional[str]:
        """
        Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
        """
        return pulumi.get(self, "clickhouse_cluster_name")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        The list of tables that should not be transferred.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        The list of tables that should be transferred. Leave empty if all tables should be transferred.
        """
        return pulumi.get(self, "include_tables")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionOptions":
            suggest = "connection_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseSourceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_options: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsArgs' connection_options: Connection options. The structure is documented below.
        """
        if connection_options is not None:
            pulumi.set(__self__, "connection_options", connection_options)

    @property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions']:
        """
        Connection options. The structure is documented below.
        """
        return pulumi.get(self, "connection_options")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: Optional[str] = None,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword'] = None,
                 user: Optional[str] = None):
        """
        :param str database: Database name.
        :param str mdb_cluster_id: Identifier of the Managed ClickHouse cluster.
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseArgs' on_premise: Connection settings of the on-premise ClickHouse server.
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed ClickHouse cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise']:
        """
        Connection settings of the on-premise ClickHouse server.
        """
        return pulumi.get(self, "on_premise")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPort":
            suggest = "http_port"
        elif key == "nativePort":
            suggest = "native_port"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_port: Optional[int] = None,
                 native_port: Optional[int] = None,
                 shards: Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard']] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode'] = None):
        """
        :param int http_port: TCP port number for the HTTP interface of the ClickHouse server.
        :param int native_port: TCP port number for the native interface of the ClickHouse server.
        :param Sequence['DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShardArgs'] shards: The list of ClickHouse shards. The structure is documented below.
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if native_port is not None:
            pulumi.set(__self__, "native_port", native_port)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        """
        TCP port number for the HTTP interface of the ClickHouse server.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="nativePort")
    def native_port(self) -> Optional[int]:
        """
        TCP port number for the native interface of the ClickHouse server.
        """
        return pulumi.get(self, "native_port")

    @property
    @pulumi.getter
    def shards(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard']]:
        """
        The list of ClickHouse shards. The structure is documented below.
        """
        return pulumi.get(self, "shards")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseShard(dict):
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[str] hosts: List of ClickHouse server host names.
        :param str name: Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        List of ClickHouse server host names.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseSourceConnectionConnectionOptionsPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "altNames":
            suggest = "alt_names"
        elif key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "clickhouseClusterName":
            suggest = "clickhouse_cluster_name"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alt_names: Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetAltName']] = None,
                 cleanup_policy: Optional[str] = None,
                 clickhouse_cluster_name: Optional[str] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnection'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 sharding: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetSharding'] = None,
                 subnet_id: Optional[str] = None):
        """
        :param Sequence['DatatransferEndpointSettingsClickhouseTargetAltNameArgs'] alt_names: Table renaming rules. The structure is documented below.
        :param str cleanup_policy: How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        :param str clickhouse_cluster_name: Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionArgs' connection: Connection settings. The structure is documented below.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingArgs' sharding: Shard selection rules for the data being transferred. The structure is documented below.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if alt_names is not None:
            pulumi.set(__self__, "alt_names", alt_names)
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if clickhouse_cluster_name is not None:
            pulumi.set(__self__, "clickhouse_cluster_name", clickhouse_cluster_name)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if sharding is not None:
            pulumi.set(__self__, "sharding", sharding)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="altNames")
    def alt_names(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetAltName']]:
        """
        Table renaming rules. The structure is documented below.
        """
        return pulumi.get(self, "alt_names")

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter(name="clickhouseClusterName")
    def clickhouse_cluster_name(self) -> Optional[str]:
        """
        Name of the ClickHouse cluster. For managed ClickHouse clusters defaults to managed cluster ID.
        """
        return pulumi.get(self, "clickhouse_cluster_name")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def sharding(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetSharding']:
        """
        Shard selection rules for the data being transferred. The structure is documented below.
        """
        return pulumi.get(self, "sharding")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetAltName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromName":
            suggest = "from_name"
        elif key == "toName":
            suggest = "to_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetAltName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetAltName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetAltName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 from_name: Optional[str] = None,
                 to_name: Optional[str] = None):
        if from_name is not None:
            pulumi.set(__self__, "from_name", from_name)
        if to_name is not None:
            pulumi.set(__self__, "to_name", to_name)

    @property
    @pulumi.getter(name="fromName")
    def from_name(self) -> Optional[str]:
        return pulumi.get(self, "from_name")

    @property
    @pulumi.getter(name="toName")
    def to_name(self) -> Optional[str]:
        return pulumi.get(self, "to_name")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionOptions":
            suggest = "connection_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_options: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsArgs' connection_options: Connection options. The structure is documented below.
        """
        if connection_options is not None:
            pulumi.set(__self__, "connection_options", connection_options)

    @property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions']:
        """
        Connection options. The structure is documented below.
        """
        return pulumi.get(self, "connection_options")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: Optional[str] = None,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword'] = None,
                 user: Optional[str] = None):
        """
        :param str database: Database name.
        :param str mdb_cluster_id: Identifier of the Managed ClickHouse cluster.
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseArgs' on_premise: Connection settings of the on-premise ClickHouse server.
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed ClickHouse cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise']:
        """
        Connection settings of the on-premise ClickHouse server.
        """
        return pulumi.get(self, "on_premise")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpPort":
            suggest = "http_port"
        elif key == "nativePort":
            suggest = "native_port"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_port: Optional[int] = None,
                 native_port: Optional[int] = None,
                 shards: Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard']] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode'] = None):
        """
        :param int http_port: TCP port number for the HTTP interface of the ClickHouse server.
        :param int native_port: TCP port number for the native interface of the ClickHouse server.
        :param Sequence['DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShardArgs'] shards: The list of ClickHouse shards. The structure is documented below.
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if http_port is not None:
            pulumi.set(__self__, "http_port", http_port)
        if native_port is not None:
            pulumi.set(__self__, "native_port", native_port)
        if shards is not None:
            pulumi.set(__self__, "shards", shards)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter(name="httpPort")
    def http_port(self) -> Optional[int]:
        """
        TCP port number for the HTTP interface of the ClickHouse server.
        """
        return pulumi.get(self, "http_port")

    @property
    @pulumi.getter(name="nativePort")
    def native_port(self) -> Optional[int]:
        """
        TCP port number for the native interface of the ClickHouse server.
        """
        return pulumi.get(self, "native_port")

    @property
    @pulumi.getter
    def shards(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard']]:
        """
        The list of ClickHouse shards. The structure is documented below.
        """
        return pulumi.get(self, "shards")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseShard(dict):
    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 name: Optional[str] = None):
        """
        :param Sequence[str] hosts: List of ClickHouse server host names.
        :param str name: Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        List of ClickHouse server host names.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Arbitrary shard name. This name may be used in `sharding` block to specify custom sharding rules.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetConnectionConnectionOptionsPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetSharding(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnValueHash":
            suggest = "column_value_hash"
        elif key == "customMapping":
            suggest = "custom_mapping"
        elif key == "roundRobin":
            suggest = "round_robin"
        elif key == "transferId":
            suggest = "transfer_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetSharding. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetSharding.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetSharding.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_value_hash: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash'] = None,
                 custom_mapping: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping'] = None,
                 round_robin: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin'] = None,
                 transfer_id: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingTransferId'] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHashArgs' column_value_hash: Shard data by the hash value of the specified column. The structure is documented below.
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingArgs' custom_mapping: A custom shard mapping by the value of the specified column. The structure is documented below.
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingRoundRobinArgs' round_robin: Distribute incoming rows between ClickHouse shards in a round-robin manner. Specify as an empty block to enable.
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingTransferIdArgs' transfer_id: Shard data by ID of the transfer.
        """
        if column_value_hash is not None:
            pulumi.set(__self__, "column_value_hash", column_value_hash)
        if custom_mapping is not None:
            pulumi.set(__self__, "custom_mapping", custom_mapping)
        if round_robin is not None:
            pulumi.set(__self__, "round_robin", round_robin)
        if transfer_id is not None:
            pulumi.set(__self__, "transfer_id", transfer_id)

    @property
    @pulumi.getter(name="columnValueHash")
    def column_value_hash(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash']:
        """
        Shard data by the hash value of the specified column. The structure is documented below.
        """
        return pulumi.get(self, "column_value_hash")

    @property
    @pulumi.getter(name="customMapping")
    def custom_mapping(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping']:
        """
        A custom shard mapping by the value of the specified column. The structure is documented below.
        """
        return pulumi.get(self, "custom_mapping")

    @property
    @pulumi.getter(name="roundRobin")
    def round_robin(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin']:
        """
        Distribute incoming rows between ClickHouse shards in a round-robin manner. Specify as an empty block to enable.
        """
        return pulumi.get(self, "round_robin")

    @property
    @pulumi.getter(name="transferId")
    def transfer_id(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingTransferId']:
        """
        Shard data by ID of the transfer.
        """
        return pulumi.get(self, "transfer_id")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingColumnValueHash.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: Optional[str] = None):
        """
        :param str column_name: The name of the column to calculate hash from.
        """
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        """
        The name of the column to calculate hash from.
        """
        return pulumi.get(self, "column_name")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: Optional[str] = None,
                 mappings: Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping']] = None):
        """
        :param str column_name: The name of the column to inspect when deciding the shard to chose for an incoming row.
        :param Sequence['DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingArgs'] mappings: The mapping of the specified column values to the shard names. The structure is documented below.
        """
        if column_name is not None:
            pulumi.set(__self__, "column_name", column_name)
        if mappings is not None:
            pulumi.set(__self__, "mappings", mappings)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> Optional[str]:
        """
        The name of the column to inspect when deciding the shard to chose for an incoming row.
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter
    def mappings(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping']]:
        """
        The mapping of the specified column values to the shard names. The structure is documented below.
        """
        return pulumi.get(self, "mappings")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnValue":
            suggest = "column_value"
        elif key == "shardName":
            suggest = "shard_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMapping.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_value: Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue'] = None,
                 shard_name: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValueArgs' column_value: The value of the column. Currently only the string columns are supported. The structure is documented below.
        :param str shard_name: The name of the shard into which all the rows with the specified `column_value` will be written.
        """
        if column_value is not None:
            pulumi.set(__self__, "column_value", column_value)
        if shard_name is not None:
            pulumi.set(__self__, "shard_name", shard_name)

    @property
    @pulumi.getter(name="columnValue")
    def column_value(self) -> Optional['outputs.DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue']:
        """
        The value of the column. Currently only the string columns are supported. The structure is documented below.
        """
        return pulumi.get(self, "column_value")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> Optional[str]:
        """
        The name of the shard into which all the rows with the specified `column_value` will be written.
        """
        return pulumi.get(self, "shard_name")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "stringValue":
            suggest = "string_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsClickhouseTargetShardingCustomMappingMappingColumnValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 string_value: Optional[str] = None):
        """
        :param str string_value: The string value of the column.
        """
        if string_value is not None:
            pulumi.set(__self__, "string_value", string_value)

    @property
    @pulumi.getter(name="stringValue")
    def string_value(self) -> Optional[str]:
        """
        The string value of the column.
        """
        return pulumi.get(self, "string_value")


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingRoundRobin(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsClickhouseTargetShardingTransferId(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroups":
            suggest = "security_groups"
        elif key == "topicName":
            suggest = "topic_name"
        elif key == "topicNames":
            suggest = "topic_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth: Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuth'] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnection'] = None,
                 parser: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParser'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 topic_name: Optional[str] = None,
                 topic_names: Optional[Sequence[str]] = None,
                 transformer: Optional['outputs.DatatransferEndpointSettingsKafkaSourceTransformer'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceAuthArgs' auth: Authentication data.
        :param 'DatatransferEndpointSettingsKafkaSourceConnectionArgs' connection: Connection settings.
        :param 'DatatransferEndpointSettingsKafkaSourceParserArgs' parser: Data parsing parameters. If not set, the source messages are read in raw.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str topic_name: Deprecated. Please use `topic_names` instead.
        :param Sequence[str] topic_names: The list of full source topic names.
        :param 'DatatransferEndpointSettingsKafkaSourceTransformerArgs' transformer: Transform data with a custom Cloud Function.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if parser is not None:
            pulumi.set(__self__, "parser", parser)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)
        if topic_names is not None:
            pulumi.set(__self__, "topic_names", topic_names)
        if transformer is not None:
            pulumi.set(__self__, "transformer", transformer)

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuth']:
        """
        Authentication data.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnection']:
        """
        Connection settings.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def parser(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParser']:
        """
        Data parsing parameters. If not set, the source messages are read in raw.
        """
        return pulumi.get(self, "parser")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        Deprecated. Please use `topic_names` instead.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="topicNames")
    def topic_names(self) -> Optional[Sequence[str]]:
        """
        The list of full source topic names.
        """
        return pulumi.get(self, "topic_names")

    @property
    @pulumi.getter
    def transformer(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceTransformer']:
        """
        Transform data with a custom Cloud Function.
        """
        return pulumi.get(self, "transformer")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noAuth":
            suggest = "no_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_auth: Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthNoAuth'] = None,
                 sasl: Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthSasl'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceAuthNoAuthArgs' no_auth: Connection without authentication data.
        :param 'DatatransferEndpointSettingsKafkaSourceAuthSaslArgs' sasl: Authentication using sasl.
        """
        if no_auth is not None:
            pulumi.set(__self__, "no_auth", no_auth)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter(name="noAuth")
    def no_auth(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthNoAuth']:
        """
        Connection without authentication data.
        """
        return pulumi.get(self, "no_auth")

    @property
    @pulumi.getter
    def sasl(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthSasl']:
        """
        Authentication using sasl.
        """
        return pulumi.get(self, "sasl")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceAuthNoAuth(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceAuthSasl(dict):
    def __init__(__self__, *,
                 mechanism: Optional[str] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthSaslPassword'] = None,
                 user: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceAuthSaslPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[str]:
        return pulumi.get(self, "mechanism")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceAuthSaslPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceAuthSaslPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremise'] = None):
        """
        :param str cluster_id: Identifier of the Managed Kafka cluster.
        :param 'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed Kafka cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brokerUrls":
            suggest = "broker_urls"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker_urls: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] broker_urls: List of Kafka broker URLs.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if broker_urls is not None:
            pulumi.set(__self__, "broker_urls", broker_urls)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter(name="brokerUrls")
    def broker_urls(self) -> Optional[Sequence[str]]:
        """
        List of Kafka broker URLs.
        """
        return pulumi.get(self, "broker_urls")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditTrailsV1Parser":
            suggest = "audit_trails_v1_parser"
        elif key == "cloudLoggingParser":
            suggest = "cloud_logging_parser"
        elif key == "jsonParser":
            suggest = "json_parser"
        elif key == "tskvParser":
            suggest = "tskv_parser"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_trails_v1_parser: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser'] = None,
                 cloud_logging_parser: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser'] = None,
                 json_parser: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParser'] = None,
                 tskv_parser: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParser'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1ParserArgs' audit_trails_v1_parser: Parse Audit Trails data. Empty struct.
        :param 'DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParserArgs' cloud_logging_parser: Parse Cloud Logging data. Empty struct.
        :param 'DatatransferEndpointSettingsKafkaSourceParserJsonParserArgs' json_parser: Parse data in json format.
        :param 'DatatransferEndpointSettingsKafkaSourceParserTskvParserArgs' tskv_parser: Parse data if tskv format.
        """
        if audit_trails_v1_parser is not None:
            pulumi.set(__self__, "audit_trails_v1_parser", audit_trails_v1_parser)
        if cloud_logging_parser is not None:
            pulumi.set(__self__, "cloud_logging_parser", cloud_logging_parser)
        if json_parser is not None:
            pulumi.set(__self__, "json_parser", json_parser)
        if tskv_parser is not None:
            pulumi.set(__self__, "tskv_parser", tskv_parser)

    @property
    @pulumi.getter(name="auditTrailsV1Parser")
    def audit_trails_v1_parser(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser']:
        """
        Parse Audit Trails data. Empty struct.
        """
        return pulumi.get(self, "audit_trails_v1_parser")

    @property
    @pulumi.getter(name="cloudLoggingParser")
    def cloud_logging_parser(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser']:
        """
        Parse Cloud Logging data. Empty struct.
        """
        return pulumi.get(self, "cloud_logging_parser")

    @property
    @pulumi.getter(name="jsonParser")
    def json_parser(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParser']:
        """
        Parse data in json format.
        """
        return pulumi.get(self, "json_parser")

    @property
    @pulumi.getter(name="tskvParser")
    def tskv_parser(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParser']:
        """
        Parse data if tskv format.
        """
        return pulumi.get(self, "tskv_parser")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserAuditTrailsV1Parser(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserCloudLoggingParser(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserJsonParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addRestColumn":
            suggest = "add_rest_column"
        elif key == "dataSchema":
            suggest = "data_schema"
        elif key == "nullKeysAllowed":
            suggest = "null_keys_allowed"
        elif key == "unescapeStringValues":
            suggest = "unescape_string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceParserJsonParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserJsonParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserJsonParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_rest_column: Optional[bool] = None,
                 data_schema: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema'] = None,
                 null_keys_allowed: Optional[bool] = None,
                 unescape_string_values: Optional[bool] = None):
        """
        :param bool add_rest_column: Add fields, that are not in the schema, into the _rest column.
        :param 'DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaArgs' data_schema: Data parsing scheme.The structure is documented below.
        :param bool null_keys_allowed: Allow null keys. If `false` - null keys will be putted to unparsed data
        :param bool unescape_string_values: Allow unescape string values.
        """
        if add_rest_column is not None:
            pulumi.set(__self__, "add_rest_column", add_rest_column)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if null_keys_allowed is not None:
            pulumi.set(__self__, "null_keys_allowed", null_keys_allowed)
        if unescape_string_values is not None:
            pulumi.set(__self__, "unescape_string_values", unescape_string_values)

    @property
    @pulumi.getter(name="addRestColumn")
    def add_rest_column(self) -> Optional[bool]:
        """
        Add fields, that are not in the schema, into the _rest column.
        """
        return pulumi.get(self, "add_rest_column")

    @property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema']:
        """
        Data parsing scheme.The structure is documented below.
        """
        return pulumi.get(self, "data_schema")

    @property
    @pulumi.getter(name="nullKeysAllowed")
    def null_keys_allowed(self) -> Optional[bool]:
        """
        Allow null keys. If `false` - null keys will be putted to unparsed data
        """
        return pulumi.get(self, "null_keys_allowed")

    @property
    @pulumi.getter(name="unescapeStringValues")
    def unescape_string_values(self) -> Optional[bool]:
        """
        Allow unescape string values.
        """
        return pulumi.get(self, "unescape_string_values")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonFields":
            suggest = "json_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fields: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields'] = None,
                 json_fields: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsArgs' fields: Description of the data schema in the array of `fields` structure (documented below).
        :param str json_fields: Description of the data schema as JSON specification.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if json_fields is not None:
            pulumi.set(__self__, "json_fields", json_fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields']:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="jsonFields")
    def json_fields(self) -> Optional[str]:
        """
        Description of the data schema as JSON specification.
        """
        return pulumi.get(self, "json_fields")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsFieldArgs'] fields: Description of the data schema in the array of `fields` structure (documented below).
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField']]:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserJsonParserDataSchemaFieldsField(dict):
    def __init__(__self__, *,
                 key: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param bool key: Mark field as Primary Key.
        :param str name: Field name.
        :param str path: Path to the field.
        :param bool required: Mark field as required.
        :param str type: Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[bool]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the field.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Mark field as required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserTskvParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addRestColumn":
            suggest = "add_rest_column"
        elif key == "dataSchema":
            suggest = "data_schema"
        elif key == "nullKeysAllowed":
            suggest = "null_keys_allowed"
        elif key == "unescapeStringValues":
            suggest = "unescape_string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceParserTskvParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserTskvParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserTskvParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_rest_column: Optional[bool] = None,
                 data_schema: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema'] = None,
                 null_keys_allowed: Optional[bool] = None,
                 unescape_string_values: Optional[bool] = None):
        """
        :param bool add_rest_column: Add fields, that are not in the schema, into the _rest column.
        :param 'DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaArgs' data_schema: Data parsing scheme.The structure is documented below.
        :param bool null_keys_allowed: Allow null keys. If `false` - null keys will be putted to unparsed data
        :param bool unescape_string_values: Allow unescape string values.
        """
        if add_rest_column is not None:
            pulumi.set(__self__, "add_rest_column", add_rest_column)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if null_keys_allowed is not None:
            pulumi.set(__self__, "null_keys_allowed", null_keys_allowed)
        if unescape_string_values is not None:
            pulumi.set(__self__, "unescape_string_values", unescape_string_values)

    @property
    @pulumi.getter(name="addRestColumn")
    def add_rest_column(self) -> Optional[bool]:
        """
        Add fields, that are not in the schema, into the _rest column.
        """
        return pulumi.get(self, "add_rest_column")

    @property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema']:
        """
        Data parsing scheme.The structure is documented below.
        """
        return pulumi.get(self, "data_schema")

    @property
    @pulumi.getter(name="nullKeysAllowed")
    def null_keys_allowed(self) -> Optional[bool]:
        """
        Allow null keys. If `false` - null keys will be putted to unparsed data
        """
        return pulumi.get(self, "null_keys_allowed")

    @property
    @pulumi.getter(name="unescapeStringValues")
    def unescape_string_values(self) -> Optional[bool]:
        """
        Allow unescape string values.
        """
        return pulumi.get(self, "unescape_string_values")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonFields":
            suggest = "json_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fields: Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields'] = None,
                 json_fields: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsArgs' fields: Description of the data schema in the array of `fields` structure (documented below).
        :param str json_fields: Description of the data schema as JSON specification.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if json_fields is not None:
            pulumi.set(__self__, "json_fields", json_fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields']:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="jsonFields")
    def json_fields(self) -> Optional[str]:
        """
        Description of the data schema as JSON specification.
        """
        return pulumi.get(self, "json_fields")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsFieldArgs'] fields: Description of the data schema in the array of `fields` structure (documented below).
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField']]:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceParserTskvParserDataSchemaFieldsField(dict):
    def __init__(__self__, *,
                 key: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param bool key: Mark field as Primary Key.
        :param str name: Field name.
        :param str path: Path to the field.
        :param bool required: Mark field as required.
        :param str type: Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[bool]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the field.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Mark field as required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaSourceTransformer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bufferFlushInterval":
            suggest = "buffer_flush_interval"
        elif key == "bufferSize":
            suggest = "buffer_size"
        elif key == "cloudFunction":
            suggest = "cloud_function"
        elif key == "invocationTimeout":
            suggest = "invocation_timeout"
        elif key == "numberOfRetries":
            suggest = "number_of_retries"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaSourceTransformer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaSourceTransformer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaSourceTransformer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 buffer_flush_interval: Optional[str] = None,
                 buffer_size: Optional[str] = None,
                 cloud_function: Optional[str] = None,
                 invocation_timeout: Optional[str] = None,
                 number_of_retries: Optional[int] = None,
                 service_account_id: Optional[str] = None):
        """
        :param str service_account_id: - (Required) Service account ID for interaction with database.
        """
        if buffer_flush_interval is not None:
            pulumi.set(__self__, "buffer_flush_interval", buffer_flush_interval)
        if buffer_size is not None:
            pulumi.set(__self__, "buffer_size", buffer_size)
        if cloud_function is not None:
            pulumi.set(__self__, "cloud_function", cloud_function)
        if invocation_timeout is not None:
            pulumi.set(__self__, "invocation_timeout", invocation_timeout)
        if number_of_retries is not None:
            pulumi.set(__self__, "number_of_retries", number_of_retries)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="bufferFlushInterval")
    def buffer_flush_interval(self) -> Optional[str]:
        return pulumi.get(self, "buffer_flush_interval")

    @property
    @pulumi.getter(name="bufferSize")
    def buffer_size(self) -> Optional[str]:
        return pulumi.get(self, "buffer_size")

    @property
    @pulumi.getter(name="cloudFunction")
    def cloud_function(self) -> Optional[str]:
        return pulumi.get(self, "cloud_function")

    @property
    @pulumi.getter(name="invocationTimeout")
    def invocation_timeout(self) -> Optional[str]:
        return pulumi.get(self, "invocation_timeout")

    @property
    @pulumi.getter(name="numberOfRetries")
    def number_of_retries(self) -> Optional[int]:
        return pulumi.get(self, "number_of_retries")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        - (Required) Service account ID for interaction with database.
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityGroups":
            suggest = "security_groups"
        elif key == "topicSettings":
            suggest = "topic_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth: Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuth'] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnection'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 serializer: Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializer'] = None,
                 topic_settings: Optional['outputs.DatatransferEndpointSettingsKafkaTargetTopicSettings'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetAuthArgs' auth: Authentication data.
        :param 'DatatransferEndpointSettingsKafkaTargetConnectionArgs' connection: Connection settings.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param 'DatatransferEndpointSettingsKafkaTargetSerializerArgs' serializer: Data serialization settings.
        :param 'DatatransferEndpointSettingsKafkaTargetTopicSettingsArgs' topic_settings: Target topic settings.
        """
        if auth is not None:
            pulumi.set(__self__, "auth", auth)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if serializer is not None:
            pulumi.set(__self__, "serializer", serializer)
        if topic_settings is not None:
            pulumi.set(__self__, "topic_settings", topic_settings)

    @property
    @pulumi.getter
    def auth(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuth']:
        """
        Authentication data.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnection']:
        """
        Connection settings.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def serializer(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializer']:
        """
        Data serialization settings.
        """
        return pulumi.get(self, "serializer")

    @property
    @pulumi.getter(name="topicSettings")
    def topic_settings(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetTopicSettings']:
        """
        Target topic settings.
        """
        return pulumi.get(self, "topic_settings")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetAuth(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "noAuth":
            suggest = "no_auth"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetAuth. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetAuth.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetAuth.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 no_auth: Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthNoAuth'] = None,
                 sasl: Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthSasl'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetAuthNoAuthArgs' no_auth: Connection without authentication data.
        :param 'DatatransferEndpointSettingsKafkaTargetAuthSaslArgs' sasl: Authentication using sasl.
        """
        if no_auth is not None:
            pulumi.set(__self__, "no_auth", no_auth)
        if sasl is not None:
            pulumi.set(__self__, "sasl", sasl)

    @property
    @pulumi.getter(name="noAuth")
    def no_auth(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthNoAuth']:
        """
        Connection without authentication data.
        """
        return pulumi.get(self, "no_auth")

    @property
    @pulumi.getter
    def sasl(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthSasl']:
        """
        Authentication using sasl.
        """
        return pulumi.get(self, "sasl")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetAuthNoAuth(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetAuthSasl(dict):
    def __init__(__self__, *,
                 mechanism: Optional[str] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthSaslPassword'] = None,
                 user: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetAuthSaslPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if mechanism is not None:
            pulumi.set(__self__, "mechanism", mechanism)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def mechanism(self) -> Optional[str]:
        return pulumi.get(self, "mechanism")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetAuthSaslPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetAuthSaslPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterId":
            suggest = "cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremise'] = None):
        """
        :param str cluster_id: Identifier of the Managed Kafka cluster.
        :param 'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if cluster_id is not None:
            pulumi.set(__self__, "cluster_id", cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed Kafka cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "brokerUrls":
            suggest = "broker_urls"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 broker_urls: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] broker_urls: List of Kafka broker URLs.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if broker_urls is not None:
            pulumi.set(__self__, "broker_urls", broker_urls)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter(name="brokerUrls")
    def broker_urls(self) -> Optional[Sequence[str]]:
        """
        List of Kafka broker URLs.
        """
        return pulumi.get(self, "broker_urls")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetSerializer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serializerAuto":
            suggest = "serializer_auto"
        elif key == "serializerDebezium":
            suggest = "serializer_debezium"
        elif key == "serializerJson":
            suggest = "serializer_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetSerializer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetSerializer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetSerializer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 serializer_auto: Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto'] = None,
                 serializer_debezium: Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium'] = None,
                 serializer_json: Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson'] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetSerializerSerializerAutoArgs' serializer_auto: Empty block. Select data serialization format automatically.
        :param 'DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumArgs' serializer_debezium: Serialize data in json format. The structure is documented below.
        :param 'DatatransferEndpointSettingsKafkaTargetSerializerSerializerJsonArgs' serializer_json: Empty block. Serialize data in json format.
        """
        if serializer_auto is not None:
            pulumi.set(__self__, "serializer_auto", serializer_auto)
        if serializer_debezium is not None:
            pulumi.set(__self__, "serializer_debezium", serializer_debezium)
        if serializer_json is not None:
            pulumi.set(__self__, "serializer_json", serializer_json)

    @property
    @pulumi.getter(name="serializerAuto")
    def serializer_auto(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto']:
        """
        Empty block. Select data serialization format automatically.
        """
        return pulumi.get(self, "serializer_auto")

    @property
    @pulumi.getter(name="serializerDebezium")
    def serializer_debezium(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium']:
        """
        Serialize data in json format. The structure is documented below.
        """
        return pulumi.get(self, "serializer_debezium")

    @property
    @pulumi.getter(name="serializerJson")
    def serializer_json(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson']:
        """
        Empty block. Serialize data in json format.
        """
        return pulumi.get(self, "serializer_json")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetSerializerSerializerAuto(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serializerParameters":
            suggest = "serializer_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebezium.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 serializer_parameters: Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameterArgs'] serializer_parameters: A list of debezium parameters set by the structure of the `key` and `value` string fields.
        """
        if serializer_parameters is not None:
            pulumi.set(__self__, "serializer_parameters", serializer_parameters)

    @property
    @pulumi.getter(name="serializerParameters")
    def serializer_parameters(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter']]:
        """
        A list of debezium parameters set by the structure of the `key` and `value` string fields.
        """
        return pulumi.get(self, "serializer_parameters")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetSerializerSerializerDebeziumSerializerParameter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Mark field as Primary Key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetSerializerSerializerJson(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetTopicSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicPrefix":
            suggest = "topic_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetTopicSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetTopicSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetTopicSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 topic: Optional['outputs.DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic'] = None,
                 topic_prefix: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsKafkaTargetTopicSettingsTopicArgs' topic: All messages will be sent to one topic. The structure is documented below.
        :param str topic_prefix: Topic name prefix. Messages will be sent to topic with name <topic_prefix>.<schema>.<table_name>.
        """
        if topic is not None:
            pulumi.set(__self__, "topic", topic)
        if topic_prefix is not None:
            pulumi.set(__self__, "topic_prefix", topic_prefix)

    @property
    @pulumi.getter
    def topic(self) -> Optional['outputs.DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic']:
        """
        All messages will be sent to one topic. The structure is documented below.
        """
        return pulumi.get(self, "topic")

    @property
    @pulumi.getter(name="topicPrefix")
    def topic_prefix(self) -> Optional[str]:
        """
        Topic name prefix. Messages will be sent to topic with name <topic_prefix>.<schema>.<table_name>.
        """
        return pulumi.get(self, "topic_prefix")


@pulumi.output_type
class DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saveTxOrder":
            suggest = "save_tx_order"
        elif key == "topicName":
            suggest = "topic_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsKafkaTargetTopicSettingsTopic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 save_tx_order: Optional[bool] = None,
                 topic_name: Optional[str] = None):
        """
        :param bool save_tx_order: Not to split events queue into separate per-table queues.
        :param str topic_name: Full topic name
        """
        if save_tx_order is not None:
            pulumi.set(__self__, "save_tx_order", save_tx_order)
        if topic_name is not None:
            pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="saveTxOrder")
    def save_tx_order(self) -> Optional[bool]:
        """
        Not to split events queue into separate per-table queues.
        """
        return pulumi.get(self, "save_tx_order")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> Optional[str]:
        """
        Full topic name
        """
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class DatatransferEndpointSettingsMetrikaSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "counterIds":
            suggest = "counter_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMetrikaSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMetrikaSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMetrikaSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 counter_ids: Optional[Sequence[int]] = None,
                 streams: Optional[Sequence['outputs.DatatransferEndpointSettingsMetrikaSourceStream']] = None,
                 token: Optional['outputs.DatatransferEndpointSettingsMetrikaSourceToken'] = None):
        if counter_ids is not None:
            pulumi.set(__self__, "counter_ids", counter_ids)
        if streams is not None:
            pulumi.set(__self__, "streams", streams)
        if token is not None:
            pulumi.set(__self__, "token", token)

    @property
    @pulumi.getter(name="counterIds")
    def counter_ids(self) -> Optional[Sequence[int]]:
        return pulumi.get(self, "counter_ids")

    @property
    @pulumi.getter
    def streams(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsMetrikaSourceStream']]:
        return pulumi.get(self, "streams")

    @property
    @pulumi.getter
    def token(self) -> Optional['outputs.DatatransferEndpointSettingsMetrikaSourceToken']:
        return pulumi.get(self, "token")


@pulumi.output_type
class DatatransferEndpointSettingsMetrikaSourceStream(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence[str]] = None,
                 type: Optional[str] = None):
        """
        :param str type: Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatatransferEndpointSettingsMetrikaSourceToken(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludedCollections":
            suggest = "excluded_collections"
        elif key == "secondaryPreferredMode":
            suggest = "secondary_preferred_mode"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collections: Optional[Sequence['outputs.DatatransferEndpointSettingsMongoSourceCollection']] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnection'] = None,
                 excluded_collections: Optional[Sequence['outputs.DatatransferEndpointSettingsMongoSourceExcludedCollection']] = None,
                 secondary_preferred_mode: Optional[bool] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        """
        :param Sequence['DatatransferEndpointSettingsMongoSourceCollectionArgs'] collections: The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
        :param 'DatatransferEndpointSettingsMongoSourceConnectionArgs' connection: Connection settings. The structure is documented below.
        :param Sequence['DatatransferEndpointSettingsMongoSourceExcludedCollectionArgs'] excluded_collections: The list of the MongoDB collections that should not be transferred.
        :param bool secondary_preferred_mode: whether the secondary server should be preferred to the primary when copying data.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if collections is not None:
            pulumi.set(__self__, "collections", collections)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if excluded_collections is not None:
            pulumi.set(__self__, "excluded_collections", excluded_collections)
        if secondary_preferred_mode is not None:
            pulumi.set(__self__, "secondary_preferred_mode", secondary_preferred_mode)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def collections(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsMongoSourceCollection']]:
        """
        The list of the MongoDB collections that should be transferred. If omitted, all available collections will be transferred. The structure of the list item is documented below.
        """
        return pulumi.get(self, "collections")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter(name="excludedCollections")
    def excluded_collections(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsMongoSourceExcludedCollection']]:
        """
        The list of the MongoDB collections that should not be transferred.
        """
        return pulumi.get(self, "excluded_collections")

    @property
    @pulumi.getter(name="secondaryPreferredMode")
    def secondary_preferred_mode(self) -> Optional[bool]:
        """
        whether the secondary server should be preferred to the primary when copying data.
        """
        return pulumi.get(self, "secondary_preferred_mode")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectionName":
            suggest = "collection_name"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection_name: Optional[str] = None,
                 database_name: Optional[str] = None):
        """
        :param str collection_name: Collection name.
        :param str database_name: Database name.
        """
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[str]:
        """
        Collection name.
        """
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionOptions":
            suggest = "connection_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_options: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions'] = None):
        """
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsArgs' connection_options: Connection options. The structure is documented below.
        """
        if connection_options is not None:
            pulumi.set(__self__, "connection_options", connection_options)

    @property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions']:
        """
        Connection options. The structure is documented below.
        """
        return pulumi.get(self, "connection_options")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authSource":
            suggest = "auth_source"
        elif key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_source: Optional[str] = None,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword'] = None,
                 user: Optional[str] = None):
        """
        :param str auth_source: Name of the database associated with the credentials.
        :param str mdb_cluster_id: Identifier of the Managed ClickHouse cluster.
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseArgs' on_premise: Connection settings of the on-premise ClickHouse server.
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[str]:
        """
        Name of the database associated with the credentials.
        """
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed ClickHouse cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise']:
        """
        Connection settings of the on-premise ClickHouse server.
        """
        return pulumi.get(self, "on_premise")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaSet":
            suggest = "replica_set"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 replica_set: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str replica_set: Replica set name.
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        """
        Replica set name.
        """
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceConnectionConnectionOptionsPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsMongoSourceExcludedCollection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "collectionName":
            suggest = "collection_name"
        elif key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoSourceExcludedCollection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoSourceExcludedCollection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoSourceExcludedCollection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 collection_name: Optional[str] = None,
                 database_name: Optional[str] = None):
        """
        :param str collection_name: Collection name.
        :param str database_name: Database name.
        """
        if collection_name is not None:
            pulumi.set(__self__, "collection_name", collection_name)
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="collectionName")
    def collection_name(self) -> Optional[str]:
        """
        Collection name.
        """
        return pulumi.get(self, "collection_name")

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnection'] = None,
                 database: Optional[str] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str cleanup_policy: How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
        :param 'DatatransferEndpointSettingsMongoTargetConnectionArgs' connection: Connection settings. The structure is documented below.
        :param str database: If not empty, then all the data will be written to the database with the specified name; otherwise the database name is the same as in the source endpoint.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        How to clean collections when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        If not empty, then all the data will be written to the database with the specified name; otherwise the database name is the same as in the source endpoint.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionOptions":
            suggest = "connection_options"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoTargetConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoTargetConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoTargetConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_options: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions'] = None):
        """
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsArgs' connection_options: Connection options. The structure is documented below.
        """
        if connection_options is not None:
            pulumi.set(__self__, "connection_options", connection_options)

    @property
    @pulumi.getter(name="connectionOptions")
    def connection_options(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions']:
        """
        Connection options. The structure is documented below.
        """
        return pulumi.get(self, "connection_options")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authSource":
            suggest = "auth_source"
        elif key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auth_source: Optional[str] = None,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword'] = None,
                 user: Optional[str] = None):
        """
        :param str auth_source: Name of the database associated with the credentials.
        :param str mdb_cluster_id: Identifier of the Managed ClickHouse cluster.
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseArgs' on_premise: Connection settings of the on-premise ClickHouse server.
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param str user: User for database access.
        """
        if auth_source is not None:
            pulumi.set(__self__, "auth_source", auth_source)
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="authSource")
    def auth_source(self) -> Optional[str]:
        """
        Name of the database associated with the credentials.
        """
        return pulumi.get(self, "auth_source")

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed ClickHouse cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise']:
        """
        Connection settings of the on-premise ClickHouse server.
        """
        return pulumi.get(self, "on_premise")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicaSet":
            suggest = "replica_set"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 replica_set: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str replica_set: Replica set name.
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if replica_set is not None:
            pulumi.set(__self__, "replica_set", replica_set)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="replicaSet")
    def replica_set(self) -> Optional[str]:
        """
        Replica set name.
        """
        return pulumi.get(self, "replica_set")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsMongoTargetConnectionConnectionOptionsPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTablesRegexes":
            suggest = "exclude_tables_regexes"
        elif key == "includeTablesRegexes":
            suggest = "include_tables_regexes"
        elif key == "objectTransferSettings":
            suggest = "object_transfer_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceDatabase":
            suggest = "service_database"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection: Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnection'] = None,
                 database: Optional[str] = None,
                 exclude_tables_regexes: Optional[Sequence[str]] = None,
                 include_tables_regexes: Optional[Sequence[str]] = None,
                 object_transfer_settings: Optional['outputs.DatatransferEndpointSettingsMysqlSourceObjectTransferSettings'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsMysqlSourcePassword'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_database: Optional[str] = None,
                 timezone: Optional[str] = None,
                 user: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsMysqlSourceConnectionArgs' connection: Connection settings. The structure is documented below.
        :param str database: Name of the database to transfer.
        :param Sequence[str] exclude_tables_regexes: Opposite of `include_table_regex`. The tables matching the specified regular expressions will not be transferred.
        :param Sequence[str] include_tables_regexes: List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like `^mydb.employees$`.
        :param 'DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsArgs' object_transfer_settings: Defines which database schema objects should be transferred, e.g. views, routines, etc.
        :param 'DatatransferEndpointSettingsMysqlSourcePasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_database: The name of the database where technical tables (`__tm_keeper`, `__tm_gtid_keeper`) will be created. Default is the value of the attribute `database`.
        :param str timezone: Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
        :param str user: User for the database access.
        """
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if exclude_tables_regexes is not None:
            pulumi.set(__self__, "exclude_tables_regexes", exclude_tables_regexes)
        if include_tables_regexes is not None:
            pulumi.set(__self__, "include_tables_regexes", include_tables_regexes)
        if object_transfer_settings is not None:
            pulumi.set(__self__, "object_transfer_settings", object_transfer_settings)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_database is not None:
            pulumi.set(__self__, "service_database", service_database)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database to transfer.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="excludeTablesRegexes")
    def exclude_tables_regexes(self) -> Optional[Sequence[str]]:
        """
        Opposite of `include_table_regex`. The tables matching the specified regular expressions will not be transferred.
        """
        return pulumi.get(self, "exclude_tables_regexes")

    @property
    @pulumi.getter(name="includeTablesRegexes")
    def include_tables_regexes(self) -> Optional[Sequence[str]]:
        """
        List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like `^mydb.employees$`.
        """
        return pulumi.get(self, "include_tables_regexes")

    @property
    @pulumi.getter(name="objectTransferSettings")
    def object_transfer_settings(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceObjectTransferSettings']:
        """
        Defines which database schema objects should be transferred, e.g. views, routines, etc.
        """
        return pulumi.get(self, "object_transfer_settings")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourcePassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceDatabase")
    def service_database(self) -> Optional[str]:
        """
        The name of the database where technical tables (`__tm_keeper`, `__tm_gtid_keeper`) will be created. Default is the value of the attribute `database`.
        """
        return pulumi.get(self, "service_database")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for the database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlSourceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremise'] = None):
        """
        :param str mdb_cluster_id: Identifier of the Managed MySQL cluster.
        :param 'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed MySQL cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlSourceConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourceObjectTransferSettings(dict):
    def __init__(__self__, *,
                 routine: Optional[str] = None,
                 tables: Optional[str] = None,
                 trigger: Optional[str] = None,
                 view: Optional[str] = None):
        """
        :param str trigger: All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        """
        if routine is not None:
            pulumi.set(__self__, "routine", routine)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def routine(self) -> Optional[str]:
        return pulumi.get(self, "routine")

    @property
    @pulumi.getter
    def tables(self) -> Optional[str]:
        return pulumi.get(self, "tables")

    @property
    @pulumi.getter
    def trigger(self) -> Optional[str]:
        """
        All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        """
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlSourcePassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceDatabase":
            suggest = "service_database"
        elif key == "skipConstraintChecks":
            suggest = "skip_constraint_checks"
        elif key == "sqlMode":
            suggest = "sql_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnection'] = None,
                 database: Optional[str] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsMysqlTargetPassword'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_database: Optional[str] = None,
                 skip_constraint_checks: Optional[bool] = None,
                 sql_mode: Optional[str] = None,
                 timezone: Optional[str] = None,
                 user: Optional[str] = None):
        """
        :param str cleanup_policy: How to clean tables when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
        :param 'DatatransferEndpointSettingsMysqlTargetConnectionArgs' connection: Connection settings. The structure is documented below.
        :param str database: Name of the database to transfer.
        :param 'DatatransferEndpointSettingsMysqlTargetPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_database: The name of the database where technical tables (`__tm_keeper`, `__tm_gtid_keeper`) will be created. Default is the value of the attribute `database`.
        :param bool skip_constraint_checks: When true, disables foreign key checks. See [foreign_key_checks](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_foreign_key_checks). False by default.
        :param str sql_mode: [sql_mode](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html) to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
        :param str timezone: Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
        :param str user: User for the database access.
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_database is not None:
            pulumi.set(__self__, "service_database", service_database)
        if skip_constraint_checks is not None:
            pulumi.set(__self__, "skip_constraint_checks", skip_constraint_checks)
        if sql_mode is not None:
            pulumi.set(__self__, "sql_mode", sql_mode)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        How to clean tables when activating the transfer. One of "DISABLED", "DROP" or "TRUNCATE".
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database to transfer.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceDatabase")
    def service_database(self) -> Optional[str]:
        """
        The name of the database where technical tables (`__tm_keeper`, `__tm_gtid_keeper`) will be created. Default is the value of the attribute `database`.
        """
        return pulumi.get(self, "service_database")

    @property
    @pulumi.getter(name="skipConstraintChecks")
    def skip_constraint_checks(self) -> Optional[bool]:
        """
        When true, disables foreign key checks. See [foreign_key_checks](https://dev.mysql.com/doc/refman/5.7/en/server-system-variables.html#sysvar_foreign_key_checks). False by default.
        """
        return pulumi.get(self, "skip_constraint_checks")

    @property
    @pulumi.getter(name="sqlMode")
    def sql_mode(self) -> Optional[str]:
        """
        [sql_mode](https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html) to use when interacting with the server. Defaults to "NO_AUTO_VALUE_ON_ZERO,NO_DIR_IN_CREATE,NO_ENGINE_SUBSTITUTION".
        """
        return pulumi.get(self, "sql_mode")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        """
        Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
        """
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for the database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlTargetConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremise'] = None):
        """
        :param str mdb_cluster_id: Identifier of the Managed MySQL cluster.
        :param 'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed MySQL cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlTargetConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsMysqlTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsMysqlTargetPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"
        elif key == "objectTransferSettings":
            suggest = "object_transfer_settings"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceSchema":
            suggest = "service_schema"
        elif key == "slotGigabyteLagLimit":
            suggest = "slot_gigabyte_lag_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection: Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnection'] = None,
                 database: Optional[str] = None,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None,
                 object_transfer_settings: Optional['outputs.DatatransferEndpointSettingsPostgresSourceObjectTransferSettings'] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsPostgresSourcePassword'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_schema: Optional[str] = None,
                 slot_gigabyte_lag_limit: Optional[int] = None,
                 user: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsPostgresSourceConnectionArgs' connection: Connection settings. The structure is documented below.
        :param str database: Name of the database to transfer.
        :param Sequence[str] exclude_tables: List of tables which will not be transfered, formatted as `schemaname.tablename`.
        :param Sequence[str] include_tables: List of tables to transfer, formatted as `schemaname.tablename`. If omitted or an empty list is specified, all tables will be transferred.
        :param 'DatatransferEndpointSettingsPostgresSourceObjectTransferSettingsArgs' object_transfer_settings: Defines which database schema objects should be transferred, e.g. views, functions, etc.
        :param 'DatatransferEndpointSettingsPostgresSourcePasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_schema: Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty `service_schema` implies schema "public".
        :param int slot_gigabyte_lag_limit: Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
        :param str user: User for the database access.
        """
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)
        if object_transfer_settings is not None:
            pulumi.set(__self__, "object_transfer_settings", object_transfer_settings)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_schema is not None:
            pulumi.set(__self__, "service_schema", service_schema)
        if slot_gigabyte_lag_limit is not None:
            pulumi.set(__self__, "slot_gigabyte_lag_limit", slot_gigabyte_lag_limit)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database to transfer.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables which will not be transfered, formatted as `schemaname.tablename`.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables to transfer, formatted as `schemaname.tablename`. If omitted or an empty list is specified, all tables will be transferred.
        """
        return pulumi.get(self, "include_tables")

    @property
    @pulumi.getter(name="objectTransferSettings")
    def object_transfer_settings(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceObjectTransferSettings']:
        """
        Defines which database schema objects should be transferred, e.g. views, functions, etc.
        """
        return pulumi.get(self, "object_transfer_settings")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourcePassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceSchema")
    def service_schema(self) -> Optional[str]:
        """
        Name of the database schema in which auxiliary tables needed for the transfer will be created. Empty `service_schema` implies schema "public".
        """
        return pulumi.get(self, "service_schema")

    @property
    @pulumi.getter(name="slotGigabyteLagLimit")
    def slot_gigabyte_lag_limit(self) -> Optional[int]:
        """
        Maximum WAL size held by the replication slot, in gigabytes. Exceeding this limit will result in a replication failure and deletion of the replication slot. Unlimited by default.
        """
        return pulumi.get(self, "slot_gigabyte_lag_limit")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for the database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresSourceConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremise'] = None):
        """
        :param str mdb_cluster_id: Identifier of the Managed MySQL cluster.
        :param 'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed MySQL cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresSourceConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourceObjectTransferSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValues":
            suggest = "default_values"
        elif key == "fkConstraint":
            suggest = "fk_constraint"
        elif key == "materializedView":
            suggest = "materialized_view"
        elif key == "primaryKey":
            suggest = "primary_key"
        elif key == "sequenceOwnedBy":
            suggest = "sequence_owned_by"
        elif key == "sequenceSet":
            suggest = "sequence_set"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresSourceObjectTransferSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresSourceObjectTransferSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresSourceObjectTransferSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cast: Optional[str] = None,
                 collation: Optional[str] = None,
                 constraint: Optional[str] = None,
                 default_values: Optional[str] = None,
                 fk_constraint: Optional[str] = None,
                 function: Optional[str] = None,
                 index: Optional[str] = None,
                 materialized_view: Optional[str] = None,
                 policy: Optional[str] = None,
                 primary_key: Optional[str] = None,
                 rule: Optional[str] = None,
                 sequence: Optional[str] = None,
                 sequence_owned_by: Optional[str] = None,
                 sequence_set: Optional[str] = None,
                 table: Optional[str] = None,
                 trigger: Optional[str] = None,
                 type: Optional[str] = None,
                 view: Optional[str] = None):
        """
        :param str cast: All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        :param str trigger: All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        """
        if cast is not None:
            pulumi.set(__self__, "cast", cast)
        if collation is not None:
            pulumi.set(__self__, "collation", collation)
        if constraint is not None:
            pulumi.set(__self__, "constraint", constraint)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if fk_constraint is not None:
            pulumi.set(__self__, "fk_constraint", fk_constraint)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if materialized_view is not None:
            pulumi.set(__self__, "materialized_view", materialized_view)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if primary_key is not None:
            pulumi.set(__self__, "primary_key", primary_key)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)
        if sequence is not None:
            pulumi.set(__self__, "sequence", sequence)
        if sequence_owned_by is not None:
            pulumi.set(__self__, "sequence_owned_by", sequence_owned_by)
        if sequence_set is not None:
            pulumi.set(__self__, "sequence_set", sequence_set)
        if table is not None:
            pulumi.set(__self__, "table", table)
        if trigger is not None:
            pulumi.set(__self__, "trigger", trigger)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if view is not None:
            pulumi.set(__self__, "view", view)

    @property
    @pulumi.getter
    def cast(self) -> Optional[str]:
        """
        All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        """
        return pulumi.get(self, "cast")

    @property
    @pulumi.getter
    def collation(self) -> Optional[str]:
        return pulumi.get(self, "collation")

    @property
    @pulumi.getter
    def constraint(self) -> Optional[str]:
        return pulumi.get(self, "constraint")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[str]:
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="fkConstraint")
    def fk_constraint(self) -> Optional[str]:
        return pulumi.get(self, "fk_constraint")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def index(self) -> Optional[str]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="materializedView")
    def materialized_view(self) -> Optional[str]:
        return pulumi.get(self, "materialized_view")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="primaryKey")
    def primary_key(self) -> Optional[str]:
        return pulumi.get(self, "primary_key")

    @property
    @pulumi.getter
    def rule(self) -> Optional[str]:
        return pulumi.get(self, "rule")

    @property
    @pulumi.getter
    def sequence(self) -> Optional[str]:
        return pulumi.get(self, "sequence")

    @property
    @pulumi.getter(name="sequenceOwnedBy")
    def sequence_owned_by(self) -> Optional[str]:
        return pulumi.get(self, "sequence_owned_by")

    @property
    @pulumi.getter(name="sequenceSet")
    def sequence_set(self) -> Optional[str]:
        return pulumi.get(self, "sequence_set")

    @property
    @pulumi.getter
    def table(self) -> Optional[str]:
        return pulumi.get(self, "table")

    @property
    @pulumi.getter
    def trigger(self) -> Optional[str]:
        """
        All of the attrubutes are optional and should be either "BEFORE_DATA", "AFTER_DATA" or "NEVER".
        """
        return pulumi.get(self, "trigger")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def view(self) -> Optional[str]:
        return pulumi.get(self, "view")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresSourcePassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "securityGroups":
            suggest = "security_groups"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 connection: Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnection'] = None,
                 database: Optional[str] = None,
                 password: Optional['outputs.DatatransferEndpointSettingsPostgresTargetPassword'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 user: Optional[str] = None):
        """
        :param str cleanup_policy: How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        :param 'DatatransferEndpointSettingsPostgresTargetConnectionArgs' connection: Connection settings. The structure is documented below.
        :param str database: Name of the database to transfer.
        :param 'DatatransferEndpointSettingsPostgresTargetPasswordArgs' password: Password for the database access. This is a block with a single field named `raw` which should contain the password.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str user: User for the database access.
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if connection is not None:
            pulumi.set(__self__, "connection", connection)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if user is not None:
            pulumi.set(__self__, "user", user)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter
    def connection(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnection']:
        """
        Connection settings. The structure is documented below.
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Name of the database to transfer.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def password(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetPassword']:
        """
        Password for the database access. This is a block with a single field named `raw` which should contain the password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def user(self) -> Optional[str]:
        """
        User for the database access.
        """
        return pulumi.get(self, "user")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetConnection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mdbClusterId":
            suggest = "mdb_cluster_id"
        elif key == "onPremise":
            suggest = "on_premise"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresTargetConnection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mdb_cluster_id: Optional[str] = None,
                 on_premise: Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremise'] = None):
        """
        :param str mdb_cluster_id: Identifier of the Managed MySQL cluster.
        :param 'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseArgs' on_premise: Connection settings of the on-premise Kafka server.
        """
        if mdb_cluster_id is not None:
            pulumi.set(__self__, "mdb_cluster_id", mdb_cluster_id)
        if on_premise is not None:
            pulumi.set(__self__, "on_premise", on_premise)

    @property
    @pulumi.getter(name="mdbClusterId")
    def mdb_cluster_id(self) -> Optional[str]:
        """
        Identifier of the Managed MySQL cluster.
        """
        return pulumi.get(self, "mdb_cluster_id")

    @property
    @pulumi.getter(name="onPremise")
    def on_premise(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremise']:
        """
        Connection settings of the on-premise Kafka server.
        """
        return pulumi.get(self, "on_premise")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremise(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "tlsMode":
            suggest = "tls_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresTargetConnectionOnPremise. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnectionOnPremise.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnectionOnPremise.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hosts: Optional[Sequence[str]] = None,
                 port: Optional[int] = None,
                 subnet_id: Optional[str] = None,
                 tls_mode: Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode'] = None):
        """
        :param Sequence[str] hosts: Host names of the replica set.
        :param int port: TCP Port number.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param 'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeArgs' tls_mode: TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if tls_mode is not None:
            pulumi.set(__self__, "tls_mode", tls_mode)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence[str]]:
        """
        Host names of the replica set.
        """
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        TCP Port number.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="tlsMode")
    def tls_mode(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode']:
        """
        TLS settings for the server connection. Empty implies plaintext connection. The structure is documented below.
        """
        return pulumi.get(self, "tls_mode")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsMode(dict):
    def __init__(__self__, *,
                 disabled: Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled'] = None,
                 enabled: Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled'] = None):
        """
        :param 'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabledArgs' disabled: Empty block designating that the connection is not secured, i.e. plaintext connection.
        :param 'DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabledArgs' enabled: If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def disabled(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled']:
        """
        Empty block designating that the connection is not secured, i.e. plaintext connection.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional['outputs.DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled']:
        """
        If this attribute is not an empty block, then TLS is used for the server connection. The structure is documented below.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeDisabled(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "caCertificate":
            suggest = "ca_certificate"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsPostgresTargetConnectionOnPremiseTlsModeEnabled.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ca_certificate: Optional[str] = None):
        """
        :param str ca_certificate: X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        if ca_certificate is not None:
            pulumi.set(__self__, "ca_certificate", ca_certificate)

    @property
    @pulumi.getter(name="caCertificate")
    def ca_certificate(self) -> Optional[str]:
        """
        X.509 certificate of the certificate authority which issued the server's certificate, in PEM format. If empty, the server's certificate must be signed by a well-known CA.
        """
        return pulumi.get(self, "ca_certificate")


@pulumi.output_type
class DatatransferEndpointSettingsPostgresTargetPassword(dict):
    def __init__(__self__, *,
                 raw: Optional[str] = None):
        if raw is not None:
            pulumi.set(__self__, "raw", raw)

    @property
    @pulumi.getter
    def raw(self) -> Optional[str]:
        return pulumi.get(self, "raw")


@pulumi.output_type
class DatatransferEndpointSettingsYdbSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "changefeedCustomName":
            suggest = "changefeed_custom_name"
        elif key == "saKeyContent":
            suggest = "sa_key_content"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdbSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdbSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdbSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 changefeed_custom_name: Optional[str] = None,
                 database: Optional[str] = None,
                 instance: Optional[str] = None,
                 paths: Optional[Sequence[str]] = None,
                 sa_key_content: Optional[str] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_account_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str changefeed_custom_name: - (Optional) Custom name for changefeed.
        :param str database: Database name.
        :param str instance: - (Optional) Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
        :param Sequence[str] paths: - (Optional) A list of paths which should be uploaded. When not specified, all available tables are uploaded.
        :param str sa_key_content: - (Optional, Sensitive) Authentication key.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_account_id: - (Required) Service account ID for interaction with database.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if changefeed_custom_name is not None:
            pulumi.set(__self__, "changefeed_custom_name", changefeed_custom_name)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if paths is not None:
            pulumi.set(__self__, "paths", paths)
        if sa_key_content is not None:
            pulumi.set(__self__, "sa_key_content", sa_key_content)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="changefeedCustomName")
    def changefeed_custom_name(self) -> Optional[str]:
        """
        - (Optional) Custom name for changefeed.
        """
        return pulumi.get(self, "changefeed_custom_name")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        """
        - (Optional) Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter
    def paths(self) -> Optional[Sequence[str]]:
        """
        - (Optional) A list of paths which should be uploaded. When not specified, all available tables are uploaded.
        """
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter(name="saKeyContent")
    def sa_key_content(self) -> Optional[str]:
        """
        - (Optional, Sensitive) Authentication key.
        """
        return pulumi.get(self, "sa_key_content")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        - (Required) Service account ID for interaction with database.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsYdbTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "defaultCompression":
            suggest = "default_compression"
        elif key == "isTableColumnOriented":
            suggest = "is_table_column_oriented"
        elif key == "saKeyContent":
            suggest = "sa_key_content"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdbTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdbTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdbTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 database: Optional[str] = None,
                 default_compression: Optional[str] = None,
                 instance: Optional[str] = None,
                 is_table_column_oriented: Optional[bool] = None,
                 path: Optional[str] = None,
                 sa_key_content: Optional[str] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_account_id: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str cleanup_policy: How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        :param str database: Database name.
        :param str default_compression: - (Optional) Compression that will be used for default columns family on YDB table creation One of "YDB_DEFAULT_COMPRESSION_UNSPECIFIED", "YDB_DEFAULT_COMPRESSION_DISABLED", "YDB_DEFAULT_COMPRESSION_LZ4".
        :param str instance: - (Optional) Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
        :param bool is_table_column_oriented: - (Optional) Whether a column-oriented (i.e. OLAP) tables should be created. Default is `false` (create row-oriented OLTP tables).
        :param str path: Path to the field.
        :param str sa_key_content: - (Optional, Sensitive) Authentication key.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_account_id: - (Required) Service account ID for interaction with database.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if default_compression is not None:
            pulumi.set(__self__, "default_compression", default_compression)
        if instance is not None:
            pulumi.set(__self__, "instance", instance)
        if is_table_column_oriented is not None:
            pulumi.set(__self__, "is_table_column_oriented", is_table_column_oriented)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if sa_key_content is not None:
            pulumi.set(__self__, "sa_key_content", sa_key_content)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        How to clean collections when activating the transfer. One of "CLICKHOUSE_CLEANUP_POLICY_DISABLED" or "CLICKHOUSE_CLEANUP_POLICY_DROP".
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="defaultCompression")
    def default_compression(self) -> Optional[str]:
        """
        - (Optional) Compression that will be used for default columns family on YDB table creation One of "YDB_DEFAULT_COMPRESSION_UNSPECIFIED", "YDB_DEFAULT_COMPRESSION_DISABLED", "YDB_DEFAULT_COMPRESSION_LZ4".
        """
        return pulumi.get(self, "default_compression")

    @property
    @pulumi.getter
    def instance(self) -> Optional[str]:
        """
        - (Optional) Instance of YDB. Example: "my-cute-ydb.cloud.yandex.ru:2135".
        """
        return pulumi.get(self, "instance")

    @property
    @pulumi.getter(name="isTableColumnOriented")
    def is_table_column_oriented(self) -> Optional[bool]:
        """
        - (Optional) Whether a column-oriented (i.e. OLAP) tables should be created. Default is `false` (create row-oriented OLTP tables).
        """
        return pulumi.get(self, "is_table_column_oriented")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the field.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="saKeyContent")
    def sa_key_content(self) -> Optional[str]:
        """
        - (Optional, Sensitive) Authentication key.
        """
        return pulumi.get(self, "sa_key_content")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        - (Required) Service account ID for interaction with database.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSource(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowTtlRewind":
            suggest = "allow_ttl_rewind"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "supportedCodecs":
            suggest = "supported_codecs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSource. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSource.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSource.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_ttl_rewind: Optional[bool] = None,
                 consumer: Optional[str] = None,
                 database: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 parser: Optional['outputs.DatatransferEndpointSettingsYdsSourceParser'] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 service_account_id: Optional[str] = None,
                 stream: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 supported_codecs: Optional[Sequence[str]] = None):
        """
        :param bool allow_ttl_rewind: - (Optional) Should continue working, if consumer read lag exceed TTL of topic.
        :param str consumer: - (Optional) Consumer.
        :param str database: Database name.
        :param str endpoint: - (Optional) YDS Endpoint.
        :param 'DatatransferEndpointSettingsYdsSourceParserArgs' parser: Data parsing parameters. If not set, the source messages are read in raw.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param str service_account_id: - (Required) Service account ID for interaction with database.
        :param str stream: - (Optional) Stream.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        :param Sequence[str] supported_codecs: - (Optional) List of supported compression codec.
        """
        if allow_ttl_rewind is not None:
            pulumi.set(__self__, "allow_ttl_rewind", allow_ttl_rewind)
        if consumer is not None:
            pulumi.set(__self__, "consumer", consumer)
        if database is not None:
            pulumi.set(__self__, "database", database)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if parser is not None:
            pulumi.set(__self__, "parser", parser)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if supported_codecs is not None:
            pulumi.set(__self__, "supported_codecs", supported_codecs)

    @property
    @pulumi.getter(name="allowTtlRewind")
    def allow_ttl_rewind(self) -> Optional[bool]:
        """
        - (Optional) Should continue working, if consumer read lag exceed TTL of topic.
        """
        return pulumi.get(self, "allow_ttl_rewind")

    @property
    @pulumi.getter
    def consumer(self) -> Optional[str]:
        """
        - (Optional) Consumer.
        """
        return pulumi.get(self, "consumer")

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        """
        - (Optional) YDS Endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def parser(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParser']:
        """
        Data parsing parameters. If not set, the source messages are read in raw.
        """
        return pulumi.get(self, "parser")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        - (Required) Service account ID for interaction with database.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        - (Optional) Stream.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="supportedCodecs")
    def supported_codecs(self) -> Optional[Sequence[str]]:
        """
        - (Optional) List of supported compression codec.
        """
        return pulumi.get(self, "supported_codecs")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditTrailsV1Parser":
            suggest = "audit_trails_v1_parser"
        elif key == "cloudLoggingParser":
            suggest = "cloud_logging_parser"
        elif key == "jsonParser":
            suggest = "json_parser"
        elif key == "tskvParser":
            suggest = "tskv_parser"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSourceParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSourceParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSourceParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_trails_v1_parser: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser'] = None,
                 cloud_logging_parser: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser'] = None,
                 json_parser: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParser'] = None,
                 tskv_parser: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParser'] = None):
        """
        :param 'DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1ParserArgs' audit_trails_v1_parser: Parse Audit Trails data. Empty struct.
        :param 'DatatransferEndpointSettingsYdsSourceParserCloudLoggingParserArgs' cloud_logging_parser: Parse Cloud Logging data. Empty struct.
        :param 'DatatransferEndpointSettingsYdsSourceParserJsonParserArgs' json_parser: Parse data in json format.
        :param 'DatatransferEndpointSettingsYdsSourceParserTskvParserArgs' tskv_parser: Parse data if tskv format.
        """
        if audit_trails_v1_parser is not None:
            pulumi.set(__self__, "audit_trails_v1_parser", audit_trails_v1_parser)
        if cloud_logging_parser is not None:
            pulumi.set(__self__, "cloud_logging_parser", cloud_logging_parser)
        if json_parser is not None:
            pulumi.set(__self__, "json_parser", json_parser)
        if tskv_parser is not None:
            pulumi.set(__self__, "tskv_parser", tskv_parser)

    @property
    @pulumi.getter(name="auditTrailsV1Parser")
    def audit_trails_v1_parser(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser']:
        """
        Parse Audit Trails data. Empty struct.
        """
        return pulumi.get(self, "audit_trails_v1_parser")

    @property
    @pulumi.getter(name="cloudLoggingParser")
    def cloud_logging_parser(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser']:
        """
        Parse Cloud Logging data. Empty struct.
        """
        return pulumi.get(self, "cloud_logging_parser")

    @property
    @pulumi.getter(name="jsonParser")
    def json_parser(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParser']:
        """
        Parse data in json format.
        """
        return pulumi.get(self, "json_parser")

    @property
    @pulumi.getter(name="tskvParser")
    def tskv_parser(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParser']:
        """
        Parse data if tskv format.
        """
        return pulumi.get(self, "tskv_parser")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserAuditTrailsV1Parser(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserCloudLoggingParser(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserJsonParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addRestColumn":
            suggest = "add_rest_column"
        elif key == "dataSchema":
            suggest = "data_schema"
        elif key == "nullKeysAllowed":
            suggest = "null_keys_allowed"
        elif key == "unescapeStringValues":
            suggest = "unescape_string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSourceParserJsonParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSourceParserJsonParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSourceParserJsonParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_rest_column: Optional[bool] = None,
                 data_schema: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema'] = None,
                 null_keys_allowed: Optional[bool] = None,
                 unescape_string_values: Optional[bool] = None):
        """
        :param bool add_rest_column: Add fields, that are not in the schema, into the _rest column.
        :param 'DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaArgs' data_schema: Data parsing scheme.The structure is documented below.
        :param bool null_keys_allowed: Allow null keys. If `false` - null keys will be putted to unparsed data
        :param bool unescape_string_values: Allow unescape string values.
        """
        if add_rest_column is not None:
            pulumi.set(__self__, "add_rest_column", add_rest_column)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if null_keys_allowed is not None:
            pulumi.set(__self__, "null_keys_allowed", null_keys_allowed)
        if unescape_string_values is not None:
            pulumi.set(__self__, "unescape_string_values", unescape_string_values)

    @property
    @pulumi.getter(name="addRestColumn")
    def add_rest_column(self) -> Optional[bool]:
        """
        Add fields, that are not in the schema, into the _rest column.
        """
        return pulumi.get(self, "add_rest_column")

    @property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema']:
        """
        Data parsing scheme.The structure is documented below.
        """
        return pulumi.get(self, "data_schema")

    @property
    @pulumi.getter(name="nullKeysAllowed")
    def null_keys_allowed(self) -> Optional[bool]:
        """
        Allow null keys. If `false` - null keys will be putted to unparsed data
        """
        return pulumi.get(self, "null_keys_allowed")

    @property
    @pulumi.getter(name="unescapeStringValues")
    def unescape_string_values(self) -> Optional[bool]:
        """
        Allow unescape string values.
        """
        return pulumi.get(self, "unescape_string_values")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonFields":
            suggest = "json_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fields: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields'] = None,
                 json_fields: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsArgs' fields: Description of the data schema in the array of `fields` structure (documented below).
        :param str json_fields: Description of the data schema as JSON specification.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if json_fields is not None:
            pulumi.set(__self__, "json_fields", json_fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields']:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="jsonFields")
    def json_fields(self) -> Optional[str]:
        """
        Description of the data schema as JSON specification.
        """
        return pulumi.get(self, "json_fields")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsFieldArgs'] fields: Description of the data schema in the array of `fields` structure (documented below).
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField']]:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserJsonParserDataSchemaFieldsField(dict):
    def __init__(__self__, *,
                 key: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param bool key: Mark field as Primary Key.
        :param str name: Field name.
        :param str path: Path to the field.
        :param bool required: Mark field as required.
        :param str type: Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[bool]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the field.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Mark field as required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserTskvParser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addRestColumn":
            suggest = "add_rest_column"
        elif key == "dataSchema":
            suggest = "data_schema"
        elif key == "nullKeysAllowed":
            suggest = "null_keys_allowed"
        elif key == "unescapeStringValues":
            suggest = "unescape_string_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSourceParserTskvParser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSourceParserTskvParser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSourceParserTskvParser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_rest_column: Optional[bool] = None,
                 data_schema: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema'] = None,
                 null_keys_allowed: Optional[bool] = None,
                 unescape_string_values: Optional[bool] = None):
        """
        :param bool add_rest_column: Add fields, that are not in the schema, into the _rest column.
        :param 'DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaArgs' data_schema: Data parsing scheme.The structure is documented below.
        :param bool null_keys_allowed: Allow null keys. If `false` - null keys will be putted to unparsed data
        :param bool unescape_string_values: Allow unescape string values.
        """
        if add_rest_column is not None:
            pulumi.set(__self__, "add_rest_column", add_rest_column)
        if data_schema is not None:
            pulumi.set(__self__, "data_schema", data_schema)
        if null_keys_allowed is not None:
            pulumi.set(__self__, "null_keys_allowed", null_keys_allowed)
        if unescape_string_values is not None:
            pulumi.set(__self__, "unescape_string_values", unescape_string_values)

    @property
    @pulumi.getter(name="addRestColumn")
    def add_rest_column(self) -> Optional[bool]:
        """
        Add fields, that are not in the schema, into the _rest column.
        """
        return pulumi.get(self, "add_rest_column")

    @property
    @pulumi.getter(name="dataSchema")
    def data_schema(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema']:
        """
        Data parsing scheme.The structure is documented below.
        """
        return pulumi.get(self, "data_schema")

    @property
    @pulumi.getter(name="nullKeysAllowed")
    def null_keys_allowed(self) -> Optional[bool]:
        """
        Allow null keys. If `false` - null keys will be putted to unparsed data
        """
        return pulumi.get(self, "null_keys_allowed")

    @property
    @pulumi.getter(name="unescapeStringValues")
    def unescape_string_values(self) -> Optional[bool]:
        """
        Allow unescape string values.
        """
        return pulumi.get(self, "unescape_string_values")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jsonFields":
            suggest = "json_fields"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fields: Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields'] = None,
                 json_fields: Optional[str] = None):
        """
        :param 'DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsArgs' fields: Description of the data schema in the array of `fields` structure (documented below).
        :param str json_fields: Description of the data schema as JSON specification.
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)
        if json_fields is not None:
            pulumi.set(__self__, "json_fields", json_fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields']:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")

    @property
    @pulumi.getter(name="jsonFields")
    def json_fields(self) -> Optional[str]:
        """
        Description of the data schema as JSON specification.
        """
        return pulumi.get(self, "json_fields")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFields(dict):
    def __init__(__self__, *,
                 fields: Optional[Sequence['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsFieldArgs'] fields: Description of the data schema in the array of `fields` structure (documented below).
        """
        if fields is not None:
            pulumi.set(__self__, "fields", fields)

    @property
    @pulumi.getter
    def fields(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField']]:
        """
        Description of the data schema in the array of `fields` structure (documented below).
        """
        return pulumi.get(self, "fields")


@pulumi.output_type
class DatatransferEndpointSettingsYdsSourceParserTskvParserDataSchemaFieldsField(dict):
    def __init__(__self__, *,
                 key: Optional[bool] = None,
                 name: Optional[str] = None,
                 path: Optional[str] = None,
                 required: Optional[bool] = None,
                 type: Optional[str] = None):
        """
        :param bool key: Mark field as Primary Key.
        :param str name: Field name.
        :param str path: Path to the field.
        :param bool required: Mark field as required.
        :param str type: Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if required is not None:
            pulumi.set(__self__, "required", required)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def key(self) -> Optional[bool]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Field name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        Path to the field.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def required(self) -> Optional[bool]:
        """
        Mark field as required.
        """
        return pulumi.get(self, "required")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Field type, one of: `INT64`, `INT32`, `INT16`, `INT8`, `UINT64`, `UINT32`, `UINT16`, `UINT8`, `DOUBLE`, `BOOLEAN`, `STRING`, `UTF8`, `ANY`, `DATETIME`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class DatatransferEndpointSettingsYdsTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "saveTxOrder":
            suggest = "save_tx_order"
        elif key == "securityGroups":
            suggest = "security_groups"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database: Optional[str] = None,
                 endpoint: Optional[str] = None,
                 save_tx_order: Optional[bool] = None,
                 security_groups: Optional[Sequence[str]] = None,
                 serializer: Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializer'] = None,
                 service_account_id: Optional[str] = None,
                 stream: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str database: Database name.
        :param str endpoint: - (Optional) YDS Endpoint.
        :param bool save_tx_order: Not to split events queue into separate per-table queues.
        :param Sequence[str] security_groups: List of security groups that the transfer associated with this endpoint should use.
        :param 'DatatransferEndpointSettingsYdsTargetSerializerArgs' serializer: Data serialization settings.
        :param str service_account_id: - (Required) Service account ID for interaction with database.
        :param str stream: - (Optional) Stream.
        :param str subnet_id: Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        if database is not None:
            pulumi.set(__self__, "database", database)
        if endpoint is not None:
            pulumi.set(__self__, "endpoint", endpoint)
        if save_tx_order is not None:
            pulumi.set(__self__, "save_tx_order", save_tx_order)
        if security_groups is not None:
            pulumi.set(__self__, "security_groups", security_groups)
        if serializer is not None:
            pulumi.set(__self__, "serializer", serializer)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def database(self) -> Optional[str]:
        """
        Database name.
        """
        return pulumi.get(self, "database")

    @property
    @pulumi.getter
    def endpoint(self) -> Optional[str]:
        """
        - (Optional) YDS Endpoint.
        """
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="saveTxOrder")
    def save_tx_order(self) -> Optional[bool]:
        """
        Not to split events queue into separate per-table queues.
        """
        return pulumi.get(self, "save_tx_order")

    @property
    @pulumi.getter(name="securityGroups")
    def security_groups(self) -> Optional[Sequence[str]]:
        """
        List of security groups that the transfer associated with this endpoint should use.
        """
        return pulumi.get(self, "security_groups")

    @property
    @pulumi.getter
    def serializer(self) -> Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializer']:
        """
        Data serialization settings.
        """
        return pulumi.get(self, "serializer")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        - (Required) Service account ID for interaction with database.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def stream(self) -> Optional[str]:
        """
        - (Optional) Stream.
        """
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        Identifier of the Yandex Cloud VPC subnetwork to user for accessing the database. If omitted, the server has to be accessible via Internet.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class DatatransferEndpointSettingsYdsTargetSerializer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serializerAuto":
            suggest = "serializer_auto"
        elif key == "serializerDebezium":
            suggest = "serializer_debezium"
        elif key == "serializerJson":
            suggest = "serializer_json"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsTargetSerializer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsTargetSerializer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsTargetSerializer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 serializer_auto: Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto'] = None,
                 serializer_debezium: Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium'] = None,
                 serializer_json: Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerJson'] = None):
        """
        :param 'DatatransferEndpointSettingsYdsTargetSerializerSerializerAutoArgs' serializer_auto: Empty block. Select data serialization format automatically.
        :param 'DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumArgs' serializer_debezium: Serialize data in json format. The structure is documented below.
        :param 'DatatransferEndpointSettingsYdsTargetSerializerSerializerJsonArgs' serializer_json: Empty block. Serialize data in json format.
        """
        if serializer_auto is not None:
            pulumi.set(__self__, "serializer_auto", serializer_auto)
        if serializer_debezium is not None:
            pulumi.set(__self__, "serializer_debezium", serializer_debezium)
        if serializer_json is not None:
            pulumi.set(__self__, "serializer_json", serializer_json)

    @property
    @pulumi.getter(name="serializerAuto")
    def serializer_auto(self) -> Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto']:
        """
        Empty block. Select data serialization format automatically.
        """
        return pulumi.get(self, "serializer_auto")

    @property
    @pulumi.getter(name="serializerDebezium")
    def serializer_debezium(self) -> Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium']:
        """
        Serialize data in json format. The structure is documented below.
        """
        return pulumi.get(self, "serializer_debezium")

    @property
    @pulumi.getter(name="serializerJson")
    def serializer_json(self) -> Optional['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerJson']:
        """
        Empty block. Serialize data in json format.
        """
        return pulumi.get(self, "serializer_json")


@pulumi.output_type
class DatatransferEndpointSettingsYdsTargetSerializerSerializerAuto(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serializerParameters":
            suggest = "serializer_parameters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferEndpointSettingsYdsTargetSerializerSerializerDebezium.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 serializer_parameters: Optional[Sequence['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter']] = None):
        """
        :param Sequence['DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameterArgs'] serializer_parameters: A list of debezium parameters set by the structure of the `key` and `value` string fields.
        """
        if serializer_parameters is not None:
            pulumi.set(__self__, "serializer_parameters", serializer_parameters)

    @property
    @pulumi.getter(name="serializerParameters")
    def serializer_parameters(self) -> Optional[Sequence['outputs.DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter']]:
        """
        A list of debezium parameters set by the structure of the `key` and `value` string fields.
        """
        return pulumi.get(self, "serializer_parameters")


@pulumi.output_type
class DatatransferEndpointSettingsYdsTargetSerializerSerializerDebeziumSerializerParameter(dict):
    def __init__(__self__, *,
                 key: Optional[str] = None,
                 value: Optional[str] = None):
        """
        :param str key: Mark field as Primary Key.
        """
        if key is not None:
            pulumi.set(__self__, "key", key)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Mark field as Primary Key.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        return pulumi.get(self, "value")


@pulumi.output_type
class DatatransferEndpointSettingsYdsTargetSerializerSerializerJson(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class DatatransferTransferRuntime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ycRuntime":
            suggest = "yc_runtime"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferRuntime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferRuntime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferRuntime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 yc_runtime: Optional['outputs.DatatransferTransferRuntimeYcRuntime'] = None):
        """
        :param 'DatatransferTransferRuntimeYcRuntimeArgs' yc_runtime: YC Runtime parameters for the transfer.
        """
        if yc_runtime is not None:
            pulumi.set(__self__, "yc_runtime", yc_runtime)

    @property
    @pulumi.getter(name="ycRuntime")
    def yc_runtime(self) -> Optional['outputs.DatatransferTransferRuntimeYcRuntime']:
        """
        YC Runtime parameters for the transfer.
        """
        return pulumi.get(self, "yc_runtime")


@pulumi.output_type
class DatatransferTransferRuntimeYcRuntime(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobCount":
            suggest = "job_count"
        elif key == "uploadShardParams":
            suggest = "upload_shard_params"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferRuntimeYcRuntime. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferRuntimeYcRuntime.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferRuntimeYcRuntime.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_count: Optional[int] = None,
                 upload_shard_params: Optional['outputs.DatatransferTransferRuntimeYcRuntimeUploadShardParams'] = None):
        """
        :param int job_count: Number of workers in parallel replication.
        :param 'DatatransferTransferRuntimeYcRuntimeUploadShardParamsArgs' upload_shard_params: Parallel snapshot parameters.
        """
        if job_count is not None:
            pulumi.set(__self__, "job_count", job_count)
        if upload_shard_params is not None:
            pulumi.set(__self__, "upload_shard_params", upload_shard_params)

    @property
    @pulumi.getter(name="jobCount")
    def job_count(self) -> Optional[int]:
        """
        Number of workers in parallel replication.
        """
        return pulumi.get(self, "job_count")

    @property
    @pulumi.getter(name="uploadShardParams")
    def upload_shard_params(self) -> Optional['outputs.DatatransferTransferRuntimeYcRuntimeUploadShardParams']:
        """
        Parallel snapshot parameters.
        """
        return pulumi.get(self, "upload_shard_params")


@pulumi.output_type
class DatatransferTransferRuntimeYcRuntimeUploadShardParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "jobCount":
            suggest = "job_count"
        elif key == "processCount":
            suggest = "process_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferRuntimeYcRuntimeUploadShardParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferRuntimeYcRuntimeUploadShardParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferRuntimeYcRuntimeUploadShardParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 job_count: Optional[int] = None,
                 process_count: Optional[int] = None):
        """
        :param int job_count: Number of workers.
        :param int process_count: Number of threads.
        """
        if job_count is not None:
            pulumi.set(__self__, "job_count", job_count)
        if process_count is not None:
            pulumi.set(__self__, "process_count", process_count)

    @property
    @pulumi.getter(name="jobCount")
    def job_count(self) -> Optional[int]:
        """
        Number of workers.
        """
        return pulumi.get(self, "job_count")

    @property
    @pulumi.getter(name="processCount")
    def process_count(self) -> Optional[int]:
        """
        Number of threads.
        """
        return pulumi.get(self, "process_count")


@pulumi.output_type
class DatatransferTransferTransformation(dict):
    def __init__(__self__, *,
                 transformers: Optional[Sequence['outputs.DatatransferTransferTransformationTransformer']] = None):
        """
        :param Sequence['DatatransferTransferTransformationTransformerArgs'] transformers: A list of transformers. You can specify exactly 1 transformer in each element of list.
        """
        if transformers is not None:
            pulumi.set(__self__, "transformers", transformers)

    @property
    @pulumi.getter
    def transformers(self) -> Optional[Sequence['outputs.DatatransferTransferTransformationTransformer']]:
        """
        A list of transformers. You can specify exactly 1 transformer in each element of list.
        """
        return pulumi.get(self, "transformers")


@pulumi.output_type
class DatatransferTransferTransformationTransformer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "convertToString":
            suggest = "convert_to_string"
        elif key == "filterColumns":
            suggest = "filter_columns"
        elif key == "filterRows":
            suggest = "filter_rows"
        elif key == "maskField":
            suggest = "mask_field"
        elif key == "renameTables":
            suggest = "rename_tables"
        elif key == "replacePrimaryKey":
            suggest = "replace_primary_key"
        elif key == "sharderTransformer":
            suggest = "sharder_transformer"
        elif key == "tableSplitterTransformer":
            suggest = "table_splitter_transformer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 convert_to_string: Optional['outputs.DatatransferTransferTransformationTransformerConvertToString'] = None,
                 filter_columns: Optional['outputs.DatatransferTransferTransformationTransformerFilterColumns'] = None,
                 filter_rows: Optional['outputs.DatatransferTransferTransformationTransformerFilterRows'] = None,
                 mask_field: Optional['outputs.DatatransferTransferTransformationTransformerMaskField'] = None,
                 rename_tables: Optional['outputs.DatatransferTransferTransformationTransformerRenameTables'] = None,
                 replace_primary_key: Optional['outputs.DatatransferTransferTransformationTransformerReplacePrimaryKey'] = None,
                 sharder_transformer: Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformer'] = None,
                 table_splitter_transformer: Optional['outputs.DatatransferTransferTransformationTransformerTableSplitterTransformer'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerConvertToStringArgs' convert_to_string: Convert column values to strings.
        :param 'DatatransferTransferTransformationTransformerFilterColumnsArgs' filter_columns: Set up a list of table columns to transfer.
        :param 'DatatransferTransferTransformationTransformerFilterRowsArgs' filter_rows: This filter only applies to transfers with queues (Apache Kafka®) as a data source. When running a transfer, only the strings meeting the specified criteria remain in a changefeed.
        :param 'DatatransferTransferTransformationTransformerMaskFieldArgs' mask_field: Mask field transformer allows you to hash data.
        :param 'DatatransferTransferTransformationTransformerRenameTablesArgs' rename_tables: Set rules for renaming tables by specifying the current names of the tables in the source and new names for these tables in the target.
        :param 'DatatransferTransferTransformationTransformerReplacePrimaryKeyArgs' replace_primary_key: Override primary keys.
        :param 'DatatransferTransferTransformationTransformerSharderTransformerArgs' sharder_transformer: Set the number of shards for particular tables and a list of columns whose values will be used for calculating a hash to determine a shard.
        :param 'DatatransferTransferTransformationTransformerTableSplitterTransformerArgs' table_splitter_transformer: Splits the X table into multiple tables (X_1, X_2, ..., X_n) based on data.
        """
        if convert_to_string is not None:
            pulumi.set(__self__, "convert_to_string", convert_to_string)
        if filter_columns is not None:
            pulumi.set(__self__, "filter_columns", filter_columns)
        if filter_rows is not None:
            pulumi.set(__self__, "filter_rows", filter_rows)
        if mask_field is not None:
            pulumi.set(__self__, "mask_field", mask_field)
        if rename_tables is not None:
            pulumi.set(__self__, "rename_tables", rename_tables)
        if replace_primary_key is not None:
            pulumi.set(__self__, "replace_primary_key", replace_primary_key)
        if sharder_transformer is not None:
            pulumi.set(__self__, "sharder_transformer", sharder_transformer)
        if table_splitter_transformer is not None:
            pulumi.set(__self__, "table_splitter_transformer", table_splitter_transformer)

    @property
    @pulumi.getter(name="convertToString")
    def convert_to_string(self) -> Optional['outputs.DatatransferTransferTransformationTransformerConvertToString']:
        """
        Convert column values to strings.
        """
        return pulumi.get(self, "convert_to_string")

    @property
    @pulumi.getter(name="filterColumns")
    def filter_columns(self) -> Optional['outputs.DatatransferTransferTransformationTransformerFilterColumns']:
        """
        Set up a list of table columns to transfer.
        """
        return pulumi.get(self, "filter_columns")

    @property
    @pulumi.getter(name="filterRows")
    def filter_rows(self) -> Optional['outputs.DatatransferTransferTransformationTransformerFilterRows']:
        """
        This filter only applies to transfers with queues (Apache Kafka®) as a data source. When running a transfer, only the strings meeting the specified criteria remain in a changefeed.
        """
        return pulumi.get(self, "filter_rows")

    @property
    @pulumi.getter(name="maskField")
    def mask_field(self) -> Optional['outputs.DatatransferTransferTransformationTransformerMaskField']:
        """
        Mask field transformer allows you to hash data.
        """
        return pulumi.get(self, "mask_field")

    @property
    @pulumi.getter(name="renameTables")
    def rename_tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerRenameTables']:
        """
        Set rules for renaming tables by specifying the current names of the tables in the source and new names for these tables in the target.
        """
        return pulumi.get(self, "rename_tables")

    @property
    @pulumi.getter(name="replacePrimaryKey")
    def replace_primary_key(self) -> Optional['outputs.DatatransferTransferTransformationTransformerReplacePrimaryKey']:
        """
        Override primary keys.
        """
        return pulumi.get(self, "replace_primary_key")

    @property
    @pulumi.getter(name="sharderTransformer")
    def sharder_transformer(self) -> Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformer']:
        """
        Set the number of shards for particular tables and a list of columns whose values will be used for calculating a hash to determine a shard.
        """
        return pulumi.get(self, "sharder_transformer")

    @property
    @pulumi.getter(name="tableSplitterTransformer")
    def table_splitter_transformer(self) -> Optional['outputs.DatatransferTransferTransformationTransformerTableSplitterTransformer']:
        """
        Splits the X table into multiple tables (X_1, X_2, ..., X_n) based on data.
        """
        return pulumi.get(self, "table_splitter_transformer")


@pulumi.output_type
class DatatransferTransferTransformationTransformerConvertToString(dict):
    def __init__(__self__, *,
                 columns: Optional['outputs.DatatransferTransferTransformationTransformerConvertToStringColumns'] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerConvertToStringTables'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerConvertToStringColumnsArgs' columns: List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        :param 'DatatransferTransferTransformationTransformerConvertToStringTablesArgs' tables: Table filter (see block documentation below).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def columns(self) -> Optional['outputs.DatatransferTransferTransformationTransformerConvertToStringColumns']:
        """
        List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerConvertToStringTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerConvertToStringColumns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeColumns":
            suggest = "exclude_columns"
        elif key == "includeColumns":
            suggest = "include_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerConvertToStringColumns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerConvertToStringColumns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerConvertToStringColumns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_columns: Optional[Sequence[str]] = None,
                 include_columns: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_columns: List of columns that will be excluded to transfer.
        :param Sequence[str] include_columns: List of columns that will be included to transfer.
        """
        if exclude_columns is not None:
            pulumi.set(__self__, "exclude_columns", exclude_columns)
        if include_columns is not None:
            pulumi.set(__self__, "include_columns", include_columns)

    @property
    @pulumi.getter(name="excludeColumns")
    def exclude_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_columns")

    @property
    @pulumi.getter(name="includeColumns")
    def include_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be included to transfer.
        """
        return pulumi.get(self, "include_columns")


@pulumi.output_type
class DatatransferTransferTransformationTransformerConvertToStringTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerConvertToStringTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerConvertToStringTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerConvertToStringTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerFilterColumns(dict):
    def __init__(__self__, *,
                 columns: Optional['outputs.DatatransferTransferTransformationTransformerFilterColumnsColumns'] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerFilterColumnsTables'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerFilterColumnsColumnsArgs' columns: List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        :param 'DatatransferTransferTransformationTransformerFilterColumnsTablesArgs' tables: Table filter (see block documentation below).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def columns(self) -> Optional['outputs.DatatransferTransferTransformationTransformerFilterColumnsColumns']:
        """
        List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerFilterColumnsTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerFilterColumnsColumns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeColumns":
            suggest = "exclude_columns"
        elif key == "includeColumns":
            suggest = "include_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerFilterColumnsColumns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerFilterColumnsColumns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerFilterColumnsColumns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_columns: Optional[Sequence[str]] = None,
                 include_columns: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_columns: List of columns that will be excluded to transfer.
        :param Sequence[str] include_columns: List of columns that will be included to transfer.
        """
        if exclude_columns is not None:
            pulumi.set(__self__, "exclude_columns", exclude_columns)
        if include_columns is not None:
            pulumi.set(__self__, "include_columns", include_columns)

    @property
    @pulumi.getter(name="excludeColumns")
    def exclude_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_columns")

    @property
    @pulumi.getter(name="includeColumns")
    def include_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be included to transfer.
        """
        return pulumi.get(self, "include_columns")


@pulumi.output_type
class DatatransferTransferTransformationTransformerFilterColumnsTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerFilterColumnsTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerFilterColumnsTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerFilterColumnsTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerFilterRows(dict):
    def __init__(__self__, *,
                 filter: Optional[str] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerFilterRowsTables'] = None):
        """
        :param str filter: Filtering criterion. This can be comparison operators for numeric, string, and Boolean values, comparison to NULL, and checking whether a substring is part of a string. Details here: https://cloud.yandex.com/en/docs/data-transfer/concepts/data-transformation#append-only-sources
        :param 'DatatransferTransferTransformationTransformerFilterRowsTablesArgs' tables: Table filter (see block documentation below).
        """
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Filtering criterion. This can be comparison operators for numeric, string, and Boolean values, comparison to NULL, and checking whether a substring is part of a string. Details here: https://cloud.yandex.com/en/docs/data-transfer/concepts/data-transformation#append-only-sources
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerFilterRowsTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerFilterRowsTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerFilterRowsTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerFilterRowsTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerFilterRowsTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerMaskField(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence[str]] = None,
                 function: Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldFunction'] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldTables'] = None):
        """
        :param Sequence[str] columns: List of strings that specify the name of the column for data masking (a regular expression).
        :param 'DatatransferTransferTransformationTransformerMaskFieldFunctionArgs' function: Mask function.
        :param 'DatatransferTransferTransformationTransformerMaskFieldTablesArgs' tables: Table filter.
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        """
        List of strings that specify the name of the column for data masking (a regular expression).
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def function(self) -> Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldFunction']:
        """
        Mask function.
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldTables']:
        """
        Table filter.
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerMaskFieldFunction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maskFunctionHash":
            suggest = "mask_function_hash"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerMaskFieldFunction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldFunction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldFunction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mask_function_hash: Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHashArgs' mask_function_hash: Hash mask function.
        """
        if mask_function_hash is not None:
            pulumi.set(__self__, "mask_function_hash", mask_function_hash)

    @property
    @pulumi.getter(name="maskFunctionHash")
    def mask_function_hash(self) -> Optional['outputs.DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash']:
        """
        Hash mask function.
        """
        return pulumi.get(self, "mask_function_hash")


@pulumi.output_type
class DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "userDefinedSalt":
            suggest = "user_defined_salt"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldFunctionMaskFunctionHash.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 user_defined_salt: Optional[str] = None):
        """
        :param str user_defined_salt: This string will be used in the HMAC(sha256, salt) function applied to the column data.
        """
        if user_defined_salt is not None:
            pulumi.set(__self__, "user_defined_salt", user_defined_salt)

    @property
    @pulumi.getter(name="userDefinedSalt")
    def user_defined_salt(self) -> Optional[str]:
        """
        This string will be used in the HMAC(sha256, salt) function applied to the column data.
        """
        return pulumi.get(self, "user_defined_salt")


@pulumi.output_type
class DatatransferTransferTransformationTransformerMaskFieldTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerMaskFieldTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerMaskFieldTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerRenameTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "renameTables":
            suggest = "rename_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerRenameTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerRenameTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerRenameTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 rename_tables: Optional[Sequence['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTable']] = None):
        """
        :param Sequence['DatatransferTransferTransformationTransformerRenameTablesRenameTableArgs'] rename_tables: List of renaming rules.
        """
        if rename_tables is not None:
            pulumi.set(__self__, "rename_tables", rename_tables)

    @property
    @pulumi.getter(name="renameTables")
    def rename_tables(self) -> Optional[Sequence['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTable']]:
        """
        List of renaming rules.
        """
        return pulumi.get(self, "rename_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerRenameTablesRenameTable(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "newName":
            suggest = "new_name"
        elif key == "originalName":
            suggest = "original_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerRenameTablesRenameTable. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTable.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTable.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 new_name: Optional['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName'] = None,
                 original_name: Optional['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerRenameTablesRenameTableNewNameArgs' new_name: Specify the new names for this table in the target.
        :param 'DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalNameArgs' original_name: Specify the current names of the table in the source.
        """
        if new_name is not None:
            pulumi.set(__self__, "new_name", new_name)
        if original_name is not None:
            pulumi.set(__self__, "original_name", original_name)

    @property
    @pulumi.getter(name="newName")
    def new_name(self) -> Optional['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName']:
        """
        Specify the new names for this table in the target.
        """
        return pulumi.get(self, "new_name")

    @property
    @pulumi.getter(name="originalName")
    def original_name(self) -> Optional['outputs.DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName']:
        """
        Specify the current names of the table in the source.
        """
        return pulumi.get(self, "original_name")


@pulumi.output_type
class DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameSpace":
            suggest = "name_space"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTableNewName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 name_space: Optional[str] = None):
        """
        :param str name: Name of the transfer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_space is not None:
            pulumi.set(__self__, "name_space", name_space)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the transfer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> Optional[str]:
        return pulumi.get(self, "name_space")


@pulumi.output_type
class DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "nameSpace":
            suggest = "name_space"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerRenameTablesRenameTableOriginalName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 name_space: Optional[str] = None):
        """
        :param str name: Name of the transfer.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if name_space is not None:
            pulumi.set(__self__, "name_space", name_space)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the transfer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nameSpace")
    def name_space(self) -> Optional[str]:
        return pulumi.get(self, "name_space")


@pulumi.output_type
class DatatransferTransferTransformationTransformerReplacePrimaryKey(dict):
    def __init__(__self__, *,
                 keys: Optional[Sequence[str]] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerReplacePrimaryKeyTables'] = None):
        """
        :param Sequence[str] keys: List of columns to be used as primary keys.
        :param 'DatatransferTransferTransformationTransformerReplacePrimaryKeyTablesArgs' tables: Table filter (see block documentation below).
        """
        if keys is not None:
            pulumi.set(__self__, "keys", keys)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def keys(self) -> Optional[Sequence[str]]:
        """
        List of columns to be used as primary keys.
        """
        return pulumi.get(self, "keys")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerReplacePrimaryKeyTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerReplacePrimaryKeyTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerReplacePrimaryKeyTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerReplacePrimaryKeyTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerReplacePrimaryKeyTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerSharderTransformer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shardsCount":
            suggest = "shards_count"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerSharderTransformer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 columns: Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformerColumns'] = None,
                 shards_count: Optional[int] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformerTables'] = None):
        """
        :param 'DatatransferTransferTransformationTransformerSharderTransformerColumnsArgs' columns: List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        :param int shards_count: Number of shards.
        :param 'DatatransferTransferTransformationTransformerSharderTransformerTablesArgs' tables: Table filter (see block documentation below).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if shards_count is not None:
            pulumi.set(__self__, "shards_count", shards_count)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def columns(self) -> Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformerColumns']:
        """
        List of the columns to transfer to the target tables using lists of included and excluded columns (see block documentation below).
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter(name="shardsCount")
    def shards_count(self) -> Optional[int]:
        """
        Number of shards.
        """
        return pulumi.get(self, "shards_count")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerSharderTransformerTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerSharderTransformerColumns(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeColumns":
            suggest = "exclude_columns"
        elif key == "includeColumns":
            suggest = "include_columns"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerSharderTransformerColumns. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformerColumns.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformerColumns.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_columns: Optional[Sequence[str]] = None,
                 include_columns: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_columns: List of columns that will be excluded to transfer.
        :param Sequence[str] include_columns: List of columns that will be included to transfer.
        """
        if exclude_columns is not None:
            pulumi.set(__self__, "exclude_columns", exclude_columns)
        if include_columns is not None:
            pulumi.set(__self__, "include_columns", include_columns)

    @property
    @pulumi.getter(name="excludeColumns")
    def exclude_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_columns")

    @property
    @pulumi.getter(name="includeColumns")
    def include_columns(self) -> Optional[Sequence[str]]:
        """
        List of columns that will be included to transfer.
        """
        return pulumi.get(self, "include_columns")


@pulumi.output_type
class DatatransferTransferTransformationTransformerSharderTransformerTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerSharderTransformerTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformerTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerSharderTransformerTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerTableSplitterTransformer(dict):
    def __init__(__self__, *,
                 columns: Optional[Sequence[str]] = None,
                 splitter: Optional[str] = None,
                 tables: Optional['outputs.DatatransferTransferTransformationTransformerTableSplitterTransformerTables'] = None):
        """
        :param Sequence[str] columns: List of strings that specify the columns in the tables to be partitioned.
        :param str splitter: Specify the split string to be used for merging components in a new table name.
        :param 'DatatransferTransferTransformationTransformerTableSplitterTransformerTablesArgs' tables: Table filter (see block documentation below).
        """
        if columns is not None:
            pulumi.set(__self__, "columns", columns)
        if splitter is not None:
            pulumi.set(__self__, "splitter", splitter)
        if tables is not None:
            pulumi.set(__self__, "tables", tables)

    @property
    @pulumi.getter
    def columns(self) -> Optional[Sequence[str]]:
        """
        List of strings that specify the columns in the tables to be partitioned.
        """
        return pulumi.get(self, "columns")

    @property
    @pulumi.getter
    def splitter(self) -> Optional[str]:
        """
        Specify the split string to be used for merging components in a new table name.
        """
        return pulumi.get(self, "splitter")

    @property
    @pulumi.getter
    def tables(self) -> Optional['outputs.DatatransferTransferTransformationTransformerTableSplitterTransformerTables']:
        """
        Table filter (see block documentation below).
        """
        return pulumi.get(self, "tables")


@pulumi.output_type
class DatatransferTransferTransformationTransformerTableSplitterTransformerTables(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "excludeTables":
            suggest = "exclude_tables"
        elif key == "includeTables":
            suggest = "include_tables"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in DatatransferTransferTransformationTransformerTableSplitterTransformerTables. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        DatatransferTransferTransformationTransformerTableSplitterTransformerTables.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        DatatransferTransferTransformationTransformerTableSplitterTransformerTables.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exclude_tables: Optional[Sequence[str]] = None,
                 include_tables: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] exclude_tables: List of tables that will be excluded to transfer.
        :param Sequence[str] include_tables: List of tables that will be included to transfer.
        """
        if exclude_tables is not None:
            pulumi.set(__self__, "exclude_tables", exclude_tables)
        if include_tables is not None:
            pulumi.set(__self__, "include_tables", include_tables)

    @property
    @pulumi.getter(name="excludeTables")
    def exclude_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be excluded to transfer.
        """
        return pulumi.get(self, "exclude_tables")

    @property
    @pulumi.getter(name="includeTables")
    def include_tables(self) -> Optional[Sequence[str]]:
        """
        List of tables that will be included to transfer.
        """
        return pulumi.get(self, "include_tables")


@pulumi.output_type
class FunctionAsyncInvocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retriesCount":
            suggest = "retries_count"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "ymqFailureTarget":
            suggest = "ymq_failure_target"
        elif key == "ymqSuccessTarget":
            suggest = "ymq_success_target"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAsyncInvocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAsyncInvocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAsyncInvocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 retries_count: Optional[int] = None,
                 service_account_id: Optional[str] = None,
                 ymq_failure_target: Optional['outputs.FunctionAsyncInvocationYmqFailureTarget'] = None,
                 ymq_success_target: Optional['outputs.FunctionAsyncInvocationYmqSuccessTarget'] = None):
        """
        :param int retries_count: Maximum number of retries for async invocation
        :param str service_account_id: Service account ID for Yandex Cloud Function
        :param 'FunctionAsyncInvocationYmqFailureTargetArgs' ymq_failure_target: Target for unsuccessful async invocation
        :param 'FunctionAsyncInvocationYmqSuccessTargetArgs' ymq_success_target: Target for successful async invocation
        """
        if retries_count is not None:
            pulumi.set(__self__, "retries_count", retries_count)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if ymq_failure_target is not None:
            pulumi.set(__self__, "ymq_failure_target", ymq_failure_target)
        if ymq_success_target is not None:
            pulumi.set(__self__, "ymq_success_target", ymq_success_target)

    @property
    @pulumi.getter(name="retriesCount")
    def retries_count(self) -> Optional[int]:
        """
        Maximum number of retries for async invocation
        """
        return pulumi.get(self, "retries_count")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        """
        Service account ID for Yandex Cloud Function
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="ymqFailureTarget")
    def ymq_failure_target(self) -> Optional['outputs.FunctionAsyncInvocationYmqFailureTarget']:
        """
        Target for unsuccessful async invocation
        """
        return pulumi.get(self, "ymq_failure_target")

    @property
    @pulumi.getter(name="ymqSuccessTarget")
    def ymq_success_target(self) -> Optional['outputs.FunctionAsyncInvocationYmqSuccessTarget']:
        """
        Target for successful async invocation
        """
        return pulumi.get(self, "ymq_success_target")


@pulumi.output_type
class FunctionAsyncInvocationYmqFailureTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAsyncInvocationYmqFailureTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAsyncInvocationYmqFailureTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAsyncInvocationYmqFailureTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 service_account_id: str):
        """
        :param str arn: YMQ ARN
        :param str service_account_id: Service account ID for Yandex Cloud Function
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        YMQ ARN
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        Service account ID for Yandex Cloud Function
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class FunctionAsyncInvocationYmqSuccessTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionAsyncInvocationYmqSuccessTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionAsyncInvocationYmqSuccessTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionAsyncInvocationYmqSuccessTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 arn: str,
                 service_account_id: str):
        """
        :param str arn: YMQ ARN
        :param str service_account_id: Service account ID for Yandex Cloud Function
        """
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        """
        YMQ ARN
        """
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        Service account ID for Yandex Cloud Function
        """
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class FunctionConnectivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionConnectivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionConnectivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionConnectivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class FunctionContent(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zipFilename":
            suggest = "zip_filename"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionContent. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionContent.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionContent.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zip_filename: str):
        pulumi.set(__self__, "zip_filename", zip_filename)

    @property
    @pulumi.getter(name="zipFilename")
    def zip_filename(self) -> str:
        return pulumi.get(self, "zip_filename")


@pulumi.output_type
class FunctionLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderId":
            suggest = "folder_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "minLevel":
            suggest = "min_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 min_level: Optional[str] = None):
        """
        :param bool disabled: Is logging from function disabled
        :param str folder_id: Folder ID for the Yandex Cloud Function
        :param str log_group_id: Log entries are written to specified log group
        :param str min_level: Minimum log entry level
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if min_level is not None:
            pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Is logging from function disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Folder ID for the Yandex Cloud Function
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Log entries are written to specified log group
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> Optional[str]:
        """
        Minimum log entry level
        """
        return pulumi.get(self, "min_level")


@pulumi.output_type
class FunctionPackage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "objectName":
            suggest = "object_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionPackage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionPackage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionPackage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 object_name: str,
                 sha256: Optional[str] = None):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "object_name", object_name)
        if sha256 is not None:
            pulumi.set(__self__, "sha256", sha256)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="objectName")
    def object_name(self) -> str:
        return pulumi.get(self, "object_name")

    @property
    @pulumi.getter
    def sha256(self) -> Optional[str]:
        return pulumi.get(self, "sha256")


@pulumi.output_type
class FunctionScalingPolicyPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "zoneInstancesLimit":
            suggest = "zone_instances_limit"
        elif key == "zoneRequestsLimit":
            suggest = "zone_requests_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionScalingPolicyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionScalingPolicyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionScalingPolicyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 tag: str,
                 zone_instances_limit: Optional[int] = None,
                 zone_requests_limit: Optional[int] = None):
        pulumi.set(__self__, "tag", tag)
        if zone_instances_limit is not None:
            pulumi.set(__self__, "zone_instances_limit", zone_instances_limit)
        if zone_requests_limit is not None:
            pulumi.set(__self__, "zone_requests_limit", zone_requests_limit)

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="zoneInstancesLimit")
    def zone_instances_limit(self) -> Optional[int]:
        return pulumi.get(self, "zone_instances_limit")

    @property
    @pulumi.getter(name="zoneRequestsLimit")
    def zone_requests_limit(self) -> Optional[int]:
        return pulumi.get(self, "zone_requests_limit")


@pulumi.output_type
class FunctionSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentVariable":
            suggest = "environment_variable"
        elif key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_variable: str,
                 id: str,
                 key: str,
                 version_id: str):
        """
        :param str environment_variable: (Required) Function's environment variable in which secret's value will be stored.
        :param str id: (Required) Secret's id.
        :param str key: (Required) Secret's entries key which value will be stored in environment variable.
        :param str version_id: (Required) Secret's version id.
        """
        pulumi.set(__self__, "environment_variable", environment_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="environmentVariable")
    def environment_variable(self) -> str:
        """
        (Required) Function's environment variable in which secret's value will be stored.
        """
        return pulumi.get(self, "environment_variable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Required) Secret's id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Required) Secret's entries key which value will be stored in environment variable.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        (Required) Secret's version id.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class FunctionStorageMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPointName":
            suggest = "mount_point_name"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionStorageMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionStorageMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionStorageMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 mount_point_name: str,
                 prefix: Optional[str] = None,
                 read_only: Optional[bool] = None):
        """
        :param str bucket: (Required) Name of the mounting bucket.
        :param str mount_point_name: (Required) Name of the mount point. The directory where the bucket is mounted will be accessible at the `/function/storage/<mount_point>` path.
        :param str prefix: Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
        :param bool read_only: Mount the bucket in read-only mode.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "mount_point_name", mount_point_name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        (Required) Name of the mounting bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="mountPointName")
    def mount_point_name(self) -> str:
        """
        (Required) Name of the mount point. The directory where the bucket is mounted will be accessible at the `/function/storage/<mount_point>` path.
        """
        return pulumi.get(self, "mount_point_name")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Mount the bucket in read-only mode.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class FunctionTriggerContainer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retryAttempts":
            suggest = "retry_attempts"
        elif key == "retryInterval":
            suggest = "retry_interval"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerContainer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerContainer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerContainer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 path: Optional[str] = None,
                 retry_attempts: Optional[str] = None,
                 retry_interval: Optional[str] = None,
                 service_account_id: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if path is not None:
            pulumi.set(__self__, "path", path)
        if retry_attempts is not None:
            pulumi.set(__self__, "retry_attempts", retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> Optional[str]:
        return pulumi.get(self, "retry_attempts")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class FunctionTriggerContainerRegistry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "registryId":
            suggest = "registry_id"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "createImage":
            suggest = "create_image"
        elif key == "createImageTag":
            suggest = "create_image_tag"
        elif key == "deleteImage":
            suggest = "delete_image"
        elif key == "deleteImageTag":
            suggest = "delete_image_tag"
        elif key == "imageName":
            suggest = "image_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerContainerRegistry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerContainerRegistry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerContainerRegistry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 registry_id: str,
                 batch_size: Optional[str] = None,
                 create_image: Optional[bool] = None,
                 create_image_tag: Optional[bool] = None,
                 delete_image: Optional[bool] = None,
                 delete_image_tag: Optional[bool] = None,
                 image_name: Optional[str] = None,
                 tag: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "registry_id", registry_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if create_image is not None:
            pulumi.set(__self__, "create_image", create_image)
        if create_image_tag is not None:
            pulumi.set(__self__, "create_image_tag", create_image_tag)
        if delete_image is not None:
            pulumi.set(__self__, "delete_image", delete_image)
        if delete_image_tag is not None:
            pulumi.set(__self__, "delete_image_tag", delete_image_tag)
        if image_name is not None:
            pulumi.set(__self__, "image_name", image_name)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="createImage")
    def create_image(self) -> Optional[bool]:
        return pulumi.get(self, "create_image")

    @property
    @pulumi.getter(name="createImageTag")
    def create_image_tag(self) -> Optional[bool]:
        return pulumi.get(self, "create_image_tag")

    @property
    @pulumi.getter(name="deleteImage")
    def delete_image(self) -> Optional[bool]:
        return pulumi.get(self, "delete_image")

    @property
    @pulumi.getter(name="deleteImageTag")
    def delete_image_tag(self) -> Optional[bool]:
        return pulumi.get(self, "delete_image_tag")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> Optional[str]:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class FunctionTriggerDataStreams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "streamName":
            suggest = "stream_name"
        elif key == "batchSize":
            suggest = "batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerDataStreams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerDataStreams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerDataStreams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 database: str,
                 service_account_id: str,
                 stream_name: str,
                 batch_size: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "stream_name", stream_name)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")


@pulumi.output_type
class FunctionTriggerDlq(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "queueId":
            suggest = "queue_id"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerDlq. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerDlq.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerDlq.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 queue_id: str,
                 service_account_id: str):
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class FunctionTriggerFunction(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "retryAttempts":
            suggest = "retry_attempts"
        elif key == "retryInterval":
            suggest = "retry_interval"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerFunction. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerFunction.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerFunction.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 retry_attempts: Optional[str] = None,
                 retry_interval: Optional[str] = None,
                 service_account_id: Optional[str] = None,
                 tag: Optional[str] = None):
        pulumi.set(__self__, "id", id)
        if retry_attempts is not None:
            pulumi.set(__self__, "retry_attempts", retry_attempts)
        if retry_interval is not None:
            pulumi.set(__self__, "retry_interval", retry_interval)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> Optional[str]:
        return pulumi.get(self, "retry_attempts")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> Optional[str]:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def tag(self) -> Optional[str]:
        return pulumi.get(self, "tag")


@pulumi.output_type
class FunctionTriggerIot(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "registryId":
            suggest = "registry_id"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "deviceId":
            suggest = "device_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerIot. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerIot.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerIot.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 registry_id: str,
                 batch_size: Optional[str] = None,
                 device_id: Optional[str] = None,
                 topic: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "registry_id", registry_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if device_id is not None:
            pulumi.set(__self__, "device_id", device_id)
        if topic is not None:
            pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> Optional[str]:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter
    def topic(self) -> Optional[str]:
        return pulumi.get(self, "topic")


@pulumi.output_type
class FunctionTriggerLogGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "logGroupIds":
            suggest = "log_group_ids"
        elif key == "batchSize":
            suggest = "batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerLogGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerLogGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerLogGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 log_group_ids: Sequence[str],
                 batch_size: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "log_group_ids", log_group_ids)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="logGroupIds")
    def log_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "log_group_ids")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")


@pulumi.output_type
class FunctionTriggerLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "groupId":
            suggest = "group_id"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "resourceIds":
            suggest = "resource_ids"
        elif key == "resourceTypes":
            suggest = "resource_types"
        elif key == "streamNames":
            suggest = "stream_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 group_id: str,
                 batch_size: Optional[str] = None,
                 levels: Optional[Sequence[str]] = None,
                 resource_ids: Optional[Sequence[str]] = None,
                 resource_types: Optional[Sequence[str]] = None,
                 stream_names: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "group_id", group_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if levels is not None:
            pulumi.set(__self__, "levels", levels)
        if resource_ids is not None:
            pulumi.set(__self__, "resource_ids", resource_ids)
        if resource_types is not None:
            pulumi.set(__self__, "resource_types", resource_types)
        if stream_names is not None:
            pulumi.set(__self__, "stream_names", stream_names)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter
    def levels(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter(name="streamNames")
    def stream_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "stream_names")


@pulumi.output_type
class FunctionTriggerMail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "attachmentsBucketId":
            suggest = "attachments_bucket_id"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "serviceAccountId":
            suggest = "service_account_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerMail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerMail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerMail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 attachments_bucket_id: Optional[str] = None,
                 batch_size: Optional[str] = None,
                 service_account_id: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        if attachments_bucket_id is not None:
            pulumi.set(__self__, "attachments_bucket_id", attachments_bucket_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if service_account_id is not None:
            pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="attachmentsBucketId")
    def attachments_bucket_id(self) -> Optional[str]:
        return pulumi.get(self, "attachments_bucket_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> Optional[str]:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class FunctionTriggerMessageQueue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "queueId":
            suggest = "queue_id"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "batchSize":
            suggest = "batch_size"
        elif key == "visibilityTimeout":
            suggest = "visibility_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerMessageQueue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerMessageQueue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerMessageQueue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 queue_id: str,
                 service_account_id: str,
                 batch_size: Optional[str] = None,
                 visibility_timeout: Optional[str] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "service_account_id", service_account_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if visibility_timeout is not None:
            pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> Optional[str]:
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class FunctionTriggerObjectStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "batchCutoff":
            suggest = "batch_cutoff"
        elif key == "bucketId":
            suggest = "bucket_id"
        elif key == "batchSize":
            suggest = "batch_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerObjectStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerObjectStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerObjectStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 batch_cutoff: str,
                 bucket_id: str,
                 batch_size: Optional[str] = None,
                 create: Optional[bool] = None,
                 delete: Optional[bool] = None,
                 prefix: Optional[str] = None,
                 suffix: Optional[str] = None,
                 update: Optional[bool] = None):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "bucket_id", bucket_id)
        if batch_size is not None:
            pulumi.set(__self__, "batch_size", batch_size)
        if create is not None:
            pulumi.set(__self__, "create", create)
        if delete is not None:
            pulumi.set(__self__, "delete", delete)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if suffix is not None:
            pulumi.set(__self__, "suffix", suffix)
        if update is not None:
            pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> str:
        return pulumi.get(self, "bucket_id")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> Optional[str]:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter
    def create(self) -> Optional[bool]:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> Optional[bool]:
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def suffix(self) -> Optional[str]:
        return pulumi.get(self, "suffix")

    @property
    @pulumi.getter
    def update(self) -> Optional[bool]:
        return pulumi.get(self, "update")


@pulumi.output_type
class FunctionTriggerTimer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cronExpression":
            suggest = "cron_expression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in FunctionTriggerTimer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        FunctionTriggerTimer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        FunctionTriggerTimer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cron_expression: str,
                 payload: Optional[str] = None):
        pulumi.set(__self__, "cron_expression", cron_expression)
        if payload is not None:
            pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> str:
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def payload(self) -> Optional[str]:
        return pulumi.get(self, "payload")


@pulumi.output_type
class IamServiceAccountApiKeyOutputToLockbox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryForSecretKey":
            suggest = "entry_for_secret_key"
        elif key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamServiceAccountApiKeyOutputToLockbox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamServiceAccountApiKeyOutputToLockbox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamServiceAccountApiKeyOutputToLockbox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_for_secret_key: str,
                 secret_id: str):
        """
        :param str entry_for_secret_key: Entry where to store the value of `secret_key`.
        :param str secret_id: ID of the Lockbox secret where to store the sensible values.
        """
        pulumi.set(__self__, "entry_for_secret_key", entry_for_secret_key)
        pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="entryForSecretKey")
    def entry_for_secret_key(self) -> str:
        """
        Entry where to store the value of `secret_key`.
        """
        return pulumi.get(self, "entry_for_secret_key")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        ID of the Lockbox secret where to store the sensible values.
        """
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class IamServiceAccountKeyOutputToLockbox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryForPrivateKey":
            suggest = "entry_for_private_key"
        elif key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamServiceAccountKeyOutputToLockbox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamServiceAccountKeyOutputToLockbox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamServiceAccountKeyOutputToLockbox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_for_private_key: str,
                 secret_id: str):
        """
        :param str entry_for_private_key: Entry where to store the value of `private_key`.
        :param str secret_id: ID of the Lockbox secret where to store the sensible values.
        """
        pulumi.set(__self__, "entry_for_private_key", entry_for_private_key)
        pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="entryForPrivateKey")
    def entry_for_private_key(self) -> str:
        """
        Entry where to store the value of `private_key`.
        """
        return pulumi.get(self, "entry_for_private_key")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        ID of the Lockbox secret where to store the sensible values.
        """
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class IamServiceAccountStaticAccessKeyOutputToLockbox(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "entryForSecretKey":
            suggest = "entry_for_secret_key"
        elif key == "secretId":
            suggest = "secret_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IamServiceAccountStaticAccessKeyOutputToLockbox. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IamServiceAccountStaticAccessKeyOutputToLockbox.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IamServiceAccountStaticAccessKeyOutputToLockbox.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 entry_for_secret_key: str,
                 secret_id: str):
        """
        :param str entry_for_secret_key: Entry where to store the value of `secret_key`.
        :param str secret_id: ID of the Lockbox secret where to store the sensible values.
        """
        pulumi.set(__self__, "entry_for_secret_key", entry_for_secret_key)
        pulumi.set(__self__, "secret_id", secret_id)

    @property
    @pulumi.getter(name="entryForSecretKey")
    def entry_for_secret_key(self) -> str:
        """
        Entry where to store the value of `secret_key`.
        """
        return pulumi.get(self, "entry_for_secret_key")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        """
        ID of the Lockbox secret where to store the sensible values.
        """
        return pulumi.get(self, "secret_id")


@pulumi.output_type
class IotCoreBrokerLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderId":
            suggest = "folder_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "minLevel":
            suggest = "min_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IotCoreBrokerLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IotCoreBrokerLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IotCoreBrokerLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 min_level: Optional[str] = None):
        """
        :param bool disabled: Is logging for broker disabled
        :param str folder_id: Log entries are written to default log group for specified folder
        :param str log_group_id: Log entries are written to specified log group
        :param str min_level: Minimum log entry level
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if min_level is not None:
            pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Is logging for broker disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Log entries are written to default log group for specified folder
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Log entries are written to specified log group
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> Optional[str]:
        """
        Minimum log entry level
        """
        return pulumi.get(self, "min_level")


@pulumi.output_type
class IotCoreRegistryLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderId":
            suggest = "folder_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "minLevel":
            suggest = "min_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in IotCoreRegistryLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        IotCoreRegistryLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        IotCoreRegistryLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 min_level: Optional[str] = None):
        """
        :param bool disabled: Is logging for registry disabled
        :param str folder_id: Log entries are written to default log group for specified folder
        :param str log_group_id: Log entries are written to specified log group
        :param str min_level: Minimum log entry level
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if min_level is not None:
            pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Is logging for registry disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Log entries are written to default log group for specified folder
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Log entries are written to specified log group
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> Optional[str]:
        """
        Minimum log entry level
        """
        return pulumi.get(self, "min_level")


@pulumi.output_type
class KubernetesClusterKmsProvider(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "keyId":
            suggest = "key_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterKmsProvider. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterKmsProvider.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterKmsProvider.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key_id: Optional[str] = None):
        """
        :param str key_id: KMS key ID.
        """
        if key_id is not None:
            pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> Optional[str]:
        """
        KMS key ID.
        """
        return pulumi.get(self, "key_id")


@pulumi.output_type
class KubernetesClusterMaster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clusterCaCertificate":
            suggest = "cluster_ca_certificate"
        elif key == "etcdClusterSize":
            suggest = "etcd_cluster_size"
        elif key == "externalV4Address":
            suggest = "external_v4_address"
        elif key == "externalV4Endpoint":
            suggest = "external_v4_endpoint"
        elif key == "externalV6Address":
            suggest = "external_v6_address"
        elif key == "externalV6Endpoint":
            suggest = "external_v6_endpoint"
        elif key == "internalV4Address":
            suggest = "internal_v4_address"
        elif key == "internalV4Endpoint":
            suggest = "internal_v4_endpoint"
        elif key == "maintenancePolicy":
            suggest = "maintenance_policy"
        elif key == "masterLocations":
            suggest = "master_locations"
        elif key == "masterLogging":
            suggest = "master_logging"
        elif key == "publicIp":
            suggest = "public_ip"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"
        elif key == "versionInfos":
            suggest = "version_infos"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMaster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMaster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMaster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cluster_ca_certificate: Optional[str] = None,
                 etcd_cluster_size: Optional[int] = None,
                 external_v4_address: Optional[str] = None,
                 external_v4_endpoint: Optional[str] = None,
                 external_v6_address: Optional[str] = None,
                 external_v6_endpoint: Optional[str] = None,
                 internal_v4_address: Optional[str] = None,
                 internal_v4_endpoint: Optional[str] = None,
                 maintenance_policy: Optional['outputs.KubernetesClusterMasterMaintenancePolicy'] = None,
                 master_locations: Optional[Sequence['outputs.KubernetesClusterMasterMasterLocation']] = None,
                 master_logging: Optional['outputs.KubernetesClusterMasterMasterLogging'] = None,
                 public_ip: Optional[bool] = None,
                 regional: Optional['outputs.KubernetesClusterMasterRegional'] = None,
                 security_group_ids: Optional[Sequence[str]] = None,
                 version: Optional[str] = None,
                 version_infos: Optional[Sequence['outputs.KubernetesClusterMasterVersionInfo']] = None,
                 zonal: Optional['outputs.KubernetesClusterMasterZonal'] = None):
        """
        :param str cluster_ca_certificate: (Computed) PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.
        :param str external_v4_address: (Computed) An IPv4 external network address that is assigned to the master.
        :param str external_v4_endpoint: (Computed) External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
        :param str internal_v4_address: (Computed) An IPv4 internal network address that is assigned to the master.
        :param str internal_v4_endpoint: (Computed) Internal endpoint that can be used to connect to the master from cloud networks.
        :param 'KubernetesClusterMasterMaintenancePolicyArgs' maintenance_policy: (Optional) (Computed) Maintenance policy for Kubernetes master.
               If policy is omitted, automatic revision upgrades of the kubernetes master are enabled and could happen at any time.
               Revision upgrades are performed only within the same minor version, e.g. 1.13.
               Minor version upgrades (e.g. 1.13->1.14) should be performed manually. The structure is documented below.
        :param Sequence['KubernetesClusterMasterMasterLocationArgs'] master_locations: (Optional) Cluster master's instances locations array (zone and subnet).
               Cannot be used together with `zonal` or `regional`. Currently, supports either one, for zonal master, or three instances of `master_location`.
               Can be updated inplace. When creating regional cluster (three master instances), its `region` will be evaluated automatically by backend.
               The structure is documented below.
        :param 'KubernetesClusterMasterMasterLoggingArgs' master_logging: (Optional) Master Logging options. The structure is documented below.
        :param bool public_ip: (Optional) (Computed) Boolean flag. When `true`, Kubernetes master will have visible ipv4 address.
        :param 'KubernetesClusterMasterRegionalArgs' regional: (Optional) Initialize parameters for Regional Master (highly available master). The structure is documented below.
        :param Sequence[str] security_group_ids: (Optional) List of security group IDs to which the Kubernetes cluster belongs.
        :param str version: (Optional) (Computed) Version of Kubernetes that will be used for master.
        :param Sequence['KubernetesClusterMasterVersionInfoArgs'] version_infos: (Computed) Information about cluster version. The structure is documented below.
        :param 'KubernetesClusterMasterZonalArgs' zonal: (Optional) Initialize parameters for Zonal Master (single node master). The structure is documented below.
        """
        if cluster_ca_certificate is not None:
            pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        if etcd_cluster_size is not None:
            pulumi.set(__self__, "etcd_cluster_size", etcd_cluster_size)
        if external_v4_address is not None:
            pulumi.set(__self__, "external_v4_address", external_v4_address)
        if external_v4_endpoint is not None:
            pulumi.set(__self__, "external_v4_endpoint", external_v4_endpoint)
        if external_v6_address is not None:
            pulumi.set(__self__, "external_v6_address", external_v6_address)
        if external_v6_endpoint is not None:
            pulumi.set(__self__, "external_v6_endpoint", external_v6_endpoint)
        if internal_v4_address is not None:
            pulumi.set(__self__, "internal_v4_address", internal_v4_address)
        if internal_v4_endpoint is not None:
            pulumi.set(__self__, "internal_v4_endpoint", internal_v4_endpoint)
        if maintenance_policy is not None:
            pulumi.set(__self__, "maintenance_policy", maintenance_policy)
        if master_locations is not None:
            pulumi.set(__self__, "master_locations", master_locations)
        if master_logging is not None:
            pulumi.set(__self__, "master_logging", master_logging)
        if public_ip is not None:
            pulumi.set(__self__, "public_ip", public_ip)
        if regional is not None:
            pulumi.set(__self__, "regional", regional)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)
        if version is not None:
            pulumi.set(__self__, "version", version)
        if version_infos is not None:
            pulumi.set(__self__, "version_infos", version_infos)
        if zonal is not None:
            pulumi.set(__self__, "zonal", zonal)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> Optional[str]:
        """
        (Computed) PEM-encoded public certificate that is the root of trust for the Kubernetes cluster.
        """
        return pulumi.get(self, "cluster_ca_certificate")

    @property
    @pulumi.getter(name="etcdClusterSize")
    def etcd_cluster_size(self) -> Optional[int]:
        return pulumi.get(self, "etcd_cluster_size")

    @property
    @pulumi.getter(name="externalV4Address")
    def external_v4_address(self) -> Optional[str]:
        """
        (Computed) An IPv4 external network address that is assigned to the master.
        """
        return pulumi.get(self, "external_v4_address")

    @property
    @pulumi.getter(name="externalV4Endpoint")
    def external_v4_endpoint(self) -> Optional[str]:
        """
        (Computed) External endpoint that can be used to access Kubernetes cluster API from the internet (outside of the cloud).
        """
        return pulumi.get(self, "external_v4_endpoint")

    @property
    @pulumi.getter(name="externalV6Address")
    def external_v6_address(self) -> Optional[str]:
        return pulumi.get(self, "external_v6_address")

    @property
    @pulumi.getter(name="externalV6Endpoint")
    def external_v6_endpoint(self) -> Optional[str]:
        return pulumi.get(self, "external_v6_endpoint")

    @property
    @pulumi.getter(name="internalV4Address")
    def internal_v4_address(self) -> Optional[str]:
        """
        (Computed) An IPv4 internal network address that is assigned to the master.
        """
        return pulumi.get(self, "internal_v4_address")

    @property
    @pulumi.getter(name="internalV4Endpoint")
    def internal_v4_endpoint(self) -> Optional[str]:
        """
        (Computed) Internal endpoint that can be used to connect to the master from cloud networks.
        """
        return pulumi.get(self, "internal_v4_endpoint")

    @property
    @pulumi.getter(name="maintenancePolicy")
    def maintenance_policy(self) -> Optional['outputs.KubernetesClusterMasterMaintenancePolicy']:
        """
        (Optional) (Computed) Maintenance policy for Kubernetes master.
        If policy is omitted, automatic revision upgrades of the kubernetes master are enabled and could happen at any time.
        Revision upgrades are performed only within the same minor version, e.g. 1.13.
        Minor version upgrades (e.g. 1.13->1.14) should be performed manually. The structure is documented below.
        """
        return pulumi.get(self, "maintenance_policy")

    @property
    @pulumi.getter(name="masterLocations")
    def master_locations(self) -> Optional[Sequence['outputs.KubernetesClusterMasterMasterLocation']]:
        """
        (Optional) Cluster master's instances locations array (zone and subnet).
        Cannot be used together with `zonal` or `regional`. Currently, supports either one, for zonal master, or three instances of `master_location`.
        Can be updated inplace. When creating regional cluster (three master instances), its `region` will be evaluated automatically by backend.
        The structure is documented below.
        """
        return pulumi.get(self, "master_locations")

    @property
    @pulumi.getter(name="masterLogging")
    def master_logging(self) -> Optional['outputs.KubernetesClusterMasterMasterLogging']:
        """
        (Optional) Master Logging options. The structure is documented below.
        """
        return pulumi.get(self, "master_logging")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> Optional[bool]:
        """
        (Optional) (Computed) Boolean flag. When `true`, Kubernetes master will have visible ipv4 address.
        """
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def regional(self) -> Optional['outputs.KubernetesClusterMasterRegional']:
        """
        (Optional) Initialize parameters for Regional Master (highly available master). The structure is documented below.
        """
        return pulumi.get(self, "regional")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        (Optional) List of security group IDs to which the Kubernetes cluster belongs.
        """
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        (Optional) (Computed) Version of Kubernetes that will be used for master.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionInfos")
    def version_infos(self) -> Optional[Sequence['outputs.KubernetesClusterMasterVersionInfo']]:
        """
        (Computed) Information about cluster version. The structure is documented below.
        """
        return pulumi.get(self, "version_infos")

    @property
    @pulumi.getter
    def zonal(self) -> Optional['outputs.KubernetesClusterMasterZonal']:
        """
        (Optional) Initialize parameters for Zonal Master (single node master). The structure is documented below.
        """
        return pulumi.get(self, "zonal")


@pulumi.output_type
class KubernetesClusterMasterMaintenancePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoUpgrade":
            suggest = "auto_upgrade"
        elif key == "maintenanceWindows":
            suggest = "maintenance_windows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterMaintenancePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterMaintenancePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterMaintenancePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_upgrade: bool,
                 maintenance_windows: Optional[Sequence['outputs.KubernetesClusterMasterMaintenancePolicyMaintenanceWindow']] = None):
        """
        :param bool auto_upgrade: (Required) Boolean flag that specifies if master can be upgraded automatically. When omitted, default value is TRUE.
        :param Sequence['KubernetesClusterMasterMaintenancePolicyMaintenanceWindowArgs'] maintenance_windows: (Optional) (Computed) This structure specifies maintenance window, when update for master is allowed. When omitted, it defaults to any time.
               To specify time of day interval, for all days, one element should be provided, with two fields set, `start_time` and `duration`.
               Please see `zonal_cluster_resource_name` config example.
        """
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> bool:
        """
        (Required) Boolean flag that specifies if master can be upgraded automatically. When omitted, default value is TRUE.
        """
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[Sequence['outputs.KubernetesClusterMasterMaintenancePolicyMaintenanceWindow']]:
        """
        (Optional) (Computed) This structure specifies maintenance window, when update for master is allowed. When omitted, it defaults to any time.
        To specify time of day interval, for all days, one element should be provided, with two fields set, `start_time` and `duration`.
        Please see `zonal_cluster_resource_name` config example.
        """
        return pulumi.get(self, "maintenance_windows")


@pulumi.output_type
class KubernetesClusterMasterMaintenancePolicyMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterMaintenancePolicyMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterMaintenancePolicyMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterMaintenancePolicyMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 start_time: str,
                 day: Optional[str] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)
        if day is not None:
            pulumi.set(__self__, "day", day)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")


@pulumi.output_type
class KubernetesClusterMasterMasterLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterMasterLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterMasterLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterMasterLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str subnet_id: (Optional) ID of the subnet.
        :param str zone: (Optional) ID of the availability zone.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        (Optional) ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        (Optional) ID of the availability zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterMasterMasterLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditEnabled":
            suggest = "audit_enabled"
        elif key == "clusterAutoscalerEnabled":
            suggest = "cluster_autoscaler_enabled"
        elif key == "eventsEnabled":
            suggest = "events_enabled"
        elif key == "folderId":
            suggest = "folder_id"
        elif key == "kubeApiserverEnabled":
            suggest = "kube_apiserver_enabled"
        elif key == "logGroupId":
            suggest = "log_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterMasterLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterMasterLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterMasterLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_enabled: Optional[bool] = None,
                 cluster_autoscaler_enabled: Optional[bool] = None,
                 enabled: Optional[bool] = None,
                 events_enabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 kube_apiserver_enabled: Optional[bool] = None,
                 log_group_id: Optional[str] = None):
        """
        :param bool audit_enabled: (Optional) Boolean flag that specifies if kube-apiserver audit logs should be sent to Yandex Cloud Logging.
        :param bool cluster_autoscaler_enabled: (Optional) Boolean flag that specifies if cluster-autoscaler logs should be sent to Yandex Cloud Logging.
        :param bool enabled: (Optional) Boolean flag that specifies if master components logs should be sent to [Yandex Cloud Logging](https://cloud.yandex.com/docs/logging/). The exact components that will send their logs must be configured via the options described below.
        :param bool events_enabled: (Optional) Boolean flag that specifies if kubernetes cluster events should be sent to Yandex Cloud Logging.
        :param str folder_id: The ID of the folder that the Kubernetes cluster belongs to.
               If it is not provided, the default provider folder is used.
        :param bool kube_apiserver_enabled: (Optional) Boolean flag that specifies if kube-apiserver logs should be sent to Yandex Cloud Logging.
        :param str log_group_id: (Optional) ID of the Yandex Cloud Logging [Log group](https://cloud.yandex.com/docs/logging/concepts/log-group).
        """
        if audit_enabled is not None:
            pulumi.set(__self__, "audit_enabled", audit_enabled)
        if cluster_autoscaler_enabled is not None:
            pulumi.set(__self__, "cluster_autoscaler_enabled", cluster_autoscaler_enabled)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)
        if events_enabled is not None:
            pulumi.set(__self__, "events_enabled", events_enabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if kube_apiserver_enabled is not None:
            pulumi.set(__self__, "kube_apiserver_enabled", kube_apiserver_enabled)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter(name="auditEnabled")
    def audit_enabled(self) -> Optional[bool]:
        """
        (Optional) Boolean flag that specifies if kube-apiserver audit logs should be sent to Yandex Cloud Logging.
        """
        return pulumi.get(self, "audit_enabled")

    @property
    @pulumi.getter(name="clusterAutoscalerEnabled")
    def cluster_autoscaler_enabled(self) -> Optional[bool]:
        """
        (Optional) Boolean flag that specifies if cluster-autoscaler logs should be sent to Yandex Cloud Logging.
        """
        return pulumi.get(self, "cluster_autoscaler_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        (Optional) Boolean flag that specifies if master components logs should be sent to [Yandex Cloud Logging](https://cloud.yandex.com/docs/logging/). The exact components that will send their logs must be configured via the options described below.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventsEnabled")
    def events_enabled(self) -> Optional[bool]:
        """
        (Optional) Boolean flag that specifies if kubernetes cluster events should be sent to Yandex Cloud Logging.
        """
        return pulumi.get(self, "events_enabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        The ID of the folder that the Kubernetes cluster belongs to.
        If it is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="kubeApiserverEnabled")
    def kube_apiserver_enabled(self) -> Optional[bool]:
        """
        (Optional) Boolean flag that specifies if kube-apiserver logs should be sent to Yandex Cloud Logging.
        """
        return pulumi.get(self, "kube_apiserver_enabled")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        (Optional) ID of the Yandex Cloud Logging [Log group](https://cloud.yandex.com/docs/logging/concepts/log-group).
        """
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class KubernetesClusterMasterRegional(dict):
    def __init__(__self__, *,
                 region: str,
                 locations: Optional[Sequence['outputs.KubernetesClusterMasterRegionalLocation']] = None):
        """
        :param str region: (Required) Name of availability region (e.g. "ru-central1"), where master instances will be allocated.
        :param Sequence['KubernetesClusterMasterRegionalLocationArgs'] locations: Array of locations, where master instances will be allocated. The structure is documented below.
        """
        pulumi.set(__self__, "region", region)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        (Required) Name of availability region (e.g. "ru-central1"), where master instances will be allocated.
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.KubernetesClusterMasterRegionalLocation']]:
        """
        Array of locations, where master instances will be allocated. The structure is documented below.
        """
        return pulumi.get(self, "locations")


@pulumi.output_type
class KubernetesClusterMasterRegionalLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterRegionalLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterRegionalLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterRegionalLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str subnet_id: (Optional) ID of the subnet.
        :param str zone: (Optional) ID of the availability zone.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        (Optional) ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        (Optional) ID of the availability zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterMasterVersionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentVersion":
            suggest = "current_version"
        elif key == "newRevisionAvailable":
            suggest = "new_revision_available"
        elif key == "newRevisionSummary":
            suggest = "new_revision_summary"
        elif key == "versionDeprecated":
            suggest = "version_deprecated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterVersionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterVersionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterVersionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_version: Optional[str] = None,
                 new_revision_available: Optional[bool] = None,
                 new_revision_summary: Optional[str] = None,
                 version_deprecated: Optional[bool] = None):
        """
        :param str current_version: Current Kubernetes version, major.minor (e.g. 1.15).
        :param bool new_revision_available: Boolean flag.
               Newer revisions may include Kubernetes patches (e.g 1.15.1 > 1.15.2) as well
               as some internal component updates - new features or bug fixes in yandex-specific
               components either on the master or nodes.
        :param str new_revision_summary: Human readable description of the changes to be applied
               when updating to the latest revision. Empty if new_revision_available is false.
        :param bool version_deprecated: Boolean flag. The current version is on the deprecation schedule,
               component (master or node group) should be upgraded.
        """
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if new_revision_available is not None:
            pulumi.set(__self__, "new_revision_available", new_revision_available)
        if new_revision_summary is not None:
            pulumi.set(__self__, "new_revision_summary", new_revision_summary)
        if version_deprecated is not None:
            pulumi.set(__self__, "version_deprecated", version_deprecated)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[str]:
        """
        Current Kubernetes version, major.minor (e.g. 1.15).
        """
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="newRevisionAvailable")
    def new_revision_available(self) -> Optional[bool]:
        """
        Boolean flag.
        Newer revisions may include Kubernetes patches (e.g 1.15.1 > 1.15.2) as well
        as some internal component updates - new features or bug fixes in yandex-specific
        components either on the master or nodes.
        """
        return pulumi.get(self, "new_revision_available")

    @property
    @pulumi.getter(name="newRevisionSummary")
    def new_revision_summary(self) -> Optional[str]:
        """
        Human readable description of the changes to be applied
        when updating to the latest revision. Empty if new_revision_available is false.
        """
        return pulumi.get(self, "new_revision_summary")

    @property
    @pulumi.getter(name="versionDeprecated")
    def version_deprecated(self) -> Optional[bool]:
        """
        Boolean flag. The current version is on the deprecation schedule,
        component (master or node group) should be upgraded.
        """
        return pulumi.get(self, "version_deprecated")


@pulumi.output_type
class KubernetesClusterMasterZonal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesClusterMasterZonal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesClusterMasterZonal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesClusterMasterZonal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str subnet_id: (Optional) ID of the subnet.
        :param str zone: (Optional) ID of the availability zone.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        (Optional) ID of the subnet.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        (Optional) ID of the availability zone.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesClusterNetworkImplementation(dict):
    def __init__(__self__, *,
                 cilium: Optional['outputs.KubernetesClusterNetworkImplementationCilium'] = None):
        """
        :param 'KubernetesClusterNetworkImplementationCiliumArgs' cilium: (Optional) Cilium network implementation configuration. No options exist.
        """
        if cilium is not None:
            pulumi.set(__self__, "cilium", cilium)

    @property
    @pulumi.getter
    def cilium(self) -> Optional['outputs.KubernetesClusterNetworkImplementationCilium']:
        """
        (Optional) Cilium network implementation configuration. No options exist.
        """
        return pulumi.get(self, "cilium")


@pulumi.output_type
class KubernetesClusterNetworkImplementationCilium(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class KubernetesNodeGroupAllocationPolicy(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence['outputs.KubernetesNodeGroupAllocationPolicyLocation']] = None):
        """
        :param Sequence['KubernetesNodeGroupAllocationPolicyLocationArgs'] locations: Repeated field, that specify subnets (zones), that will be used by node group compute instances. The structure is documented below.
        """
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence['outputs.KubernetesNodeGroupAllocationPolicyLocation']]:
        """
        Repeated field, that specify subnets (zones), that will be used by node group compute instances. The structure is documented below.
        """
        return pulumi.get(self, "locations")


@pulumi.output_type
class KubernetesNodeGroupAllocationPolicyLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupAllocationPolicyLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupAllocationPolicyLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupAllocationPolicyLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: Optional[str] = None,
                 zone: Optional[str] = None):
        """
        :param str subnet_id: ID of the subnet, that will be used by one compute instance in node group.
               
               Subnet specified by `subnet_id` should be allocated in zone specified by 'zone' argument
        :param str zone: ID of the availability zone where for one compute instance in node group.
        """
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        ID of the subnet, that will be used by one compute instance in node group.

        Subnet specified by `subnet_id` should be allocated in zone specified by 'zone' argument
        """
        warnings.warn("""The 'subnet_id' field has been deprecated. Please use 'subnet_ids under network_interface' instead.""", DeprecationWarning)
        pulumi.log.warn("""subnet_id is deprecated: The 'subnet_id' field has been deprecated. Please use 'subnet_ids under network_interface' instead.""")

        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        """
        ID of the availability zone where for one compute instance in node group.
        """
        return pulumi.get(self, "zone")


@pulumi.output_type
class KubernetesNodeGroupDeployPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxExpansion":
            suggest = "max_expansion"
        elif key == "maxUnavailable":
            suggest = "max_unavailable"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupDeployPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupDeployPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupDeployPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_expansion: int,
                 max_unavailable: int):
        """
        :param int max_expansion: The maximum number of instances that can be temporarily allocated above the group's target size during the update.
        :param int max_unavailable: The maximum number of running instances that can be taken offline during update.
        """
        pulumi.set(__self__, "max_expansion", max_expansion)
        pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxExpansion")
    def max_expansion(self) -> int:
        """
        The maximum number of instances that can be temporarily allocated above the group's target size during the update.
        """
        return pulumi.get(self, "max_expansion")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> int:
        """
        The maximum number of running instances that can be taken offline during update.
        """
        return pulumi.get(self, "max_unavailable")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplate(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDisk":
            suggest = "boot_disk"
        elif key == "containerNetwork":
            suggest = "container_network"
        elif key == "containerRuntime":
            suggest = "container_runtime"
        elif key == "gpuSettings":
            suggest = "gpu_settings"
        elif key == "networkAccelerationType":
            suggest = "network_acceleration_type"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "placementPolicy":
            suggest = "placement_policy"
        elif key == "platformId":
            suggest = "platform_id"
        elif key == "schedulingPolicy":
            suggest = "scheduling_policy"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplate. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplate.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplate.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk: Optional['outputs.KubernetesNodeGroupInstanceTemplateBootDisk'] = None,
                 container_network: Optional['outputs.KubernetesNodeGroupInstanceTemplateContainerNetwork'] = None,
                 container_runtime: Optional['outputs.KubernetesNodeGroupInstanceTemplateContainerRuntime'] = None,
                 gpu_settings: Optional['outputs.KubernetesNodeGroupInstanceTemplateGpuSettings'] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 name: Optional[str] = None,
                 nat: Optional[bool] = None,
                 network_acceleration_type: Optional[str] = None,
                 network_interfaces: Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterface']] = None,
                 placement_policy: Optional['outputs.KubernetesNodeGroupInstanceTemplatePlacementPolicy'] = None,
                 platform_id: Optional[str] = None,
                 resources: Optional['outputs.KubernetesNodeGroupInstanceTemplateResources'] = None,
                 scheduling_policy: Optional['outputs.KubernetesNodeGroupInstanceTemplateSchedulingPolicy'] = None):
        """
        :param 'KubernetesNodeGroupInstanceTemplateBootDiskArgs' boot_disk: The specifications for boot disks that will be attached to the instance. The structure is documented below.
        :param 'KubernetesNodeGroupInstanceTemplateContainerNetworkArgs' container_network: Container network configuration. The structure is documented below.
        :param 'KubernetesNodeGroupInstanceTemplateContainerRuntimeArgs' container_runtime: Container runtime configuration. The structure is documented below.
        :param 'KubernetesNodeGroupInstanceTemplateGpuSettingsArgs' gpu_settings: GPU settings. The structure is documented below.
        :param Mapping[str, str] labels: Labels that will be assigned to compute nodes (instances), created by the Node Group.
        :param Mapping[str, str] metadata: The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys. **Note**: key "user-data" won't be provided into instances. It reserved for internal activity in `kubernetes_node_group` resource.
               
               * `resources.0.memory` - The memory size allocated to the instance.
               * `resources.0.cores` - Number of CPU cores allocated to the instance.
               * `resources.0.core_fraction` - Baseline core performance as a percent.
               * `resources.0.gpus` - Number of GPU cores allocated to the instance.
        :param str name: Name template of the instance.
               In order to be unique it must contain at least one of instance unique placeholders:
               {instance.short_id}
               {instance.index}
               combination of {instance.zone_id} and {instance.index_in_zone}
               Example: my-instance-{instance.index}
               If not set, default is used: {instance_group.id}-{instance.short_id}
               It may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.
        :param bool nat: Boolean flag, enables NAT for node group compute instances.
        :param str network_acceleration_type: Type of network acceleration. Values: `standard`, `software_accelerated`.
        :param Sequence['KubernetesNodeGroupInstanceTemplateNetworkInterfaceArgs'] network_interfaces: An array with the network interfaces that will be attached to the instance. The structure is documented below.
        :param 'KubernetesNodeGroupInstanceTemplatePlacementPolicyArgs' placement_policy: The placement policy configuration. The structure is documented below.
        :param str platform_id: The ID of the hardware platform configuration for the node group compute instances.
        :param 'KubernetesNodeGroupInstanceTemplateSchedulingPolicyArgs' scheduling_policy: The scheduling policy for the instances in node group. The structure is documented below.
        """
        if boot_disk is not None:
            pulumi.set(__self__, "boot_disk", boot_disk)
        if container_network is not None:
            pulumi.set(__self__, "container_network", container_network)
        if container_runtime is not None:
            pulumi.set(__self__, "container_runtime", container_runtime)
        if gpu_settings is not None:
            pulumi.set(__self__, "gpu_settings", gpu_settings)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if network_acceleration_type is not None:
            pulumi.set(__self__, "network_acceleration_type", network_acceleration_type)
        if network_interfaces is not None:
            pulumi.set(__self__, "network_interfaces", network_interfaces)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if scheduling_policy is not None:
            pulumi.set(__self__, "scheduling_policy", scheduling_policy)

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateBootDisk']:
        """
        The specifications for boot disks that will be attached to the instance. The structure is documented below.
        """
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="containerNetwork")
    def container_network(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateContainerNetwork']:
        """
        Container network configuration. The structure is documented below.
        """
        return pulumi.get(self, "container_network")

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateContainerRuntime']:
        """
        Container runtime configuration. The structure is documented below.
        """
        return pulumi.get(self, "container_runtime")

    @property
    @pulumi.getter(name="gpuSettings")
    def gpu_settings(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateGpuSettings']:
        """
        GPU settings. The structure is documented below.
        """
        return pulumi.get(self, "gpu_settings")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that will be assigned to compute nodes (instances), created by the Node Group.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        The set of metadata `key:value` pairs assigned to this instance template. This includes custom metadata and predefined keys. **Note**: key "user-data" won't be provided into instances. It reserved for internal activity in `kubernetes_node_group` resource.

        * `resources.0.memory` - The memory size allocated to the instance.
        * `resources.0.cores` - Number of CPU cores allocated to the instance.
        * `resources.0.core_fraction` - Baseline core performance as a percent.
        * `resources.0.gpus` - Number of GPU cores allocated to the instance.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name template of the instance.
        In order to be unique it must contain at least one of instance unique placeholders:
        {instance.short_id}
        {instance.index}
        combination of {instance.zone_id} and {instance.index_in_zone}
        Example: my-instance-{instance.index}
        If not set, default is used: {instance_group.id}-{instance.short_id}
        It may also contain another placeholders, see [Compute Instance group metadata doc](https://cloud.yandex.com/en-ru/docs/compute/api-ref/grpc/instance_group_service) for full list.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        Boolean flag, enables NAT for node group compute instances.
        """
        warnings.warn("""The 'nat' field has been deprecated. Please use 'nat under network_interface' instead.""", DeprecationWarning)
        pulumi.log.warn("""nat is deprecated: The 'nat' field has been deprecated. Please use 'nat under network_interface' instead.""")

        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="networkAccelerationType")
    def network_acceleration_type(self) -> Optional[str]:
        """
        Type of network acceleration. Values: `standard`, `software_accelerated`.
        """
        return pulumi.get(self, "network_acceleration_type")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterface']]:
        """
        An array with the network interfaces that will be attached to the instance. The structure is documented below.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplatePlacementPolicy']:
        """
        The placement policy configuration. The structure is documented below.
        """
        return pulumi.get(self, "placement_policy")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[str]:
        """
        The ID of the hardware platform configuration for the node group compute instances.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateResources']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="schedulingPolicy")
    def scheduling_policy(self) -> Optional['outputs.KubernetesNodeGroupInstanceTemplateSchedulingPolicy']:
        """
        The scheduling policy for the instances in node group. The structure is documented below.
        """
        return pulumi.get(self, "scheduling_policy")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateBootDisk(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int size: The size of the disk in GB. Allowed minimal size: 64 GB.
        :param str type: The disk type.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the disk in GB. Allowed minimal size: 64 GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateContainerNetwork(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "podMtu":
            suggest = "pod_mtu"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateContainerNetwork. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateContainerNetwork.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateContainerNetwork.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pod_mtu: Optional[int] = None):
        """
        :param int pod_mtu: MTU for pods.
        """
        if pod_mtu is not None:
            pulumi.set(__self__, "pod_mtu", pod_mtu)

    @property
    @pulumi.getter(name="podMtu")
    def pod_mtu(self) -> Optional[int]:
        """
        MTU for pods.
        """
        return pulumi.get(self, "pod_mtu")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateContainerRuntime(dict):
    def __init__(__self__, *,
                 type: str):
        """
        :param str type: Type of container runtime. Values: `docker`, `containerd`.
        """
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of container runtime. Values: `docker`, `containerd`.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateGpuSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gpuClusterId":
            suggest = "gpu_cluster_id"
        elif key == "gpuEnvironment":
            suggest = "gpu_environment"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateGpuSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateGpuSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateGpuSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 gpu_cluster_id: Optional[str] = None,
                 gpu_environment: Optional[str] = None):
        """
        :param str gpu_cluster_id: GPU cluster id.
        :param str gpu_environment: GPU environment. Values: `runc`, `runc_drivers_cuda`.
        """
        if gpu_cluster_id is not None:
            pulumi.set(__self__, "gpu_cluster_id", gpu_cluster_id)
        if gpu_environment is not None:
            pulumi.set(__self__, "gpu_environment", gpu_environment)

    @property
    @pulumi.getter(name="gpuClusterId")
    def gpu_cluster_id(self) -> Optional[str]:
        """
        GPU cluster id.
        """
        return pulumi.get(self, "gpu_cluster_id")

    @property
    @pulumi.getter(name="gpuEnvironment")
    def gpu_environment(self) -> Optional[str]:
        """
        GPU environment. Values: `runc`, `runc_drivers_cuda`.
        """
        return pulumi.get(self, "gpu_environment")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetIds":
            suggest = "subnet_ids"
        elif key == "ipv4DnsRecords":
            suggest = "ipv4_dns_records"
        elif key == "ipv6DnsRecords":
            suggest = "ipv6_dns_records"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_ids: Sequence[str],
                 ipv4: Optional[bool] = None,
                 ipv4_dns_records: Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord']] = None,
                 ipv6: Optional[bool] = None,
                 ipv6_dns_records: Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord']] = None,
                 nat: Optional[bool] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] subnet_ids: The IDs of the subnets.
        :param bool ipv4: Allocate an IPv4 address for the interface. The default value is `true`.
        :param Sequence['KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordArgs'] ipv4_dns_records: List of configurations for creating ipv4 DNS records. The structure is documented below.
        :param bool ipv6: If true, allocate an IPv6 address for the interface. The address will be automatically assigned from the specified subnet.
        :param Sequence['KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordArgs'] ipv6_dns_records: List of configurations for creating ipv6 DNS records. The structure is documented below.
        :param bool nat: A public address that can be used to access the internet over NAT.
        :param Sequence[str] security_group_ids: Security group ids for network interface.
        """
        pulumi.set(__self__, "subnet_ids", subnet_ids)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv4_dns_records is not None:
            pulumi.set(__self__, "ipv4_dns_records", ipv4_dns_records)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_dns_records is not None:
            pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        """
        The IDs of the subnets.
        """
        return pulumi.get(self, "subnet_ids")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[bool]:
        """
        Allocate an IPv4 address for the interface. The default value is `true`.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter(name="ipv4DnsRecords")
    def ipv4_dns_records(self) -> Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord']]:
        """
        List of configurations for creating ipv4 DNS records. The structure is documented below.
        """
        return pulumi.get(self, "ipv4_dns_records")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        """
        If true, allocate an IPv6 address for the interface. The address will be automatically assigned from the specified subnet.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Optional[Sequence['outputs.KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord']]:
        """
        List of configurations for creating ipv6 DNS records. The structure is documented below.
        """
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        A public address that can be used to access the internet over NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security group ids for network interface.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record FQDN.
        :param str dns_zone_id: DNS zone ID (if not set, private zone is used).
        :param bool ptr: When set to true, also create a PTR DNS record.
        :param int ttl: DNS record TTL (in seconds).
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record FQDN.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone ID (if not set, private zone is used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create a PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL (in seconds).
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fqdn: str,
                 dns_zone_id: Optional[str] = None,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str fqdn: DNS record FQDN.
        :param str dns_zone_id: DNS zone ID (if not set, private zone is used).
        :param bool ptr: When set to true, also create a PTR DNS record.
        :param int ttl: DNS record TTL (in seconds).
        """
        pulumi.set(__self__, "fqdn", fqdn)
        if dns_zone_id is not None:
            pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        DNS record FQDN.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> Optional[str]:
        """
        DNS zone ID (if not set, private zone is used).
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        When set to true, also create a PTR DNS record.
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        DNS record TTL (in seconds).
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplatePlacementPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "placementGroupId":
            suggest = "placement_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplatePlacementPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplatePlacementPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplatePlacementPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 placement_group_id: str):
        """
        :param str placement_group_id: Specifies the id of the Placement Group to assign to the instances.
        """
        pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> str:
        """
        Specifies the id of the Placement Group to assign to the instances.
        """
        return pulumi.get(self, "placement_group_id")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreFraction":
            suggest = "core_fraction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupInstanceTemplateResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupInstanceTemplateResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupInstanceTemplateResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_fraction: Optional[int] = None,
                 cores: Optional[int] = None,
                 gpus: Optional[int] = None,
                 memory: Optional[float] = None):
        if core_fraction is not None:
            pulumi.set(__self__, "core_fraction", core_fraction)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if gpus is not None:
            pulumi.set(__self__, "gpus", gpus)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> Optional[int]:
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> Optional[int]:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def gpus(self) -> Optional[int]:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> Optional[float]:
        return pulumi.get(self, "memory")


@pulumi.output_type
class KubernetesNodeGroupInstanceTemplateSchedulingPolicy(dict):
    def __init__(__self__, *,
                 preemptible: Optional[bool] = None):
        """
        :param bool preemptible: Specifies if the instance is preemptible. Defaults to false.
        """
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        """
        Specifies if the instance is preemptible. Defaults to false.
        """
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class KubernetesNodeGroupMaintenancePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoRepair":
            suggest = "auto_repair"
        elif key == "autoUpgrade":
            suggest = "auto_upgrade"
        elif key == "maintenanceWindows":
            suggest = "maintenance_windows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupMaintenancePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupMaintenancePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupMaintenancePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_repair: bool,
                 auto_upgrade: bool,
                 maintenance_windows: Optional[Sequence['outputs.KubernetesNodeGroupMaintenancePolicyMaintenanceWindow']] = None):
        """
        :param bool auto_repair: Boolean flag that specifies if node group can be repaired automatically. When omitted, default value is TRUE.
        :param bool auto_upgrade: Boolean flag that specifies if node group can be upgraded automatically. When omitted, default value is TRUE.
        :param Sequence['KubernetesNodeGroupMaintenancePolicyMaintenanceWindowArgs'] maintenance_windows: (Computed) Set of day intervals, when maintenance is allowed for this node group. When omitted, it defaults to any time. 
               
               To specify time of day interval, for all days, one element should be provided, with two fields set, `start_time` and `duration`.
               
               To allow maintenance only on specific days of week, please provide list of elements, with all fields set. Only one
               time interval is allowed for each day of week. Please see `my_node_group` config example.
        """
        pulumi.set(__self__, "auto_repair", auto_repair)
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        if maintenance_windows is not None:
            pulumi.set(__self__, "maintenance_windows", maintenance_windows)

    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> bool:
        """
        Boolean flag that specifies if node group can be repaired automatically. When omitted, default value is TRUE.
        """
        return pulumi.get(self, "auto_repair")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> bool:
        """
        Boolean flag that specifies if node group can be upgraded automatically. When omitted, default value is TRUE.
        """
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Optional[Sequence['outputs.KubernetesNodeGroupMaintenancePolicyMaintenanceWindow']]:
        """
        (Computed) Set of day intervals, when maintenance is allowed for this node group. When omitted, it defaults to any time. 

        To specify time of day interval, for all days, one element should be provided, with two fields set, `start_time` and `duration`.

        To allow maintenance only on specific days of week, please provide list of elements, with all fields set. Only one
        time interval is allowed for each day of week. Please see `my_node_group` config example.
        """
        return pulumi.get(self, "maintenance_windows")


@pulumi.output_type
class KubernetesNodeGroupMaintenancePolicyMaintenanceWindow(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startTime":
            suggest = "start_time"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupMaintenancePolicyMaintenanceWindow. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupMaintenancePolicyMaintenanceWindow.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupMaintenancePolicyMaintenanceWindow.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 duration: str,
                 start_time: str,
                 day: Optional[str] = None):
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)
        if day is not None:
            pulumi.set(__self__, "day", day)

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")


@pulumi.output_type
class KubernetesNodeGroupScalePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoScale":
            suggest = "auto_scale"
        elif key == "fixedScale":
            suggest = "fixed_scale"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupScalePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupScalePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupScalePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_scale: Optional['outputs.KubernetesNodeGroupScalePolicyAutoScale'] = None,
                 fixed_scale: Optional['outputs.KubernetesNodeGroupScalePolicyFixedScale'] = None):
        """
        :param 'KubernetesNodeGroupScalePolicyAutoScaleArgs' auto_scale: Scale policy for an autoscaled node group. The structure is documented below.
        :param 'KubernetesNodeGroupScalePolicyFixedScaleArgs' fixed_scale: Scale policy for a fixed scale node group. The structure is documented below.
        """
        if auto_scale is not None:
            pulumi.set(__self__, "auto_scale", auto_scale)
        if fixed_scale is not None:
            pulumi.set(__self__, "fixed_scale", fixed_scale)

    @property
    @pulumi.getter(name="autoScale")
    def auto_scale(self) -> Optional['outputs.KubernetesNodeGroupScalePolicyAutoScale']:
        """
        Scale policy for an autoscaled node group. The structure is documented below.
        """
        return pulumi.get(self, "auto_scale")

    @property
    @pulumi.getter(name="fixedScale")
    def fixed_scale(self) -> Optional['outputs.KubernetesNodeGroupScalePolicyFixedScale']:
        """
        Scale policy for a fixed scale node group. The structure is documented below.
        """
        return pulumi.get(self, "fixed_scale")


@pulumi.output_type
class KubernetesNodeGroupScalePolicyAutoScale(dict):
    def __init__(__self__, *,
                 initial: int,
                 max: int,
                 min: int):
        """
        :param int initial: Initial number of instances in the node group.
        :param int max: Maximum number of instances in the node group.
        :param int min: Minimum number of instances in the node group.
        """
        pulumi.set(__self__, "initial", initial)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def initial(self) -> int:
        """
        Initial number of instances in the node group.
        """
        return pulumi.get(self, "initial")

    @property
    @pulumi.getter
    def max(self) -> int:
        """
        Maximum number of instances in the node group.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        """
        Minimum number of instances in the node group.
        """
        return pulumi.get(self, "min")


@pulumi.output_type
class KubernetesNodeGroupScalePolicyFixedScale(dict):
    def __init__(__self__, *,
                 size: Optional[int] = None):
        """
        :param int size: The number of instances in the node group.
        """
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The number of instances in the node group.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class KubernetesNodeGroupVersionInfo(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "currentVersion":
            suggest = "current_version"
        elif key == "newRevisionAvailable":
            suggest = "new_revision_available"
        elif key == "newRevisionSummary":
            suggest = "new_revision_summary"
        elif key == "versionDeprecated":
            suggest = "version_deprecated"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in KubernetesNodeGroupVersionInfo. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        KubernetesNodeGroupVersionInfo.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        KubernetesNodeGroupVersionInfo.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 current_version: Optional[str] = None,
                 new_revision_available: Optional[bool] = None,
                 new_revision_summary: Optional[str] = None,
                 version_deprecated: Optional[bool] = None):
        """
        :param str current_version: Current Kubernetes version, major.minor (e.g. 1.15).
        :param bool new_revision_available: True/false flag.
               Newer revisions may include Kubernetes patches (e.g 1.15.1 > 1.15.2) as well
               as some internal component updates - new features or bug fixes in yandex-specific
               components either on the master or nodes.
        :param str new_revision_summary: Human readable description of the changes to be applied
               when updating to the latest revision. Empty if new_revision_available is false.
        :param bool version_deprecated: True/false flag. The current version is on the deprecation schedule,
               component (master or node group) should be upgraded.
        """
        if current_version is not None:
            pulumi.set(__self__, "current_version", current_version)
        if new_revision_available is not None:
            pulumi.set(__self__, "new_revision_available", new_revision_available)
        if new_revision_summary is not None:
            pulumi.set(__self__, "new_revision_summary", new_revision_summary)
        if version_deprecated is not None:
            pulumi.set(__self__, "version_deprecated", version_deprecated)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> Optional[str]:
        """
        Current Kubernetes version, major.minor (e.g. 1.15).
        """
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="newRevisionAvailable")
    def new_revision_available(self) -> Optional[bool]:
        """
        True/false flag.
        Newer revisions may include Kubernetes patches (e.g 1.15.1 > 1.15.2) as well
        as some internal component updates - new features or bug fixes in yandex-specific
        components either on the master or nodes.
        """
        return pulumi.get(self, "new_revision_available")

    @property
    @pulumi.getter(name="newRevisionSummary")
    def new_revision_summary(self) -> Optional[str]:
        """
        Human readable description of the changes to be applied
        when updating to the latest revision. Empty if new_revision_available is false.
        """
        return pulumi.get(self, "new_revision_summary")

    @property
    @pulumi.getter(name="versionDeprecated")
    def version_deprecated(self) -> Optional[bool]:
        """
        True/false flag. The current version is on the deprecation schedule,
        component (master or node group) should be upgraded.
        """
        return pulumi.get(self, "version_deprecated")


@pulumi.output_type
class LbNetworkLoadBalancerAttachedTargetGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetGroupId":
            suggest = "target_group_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbNetworkLoadBalancerAttachedTargetGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbNetworkLoadBalancerAttachedTargetGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbNetworkLoadBalancerAttachedTargetGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 healthchecks: Sequence['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheck'],
                 target_group_id: str):
        """
        :param Sequence['LbNetworkLoadBalancerAttachedTargetGroupHealthcheckArgs'] healthchecks: A HealthCheck resource. The structure is documented below.
        :param str target_group_id: ID of the target group.
        """
        pulumi.set(__self__, "healthchecks", healthchecks)
        pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter
    def healthchecks(self) -> Sequence['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheck']:
        """
        A HealthCheck resource. The structure is documented below.
        """
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        """
        ID of the target group.
        """
        return pulumi.get(self, "target_group_id")


@pulumi.output_type
class LbNetworkLoadBalancerAttachedTargetGroupHealthcheck(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "healthyThreshold":
            suggest = "healthy_threshold"
        elif key == "httpOptions":
            suggest = "http_options"
        elif key == "tcpOptions":
            suggest = "tcp_options"
        elif key == "unhealthyThreshold":
            suggest = "unhealthy_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbNetworkLoadBalancerAttachedTargetGroupHealthcheck. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbNetworkLoadBalancerAttachedTargetGroupHealthcheck.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbNetworkLoadBalancerAttachedTargetGroupHealthcheck.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 healthy_threshold: Optional[int] = None,
                 http_options: Optional['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions'] = None,
                 interval: Optional[int] = None,
                 tcp_options: Optional['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions'] = None,
                 timeout: Optional[int] = None,
                 unhealthy_threshold: Optional[int] = None):
        """
        :param str name: Name of the health check. The name must be unique for each target group that attached to a single load balancer.
        :param int healthy_threshold: Number of successful health checks required in order to set the `HEALTHY` status for the target.
        :param 'LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionsArgs' http_options: Options for HTTP health check. The structure is documented below.
        :param int interval: The interval between health checks. The default is 2 seconds.
        :param 'LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionsArgs' tcp_options: Options for TCP health check. The structure is documented below.
               
               > **NOTE:** One of `http_options` or `tcp_options` should be specified.
        :param int timeout: Timeout for a target to return a response for the health check. The default is 1 second.
        :param int unhealthy_threshold: Number of failed health checks before changing the status to `UNHEALTHY`. The default is 2.
        """
        pulumi.set(__self__, "name", name)
        if healthy_threshold is not None:
            pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        if http_options is not None:
            pulumi.set(__self__, "http_options", http_options)
        if interval is not None:
            pulumi.set(__self__, "interval", interval)
        if tcp_options is not None:
            pulumi.set(__self__, "tcp_options", tcp_options)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)
        if unhealthy_threshold is not None:
            pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the health check. The name must be unique for each target group that attached to a single load balancer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> Optional[int]:
        """
        Number of successful health checks required in order to set the `HEALTHY` status for the target.
        """
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpOptions")
    def http_options(self) -> Optional['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions']:
        """
        Options for HTTP health check. The structure is documented below.
        """
        return pulumi.get(self, "http_options")

    @property
    @pulumi.getter
    def interval(self) -> Optional[int]:
        """
        The interval between health checks. The default is 2 seconds.
        """
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Optional['outputs.LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions']:
        """
        Options for TCP health check. The structure is documented below.

        > **NOTE:** One of `http_options` or `tcp_options` should be specified.
        """
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Timeout for a target to return a response for the health check. The default is 1 second.
        """
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> Optional[int]:
        """
        Number of failed health checks before changing the status to `UNHEALTHY`. The default is 2.
        """
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class LbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptions(dict):
    def __init__(__self__, *,
                 port: int,
                 path: Optional[str] = None):
        """
        :param int port: Port to use for HTTP health checks.
        :param str path: URL path to set for health checking requests for every target in the target group. For example `/ping`. The default path is `/`.
        """
        pulumi.set(__self__, "port", port)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port to use for HTTP health checks.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def path(self) -> Optional[str]:
        """
        URL path to set for health checking requests for every target in the target group. For example `/ping`. The default path is `/`.
        """
        return pulumi.get(self, "path")


@pulumi.output_type
class LbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptions(dict):
    def __init__(__self__, *,
                 port: int):
        """
        :param int port: Port to use for TCP health checks.
        """
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port to use for TCP health checks.
        """
        return pulumi.get(self, "port")


@pulumi.output_type
class LbNetworkLoadBalancerListener(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalAddressSpec":
            suggest = "external_address_spec"
        elif key == "internalAddressSpec":
            suggest = "internal_address_spec"
        elif key == "targetPort":
            suggest = "target_port"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbNetworkLoadBalancerListener. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbNetworkLoadBalancerListener.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbNetworkLoadBalancerListener.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 port: int,
                 external_address_spec: Optional['outputs.LbNetworkLoadBalancerListenerExternalAddressSpec'] = None,
                 internal_address_spec: Optional['outputs.LbNetworkLoadBalancerListenerInternalAddressSpec'] = None,
                 protocol: Optional[str] = None,
                 target_port: Optional[int] = None):
        """
        :param str name: Name of the listener. The name must be unique for each listener on a single load balancer.
        :param int port: Port for incoming traffic.
        :param 'LbNetworkLoadBalancerListenerExternalAddressSpecArgs' external_address_spec: External IP address specification. The structure is documented below.
        :param 'LbNetworkLoadBalancerListenerInternalAddressSpecArgs' internal_address_spec: Internal IP address specification. The structure is documented below.
               
               > **NOTE:** One of `external_address_spec` or `internal_address_spec` should be specified.
        :param str protocol: Protocol for incoming traffic. TCP or UDP and the default is TCP.
        :param int target_port: Port of a target. The default is the same as listener's port.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        if external_address_spec is not None:
            pulumi.set(__self__, "external_address_spec", external_address_spec)
        if internal_address_spec is not None:
            pulumi.set(__self__, "internal_address_spec", internal_address_spec)
        if protocol is not None:
            pulumi.set(__self__, "protocol", protocol)
        if target_port is not None:
            pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the listener. The name must be unique for each listener on a single load balancer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        Port for incoming traffic.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="externalAddressSpec")
    def external_address_spec(self) -> Optional['outputs.LbNetworkLoadBalancerListenerExternalAddressSpec']:
        """
        External IP address specification. The structure is documented below.
        """
        return pulumi.get(self, "external_address_spec")

    @property
    @pulumi.getter(name="internalAddressSpec")
    def internal_address_spec(self) -> Optional['outputs.LbNetworkLoadBalancerListenerInternalAddressSpec']:
        """
        Internal IP address specification. The structure is documented below.

        > **NOTE:** One of `external_address_spec` or `internal_address_spec` should be specified.
        """
        return pulumi.get(self, "internal_address_spec")

    @property
    @pulumi.getter
    def protocol(self) -> Optional[str]:
        """
        Protocol for incoming traffic. TCP or UDP and the default is TCP.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> Optional[int]:
        """
        Port of a target. The default is the same as listener's port.
        """
        return pulumi.get(self, "target_port")


@pulumi.output_type
class LbNetworkLoadBalancerListenerExternalAddressSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbNetworkLoadBalancerListenerExternalAddressSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbNetworkLoadBalancerListenerExternalAddressSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbNetworkLoadBalancerListenerExternalAddressSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 ip_version: Optional[str] = None):
        """
        :param str address: External IP address for a listener. IP address will be allocated if it wasn't been set.
        :param str ip_version: IP version of the external addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        External IP address for a listener. IP address will be allocated if it wasn't been set.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        IP version of the external addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class LbNetworkLoadBalancerListenerInternalAddressSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipVersion":
            suggest = "ip_version"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbNetworkLoadBalancerListenerInternalAddressSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbNetworkLoadBalancerListenerInternalAddressSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbNetworkLoadBalancerListenerInternalAddressSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 address: Optional[str] = None,
                 ip_version: Optional[str] = None):
        """
        :param str subnet_id: ID of the subnet to which the internal IP address belongs.
        :param str address: Internal IP address for a listener. Must belong to the subnet that is referenced in subnet_id. IP address will be allocated if it wasn't been set.
        :param str ip_version: IP version of the internal addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if ip_version is not None:
            pulumi.set(__self__, "ip_version", ip_version)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet to which the internal IP address belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Internal IP address for a listener. Must belong to the subnet that is referenced in subnet_id. IP address will be allocated if it wasn't been set.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> Optional[str]:
        """
        IP version of the internal addresses that the load balancer works with. Must be one of ipv4 or ipv6. The default is ipv4.
        """
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class LbTargetGroupTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LbTargetGroupTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LbTargetGroupTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LbTargetGroupTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: str,
                 subnet_id: str):
        """
        :param str address: IP address of the target.
        :param str subnet_id: ID of the subnet that targets are connected to. 
               All targets in the target group must be connected to the same subnet within a single availability zone.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        """
        IP address of the target.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        ID of the subnet that targets are connected to. 
        All targets in the target group must be connected to the same subnet within a single availability zone.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class LoadtestingAgentComputeInstance(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootDisk":
            suggest = "boot_disk"
        elif key == "networkInterfaces":
            suggest = "network_interfaces"
        elif key == "serviceAccountId":
            suggest = "service_account_id"
        elif key == "computedMetadata":
            suggest = "computed_metadata"
        elif key == "platformId":
            suggest = "platform_id"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadtestingAgentComputeInstance. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadtestingAgentComputeInstance.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadtestingAgentComputeInstance.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 boot_disk: 'outputs.LoadtestingAgentComputeInstanceBootDisk',
                 network_interfaces: Sequence['outputs.LoadtestingAgentComputeInstanceNetworkInterface'],
                 resources: 'outputs.LoadtestingAgentComputeInstanceResources',
                 service_account_id: str,
                 computed_metadata: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 metadata: Optional[Mapping[str, str]] = None,
                 platform_id: Optional[str] = None,
                 zone_id: Optional[str] = None):
        """
        :param 'LoadtestingAgentComputeInstanceBootDiskArgs' boot_disk: Boot disk specifications for the instance. The structure is documented below.
        :param Sequence['LoadtestingAgentComputeInstanceNetworkInterfaceArgs'] network_interfaces: Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        :param 'LoadtestingAgentComputeInstanceResourcesArgs' resources: Compute resource specifications for the instance. The structure is documented below.
        :param str service_account_id: The ID of the service account authorized for this load testing agent. Service account should have `loadtesting.generatorClient` or `loadtesting.externalAgent` role in the folder.
        :param Mapping[str, str] computed_metadata: The set of metadata `key:value` pairs assigned to this instance. This includes user custom `metadata`, and predefined items created by Yandex Cloud Load Testing.
        :param Mapping[str, str] labels: A set of key/value label pairs to assign to the instance.
        :param Mapping[str, str] metadata: A set of metadata key/value pairs to make available from within the instance.
        :param str platform_id: The Compute platform of virtual machine. If it is not provided, the standard-v2 platform will be used.
        :param str zone_id: The availability zone where the virtual machine will be created. If it is not provided,
               the default provider folder is used.
        """
        pulumi.set(__self__, "boot_disk", boot_disk)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "service_account_id", service_account_id)
        if computed_metadata is not None:
            pulumi.set(__self__, "computed_metadata", computed_metadata)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if platform_id is not None:
            pulumi.set(__self__, "platform_id", platform_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="bootDisk")
    def boot_disk(self) -> 'outputs.LoadtestingAgentComputeInstanceBootDisk':
        """
        Boot disk specifications for the instance. The structure is documented below.
        """
        return pulumi.get(self, "boot_disk")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.LoadtestingAgentComputeInstanceNetworkInterface']:
        """
        Network specifications for the instance. This can be used multiple times for adding multiple interfaces. The structure is documented below.
        """
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.LoadtestingAgentComputeInstanceResources':
        """
        Compute resource specifications for the instance. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        The ID of the service account authorized for this load testing agent. Service account should have `loadtesting.generatorClient` or `loadtesting.externalAgent` role in the folder.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="computedMetadata")
    def computed_metadata(self) -> Optional[Mapping[str, str]]:
        """
        The set of metadata `key:value` pairs assigned to this instance. This includes user custom `metadata`, and predefined items created by Yandex Cloud Load Testing.
        """
        return pulumi.get(self, "computed_metadata")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value label pairs to assign to the instance.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Optional[Mapping[str, str]]:
        """
        A set of metadata key/value pairs to make available from within the instance.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> Optional[str]:
        """
        The Compute platform of virtual machine. If it is not provided, the standard-v2 platform will be used.
        """
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The availability zone where the virtual machine will be created. If it is not provided,
        the default provider folder is used.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class LoadtestingAgentComputeInstanceBootDisk(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "initializeParams":
            suggest = "initialize_params"
        elif key == "autoDelete":
            suggest = "auto_delete"
        elif key == "deviceName":
            suggest = "device_name"
        elif key == "diskId":
            suggest = "disk_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadtestingAgentComputeInstanceBootDisk. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadtestingAgentComputeInstanceBootDisk.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadtestingAgentComputeInstanceBootDisk.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 initialize_params: 'outputs.LoadtestingAgentComputeInstanceBootDiskInitializeParams',
                 auto_delete: Optional[bool] = None,
                 device_name: Optional[str] = None,
                 disk_id: Optional[str] = None):
        """
        :param 'LoadtestingAgentComputeInstanceBootDiskInitializeParamsArgs' initialize_params: Parameters for creating a disk alongside the instance. The structure is documented below.
        :param bool auto_delete: Whether the disk is auto-deleted when the instance is deleted. The default value is true.
        :param str device_name: This value can be used to reference the device under `/dev/disk/by-id/`.
        :param str disk_id: The ID of created disk.
        """
        pulumi.set(__self__, "initialize_params", initialize_params)
        if auto_delete is not None:
            pulumi.set(__self__, "auto_delete", auto_delete)
        if device_name is not None:
            pulumi.set(__self__, "device_name", device_name)
        if disk_id is not None:
            pulumi.set(__self__, "disk_id", disk_id)

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> 'outputs.LoadtestingAgentComputeInstanceBootDiskInitializeParams':
        """
        Parameters for creating a disk alongside the instance. The structure is documented below.
        """
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> Optional[bool]:
        """
        Whether the disk is auto-deleted when the instance is deleted. The default value is true.
        """
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> Optional[str]:
        """
        This value can be used to reference the device under `/dev/disk/by-id/`.
        """
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> Optional[str]:
        """
        The ID of created disk.
        """
        return pulumi.get(self, "disk_id")


@pulumi.output_type
class LoadtestingAgentComputeInstanceBootDiskInitializeParams(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockSize":
            suggest = "block_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadtestingAgentComputeInstanceBootDiskInitializeParams. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadtestingAgentComputeInstanceBootDiskInitializeParams.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadtestingAgentComputeInstanceBootDiskInitializeParams.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_size: Optional[int] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 size: Optional[int] = None,
                 type: Optional[str] = None):
        """
        :param int block_size: Block size of the disk, specified in bytes.
        :param str description: A description of the boot disk.
        :param str name: A name of the boot disk.
        :param int size: The size of the disk in GB. Defaults to 15 GB.
        :param str type: The disk type.
        """
        if block_size is not None:
            pulumi.set(__self__, "block_size", block_size)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if size is not None:
            pulumi.set(__self__, "size", size)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> Optional[int]:
        """
        Block size of the disk, specified in bytes.
        """
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        A description of the boot disk.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        A name of the boot disk.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> Optional[int]:
        """
        The size of the disk in GB. Defaults to 15 GB.
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The disk type.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class LoadtestingAgentComputeInstanceNetworkInterface(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "ipAddress":
            suggest = "ip_address"
        elif key == "ipv6Address":
            suggest = "ipv6_address"
        elif key == "macAddress":
            suggest = "mac_address"
        elif key == "natIpAddress":
            suggest = "nat_ip_address"
        elif key == "natIpVersion":
            suggest = "nat_ip_version"
        elif key == "securityGroupIds":
            suggest = "security_group_ids"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadtestingAgentComputeInstanceNetworkInterface. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadtestingAgentComputeInstanceNetworkInterface.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadtestingAgentComputeInstanceNetworkInterface.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 index: Optional[int] = None,
                 ip_address: Optional[str] = None,
                 ipv4: Optional[bool] = None,
                 ipv6: Optional[bool] = None,
                 ipv6_address: Optional[str] = None,
                 mac_address: Optional[str] = None,
                 nat: Optional[bool] = None,
                 nat_ip_address: Optional[str] = None,
                 nat_ip_version: Optional[str] = None,
                 security_group_ids: Optional[Sequence[str]] = None):
        """
        :param str subnet_id: The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.
        :param str ip_address: Manual set static IP address.
        :param bool ipv4: Flag for allocating IPv4 address for the network interface.
        :param bool ipv6: Flag for allocating IPv6 address for the network interface.
        :param str ipv6_address: Manual set static IPv6 address.
        :param bool nat: Flag for using NAT.
        :param str nat_ip_address: A public address that can be used to access the internet over NAT.
        :param Sequence[str] security_group_ids: Security group ids for network interface.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        if index is not None:
            pulumi.set(__self__, "index", index)
        if ip_address is not None:
            pulumi.set(__self__, "ip_address", ip_address)
        if ipv4 is not None:
            pulumi.set(__self__, "ipv4", ipv4)
        if ipv6 is not None:
            pulumi.set(__self__, "ipv6", ipv6)
        if ipv6_address is not None:
            pulumi.set(__self__, "ipv6_address", ipv6_address)
        if mac_address is not None:
            pulumi.set(__self__, "mac_address", mac_address)
        if nat is not None:
            pulumi.set(__self__, "nat", nat)
        if nat_ip_address is not None:
            pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        if nat_ip_version is not None:
            pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        if security_group_ids is not None:
            pulumi.set(__self__, "security_group_ids", security_group_ids)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet to attach this interface to. The subnet must reside in the same zone where this instance was created.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def index(self) -> Optional[int]:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> Optional[str]:
        """
        Manual set static IP address.
        """
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> Optional[bool]:
        """
        Flag for allocating IPv4 address for the network interface.
        """
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> Optional[bool]:
        """
        Flag for allocating IPv6 address for the network interface.
        """
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> Optional[str]:
        """
        Manual set static IPv6 address.
        """
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> Optional[str]:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> Optional[bool]:
        """
        Flag for using NAT.
        """
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> Optional[str]:
        """
        A public address that can be used to access the internet over NAT.
        """
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> Optional[str]:
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Optional[Sequence[str]]:
        """
        Security group ids for network interface.
        """
        return pulumi.get(self, "security_group_ids")


@pulumi.output_type
class LoadtestingAgentComputeInstanceResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "coreFraction":
            suggest = "core_fraction"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LoadtestingAgentComputeInstanceResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LoadtestingAgentComputeInstanceResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LoadtestingAgentComputeInstanceResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 core_fraction: Optional[int] = None,
                 cores: Optional[int] = None,
                 memory: Optional[float] = None):
        """
        :param int core_fraction: If provided, specifies baseline core performance as a percent.
        :param int cores: The number of CPU cores for the instance. Defaults to 2 cores.
        :param float memory: The memory size in GB. Defaults to 2 GB.
        """
        if core_fraction is not None:
            pulumi.set(__self__, "core_fraction", core_fraction)
        if cores is not None:
            pulumi.set(__self__, "cores", cores)
        if memory is not None:
            pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> Optional[int]:
        """
        If provided, specifies baseline core performance as a percent.
        """
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> Optional[int]:
        """
        The number of CPU cores for the instance. Defaults to 2 cores.
        """
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def memory(self) -> Optional[float]:
        """
        The memory size in GB. Defaults to 2 GB.
        """
        return pulumi.get(self, "memory")


@pulumi.output_type
class LockboxSecretVersionEntry(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textValue":
            suggest = "text_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in LockboxSecretVersionEntry. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        LockboxSecretVersionEntry.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        LockboxSecretVersionEntry.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 command: Optional['outputs.LockboxSecretVersionEntryCommand'] = None,
                 text_value: Optional[str] = None):
        """
        :param str key: The key of the entry.
        :param 'LockboxSecretVersionEntryCommandArgs' command: The command that generates the text value of the entry.
               
               Note that either `text_value` or `command` is required.
               
               The `command` block contains:
        :param str text_value: The text value of the entry.
        """
        pulumi.set(__self__, "key", key)
        if command is not None:
            pulumi.set(__self__, "command", command)
        if text_value is not None:
            pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The key of the entry.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def command(self) -> Optional['outputs.LockboxSecretVersionEntryCommand']:
        """
        The command that generates the text value of the entry.

        Note that either `text_value` or `command` is required.

        The `command` block contains:
        """
        return pulumi.get(self, "command")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> Optional[str]:
        """
        The text value of the entry.
        """
        return pulumi.get(self, "text_value")


@pulumi.output_type
class LockboxSecretVersionEntryCommand(dict):
    def __init__(__self__, *,
                 path: str,
                 args: Optional[Sequence[str]] = None,
                 env: Optional[Mapping[str, str]] = None):
        """
        :param str path: The path to the script or command to execute.
        :param Sequence[str] args: List of arguments to be passed to the script/command.
        :param Mapping[str, str] env: Map of environment variables to set before calling the script/command.
        """
        pulumi.set(__self__, "path", path)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if env is not None:
            pulumi.set(__self__, "env", env)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        The path to the script or command to execute.
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        """
        List of arguments to be passed to the script/command.
        """
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def env(self) -> Optional[Mapping[str, str]]:
        """
        Map of environment variables to set before calling the script/command.
        """
        return pulumi.get(self, "env")


@pulumi.output_type
class MdbClickhouseClusterAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLens":
            suggest = "data_lens"
        elif key == "dataTransfer":
            suggest = "data_transfer"
        elif key == "webSql":
            suggest = "web_sql"
        elif key == "yandexQuery":
            suggest = "yandex_query"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None,
                 metrika: Optional[bool] = None,
                 serverless: Optional[bool] = None,
                 web_sql: Optional[bool] = None,
                 yandex_query: Optional[bool] = None):
        """
        :param bool data_lens: Allow access for DataLens. Can be either `true` or `false`.
        :param bool data_transfer: Allow access for DataTransfer. Can be either `true` or `false`.
        :param bool metrika: Allow access for Yandex.Metrika. Can be either `true` or `false`.
        :param bool serverless: Allow access for Serverless. Can be either `true` or `false`.
        :param bool web_sql: Allow access for Web SQL. Can be either `true` or `false`.
        :param bool yandex_query: Allow access for YandexQuery. Can be either `true` or `false`.
        """
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)
        if metrika is not None:
            pulumi.set(__self__, "metrika", metrika)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)
        if web_sql is not None:
            pulumi.set(__self__, "web_sql", web_sql)
        if yandex_query is not None:
            pulumi.set(__self__, "yandex_query", yandex_query)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        """
        Allow access for DataLens. Can be either `true` or `false`.
        """
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for DataTransfer. Can be either `true` or `false`.
        """
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter
    def metrika(self) -> Optional[bool]:
        """
        Allow access for Yandex.Metrika. Can be either `true` or `false`.
        """
        return pulumi.get(self, "metrika")

    @property
    @pulumi.getter
    def serverless(self) -> Optional[bool]:
        """
        Allow access for Serverless. Can be either `true` or `false`.
        """
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> Optional[bool]:
        """
        Allow access for Web SQL. Can be either `true` or `false`.
        """
        return pulumi.get(self, "web_sql")

    @property
    @pulumi.getter(name="yandexQuery")
    def yandex_query(self) -> Optional[bool]:
        """
        Allow access for YandexQuery. Can be either `true` or `false`.
        """
        return pulumi.get(self, "yandex_query")


@pulumi.output_type
class MdbClickhouseClusterBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started.
        :param int minutes: The minute at which backup will be started.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbClickhouseClusterClickhouse(dict):
    def __init__(__self__, *,
                 config: Optional['outputs.MdbClickhouseClusterClickhouseConfig'] = None,
                 resources: Optional['outputs.MdbClickhouseClusterClickhouseResources'] = None):
        """
        :param 'MdbClickhouseClusterClickhouseConfigArgs' config: Main ClickHouse cluster configuration.
        :param 'MdbClickhouseClusterClickhouseResourcesArgs' resources: Resources allocated to hosts of the ClickHouse subcluster. The structure is documented below.
        """
        if config is not None:
            pulumi.set(__self__, "config", config)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def config(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfig']:
        """
        Main ClickHouse cluster configuration.
        """
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.MdbClickhouseClusterClickhouseResources']:
        """
        Resources allocated to hosts of the ClickHouse subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backgroundFetchesPoolSize":
            suggest = "background_fetches_pool_size"
        elif key == "backgroundMergesMutationsConcurrencyRatio":
            suggest = "background_merges_mutations_concurrency_ratio"
        elif key == "backgroundMessageBrokerSchedulePoolSize":
            suggest = "background_message_broker_schedule_pool_size"
        elif key == "backgroundPoolSize":
            suggest = "background_pool_size"
        elif key == "backgroundSchedulePoolSize":
            suggest = "background_schedule_pool_size"
        elif key == "defaultDatabase":
            suggest = "default_database"
        elif key == "dictionariesLazyLoad":
            suggest = "dictionaries_lazy_load"
        elif key == "geobaseEnabled":
            suggest = "geobase_enabled"
        elif key == "geobaseUri":
            suggest = "geobase_uri"
        elif key == "graphiteRollups":
            suggest = "graphite_rollups"
        elif key == "kafkaTopics":
            suggest = "kafka_topics"
        elif key == "keepAliveTimeout":
            suggest = "keep_alive_timeout"
        elif key == "logLevel":
            suggest = "log_level"
        elif key == "markCacheSize":
            suggest = "mark_cache_size"
        elif key == "maxConcurrentQueries":
            suggest = "max_concurrent_queries"
        elif key == "maxConnections":
            suggest = "max_connections"
        elif key == "maxPartitionSizeToDrop":
            suggest = "max_partition_size_to_drop"
        elif key == "maxTableSizeToDrop":
            suggest = "max_table_size_to_drop"
        elif key == "mergeTree":
            suggest = "merge_tree"
        elif key == "metricLogEnabled":
            suggest = "metric_log_enabled"
        elif key == "metricLogRetentionSize":
            suggest = "metric_log_retention_size"
        elif key == "metricLogRetentionTime":
            suggest = "metric_log_retention_time"
        elif key == "partLogRetentionSize":
            suggest = "part_log_retention_size"
        elif key == "partLogRetentionTime":
            suggest = "part_log_retention_time"
        elif key == "queryCache":
            suggest = "query_cache"
        elif key == "queryLogRetentionSize":
            suggest = "query_log_retention_size"
        elif key == "queryLogRetentionTime":
            suggest = "query_log_retention_time"
        elif key == "queryMaskingRules":
            suggest = "query_masking_rules"
        elif key == "queryThreadLogEnabled":
            suggest = "query_thread_log_enabled"
        elif key == "queryThreadLogRetentionSize":
            suggest = "query_thread_log_retention_size"
        elif key == "queryThreadLogRetentionTime":
            suggest = "query_thread_log_retention_time"
        elif key == "textLogEnabled":
            suggest = "text_log_enabled"
        elif key == "textLogLevel":
            suggest = "text_log_level"
        elif key == "textLogRetentionSize":
            suggest = "text_log_retention_size"
        elif key == "textLogRetentionTime":
            suggest = "text_log_retention_time"
        elif key == "totalMemoryProfilerStep":
            suggest = "total_memory_profiler_step"
        elif key == "traceLogEnabled":
            suggest = "trace_log_enabled"
        elif key == "traceLogRetentionSize":
            suggest = "trace_log_retention_size"
        elif key == "traceLogRetentionTime":
            suggest = "trace_log_retention_time"
        elif key == "uncompressedCacheSize":
            suggest = "uncompressed_cache_size"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 background_fetches_pool_size: Optional[int] = None,
                 background_merges_mutations_concurrency_ratio: Optional[int] = None,
                 background_message_broker_schedule_pool_size: Optional[int] = None,
                 background_pool_size: Optional[int] = None,
                 background_schedule_pool_size: Optional[int] = None,
                 compressions: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigCompression']] = None,
                 default_database: Optional[str] = None,
                 dictionaries_lazy_load: Optional[bool] = None,
                 geobase_enabled: Optional[bool] = None,
                 geobase_uri: Optional[str] = None,
                 graphite_rollups: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollup']] = None,
                 kafka: Optional['outputs.MdbClickhouseClusterClickhouseConfigKafka'] = None,
                 kafka_topics: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigKafkaTopic']] = None,
                 keep_alive_timeout: Optional[int] = None,
                 log_level: Optional[str] = None,
                 mark_cache_size: Optional[int] = None,
                 max_concurrent_queries: Optional[int] = None,
                 max_connections: Optional[int] = None,
                 max_partition_size_to_drop: Optional[int] = None,
                 max_table_size_to_drop: Optional[int] = None,
                 merge_tree: Optional['outputs.MdbClickhouseClusterClickhouseConfigMergeTree'] = None,
                 metric_log_enabled: Optional[bool] = None,
                 metric_log_retention_size: Optional[int] = None,
                 metric_log_retention_time: Optional[int] = None,
                 part_log_retention_size: Optional[int] = None,
                 part_log_retention_time: Optional[int] = None,
                 query_cache: Optional['outputs.MdbClickhouseClusterClickhouseConfigQueryCache'] = None,
                 query_log_retention_size: Optional[int] = None,
                 query_log_retention_time: Optional[int] = None,
                 query_masking_rules: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigQueryMaskingRule']] = None,
                 query_thread_log_enabled: Optional[bool] = None,
                 query_thread_log_retention_size: Optional[int] = None,
                 query_thread_log_retention_time: Optional[int] = None,
                 rabbitmq: Optional['outputs.MdbClickhouseClusterClickhouseConfigRabbitmq'] = None,
                 text_log_enabled: Optional[bool] = None,
                 text_log_level: Optional[str] = None,
                 text_log_retention_size: Optional[int] = None,
                 text_log_retention_time: Optional[int] = None,
                 timezone: Optional[str] = None,
                 total_memory_profiler_step: Optional[int] = None,
                 trace_log_enabled: Optional[bool] = None,
                 trace_log_retention_size: Optional[int] = None,
                 trace_log_retention_time: Optional[int] = None,
                 uncompressed_cache_size: Optional[int] = None):
        """
        :param Sequence['MdbClickhouseClusterClickhouseConfigCompressionArgs'] compressions: Data compression configuration. The structure is documented below.
        :param Sequence['MdbClickhouseClusterClickhouseConfigGraphiteRollupArgs'] graphite_rollups: Graphite rollup configuration. The structure is documented below.
        :param 'MdbClickhouseClusterClickhouseConfigKafkaArgs' kafka: Kafka connection configuration. The structure is documented below.
        :param Sequence['MdbClickhouseClusterClickhouseConfigKafkaTopicArgs'] kafka_topics: Kafka topic connection configuration. The structure is documented below.
        :param str log_level: , `max_connections`, `max_concurrent_queries`, `keep_alive_timeout`, `uncompressed_cache_size`, `mark_cache_size`,
               `max_table_size_to_drop`, `max_partition_size_to_drop`, `timezone`, `geobase_uri`, `query_log_retention_size`,
               `query_log_retention_time`, `query_thread_log_enabled`, `query_thread_log_retention_size`, `query_thread_log_retention_time`,
               `part_log_retention_size`, `part_log_retention_time`, `metric_log_enabled`, `metric_log_retention_size`, `metric_log_retention_time`,
               `trace_log_enabled`, `trace_log_retention_size`, `trace_log_retention_time`, `text_log_enabled`, `text_log_retention_size`,
               `text_log_retention_time`, `text_log_level`,
               `background_pool_size`, `background_schedule_pool_size`, `background_fetches_pool_size`, `background_message_broker_schedule_pool_size`,`background_merges_mutations_concurrency_ratio`,
               `default_database`,
               `total_memory_profiler_step`, `dictionaries_lazy_load` - (Optional) ClickHouse server parameters. For more information, see
               [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/settings-list).
        :param 'MdbClickhouseClusterClickhouseConfigMergeTreeArgs' merge_tree: MergeTree engine configuration. The structure is documented below.
        :param 'MdbClickhouseClusterClickhouseConfigQueryCacheArgs' query_cache: Query cache configuration. The structure is documented below.
        :param Sequence['MdbClickhouseClusterClickhouseConfigQueryMaskingRuleArgs'] query_masking_rules: Query masking rules configuration. The structure is documented below.
        :param 'MdbClickhouseClusterClickhouseConfigRabbitmqArgs' rabbitmq: RabbitMQ connection configuration. The structure is documented below.
        """
        if background_fetches_pool_size is not None:
            pulumi.set(__self__, "background_fetches_pool_size", background_fetches_pool_size)
        if background_merges_mutations_concurrency_ratio is not None:
            pulumi.set(__self__, "background_merges_mutations_concurrency_ratio", background_merges_mutations_concurrency_ratio)
        if background_message_broker_schedule_pool_size is not None:
            pulumi.set(__self__, "background_message_broker_schedule_pool_size", background_message_broker_schedule_pool_size)
        if background_pool_size is not None:
            pulumi.set(__self__, "background_pool_size", background_pool_size)
        if background_schedule_pool_size is not None:
            pulumi.set(__self__, "background_schedule_pool_size", background_schedule_pool_size)
        if compressions is not None:
            pulumi.set(__self__, "compressions", compressions)
        if default_database is not None:
            pulumi.set(__self__, "default_database", default_database)
        if dictionaries_lazy_load is not None:
            pulumi.set(__self__, "dictionaries_lazy_load", dictionaries_lazy_load)
        if geobase_enabled is not None:
            pulumi.set(__self__, "geobase_enabled", geobase_enabled)
        if geobase_uri is not None:
            pulumi.set(__self__, "geobase_uri", geobase_uri)
        if graphite_rollups is not None:
            pulumi.set(__self__, "graphite_rollups", graphite_rollups)
        if kafka is not None:
            pulumi.set(__self__, "kafka", kafka)
        if kafka_topics is not None:
            pulumi.set(__self__, "kafka_topics", kafka_topics)
        if keep_alive_timeout is not None:
            pulumi.set(__self__, "keep_alive_timeout", keep_alive_timeout)
        if log_level is not None:
            pulumi.set(__self__, "log_level", log_level)
        if mark_cache_size is not None:
            pulumi.set(__self__, "mark_cache_size", mark_cache_size)
        if max_concurrent_queries is not None:
            pulumi.set(__self__, "max_concurrent_queries", max_concurrent_queries)
        if max_connections is not None:
            pulumi.set(__self__, "max_connections", max_connections)
        if max_partition_size_to_drop is not None:
            pulumi.set(__self__, "max_partition_size_to_drop", max_partition_size_to_drop)
        if max_table_size_to_drop is not None:
            pulumi.set(__self__, "max_table_size_to_drop", max_table_size_to_drop)
        if merge_tree is not None:
            pulumi.set(__self__, "merge_tree", merge_tree)
        if metric_log_enabled is not None:
            pulumi.set(__self__, "metric_log_enabled", metric_log_enabled)
        if metric_log_retention_size is not None:
            pulumi.set(__self__, "metric_log_retention_size", metric_log_retention_size)
        if metric_log_retention_time is not None:
            pulumi.set(__self__, "metric_log_retention_time", metric_log_retention_time)
        if part_log_retention_size is not None:
            pulumi.set(__self__, "part_log_retention_size", part_log_retention_size)
        if part_log_retention_time is not None:
            pulumi.set(__self__, "part_log_retention_time", part_log_retention_time)
        if query_cache is not None:
            pulumi.set(__self__, "query_cache", query_cache)
        if query_log_retention_size is not None:
            pulumi.set(__self__, "query_log_retention_size", query_log_retention_size)
        if query_log_retention_time is not None:
            pulumi.set(__self__, "query_log_retention_time", query_log_retention_time)
        if query_masking_rules is not None:
            pulumi.set(__self__, "query_masking_rules", query_masking_rules)
        if query_thread_log_enabled is not None:
            pulumi.set(__self__, "query_thread_log_enabled", query_thread_log_enabled)
        if query_thread_log_retention_size is not None:
            pulumi.set(__self__, "query_thread_log_retention_size", query_thread_log_retention_size)
        if query_thread_log_retention_time is not None:
            pulumi.set(__self__, "query_thread_log_retention_time", query_thread_log_retention_time)
        if rabbitmq is not None:
            pulumi.set(__self__, "rabbitmq", rabbitmq)
        if text_log_enabled is not None:
            pulumi.set(__self__, "text_log_enabled", text_log_enabled)
        if text_log_level is not None:
            pulumi.set(__self__, "text_log_level", text_log_level)
        if text_log_retention_size is not None:
            pulumi.set(__self__, "text_log_retention_size", text_log_retention_size)
        if text_log_retention_time is not None:
            pulumi.set(__self__, "text_log_retention_time", text_log_retention_time)
        if timezone is not None:
            pulumi.set(__self__, "timezone", timezone)
        if total_memory_profiler_step is not None:
            pulumi.set(__self__, "total_memory_profiler_step", total_memory_profiler_step)
        if trace_log_enabled is not None:
            pulumi.set(__self__, "trace_log_enabled", trace_log_enabled)
        if trace_log_retention_size is not None:
            pulumi.set(__self__, "trace_log_retention_size", trace_log_retention_size)
        if trace_log_retention_time is not None:
            pulumi.set(__self__, "trace_log_retention_time", trace_log_retention_time)
        if uncompressed_cache_size is not None:
            pulumi.set(__self__, "uncompressed_cache_size", uncompressed_cache_size)

    @property
    @pulumi.getter(name="backgroundFetchesPoolSize")
    def background_fetches_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "background_fetches_pool_size")

    @property
    @pulumi.getter(name="backgroundMergesMutationsConcurrencyRatio")
    def background_merges_mutations_concurrency_ratio(self) -> Optional[int]:
        return pulumi.get(self, "background_merges_mutations_concurrency_ratio")

    @property
    @pulumi.getter(name="backgroundMessageBrokerSchedulePoolSize")
    def background_message_broker_schedule_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "background_message_broker_schedule_pool_size")

    @property
    @pulumi.getter(name="backgroundPoolSize")
    def background_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "background_pool_size")

    @property
    @pulumi.getter(name="backgroundSchedulePoolSize")
    def background_schedule_pool_size(self) -> Optional[int]:
        return pulumi.get(self, "background_schedule_pool_size")

    @property
    @pulumi.getter
    def compressions(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigCompression']]:
        """
        Data compression configuration. The structure is documented below.
        """
        return pulumi.get(self, "compressions")

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> Optional[str]:
        return pulumi.get(self, "default_database")

    @property
    @pulumi.getter(name="dictionariesLazyLoad")
    def dictionaries_lazy_load(self) -> Optional[bool]:
        return pulumi.get(self, "dictionaries_lazy_load")

    @property
    @pulumi.getter(name="geobaseEnabled")
    def geobase_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "geobase_enabled")

    @property
    @pulumi.getter(name="geobaseUri")
    def geobase_uri(self) -> Optional[str]:
        return pulumi.get(self, "geobase_uri")

    @property
    @pulumi.getter(name="graphiteRollups")
    def graphite_rollups(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollup']]:
        """
        Graphite rollup configuration. The structure is documented below.
        """
        return pulumi.get(self, "graphite_rollups")

    @property
    @pulumi.getter
    def kafka(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfigKafka']:
        """
        Kafka connection configuration. The structure is documented below.
        """
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter(name="kafkaTopics")
    def kafka_topics(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigKafkaTopic']]:
        """
        Kafka topic connection configuration. The structure is documented below.
        """
        return pulumi.get(self, "kafka_topics")

    @property
    @pulumi.getter(name="keepAliveTimeout")
    def keep_alive_timeout(self) -> Optional[int]:
        return pulumi.get(self, "keep_alive_timeout")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> Optional[str]:
        """
        , `max_connections`, `max_concurrent_queries`, `keep_alive_timeout`, `uncompressed_cache_size`, `mark_cache_size`,
        `max_table_size_to_drop`, `max_partition_size_to_drop`, `timezone`, `geobase_uri`, `query_log_retention_size`,
        `query_log_retention_time`, `query_thread_log_enabled`, `query_thread_log_retention_size`, `query_thread_log_retention_time`,
        `part_log_retention_size`, `part_log_retention_time`, `metric_log_enabled`, `metric_log_retention_size`, `metric_log_retention_time`,
        `trace_log_enabled`, `trace_log_retention_size`, `trace_log_retention_time`, `text_log_enabled`, `text_log_retention_size`,
        `text_log_retention_time`, `text_log_level`,
        `background_pool_size`, `background_schedule_pool_size`, `background_fetches_pool_size`, `background_message_broker_schedule_pool_size`,`background_merges_mutations_concurrency_ratio`,
        `default_database`,
        `total_memory_profiler_step`, `dictionaries_lazy_load` - (Optional) ClickHouse server parameters. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/settings-list).
        """
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="markCacheSize")
    def mark_cache_size(self) -> Optional[int]:
        return pulumi.get(self, "mark_cache_size")

    @property
    @pulumi.getter(name="maxConcurrentQueries")
    def max_concurrent_queries(self) -> Optional[int]:
        return pulumi.get(self, "max_concurrent_queries")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="maxPartitionSizeToDrop")
    def max_partition_size_to_drop(self) -> Optional[int]:
        return pulumi.get(self, "max_partition_size_to_drop")

    @property
    @pulumi.getter(name="maxTableSizeToDrop")
    def max_table_size_to_drop(self) -> Optional[int]:
        return pulumi.get(self, "max_table_size_to_drop")

    @property
    @pulumi.getter(name="mergeTree")
    def merge_tree(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfigMergeTree']:
        """
        MergeTree engine configuration. The structure is documented below.
        """
        return pulumi.get(self, "merge_tree")

    @property
    @pulumi.getter(name="metricLogEnabled")
    def metric_log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "metric_log_enabled")

    @property
    @pulumi.getter(name="metricLogRetentionSize")
    def metric_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "metric_log_retention_size")

    @property
    @pulumi.getter(name="metricLogRetentionTime")
    def metric_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "metric_log_retention_time")

    @property
    @pulumi.getter(name="partLogRetentionSize")
    def part_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "part_log_retention_size")

    @property
    @pulumi.getter(name="partLogRetentionTime")
    def part_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "part_log_retention_time")

    @property
    @pulumi.getter(name="queryCache")
    def query_cache(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfigQueryCache']:
        """
        Query cache configuration. The structure is documented below.
        """
        return pulumi.get(self, "query_cache")

    @property
    @pulumi.getter(name="queryLogRetentionSize")
    def query_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "query_log_retention_size")

    @property
    @pulumi.getter(name="queryLogRetentionTime")
    def query_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "query_log_retention_time")

    @property
    @pulumi.getter(name="queryMaskingRules")
    def query_masking_rules(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigQueryMaskingRule']]:
        """
        Query masking rules configuration. The structure is documented below.
        """
        return pulumi.get(self, "query_masking_rules")

    @property
    @pulumi.getter(name="queryThreadLogEnabled")
    def query_thread_log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "query_thread_log_enabled")

    @property
    @pulumi.getter(name="queryThreadLogRetentionSize")
    def query_thread_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "query_thread_log_retention_size")

    @property
    @pulumi.getter(name="queryThreadLogRetentionTime")
    def query_thread_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "query_thread_log_retention_time")

    @property
    @pulumi.getter
    def rabbitmq(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfigRabbitmq']:
        """
        RabbitMQ connection configuration. The structure is documented below.
        """
        return pulumi.get(self, "rabbitmq")

    @property
    @pulumi.getter(name="textLogEnabled")
    def text_log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "text_log_enabled")

    @property
    @pulumi.getter(name="textLogLevel")
    def text_log_level(self) -> Optional[str]:
        return pulumi.get(self, "text_log_level")

    @property
    @pulumi.getter(name="textLogRetentionSize")
    def text_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "text_log_retention_size")

    @property
    @pulumi.getter(name="textLogRetentionTime")
    def text_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "text_log_retention_time")

    @property
    @pulumi.getter
    def timezone(self) -> Optional[str]:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="totalMemoryProfilerStep")
    def total_memory_profiler_step(self) -> Optional[int]:
        return pulumi.get(self, "total_memory_profiler_step")

    @property
    @pulumi.getter(name="traceLogEnabled")
    def trace_log_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "trace_log_enabled")

    @property
    @pulumi.getter(name="traceLogRetentionSize")
    def trace_log_retention_size(self) -> Optional[int]:
        return pulumi.get(self, "trace_log_retention_size")

    @property
    @pulumi.getter(name="traceLogRetentionTime")
    def trace_log_retention_time(self) -> Optional[int]:
        return pulumi.get(self, "trace_log_retention_time")

    @property
    @pulumi.getter(name="uncompressedCacheSize")
    def uncompressed_cache_size(self) -> Optional[int]:
        return pulumi.get(self, "uncompressed_cache_size")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigCompression(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minPartSize":
            suggest = "min_part_size"
        elif key == "minPartSizeRatio":
            suggest = "min_part_size_ratio"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigCompression. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigCompression.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigCompression.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 method: str,
                 min_part_size: int,
                 min_part_size_ratio: float,
                 level: Optional[int] = None):
        """
        :param str method: Method: Compression method. Two methods are available: LZ4 and zstd.
        :param int min_part_size: Min part size: Minimum size (in bytes) of a data part in a table. ClickHouse only applies the rule to tables with data parts greater than or equal to the Min part size value.
        :param float min_part_size_ratio: Min part size ratio: Minimum table part size to total table size ratio. ClickHouse only applies the rule to tables in which this ratio is greater than or equal to the Min part size ratio value.
        :param int level: Compression level for `ZSTD` method.
        """
        pulumi.set(__self__, "method", method)
        pulumi.set(__self__, "min_part_size", min_part_size)
        pulumi.set(__self__, "min_part_size_ratio", min_part_size_ratio)
        if level is not None:
            pulumi.set(__self__, "level", level)

    @property
    @pulumi.getter
    def method(self) -> str:
        """
        Method: Compression method. Two methods are available: LZ4 and zstd.
        """
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="minPartSize")
    def min_part_size(self) -> int:
        """
        Min part size: Minimum size (in bytes) of a data part in a table. ClickHouse only applies the rule to tables with data parts greater than or equal to the Min part size value.
        """
        return pulumi.get(self, "min_part_size")

    @property
    @pulumi.getter(name="minPartSizeRatio")
    def min_part_size_ratio(self) -> float:
        """
        Min part size ratio: Minimum table part size to total table size ratio. ClickHouse only applies the rule to tables in which this ratio is greater than or equal to the Min part size ratio value.
        """
        return pulumi.get(self, "min_part_size_ratio")

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        """
        Compression level for `ZSTD` method.
        """
        return pulumi.get(self, "level")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigGraphiteRollup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "pathColumnName":
            suggest = "path_column_name"
        elif key == "timeColumnName":
            suggest = "time_column_name"
        elif key == "valueColumnName":
            suggest = "value_column_name"
        elif key == "versionColumnName":
            suggest = "version_column_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigGraphiteRollup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigGraphiteRollup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigGraphiteRollup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 path_column_name: Optional[str] = None,
                 patterns: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern']] = None,
                 time_column_name: Optional[str] = None,
                 value_column_name: Optional[str] = None,
                 version_column_name: Optional[str] = None):
        """
        :param str name: Graphite rollup configuration name.
        :param str path_column_name: The name of the column storing the metric name (Graphite sensor). Default value: Path.
        :param Sequence['MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternArgs'] patterns: Set of thinning rules.
        :param str time_column_name: The name of the column storing the time of measuring the metric. Default value: Time.
        :param str value_column_name: The name of the column storing the value of the metric at the time set in time_column_name. Default value: Value.
        :param str version_column_name: The name of the column storing the version of the metric. Default value: Timestamp.
        """
        pulumi.set(__self__, "name", name)
        if path_column_name is not None:
            pulumi.set(__self__, "path_column_name", path_column_name)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)
        if time_column_name is not None:
            pulumi.set(__self__, "time_column_name", time_column_name)
        if value_column_name is not None:
            pulumi.set(__self__, "value_column_name", value_column_name)
        if version_column_name is not None:
            pulumi.set(__self__, "version_column_name", version_column_name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Graphite rollup configuration name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="pathColumnName")
    def path_column_name(self) -> Optional[str]:
        """
        The name of the column storing the metric name (Graphite sensor). Default value: Path.
        """
        return pulumi.get(self, "path_column_name")

    @property
    @pulumi.getter
    def patterns(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern']]:
        """
        Set of thinning rules.
        """
        return pulumi.get(self, "patterns")

    @property
    @pulumi.getter(name="timeColumnName")
    def time_column_name(self) -> Optional[str]:
        """
        The name of the column storing the time of measuring the metric. Default value: Time.
        """
        return pulumi.get(self, "time_column_name")

    @property
    @pulumi.getter(name="valueColumnName")
    def value_column_name(self) -> Optional[str]:
        """
        The name of the column storing the value of the metric at the time set in time_column_name. Default value: Value.
        """
        return pulumi.get(self, "value_column_name")

    @property
    @pulumi.getter(name="versionColumnName")
    def version_column_name(self) -> Optional[str]:
        """
        The name of the column storing the version of the metric. Default value: Timestamp.
        """
        return pulumi.get(self, "version_column_name")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPattern(dict):
    def __init__(__self__, *,
                 function: str,
                 regexp: Optional[str] = None,
                 retentions: Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention']] = None):
        """
        :param str function: Aggregation function name.
        :param str regexp: Regular expression that the metric name must match.
        :param Sequence['MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionArgs'] retentions: Retain parameters.
        """
        pulumi.set(__self__, "function", function)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)
        if retentions is not None:
            pulumi.set(__self__, "retentions", retentions)

    @property
    @pulumi.getter
    def function(self) -> str:
        """
        Aggregation function name.
        """
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        """
        Regular expression that the metric name must match.
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def retentions(self) -> Optional[Sequence['outputs.MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention']]:
        """
        Retain parameters.
        """
        return pulumi.get(self, "retentions")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetention(dict):
    def __init__(__self__, *,
                 age: int,
                 precision: int):
        """
        :param int age: Minimum data age in seconds.
        :param int precision: Accuracy of determining the age of the data in seconds.
        """
        pulumi.set(__self__, "age", age)
        pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def age(self) -> int:
        """
        Minimum data age in seconds.
        """
        return pulumi.get(self, "age")

    @property
    @pulumi.getter
    def precision(self) -> int:
        """
        Accuracy of determining the age of the data in seconds.
        """
        return pulumi.get(self, "precision")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigKafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoOffsetReset":
            suggest = "auto_offset_reset"
        elif key == "enableSslCertificateVerification":
            suggest = "enable_ssl_certificate_verification"
        elif key == "maxPollIntervalMs":
            suggest = "max_poll_interval_ms"
        elif key == "saslMechanism":
            suggest = "sasl_mechanism"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"
        elif key == "securityProtocol":
            suggest = "security_protocol"
        elif key == "sessionTimeoutMs":
            suggest = "session_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigKafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigKafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigKafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_offset_reset: Optional[str] = None,
                 debug: Optional[str] = None,
                 enable_ssl_certificate_verification: Optional[bool] = None,
                 max_poll_interval_ms: Optional[int] = None,
                 sasl_mechanism: Optional[str] = None,
                 sasl_password: Optional[str] = None,
                 sasl_username: Optional[str] = None,
                 security_protocol: Optional[str] = None,
                 session_timeout_ms: Optional[int] = None):
        """
        :param str auto_offset_reset: Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'.
        :param str debug: A comma-separated list of debug contexts to enable.
        :param bool enable_ssl_certificate_verification: enable verification of SSL certificates.
        :param int max_poll_interval_ms: Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        :param str sasl_mechanism: SASL mechanism used in kafka authentication.
        :param str sasl_password: User password on kafka server.
        :param str sasl_username: Username on kafka server.
        :param str security_protocol: Security protocol used to connect to kafka server.
        :param int session_timeout_ms: Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        """
        if auto_offset_reset is not None:
            pulumi.set(__self__, "auto_offset_reset", auto_offset_reset)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if enable_ssl_certificate_verification is not None:
            pulumi.set(__self__, "enable_ssl_certificate_verification", enable_ssl_certificate_verification)
        if max_poll_interval_ms is not None:
            pulumi.set(__self__, "max_poll_interval_ms", max_poll_interval_ms)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="autoOffsetReset")
    def auto_offset_reset(self) -> Optional[str]:
        """
        Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'.
        """
        return pulumi.get(self, "auto_offset_reset")

    @property
    @pulumi.getter
    def debug(self) -> Optional[str]:
        """
        A comma-separated list of debug contexts to enable.
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="enableSslCertificateVerification")
    def enable_ssl_certificate_verification(self) -> Optional[bool]:
        """
        enable verification of SSL certificates.
        """
        return pulumi.get(self, "enable_ssl_certificate_verification")

    @property
    @pulumi.getter(name="maxPollIntervalMs")
    def max_poll_interval_ms(self) -> Optional[int]:
        """
        Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        """
        return pulumi.get(self, "max_poll_interval_ms")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        """
        SASL mechanism used in kafka authentication.
        """
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        """
        User password on kafka server.
        """
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[str]:
        """
        Username on kafka server.
        """
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        """
        Security protocol used to connect to kafka server.
        """
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[int]:
        """
        Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        """
        return pulumi.get(self, "session_timeout_ms")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigKafkaTopic(dict):
    def __init__(__self__, *,
                 name: str,
                 settings: Optional['outputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettings'] = None):
        """
        :param str name: Kafka topic name.
        :param 'MdbClickhouseClusterClickhouseConfigKafkaTopicSettingsArgs' settings: Kafka connection settngs sanem as `kafka` block.
        """
        pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Kafka topic name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.MdbClickhouseClusterClickhouseConfigKafkaTopicSettings']:
        """
        Kafka connection settngs sanem as `kafka` block.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigKafkaTopicSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoOffsetReset":
            suggest = "auto_offset_reset"
        elif key == "enableSslCertificateVerification":
            suggest = "enable_ssl_certificate_verification"
        elif key == "maxPollIntervalMs":
            suggest = "max_poll_interval_ms"
        elif key == "saslMechanism":
            suggest = "sasl_mechanism"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"
        elif key == "securityProtocol":
            suggest = "security_protocol"
        elif key == "sessionTimeoutMs":
            suggest = "session_timeout_ms"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigKafkaTopicSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigKafkaTopicSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigKafkaTopicSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_offset_reset: Optional[str] = None,
                 debug: Optional[str] = None,
                 enable_ssl_certificate_verification: Optional[bool] = None,
                 max_poll_interval_ms: Optional[int] = None,
                 sasl_mechanism: Optional[str] = None,
                 sasl_password: Optional[str] = None,
                 sasl_username: Optional[str] = None,
                 security_protocol: Optional[str] = None,
                 session_timeout_ms: Optional[int] = None):
        """
        :param str auto_offset_reset: Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'.
        :param str debug: A comma-separated list of debug contexts to enable.
        :param bool enable_ssl_certificate_verification: enable verification of SSL certificates.
        :param int max_poll_interval_ms: Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        :param str sasl_mechanism: SASL mechanism used in kafka authentication.
        :param str sasl_password: User password on kafka server.
        :param str sasl_username: Username on kafka server.
        :param str security_protocol: Security protocol used to connect to kafka server.
        :param int session_timeout_ms: Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        """
        if auto_offset_reset is not None:
            pulumi.set(__self__, "auto_offset_reset", auto_offset_reset)
        if debug is not None:
            pulumi.set(__self__, "debug", debug)
        if enable_ssl_certificate_verification is not None:
            pulumi.set(__self__, "enable_ssl_certificate_verification", enable_ssl_certificate_verification)
        if max_poll_interval_ms is not None:
            pulumi.set(__self__, "max_poll_interval_ms", max_poll_interval_ms)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)
        if session_timeout_ms is not None:
            pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="autoOffsetReset")
    def auto_offset_reset(self) -> Optional[str]:
        """
        Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message->err'.
        """
        return pulumi.get(self, "auto_offset_reset")

    @property
    @pulumi.getter
    def debug(self) -> Optional[str]:
        """
        A comma-separated list of debug contexts to enable.
        """
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="enableSslCertificateVerification")
    def enable_ssl_certificate_verification(self) -> Optional[bool]:
        """
        enable verification of SSL certificates.
        """
        return pulumi.get(self, "enable_ssl_certificate_verification")

    @property
    @pulumi.getter(name="maxPollIntervalMs")
    def max_poll_interval_ms(self) -> Optional[int]:
        """
        Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        """
        return pulumi.get(self, "max_poll_interval_ms")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        """
        SASL mechanism used in kafka authentication.
        """
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        """
        User password on kafka server.
        """
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[str]:
        """
        Username on kafka server.
        """
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        """
        Security protocol used to connect to kafka server.
        """
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> Optional[int]:
        """
        Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        """
        return pulumi.get(self, "session_timeout_ms")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigMergeTree(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "checkSampleColumnIsCorrect":
            suggest = "check_sample_column_is_correct"
        elif key == "cleanupDelayPeriod":
            suggest = "cleanup_delay_period"
        elif key == "maxAvgPartSizeForTooManyParts":
            suggest = "max_avg_part_size_for_too_many_parts"
        elif key == "maxBytesToMergeAtMinSpaceInPool":
            suggest = "max_bytes_to_merge_at_min_space_in_pool"
        elif key == "maxCleanupDelayPeriod":
            suggest = "max_cleanup_delay_period"
        elif key == "maxMergeSelectingSleepMs":
            suggest = "max_merge_selecting_sleep_ms"
        elif key == "maxNumberOfMergesWithTtlInPool":
            suggest = "max_number_of_merges_with_ttl_in_pool"
        elif key == "maxPartsInTotal":
            suggest = "max_parts_in_total"
        elif key == "maxReplicatedMergesInQueue":
            suggest = "max_replicated_merges_in_queue"
        elif key == "mergeMaxBlockSize":
            suggest = "merge_max_block_size"
        elif key == "mergeSelectingSleepMs":
            suggest = "merge_selecting_sleep_ms"
        elif key == "mergeWithRecompressionTtlTimeout":
            suggest = "merge_with_recompression_ttl_timeout"
        elif key == "mergeWithTtlTimeout":
            suggest = "merge_with_ttl_timeout"
        elif key == "minAgeToForceMergeOnPartitionOnly":
            suggest = "min_age_to_force_merge_on_partition_only"
        elif key == "minAgeToForceMergeSeconds":
            suggest = "min_age_to_force_merge_seconds"
        elif key == "minBytesForWidePart":
            suggest = "min_bytes_for_wide_part"
        elif key == "minRowsForWidePart":
            suggest = "min_rows_for_wide_part"
        elif key == "numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge":
            suggest = "number_of_free_entries_in_pool_to_lower_max_size_of_merge"
        elif key == "partsToDelayInsert":
            suggest = "parts_to_delay_insert"
        elif key == "partsToThrowInsert":
            suggest = "parts_to_throw_insert"
        elif key == "replicatedDeduplicationWindow":
            suggest = "replicated_deduplication_window"
        elif key == "replicatedDeduplicationWindowSeconds":
            suggest = "replicated_deduplication_window_seconds"
        elif key == "ttlOnlyDropParts":
            suggest = "ttl_only_drop_parts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigMergeTree. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigMergeTree.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigMergeTree.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 check_sample_column_is_correct: Optional[bool] = None,
                 cleanup_delay_period: Optional[int] = None,
                 max_avg_part_size_for_too_many_parts: Optional[int] = None,
                 max_bytes_to_merge_at_min_space_in_pool: Optional[int] = None,
                 max_cleanup_delay_period: Optional[int] = None,
                 max_merge_selecting_sleep_ms: Optional[int] = None,
                 max_number_of_merges_with_ttl_in_pool: Optional[int] = None,
                 max_parts_in_total: Optional[int] = None,
                 max_replicated_merges_in_queue: Optional[int] = None,
                 merge_max_block_size: Optional[int] = None,
                 merge_selecting_sleep_ms: Optional[int] = None,
                 merge_with_recompression_ttl_timeout: Optional[int] = None,
                 merge_with_ttl_timeout: Optional[int] = None,
                 min_age_to_force_merge_on_partition_only: Optional[bool] = None,
                 min_age_to_force_merge_seconds: Optional[int] = None,
                 min_bytes_for_wide_part: Optional[int] = None,
                 min_rows_for_wide_part: Optional[int] = None,
                 number_of_free_entries_in_pool_to_lower_max_size_of_merge: Optional[int] = None,
                 parts_to_delay_insert: Optional[int] = None,
                 parts_to_throw_insert: Optional[int] = None,
                 replicated_deduplication_window: Optional[int] = None,
                 replicated_deduplication_window_seconds: Optional[int] = None,
                 ttl_only_drop_parts: Optional[bool] = None):
        """
        :param bool check_sample_column_is_correct: Enables the check at table creation, that the data type of a column for sampling or sampling expression is correct. The data type must be one of unsigned integer types: UInt8, UInt16, UInt32, UInt64. Default value: true.
        :param int cleanup_delay_period: Minimum period to clean old queue logs, blocks hashes and parts.
        :param int max_avg_part_size_for_too_many_parts: The `too many parts` check according to `parts_to_delay_insert` and `parts_to_throw_insert` will be active only if the average part size (in the relevant partition) is not larger than the specified threshold. If it is larger than the specified threshold, the INSERTs will be neither delayed or rejected. This allows to have hundreds of terabytes in a single table on a single server if the parts are successfully merged to larger parts. This does not affect the thresholds on inactive parts or total parts.
        :param int max_bytes_to_merge_at_min_space_in_pool: Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.
        :param int max_cleanup_delay_period: Maximum period to clean old queue logs, blocks hashes and parts. Default value: 300 seconds.
        :param int max_merge_selecting_sleep_ms: Maximum sleep time for merge selecting, a lower setting will trigger selecting tasks in background_schedule_pool frequently which result in large amount of requests to zookeeper in large-scale clusters. Default value: 60000 milliseconds (60 seconds).
        :param int max_number_of_merges_with_ttl_in_pool: When there is more than specified number of merges with TTL entries in pool, do not assign new merge with TTL.
        :param int max_parts_in_total: Maximum number of parts in all partitions.
        :param int max_replicated_merges_in_queue: Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.
        :param int merge_max_block_size: The number of rows that are read from the merged parts into memory. Default value: 8192.
        :param int merge_selecting_sleep_ms: Sleep time for merge selecting when no part is selected. A lower setting triggers selecting tasks in background_schedule_pool frequently, which results in a large number of requests to ClickHouse Keeper in large-scale clusters.
        :param int merge_with_recompression_ttl_timeout: Minimum delay in seconds before repeating a merge with recompression TTL. Default value: 14400 seconds (4 hours).
        :param int merge_with_ttl_timeout: Minimum delay in seconds before repeating a merge with delete TTL. Default value: 14400 seconds (4 hours).
        :param bool min_age_to_force_merge_on_partition_only: Whether min_age_to_force_merge_seconds should be applied only on the entire partition and not on subset.
        :param int min_age_to_force_merge_seconds: Merge parts if every part in the range is older than the value of `min_age_to_force_merge_seconds`.
        :param int min_bytes_for_wide_part: Minimum number of bytes in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        :param int min_rows_for_wide_part: Minimum number of rows in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        :param int number_of_free_entries_in_pool_to_lower_max_size_of_merge: Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.
        :param int parts_to_delay_insert: Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table.
        :param int parts_to_throw_insert: Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.
        :param int replicated_deduplication_window: Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).
        :param int replicated_deduplication_window_seconds: Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).
        :param bool ttl_only_drop_parts: Enables or disables complete dropping of data parts where all rows are expired in MergeTree tables.
        """
        if check_sample_column_is_correct is not None:
            pulumi.set(__self__, "check_sample_column_is_correct", check_sample_column_is_correct)
        if cleanup_delay_period is not None:
            pulumi.set(__self__, "cleanup_delay_period", cleanup_delay_period)
        if max_avg_part_size_for_too_many_parts is not None:
            pulumi.set(__self__, "max_avg_part_size_for_too_many_parts", max_avg_part_size_for_too_many_parts)
        if max_bytes_to_merge_at_min_space_in_pool is not None:
            pulumi.set(__self__, "max_bytes_to_merge_at_min_space_in_pool", max_bytes_to_merge_at_min_space_in_pool)
        if max_cleanup_delay_period is not None:
            pulumi.set(__self__, "max_cleanup_delay_period", max_cleanup_delay_period)
        if max_merge_selecting_sleep_ms is not None:
            pulumi.set(__self__, "max_merge_selecting_sleep_ms", max_merge_selecting_sleep_ms)
        if max_number_of_merges_with_ttl_in_pool is not None:
            pulumi.set(__self__, "max_number_of_merges_with_ttl_in_pool", max_number_of_merges_with_ttl_in_pool)
        if max_parts_in_total is not None:
            pulumi.set(__self__, "max_parts_in_total", max_parts_in_total)
        if max_replicated_merges_in_queue is not None:
            pulumi.set(__self__, "max_replicated_merges_in_queue", max_replicated_merges_in_queue)
        if merge_max_block_size is not None:
            pulumi.set(__self__, "merge_max_block_size", merge_max_block_size)
        if merge_selecting_sleep_ms is not None:
            pulumi.set(__self__, "merge_selecting_sleep_ms", merge_selecting_sleep_ms)
        if merge_with_recompression_ttl_timeout is not None:
            pulumi.set(__self__, "merge_with_recompression_ttl_timeout", merge_with_recompression_ttl_timeout)
        if merge_with_ttl_timeout is not None:
            pulumi.set(__self__, "merge_with_ttl_timeout", merge_with_ttl_timeout)
        if min_age_to_force_merge_on_partition_only is not None:
            pulumi.set(__self__, "min_age_to_force_merge_on_partition_only", min_age_to_force_merge_on_partition_only)
        if min_age_to_force_merge_seconds is not None:
            pulumi.set(__self__, "min_age_to_force_merge_seconds", min_age_to_force_merge_seconds)
        if min_bytes_for_wide_part is not None:
            pulumi.set(__self__, "min_bytes_for_wide_part", min_bytes_for_wide_part)
        if min_rows_for_wide_part is not None:
            pulumi.set(__self__, "min_rows_for_wide_part", min_rows_for_wide_part)
        if number_of_free_entries_in_pool_to_lower_max_size_of_merge is not None:
            pulumi.set(__self__, "number_of_free_entries_in_pool_to_lower_max_size_of_merge", number_of_free_entries_in_pool_to_lower_max_size_of_merge)
        if parts_to_delay_insert is not None:
            pulumi.set(__self__, "parts_to_delay_insert", parts_to_delay_insert)
        if parts_to_throw_insert is not None:
            pulumi.set(__self__, "parts_to_throw_insert", parts_to_throw_insert)
        if replicated_deduplication_window is not None:
            pulumi.set(__self__, "replicated_deduplication_window", replicated_deduplication_window)
        if replicated_deduplication_window_seconds is not None:
            pulumi.set(__self__, "replicated_deduplication_window_seconds", replicated_deduplication_window_seconds)
        if ttl_only_drop_parts is not None:
            pulumi.set(__self__, "ttl_only_drop_parts", ttl_only_drop_parts)

    @property
    @pulumi.getter(name="checkSampleColumnIsCorrect")
    def check_sample_column_is_correct(self) -> Optional[bool]:
        """
        Enables the check at table creation, that the data type of a column for sampling or sampling expression is correct. The data type must be one of unsigned integer types: UInt8, UInt16, UInt32, UInt64. Default value: true.
        """
        return pulumi.get(self, "check_sample_column_is_correct")

    @property
    @pulumi.getter(name="cleanupDelayPeriod")
    def cleanup_delay_period(self) -> Optional[int]:
        """
        Minimum period to clean old queue logs, blocks hashes and parts.
        """
        return pulumi.get(self, "cleanup_delay_period")

    @property
    @pulumi.getter(name="maxAvgPartSizeForTooManyParts")
    def max_avg_part_size_for_too_many_parts(self) -> Optional[int]:
        """
        The `too many parts` check according to `parts_to_delay_insert` and `parts_to_throw_insert` will be active only if the average part size (in the relevant partition) is not larger than the specified threshold. If it is larger than the specified threshold, the INSERTs will be neither delayed or rejected. This allows to have hundreds of terabytes in a single table on a single server if the parts are successfully merged to larger parts. This does not affect the thresholds on inactive parts or total parts.
        """
        return pulumi.get(self, "max_avg_part_size_for_too_many_parts")

    @property
    @pulumi.getter(name="maxBytesToMergeAtMinSpaceInPool")
    def max_bytes_to_merge_at_min_space_in_pool(self) -> Optional[int]:
        """
        Max bytes to merge at min space in pool: Maximum total size of a data part to merge when the number of free threads in the background pool is minimum.
        """
        return pulumi.get(self, "max_bytes_to_merge_at_min_space_in_pool")

    @property
    @pulumi.getter(name="maxCleanupDelayPeriod")
    def max_cleanup_delay_period(self) -> Optional[int]:
        """
        Maximum period to clean old queue logs, blocks hashes and parts. Default value: 300 seconds.
        """
        return pulumi.get(self, "max_cleanup_delay_period")

    @property
    @pulumi.getter(name="maxMergeSelectingSleepMs")
    def max_merge_selecting_sleep_ms(self) -> Optional[int]:
        """
        Maximum sleep time for merge selecting, a lower setting will trigger selecting tasks in background_schedule_pool frequently which result in large amount of requests to zookeeper in large-scale clusters. Default value: 60000 milliseconds (60 seconds).
        """
        return pulumi.get(self, "max_merge_selecting_sleep_ms")

    @property
    @pulumi.getter(name="maxNumberOfMergesWithTtlInPool")
    def max_number_of_merges_with_ttl_in_pool(self) -> Optional[int]:
        """
        When there is more than specified number of merges with TTL entries in pool, do not assign new merge with TTL.
        """
        return pulumi.get(self, "max_number_of_merges_with_ttl_in_pool")

    @property
    @pulumi.getter(name="maxPartsInTotal")
    def max_parts_in_total(self) -> Optional[int]:
        """
        Maximum number of parts in all partitions.
        """
        return pulumi.get(self, "max_parts_in_total")

    @property
    @pulumi.getter(name="maxReplicatedMergesInQueue")
    def max_replicated_merges_in_queue(self) -> Optional[int]:
        """
        Max replicated merges in queue: Maximum number of merge tasks that can be in the ReplicatedMergeTree queue at the same time.
        """
        return pulumi.get(self, "max_replicated_merges_in_queue")

    @property
    @pulumi.getter(name="mergeMaxBlockSize")
    def merge_max_block_size(self) -> Optional[int]:
        """
        The number of rows that are read from the merged parts into memory. Default value: 8192.
        """
        return pulumi.get(self, "merge_max_block_size")

    @property
    @pulumi.getter(name="mergeSelectingSleepMs")
    def merge_selecting_sleep_ms(self) -> Optional[int]:
        """
        Sleep time for merge selecting when no part is selected. A lower setting triggers selecting tasks in background_schedule_pool frequently, which results in a large number of requests to ClickHouse Keeper in large-scale clusters.
        """
        return pulumi.get(self, "merge_selecting_sleep_ms")

    @property
    @pulumi.getter(name="mergeWithRecompressionTtlTimeout")
    def merge_with_recompression_ttl_timeout(self) -> Optional[int]:
        """
        Minimum delay in seconds before repeating a merge with recompression TTL. Default value: 14400 seconds (4 hours).
        """
        return pulumi.get(self, "merge_with_recompression_ttl_timeout")

    @property
    @pulumi.getter(name="mergeWithTtlTimeout")
    def merge_with_ttl_timeout(self) -> Optional[int]:
        """
        Minimum delay in seconds before repeating a merge with delete TTL. Default value: 14400 seconds (4 hours).
        """
        return pulumi.get(self, "merge_with_ttl_timeout")

    @property
    @pulumi.getter(name="minAgeToForceMergeOnPartitionOnly")
    def min_age_to_force_merge_on_partition_only(self) -> Optional[bool]:
        """
        Whether min_age_to_force_merge_seconds should be applied only on the entire partition and not on subset.
        """
        return pulumi.get(self, "min_age_to_force_merge_on_partition_only")

    @property
    @pulumi.getter(name="minAgeToForceMergeSeconds")
    def min_age_to_force_merge_seconds(self) -> Optional[int]:
        """
        Merge parts if every part in the range is older than the value of `min_age_to_force_merge_seconds`.
        """
        return pulumi.get(self, "min_age_to_force_merge_seconds")

    @property
    @pulumi.getter(name="minBytesForWidePart")
    def min_bytes_for_wide_part(self) -> Optional[int]:
        """
        Minimum number of bytes in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        """
        return pulumi.get(self, "min_bytes_for_wide_part")

    @property
    @pulumi.getter(name="minRowsForWidePart")
    def min_rows_for_wide_part(self) -> Optional[int]:
        """
        Minimum number of rows in a data part that can be stored in Wide format. You can set one, both or none of these settings.
        """
        return pulumi.get(self, "min_rows_for_wide_part")

    @property
    @pulumi.getter(name="numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge")
    def number_of_free_entries_in_pool_to_lower_max_size_of_merge(self) -> Optional[int]:
        """
        Number of free entries in pool to lower max size of merge: Threshold value of free entries in the pool. If the number of entries in the pool falls below this value, ClickHouse reduces the maximum size of a data part to merge. This helps handle small merges faster, rather than filling the pool with lengthy merges.
        """
        return pulumi.get(self, "number_of_free_entries_in_pool_to_lower_max_size_of_merge")

    @property
    @pulumi.getter(name="partsToDelayInsert")
    def parts_to_delay_insert(self) -> Optional[int]:
        """
        Parts to delay insert: Number of active data parts in a table, on exceeding which ClickHouse starts artificially reduce the rate of inserting data into the table.
        """
        return pulumi.get(self, "parts_to_delay_insert")

    @property
    @pulumi.getter(name="partsToThrowInsert")
    def parts_to_throw_insert(self) -> Optional[int]:
        """
        Parts to throw insert: Threshold value of active data parts in a table, on exceeding which ClickHouse throws the 'Too many parts ...' exception.
        """
        return pulumi.get(self, "parts_to_throw_insert")

    @property
    @pulumi.getter(name="replicatedDeduplicationWindow")
    def replicated_deduplication_window(self) -> Optional[int]:
        """
        Replicated deduplication window: Number of recent hash blocks that ZooKeeper will store (the old ones will be deleted).
        """
        return pulumi.get(self, "replicated_deduplication_window")

    @property
    @pulumi.getter(name="replicatedDeduplicationWindowSeconds")
    def replicated_deduplication_window_seconds(self) -> Optional[int]:
        """
        Replicated deduplication window seconds: Time during which ZooKeeper stores the hash blocks (the old ones wil be deleted).
        """
        return pulumi.get(self, "replicated_deduplication_window_seconds")

    @property
    @pulumi.getter(name="ttlOnlyDropParts")
    def ttl_only_drop_parts(self) -> Optional[bool]:
        """
        Enables or disables complete dropping of data parts where all rows are expired in MergeTree tables.
        """
        return pulumi.get(self, "ttl_only_drop_parts")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigQueryCache(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxEntries":
            suggest = "max_entries"
        elif key == "maxEntrySizeInBytes":
            suggest = "max_entry_size_in_bytes"
        elif key == "maxEntrySizeInRows":
            suggest = "max_entry_size_in_rows"
        elif key == "maxSizeInBytes":
            suggest = "max_size_in_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseConfigQueryCache. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseConfigQueryCache.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseConfigQueryCache.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_entries: Optional[int] = None,
                 max_entry_size_in_bytes: Optional[int] = None,
                 max_entry_size_in_rows: Optional[int] = None,
                 max_size_in_bytes: Optional[int] = None):
        """
        :param int max_entries: The maximum number of SELECT query results stored in the cache. Default value: 1024.
        :param int max_entry_size_in_bytes: The maximum size in bytes SELECT query results may have to be saved in the cache. Default value: 1048576 (1 MiB).
        :param int max_entry_size_in_rows: The maximum number of rows SELECT query results may have to be saved in the cache. Default value: 30000000 (30 mil).
        :param int max_size_in_bytes: The maximum cache size in bytes. 0 means the query cache is disabled. Default value: 1073741824 (1 GiB).
        """
        if max_entries is not None:
            pulumi.set(__self__, "max_entries", max_entries)
        if max_entry_size_in_bytes is not None:
            pulumi.set(__self__, "max_entry_size_in_bytes", max_entry_size_in_bytes)
        if max_entry_size_in_rows is not None:
            pulumi.set(__self__, "max_entry_size_in_rows", max_entry_size_in_rows)
        if max_size_in_bytes is not None:
            pulumi.set(__self__, "max_size_in_bytes", max_size_in_bytes)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> Optional[int]:
        """
        The maximum number of SELECT query results stored in the cache. Default value: 1024.
        """
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxEntrySizeInBytes")
    def max_entry_size_in_bytes(self) -> Optional[int]:
        """
        The maximum size in bytes SELECT query results may have to be saved in the cache. Default value: 1048576 (1 MiB).
        """
        return pulumi.get(self, "max_entry_size_in_bytes")

    @property
    @pulumi.getter(name="maxEntrySizeInRows")
    def max_entry_size_in_rows(self) -> Optional[int]:
        """
        The maximum number of rows SELECT query results may have to be saved in the cache. Default value: 30000000 (30 mil).
        """
        return pulumi.get(self, "max_entry_size_in_rows")

    @property
    @pulumi.getter(name="maxSizeInBytes")
    def max_size_in_bytes(self) -> Optional[int]:
        """
        The maximum cache size in bytes. 0 means the query cache is disabled. Default value: 1073741824 (1 GiB).
        """
        return pulumi.get(self, "max_size_in_bytes")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigQueryMaskingRule(dict):
    def __init__(__self__, *,
                 regexp: str,
                 name: Optional[str] = None,
                 replace: Optional[str] = None):
        """
        :param str regexp: RE2 compatible regular expression.
        :param str name: Name for the rule.
        :param str replace: Substitution string for sensitive data. Default value: six asterisks.
        """
        pulumi.set(__self__, "regexp", regexp)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if replace is not None:
            pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def regexp(self) -> str:
        """
        RE2 compatible regular expression.
        """
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name for the rule.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def replace(self) -> Optional[str]:
        """
        Substitution string for sensitive data. Default value: six asterisks.
        """
        return pulumi.get(self, "replace")


@pulumi.output_type
class MdbClickhouseClusterClickhouseConfigRabbitmq(dict):
    def __init__(__self__, *,
                 password: Optional[str] = None,
                 username: Optional[str] = None,
                 vhost: Optional[str] = None):
        """
        :param str password: RabbitMQ user password.
        :param str username: RabbitMQ username.
        :param str vhost: RabbitMQ vhost. Default: '\\'.
        """
        if password is not None:
            pulumi.set(__self__, "password", password)
        if username is not None:
            pulumi.set(__self__, "username", username)
        if vhost is not None:
            pulumi.set(__self__, "vhost", vhost)

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        RabbitMQ user password.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        RabbitMQ username.
        """
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vhost(self) -> Optional[str]:
        """
        RabbitMQ vhost. Default: '\\'.
        """
        return pulumi.get(self, "vhost")


@pulumi.output_type
class MdbClickhouseClusterClickhouseResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterClickhouseResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterClickhouseResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterClickhouseResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of hosts.
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbClickhouseClusterCloudStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataCacheEnabled":
            suggest = "data_cache_enabled"
        elif key == "dataCacheMaxSize":
            suggest = "data_cache_max_size"
        elif key == "moveFactor":
            suggest = "move_factor"
        elif key == "preferNotToMerge":
            suggest = "prefer_not_to_merge"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterCloudStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterCloudStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterCloudStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 data_cache_enabled: Optional[bool] = None,
                 data_cache_max_size: Optional[int] = None,
                 move_factor: Optional[float] = None,
                 prefer_not_to_merge: Optional[bool] = None):
        """
        :param bool enabled: Whether to use Yandex Object Storage for storing ClickHouse data. Can be either `true` or `false`.
        :param bool data_cache_enabled: Enables temporary storage in the cluster repository of data requested from the object repository.
        :param int data_cache_max_size: Defines the maximum amount of memory (in bytes) allocated in the cluster storage for temporary storage of data requested from the object storage.
        :param float move_factor: Sets the minimum free space ratio in the cluster storage. If the free space is lower than this value, the data is transferred to Yandex Object Storage. Acceptable values are 0 to 1, inclusive.
        :param bool prefer_not_to_merge: Disables merging of data parts in `Yandex Object Storage`.
        """
        pulumi.set(__self__, "enabled", enabled)
        if data_cache_enabled is not None:
            pulumi.set(__self__, "data_cache_enabled", data_cache_enabled)
        if data_cache_max_size is not None:
            pulumi.set(__self__, "data_cache_max_size", data_cache_max_size)
        if move_factor is not None:
            pulumi.set(__self__, "move_factor", move_factor)
        if prefer_not_to_merge is not None:
            pulumi.set(__self__, "prefer_not_to_merge", prefer_not_to_merge)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Whether to use Yandex Object Storage for storing ClickHouse data. Can be either `true` or `false`.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="dataCacheEnabled")
    def data_cache_enabled(self) -> Optional[bool]:
        """
        Enables temporary storage in the cluster repository of data requested from the object repository.
        """
        return pulumi.get(self, "data_cache_enabled")

    @property
    @pulumi.getter(name="dataCacheMaxSize")
    def data_cache_max_size(self) -> Optional[int]:
        """
        Defines the maximum amount of memory (in bytes) allocated in the cluster storage for temporary storage of data requested from the object storage.
        """
        return pulumi.get(self, "data_cache_max_size")

    @property
    @pulumi.getter(name="moveFactor")
    def move_factor(self) -> Optional[float]:
        """
        Sets the minimum free space ratio in the cluster storage. If the free space is lower than this value, the data is transferred to Yandex Object Storage. Acceptable values are 0 to 1, inclusive.
        """
        return pulumi.get(self, "move_factor")

    @property
    @pulumi.getter(name="preferNotToMerge")
    def prefer_not_to_merge(self) -> Optional[bool]:
        """
        Disables merging of data parts in `Yandex Object Storage`.
        """
        return pulumi.get(self, "prefer_not_to_merge")


@pulumi.output_type
class MdbClickhouseClusterDatabase(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the database.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MdbClickhouseClusterFormatSchema(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 uri: str):
        """
        :param str name: The name of the format schema.
        :param str type: Type of the format schema.
        :param str uri: Format schema file URL. You can only use format schemas stored in Yandex Object Storage.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the format schema.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the format schema.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Format schema file URL. You can only use format schemas stored in Yandex Object Storage.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class MdbClickhouseClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "shardName":
            suggest = "shard_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 shard_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str type: The type of the host to be deployed. Can be either `CLICKHOUSE` or `ZOOKEEPER`.
        :param str zone: The availability zone where the ClickHouse host will be created.
               For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        :param bool assign_public_ip: Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.
        :param str fqdn: The fully qualified domain name of the host.
        :param str shard_name: The name of the shard to which the host belongs.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if shard_name is not None:
            pulumi.set(__self__, "shard_name", shard_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the host to be deployed. Can be either `CLICKHOUSE` or `ZOOKEEPER`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the ClickHouse host will be created.
        For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> Optional[str]:
        """
        The name of the shard to which the host belongs.
        """
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbClickhouseClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        :param int hour: Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbClickhouseClusterMlModel(dict):
    def __init__(__self__, *,
                 name: str,
                 type: str,
                 uri: str):
        """
        :param str name: The name of the ml model.
        :param str type: Type of the model.
        :param str uri: Model file URL. You can only use models stored in Yandex Object Storage.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the ml model.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the model.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> str:
        """
        Model file URL. You can only use models stored in Yandex Object Storage.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class MdbClickhouseClusterShard(dict):
    def __init__(__self__, *,
                 name: str,
                 resources: Optional['outputs.MdbClickhouseClusterShardResources'] = None,
                 weight: Optional[int] = None):
        """
        :param str name: The name of shard.
        :param 'MdbClickhouseClusterShardResourcesArgs' resources: Resources allocated to host of the shard. The resources specified for the shard takes precedence over the resources specified for the cluster. The structure is documented below.
        :param int weight: The weight of shard.
        """
        pulumi.set(__self__, "name", name)
        if resources is not None:
            pulumi.set(__self__, "resources", resources)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of shard.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.MdbClickhouseClusterShardResources']:
        """
        Resources allocated to host of the shard. The resources specified for the shard takes precedence over the resources specified for the cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        """
        The weight of shard.
        """
        return pulumi.get(self, "weight")


@pulumi.output_type
class MdbClickhouseClusterShardGroup(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "shardNames":
            suggest = "shard_names"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterShardGroup. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterShardGroup.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterShardGroup.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 shard_names: Sequence[str],
                 description: Optional[str] = None):
        """
        :param str name: The name of the shard group, used as cluster name in Distributed tables.
        :param Sequence[str] shard_names: List of shards names that belong to the shard group.
        :param str description: Description of the shard group.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "shard_names", shard_names)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the shard group, used as cluster name in Distributed tables.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shardNames")
    def shard_names(self) -> Sequence[str]:
        """
        List of shards names that belong to the shard group.
        """
        return pulumi.get(self, "shard_names")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the shard group.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class MdbClickhouseClusterShardResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterShardResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterShardResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterShardResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of hosts.
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbClickhouseClusterUser(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Optional[Sequence['outputs.MdbClickhouseClusterUserPermission']] = None,
                 quotas: Optional[Sequence['outputs.MdbClickhouseClusterUserQuota']] = None,
                 settings: Optional['outputs.MdbClickhouseClusterUserSettings'] = None):
        """
        :param str name: The name of the user.
        :param str password: The password of the user.
        :param Sequence['MdbClickhouseClusterUserPermissionArgs'] permissions: Set of permissions granted to the user. The structure is documented below.
        :param Sequence['MdbClickhouseClusterUserQuotaArgs'] quotas: Set of user quotas. The structure is documented below.
        :param 'MdbClickhouseClusterUserSettingsArgs' settings: Custom settings for user. The list is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if quotas is not None:
            pulumi.set(__self__, "quotas", quotas)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbClickhouseClusterUserPermission']]:
        """
        Set of permissions granted to the user. The structure is documented below.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def quotas(self) -> Optional[Sequence['outputs.MdbClickhouseClusterUserQuota']]:
        """
        Set of user quotas. The structure is documented below.
        """
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.MdbClickhouseClusterUserSettings']:
        """
        Custom settings for user. The list is documented below.
        """
        return pulumi.get(self, "settings")


@pulumi.output_type
class MdbClickhouseClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str):
        """
        :param str database_name: The name of the database that the permission grants access to.
        """
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class MdbClickhouseClusterUserQuota(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "intervalDuration":
            suggest = "interval_duration"
        elif key == "executionTime":
            suggest = "execution_time"
        elif key == "readRows":
            suggest = "read_rows"
        elif key == "resultRows":
            suggest = "result_rows"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterUserQuota. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterUserQuota.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterUserQuota.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 interval_duration: int,
                 errors: Optional[int] = None,
                 execution_time: Optional[int] = None,
                 queries: Optional[int] = None,
                 read_rows: Optional[int] = None,
                 result_rows: Optional[int] = None):
        """
        :param int interval_duration: Duration of interval for quota in milliseconds.
        :param int errors: The number of queries that threw exception.
        :param int execution_time: The total query execution time, in milliseconds (wall time).
        :param int queries: The total number of queries.
        :param int read_rows: The total number of source rows read from tables for running the query, on all remote servers.
        :param int result_rows: The total number of rows given as the result.
        """
        pulumi.set(__self__, "interval_duration", interval_duration)
        if errors is not None:
            pulumi.set(__self__, "errors", errors)
        if execution_time is not None:
            pulumi.set(__self__, "execution_time", execution_time)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if read_rows is not None:
            pulumi.set(__self__, "read_rows", read_rows)
        if result_rows is not None:
            pulumi.set(__self__, "result_rows", result_rows)

    @property
    @pulumi.getter(name="intervalDuration")
    def interval_duration(self) -> int:
        """
        Duration of interval for quota in milliseconds.
        """
        return pulumi.get(self, "interval_duration")

    @property
    @pulumi.getter
    def errors(self) -> Optional[int]:
        """
        The number of queries that threw exception.
        """
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="executionTime")
    def execution_time(self) -> Optional[int]:
        """
        The total query execution time, in milliseconds (wall time).
        """
        return pulumi.get(self, "execution_time")

    @property
    @pulumi.getter
    def queries(self) -> Optional[int]:
        """
        The total number of queries.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="readRows")
    def read_rows(self) -> Optional[int]:
        """
        The total number of source rows read from tables for running the query, on all remote servers.
        """
        return pulumi.get(self, "read_rows")

    @property
    @pulumi.getter(name="resultRows")
    def result_rows(self) -> Optional[int]:
        """
        The total number of rows given as the result.
        """
        return pulumi.get(self, "result_rows")


@pulumi.output_type
class MdbClickhouseClusterUserSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "addHttpCorsHeader":
            suggest = "add_http_cors_header"
        elif key == "allowDdl":
            suggest = "allow_ddl"
        elif key == "allowIntrospectionFunctions":
            suggest = "allow_introspection_functions"
        elif key == "allowSuspiciousLowCardinalityTypes":
            suggest = "allow_suspicious_low_cardinality_types"
        elif key == "asyncInsert":
            suggest = "async_insert"
        elif key == "asyncInsertBusyTimeout":
            suggest = "async_insert_busy_timeout"
        elif key == "asyncInsertMaxDataSize":
            suggest = "async_insert_max_data_size"
        elif key == "asyncInsertStaleTimeout":
            suggest = "async_insert_stale_timeout"
        elif key == "asyncInsertThreads":
            suggest = "async_insert_threads"
        elif key == "cancelHttpReadonlyQueriesOnClientClose":
            suggest = "cancel_http_readonly_queries_on_client_close"
        elif key == "compileExpressions":
            suggest = "compile_expressions"
        elif key == "connectTimeout":
            suggest = "connect_timeout"
        elif key == "connectTimeoutWithFailover":
            suggest = "connect_timeout_with_failover"
        elif key == "countDistinctImplementation":
            suggest = "count_distinct_implementation"
        elif key == "distinctOverflowMode":
            suggest = "distinct_overflow_mode"
        elif key == "distributedAggregationMemoryEfficient":
            suggest = "distributed_aggregation_memory_efficient"
        elif key == "distributedDdlTaskTimeout":
            suggest = "distributed_ddl_task_timeout"
        elif key == "distributedProductMode":
            suggest = "distributed_product_mode"
        elif key == "emptyResultForAggregationByEmptySet":
            suggest = "empty_result_for_aggregation_by_empty_set"
        elif key == "enableHttpCompression":
            suggest = "enable_http_compression"
        elif key == "fallbackToStaleReplicasForDistributedQueries":
            suggest = "fallback_to_stale_replicas_for_distributed_queries"
        elif key == "flattenNested":
            suggest = "flatten_nested"
        elif key == "forceIndexByDate":
            suggest = "force_index_by_date"
        elif key == "forcePrimaryKey":
            suggest = "force_primary_key"
        elif key == "groupByOverflowMode":
            suggest = "group_by_overflow_mode"
        elif key == "groupByTwoLevelThreshold":
            suggest = "group_by_two_level_threshold"
        elif key == "groupByTwoLevelThresholdBytes":
            suggest = "group_by_two_level_threshold_bytes"
        elif key == "hedgedConnectionTimeoutMs":
            suggest = "hedged_connection_timeout_ms"
        elif key == "httpConnectionTimeout":
            suggest = "http_connection_timeout"
        elif key == "httpHeadersProgressInterval":
            suggest = "http_headers_progress_interval"
        elif key == "httpReceiveTimeout":
            suggest = "http_receive_timeout"
        elif key == "httpSendTimeout":
            suggest = "http_send_timeout"
        elif key == "idleConnectionTimeout":
            suggest = "idle_connection_timeout"
        elif key == "inputFormatDefaultsForOmittedFields":
            suggest = "input_format_defaults_for_omitted_fields"
        elif key == "inputFormatImportNestedJson":
            suggest = "input_format_import_nested_json"
        elif key == "inputFormatParallelParsing":
            suggest = "input_format_parallel_parsing"
        elif key == "inputFormatValuesInterpretExpressions":
            suggest = "input_format_values_interpret_expressions"
        elif key == "insertKeeperMaxRetries":
            suggest = "insert_keeper_max_retries"
        elif key == "insertNullAsDefault":
            suggest = "insert_null_as_default"
        elif key == "insertQuorum":
            suggest = "insert_quorum"
        elif key == "insertQuorumTimeout":
            suggest = "insert_quorum_timeout"
        elif key == "joinOverflowMode":
            suggest = "join_overflow_mode"
        elif key == "joinUseNulls":
            suggest = "join_use_nulls"
        elif key == "joinedSubqueryRequiresAlias":
            suggest = "joined_subquery_requires_alias"
        elif key == "loadBalancing":
            suggest = "load_balancing"
        elif key == "localFilesystemReadMethod":
            suggest = "local_filesystem_read_method"
        elif key == "logQueryThreads":
            suggest = "log_query_threads"
        elif key == "lowCardinalityAllowInNativeFormat":
            suggest = "low_cardinality_allow_in_native_format"
        elif key == "maxAstDepth":
            suggest = "max_ast_depth"
        elif key == "maxAstElements":
            suggest = "max_ast_elements"
        elif key == "maxBlockSize":
            suggest = "max_block_size"
        elif key == "maxBytesBeforeExternalGroupBy":
            suggest = "max_bytes_before_external_group_by"
        elif key == "maxBytesBeforeExternalSort":
            suggest = "max_bytes_before_external_sort"
        elif key == "maxBytesInDistinct":
            suggest = "max_bytes_in_distinct"
        elif key == "maxBytesInJoin":
            suggest = "max_bytes_in_join"
        elif key == "maxBytesInSet":
            suggest = "max_bytes_in_set"
        elif key == "maxBytesToRead":
            suggest = "max_bytes_to_read"
        elif key == "maxBytesToSort":
            suggest = "max_bytes_to_sort"
        elif key == "maxBytesToTransfer":
            suggest = "max_bytes_to_transfer"
        elif key == "maxColumnsToRead":
            suggest = "max_columns_to_read"
        elif key == "maxConcurrentQueriesForUser":
            suggest = "max_concurrent_queries_for_user"
        elif key == "maxExecutionTime":
            suggest = "max_execution_time"
        elif key == "maxExpandedAstElements":
            suggest = "max_expanded_ast_elements"
        elif key == "maxFinalThreads":
            suggest = "max_final_threads"
        elif key == "maxHttpGetRedirects":
            suggest = "max_http_get_redirects"
        elif key == "maxInsertBlockSize":
            suggest = "max_insert_block_size"
        elif key == "maxInsertThreads":
            suggest = "max_insert_threads"
        elif key == "maxMemoryUsage":
            suggest = "max_memory_usage"
        elif key == "maxMemoryUsageForUser":
            suggest = "max_memory_usage_for_user"
        elif key == "maxNetworkBandwidth":
            suggest = "max_network_bandwidth"
        elif key == "maxNetworkBandwidthForUser":
            suggest = "max_network_bandwidth_for_user"
        elif key == "maxParserDepth":
            suggest = "max_parser_depth"
        elif key == "maxQuerySize":
            suggest = "max_query_size"
        elif key == "maxReadBufferSize":
            suggest = "max_read_buffer_size"
        elif key == "maxReplicaDelayForDistributedQueries":
            suggest = "max_replica_delay_for_distributed_queries"
        elif key == "maxResultBytes":
            suggest = "max_result_bytes"
        elif key == "maxResultRows":
            suggest = "max_result_rows"
        elif key == "maxRowsInDistinct":
            suggest = "max_rows_in_distinct"
        elif key == "maxRowsInJoin":
            suggest = "max_rows_in_join"
        elif key == "maxRowsInSet":
            suggest = "max_rows_in_set"
        elif key == "maxRowsToGroupBy":
            suggest = "max_rows_to_group_by"
        elif key == "maxRowsToRead":
            suggest = "max_rows_to_read"
        elif key == "maxRowsToSort":
            suggest = "max_rows_to_sort"
        elif key == "maxRowsToTransfer":
            suggest = "max_rows_to_transfer"
        elif key == "maxTemporaryColumns":
            suggest = "max_temporary_columns"
        elif key == "maxTemporaryDataOnDiskSizeForQuery":
            suggest = "max_temporary_data_on_disk_size_for_query"
        elif key == "maxTemporaryDataOnDiskSizeForUser":
            suggest = "max_temporary_data_on_disk_size_for_user"
        elif key == "maxTemporaryNonConstColumns":
            suggest = "max_temporary_non_const_columns"
        elif key == "maxThreads":
            suggest = "max_threads"
        elif key == "memoryOvercommitRatioDenominator":
            suggest = "memory_overcommit_ratio_denominator"
        elif key == "memoryOvercommitRatioDenominatorForUser":
            suggest = "memory_overcommit_ratio_denominator_for_user"
        elif key == "memoryProfilerSampleProbability":
            suggest = "memory_profiler_sample_probability"
        elif key == "memoryProfilerStep":
            suggest = "memory_profiler_step"
        elif key == "memoryUsageOvercommitMaxWaitMicroseconds":
            suggest = "memory_usage_overcommit_max_wait_microseconds"
        elif key == "mergeTreeMaxBytesToUseCache":
            suggest = "merge_tree_max_bytes_to_use_cache"
        elif key == "mergeTreeMaxRowsToUseCache":
            suggest = "merge_tree_max_rows_to_use_cache"
        elif key == "mergeTreeMinBytesForConcurrentRead":
            suggest = "merge_tree_min_bytes_for_concurrent_read"
        elif key == "mergeTreeMinRowsForConcurrentRead":
            suggest = "merge_tree_min_rows_for_concurrent_read"
        elif key == "minBytesToUseDirectIo":
            suggest = "min_bytes_to_use_direct_io"
        elif key == "minCountToCompile":
            suggest = "min_count_to_compile"
        elif key == "minCountToCompileExpression":
            suggest = "min_count_to_compile_expression"
        elif key == "minExecutionSpeed":
            suggest = "min_execution_speed"
        elif key == "minExecutionSpeedBytes":
            suggest = "min_execution_speed_bytes"
        elif key == "minInsertBlockSizeBytes":
            suggest = "min_insert_block_size_bytes"
        elif key == "minInsertBlockSizeRows":
            suggest = "min_insert_block_size_rows"
        elif key == "outputFormatJsonQuote64bitIntegers":
            suggest = "output_format_json_quote64bit_integers"
        elif key == "outputFormatJsonQuoteDenormals":
            suggest = "output_format_json_quote_denormals"
        elif key == "preferLocalhostReplica":
            suggest = "prefer_localhost_replica"
        elif key == "quotaMode":
            suggest = "quota_mode"
        elif key == "readOverflowMode":
            suggest = "read_overflow_mode"
        elif key == "receiveTimeout":
            suggest = "receive_timeout"
        elif key == "remoteFilesystemReadMethod":
            suggest = "remote_filesystem_read_method"
        elif key == "replicationAlterPartitionsSync":
            suggest = "replication_alter_partitions_sync"
        elif key == "resultOverflowMode":
            suggest = "result_overflow_mode"
        elif key == "selectSequentialConsistency":
            suggest = "select_sequential_consistency"
        elif key == "sendProgressInHttpHeaders":
            suggest = "send_progress_in_http_headers"
        elif key == "sendTimeout":
            suggest = "send_timeout"
        elif key == "setOverflowMode":
            suggest = "set_overflow_mode"
        elif key == "skipUnavailableShards":
            suggest = "skip_unavailable_shards"
        elif key == "sortOverflowMode":
            suggest = "sort_overflow_mode"
        elif key == "timeoutBeforeCheckingExecutionSpeed":
            suggest = "timeout_before_checking_execution_speed"
        elif key == "timeoutOverflowMode":
            suggest = "timeout_overflow_mode"
        elif key == "transferOverflowMode":
            suggest = "transfer_overflow_mode"
        elif key == "transformNullIn":
            suggest = "transform_null_in"
        elif key == "useHedgedRequests":
            suggest = "use_hedged_requests"
        elif key == "useUncompressedCache":
            suggest = "use_uncompressed_cache"
        elif key == "waitForAsyncInsert":
            suggest = "wait_for_async_insert"
        elif key == "waitForAsyncInsertTimeout":
            suggest = "wait_for_async_insert_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterUserSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterUserSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterUserSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 add_http_cors_header: Optional[bool] = None,
                 allow_ddl: Optional[bool] = None,
                 allow_introspection_functions: Optional[bool] = None,
                 allow_suspicious_low_cardinality_types: Optional[bool] = None,
                 async_insert: Optional[bool] = None,
                 async_insert_busy_timeout: Optional[int] = None,
                 async_insert_max_data_size: Optional[int] = None,
                 async_insert_stale_timeout: Optional[int] = None,
                 async_insert_threads: Optional[int] = None,
                 cancel_http_readonly_queries_on_client_close: Optional[bool] = None,
                 compile: Optional[bool] = None,
                 compile_expressions: Optional[bool] = None,
                 connect_timeout: Optional[int] = None,
                 connect_timeout_with_failover: Optional[int] = None,
                 count_distinct_implementation: Optional[str] = None,
                 distinct_overflow_mode: Optional[str] = None,
                 distributed_aggregation_memory_efficient: Optional[bool] = None,
                 distributed_ddl_task_timeout: Optional[int] = None,
                 distributed_product_mode: Optional[str] = None,
                 empty_result_for_aggregation_by_empty_set: Optional[bool] = None,
                 enable_http_compression: Optional[bool] = None,
                 fallback_to_stale_replicas_for_distributed_queries: Optional[bool] = None,
                 flatten_nested: Optional[bool] = None,
                 force_index_by_date: Optional[bool] = None,
                 force_primary_key: Optional[bool] = None,
                 group_by_overflow_mode: Optional[str] = None,
                 group_by_two_level_threshold: Optional[int] = None,
                 group_by_two_level_threshold_bytes: Optional[int] = None,
                 hedged_connection_timeout_ms: Optional[int] = None,
                 http_connection_timeout: Optional[int] = None,
                 http_headers_progress_interval: Optional[int] = None,
                 http_receive_timeout: Optional[int] = None,
                 http_send_timeout: Optional[int] = None,
                 idle_connection_timeout: Optional[int] = None,
                 input_format_defaults_for_omitted_fields: Optional[bool] = None,
                 input_format_import_nested_json: Optional[bool] = None,
                 input_format_parallel_parsing: Optional[bool] = None,
                 input_format_values_interpret_expressions: Optional[bool] = None,
                 insert_keeper_max_retries: Optional[int] = None,
                 insert_null_as_default: Optional[bool] = None,
                 insert_quorum: Optional[int] = None,
                 insert_quorum_timeout: Optional[int] = None,
                 join_overflow_mode: Optional[str] = None,
                 join_use_nulls: Optional[bool] = None,
                 joined_subquery_requires_alias: Optional[bool] = None,
                 load_balancing: Optional[str] = None,
                 local_filesystem_read_method: Optional[str] = None,
                 log_query_threads: Optional[bool] = None,
                 low_cardinality_allow_in_native_format: Optional[bool] = None,
                 max_ast_depth: Optional[int] = None,
                 max_ast_elements: Optional[int] = None,
                 max_block_size: Optional[int] = None,
                 max_bytes_before_external_group_by: Optional[int] = None,
                 max_bytes_before_external_sort: Optional[int] = None,
                 max_bytes_in_distinct: Optional[int] = None,
                 max_bytes_in_join: Optional[int] = None,
                 max_bytes_in_set: Optional[int] = None,
                 max_bytes_to_read: Optional[int] = None,
                 max_bytes_to_sort: Optional[int] = None,
                 max_bytes_to_transfer: Optional[int] = None,
                 max_columns_to_read: Optional[int] = None,
                 max_concurrent_queries_for_user: Optional[int] = None,
                 max_execution_time: Optional[int] = None,
                 max_expanded_ast_elements: Optional[int] = None,
                 max_final_threads: Optional[int] = None,
                 max_http_get_redirects: Optional[int] = None,
                 max_insert_block_size: Optional[int] = None,
                 max_insert_threads: Optional[int] = None,
                 max_memory_usage: Optional[int] = None,
                 max_memory_usage_for_user: Optional[int] = None,
                 max_network_bandwidth: Optional[int] = None,
                 max_network_bandwidth_for_user: Optional[int] = None,
                 max_parser_depth: Optional[int] = None,
                 max_query_size: Optional[int] = None,
                 max_read_buffer_size: Optional[int] = None,
                 max_replica_delay_for_distributed_queries: Optional[int] = None,
                 max_result_bytes: Optional[int] = None,
                 max_result_rows: Optional[int] = None,
                 max_rows_in_distinct: Optional[int] = None,
                 max_rows_in_join: Optional[int] = None,
                 max_rows_in_set: Optional[int] = None,
                 max_rows_to_group_by: Optional[int] = None,
                 max_rows_to_read: Optional[int] = None,
                 max_rows_to_sort: Optional[int] = None,
                 max_rows_to_transfer: Optional[int] = None,
                 max_temporary_columns: Optional[int] = None,
                 max_temporary_data_on_disk_size_for_query: Optional[int] = None,
                 max_temporary_data_on_disk_size_for_user: Optional[int] = None,
                 max_temporary_non_const_columns: Optional[int] = None,
                 max_threads: Optional[int] = None,
                 memory_overcommit_ratio_denominator: Optional[int] = None,
                 memory_overcommit_ratio_denominator_for_user: Optional[int] = None,
                 memory_profiler_sample_probability: Optional[float] = None,
                 memory_profiler_step: Optional[int] = None,
                 memory_usage_overcommit_max_wait_microseconds: Optional[int] = None,
                 merge_tree_max_bytes_to_use_cache: Optional[int] = None,
                 merge_tree_max_rows_to_use_cache: Optional[int] = None,
                 merge_tree_min_bytes_for_concurrent_read: Optional[int] = None,
                 merge_tree_min_rows_for_concurrent_read: Optional[int] = None,
                 min_bytes_to_use_direct_io: Optional[int] = None,
                 min_count_to_compile: Optional[int] = None,
                 min_count_to_compile_expression: Optional[int] = None,
                 min_execution_speed: Optional[int] = None,
                 min_execution_speed_bytes: Optional[int] = None,
                 min_insert_block_size_bytes: Optional[int] = None,
                 min_insert_block_size_rows: Optional[int] = None,
                 output_format_json_quote64bit_integers: Optional[bool] = None,
                 output_format_json_quote_denormals: Optional[bool] = None,
                 prefer_localhost_replica: Optional[bool] = None,
                 priority: Optional[int] = None,
                 quota_mode: Optional[str] = None,
                 read_overflow_mode: Optional[str] = None,
                 readonly: Optional[int] = None,
                 receive_timeout: Optional[int] = None,
                 remote_filesystem_read_method: Optional[str] = None,
                 replication_alter_partitions_sync: Optional[int] = None,
                 result_overflow_mode: Optional[str] = None,
                 select_sequential_consistency: Optional[bool] = None,
                 send_progress_in_http_headers: Optional[bool] = None,
                 send_timeout: Optional[int] = None,
                 set_overflow_mode: Optional[str] = None,
                 skip_unavailable_shards: Optional[bool] = None,
                 sort_overflow_mode: Optional[str] = None,
                 timeout_before_checking_execution_speed: Optional[int] = None,
                 timeout_overflow_mode: Optional[str] = None,
                 transfer_overflow_mode: Optional[str] = None,
                 transform_null_in: Optional[bool] = None,
                 use_hedged_requests: Optional[bool] = None,
                 use_uncompressed_cache: Optional[bool] = None,
                 wait_for_async_insert: Optional[bool] = None,
                 wait_for_async_insert_timeout: Optional[int] = None):
        """
        :param bool add_http_cors_header: Include CORS headers in HTTP responces.
        :param bool allow_ddl: Allows or denies DDL queries.
        :param bool allow_introspection_functions: Enables introspections functions for query profiling.
        :param bool allow_suspicious_low_cardinality_types: Allows specifying LowCardinality modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
        :param bool async_insert: Enables asynchronous inserts. Disabled by default.
        :param int async_insert_busy_timeout: The maximum timeout in milliseconds since the first INSERT query before inserting collected data. If the parameter is set to 0, the timeout is disabled. Default value: 200.
        :param int async_insert_max_data_size: The maximum size of the unparsed data in bytes collected per query before being inserted. If the parameter is set to 0, asynchronous insertions are disabled. Default value: 100000.
        :param int async_insert_stale_timeout: The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the async_insert_busy_timeout with every INSERT query as long as async_insert_max_data_size is not exceeded.
        :param int async_insert_threads: The maximum number of threads for background data parsing and insertion. If the parameter is set to 0, asynchronous insertions are disabled. Default value: 16.
        :param bool cancel_http_readonly_queries_on_client_close: Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
               Default value: false.
        :param bool compile: Enable compilation of queries.
        :param bool compile_expressions: Turn on expression compilation.
        :param int connect_timeout: Connect timeout in milliseconds on the socket used for communicating with the client.
        :param int connect_timeout_with_failover: The timeout in milliseconds for connecting to a remote server for a Distributed table engine, if the ‘shard’ and ‘replica’ sections are used in the cluster definition. If unsuccessful, several attempts are made to connect to various replicas. Default value: 50.
        :param str count_distinct_implementation: Specifies which of the uniq* functions should be used to perform the COUNT(DISTINCT …) construction.
        :param str distinct_overflow_mode: Sets behaviour on overflow when using DISTINCT. Possible values:
        :param bool distributed_aggregation_memory_efficient: Determine the behavior of distributed subqueries.
        :param int distributed_ddl_task_timeout: Timeout for DDL queries, in milliseconds.
        :param str distributed_product_mode: Changes the behaviour of distributed subqueries.
        :param bool empty_result_for_aggregation_by_empty_set: Allows to retunr empty result.
        :param bool enable_http_compression: Enables or disables data compression in the response to an HTTP request.
        :param bool fallback_to_stale_replicas_for_distributed_queries: Forces a query to an out-of-date replica if updated data is not available.
        :param bool flatten_nested: Sets the data format of a nested columns.
        :param bool force_index_by_date: Disables query execution if the index can’t be used by date.
        :param bool force_primary_key: Disables query execution if indexing by the primary key is not possible.
        :param str group_by_overflow_mode: Sets behaviour on overflow while GROUP BY operation. Possible values:
        :param int group_by_two_level_threshold: Sets the threshold of the number of keys, after that the two-level aggregation should be used.
        :param int group_by_two_level_threshold_bytes: Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
        :param int hedged_connection_timeout_ms: Connection timeout for establishing connection with replica for Hedged requests. Default value: 50 milliseconds.
        :param int http_connection_timeout: Timeout for HTTP connection in milliseconds.
        :param int http_headers_progress_interval: Sets minimal interval between notifications about request process in HTTP header X-ClickHouse-Progress.
        :param int http_receive_timeout: Timeout for HTTP connection in milliseconds.
        :param int http_send_timeout: Timeout for HTTP connection in milliseconds.
        :param int idle_connection_timeout: Timeout to close idle TCP connections after specified number of seconds. Default value: 3600 seconds.
        :param bool input_format_defaults_for_omitted_fields: When performing INSERT queries, replace omitted input column values with default values of the respective columns.
        :param bool input_format_import_nested_json: Enables or disables the insertion of JSON data with nested objects.
        :param bool input_format_parallel_parsing: Enables or disables order-preserving parallel parsing of data formats. Supported only for TSV, TKSV, CSV and JSONEachRow formats.
        :param bool input_format_values_interpret_expressions: Enables or disables the full SQL parser if the fast stream parser can’t parse the data.
        :param int insert_keeper_max_retries: The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
        :param bool insert_null_as_default: Enables the insertion of default values instead of NULL into columns with not nullable data type. Default value: true.
        :param int insert_quorum: Enables the quorum writes.
        :param int insert_quorum_timeout: Write to a quorum timeout in milliseconds.
        :param str join_overflow_mode: Sets behaviour on overflow in JOIN. Possible values:
        :param bool join_use_nulls: Sets the type of JOIN behaviour. When merging tables, empty cells may appear. ClickHouse fills them differently based on this setting.
        :param bool joined_subquery_requires_alias: Require aliases for subselects and table functions in FROM that more than one table is present.
        :param str load_balancing: Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin. Default value: random.
        :param str local_filesystem_read_method: Method of reading data from local filesystem. Possible values:
        :param bool log_query_threads: Setting up query threads logging. Query threads log into the system.query_thread_log table. This setting has effect only when log_queries is true. Queries’ threads run by ClickHouse with this setup are logged according to the rules in the query_thread_log server configuration parameter. Default value: true.
        :param bool low_cardinality_allow_in_native_format: Allows or restricts using the LowCardinality data type with the Native format.
        :param int max_ast_depth: Maximum abstract syntax tree depth.
        :param int max_ast_elements: Maximum abstract syntax tree elements.
        :param int max_block_size: A recommendation for what size of the block (in a count of rows) to load from tables.
        :param int max_bytes_before_external_group_by: Limit in bytes for using memoru for GROUP BY before using swap on disk.
        :param int max_bytes_before_external_sort: This setting is equivalent of the max_bytes_before_external_group_by setting, except for it is for sort operation (ORDER BY), not aggregation.
        :param int max_bytes_in_distinct: Limits the maximum size of a hash table in bytes (uncompressed data) when using DISTINCT.
        :param int max_bytes_in_join: Limit on maximum size of the hash table for JOIN, in bytes.
        :param int max_bytes_in_set: Limit on the number of bytes in the set resulting from the execution of the IN section.
        :param int max_bytes_to_read: Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
        :param int max_bytes_to_sort: Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
        :param int max_bytes_to_transfer: Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
        :param int max_columns_to_read: Limits the maximum number of columns that can be read from a table in a single query.
        :param int max_concurrent_queries_for_user: The maximum number of concurrent requests per user. Default value: 0 (no limit).
        :param int max_execution_time: Limits the maximum query execution time in milliseconds.
        :param int max_expanded_ast_elements: Maximum abstract syntax tree depth after after expansion of aliases.
        :param int max_final_threads: Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
        :param int max_http_get_redirects: Limits the maximum number of HTTP GET redirect hops for URL-engine tables.
        :param int max_insert_block_size: The size of blocks (in a count of rows) to form for insertion into a table.
        :param int max_insert_threads: The maximum number of threads to execute the INSERT SELECT query. Default value: 0.
        :param int max_memory_usage: Limits the maximum memory usage (in bytes) for processing queries on a single server.
        :param int max_memory_usage_for_user: Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
        :param int max_network_bandwidth: Limits the speed of the data exchange over the network in bytes per second.
        :param int max_network_bandwidth_for_user: Limits the speed of the data exchange over the network in bytes per second.
        :param int max_parser_depth: Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size. Zero means unlimited.
        :param int max_query_size: The maximum part of a query that can be taken to RAM for parsing with the SQL parser.
        :param int max_read_buffer_size: The maximum size of the buffer to read from the filesystem.
        :param int max_replica_delay_for_distributed_queries: Disables lagging replicas for distributed queries.
        :param int max_result_bytes: Limits the number of bytes in the result.
        :param int max_result_rows: Limits the number of rows in the result.
        :param int max_rows_in_distinct: Limits the maximum number of different rows when using DISTINCT.
        :param int max_rows_in_join: Limit on maximum size of the hash table for JOIN, in rows.
        :param int max_rows_in_set: Limit on the number of rows in the set resulting from the execution of the IN section.
        :param int max_rows_to_group_by: Limits the maximum number of unique keys received from aggregation function.
        :param int max_rows_to_read: Limits the maximum number of rows that can be read from a table when running a query.
        :param int max_rows_to_sort: Limits the maximum number of rows that can be read from a table for sorting.
        :param int max_rows_to_transfer: Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
        :param int max_temporary_columns: Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
        :param int max_temporary_data_on_disk_size_for_query: The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
        :param int max_temporary_data_on_disk_size_for_user: The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
        :param int max_temporary_non_const_columns: Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
        :param int max_threads: The maximum number of query processing threads, excluding threads for retrieving data from remote servers.
        :param int memory_overcommit_ratio_denominator: It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
        :param int memory_overcommit_ratio_denominator_for_user: It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
        :param float memory_profiler_sample_probability: Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation. Possible values: from 0 to 1. Default: 0.
        :param int memory_profiler_step: Memory profiler step (in bytes).  If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing. Default value: 4194304 (4 MB). Zero means disabled memory profiler.
        :param int memory_usage_overcommit_max_wait_microseconds: Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
        :param int merge_tree_max_bytes_to_use_cache: If ClickHouse should read more than merge_tree_max_bytes_to_use_cache bytes in one query, it doesn’t use the cache of uncompressed blocks.
        :param int merge_tree_max_rows_to_use_cache: If ClickHouse should read more than merge_tree_max_rows_to_use_cache rows in one query, it doesn’t use the cache of uncompressed blocks.
        :param int merge_tree_min_bytes_for_concurrent_read: If the number of bytes to read from one file of a MergeTree-engine table exceeds merge_tree_min_bytes_for_concurrent_read, then ClickHouse tries to concurrently read from this file in several threads.
        :param int merge_tree_min_rows_for_concurrent_read: If the number of rows to be read from a file of a MergeTree table exceeds merge_tree_min_rows_for_concurrent_read then ClickHouse tries to perform a concurrent reading from this file on several threads.
        :param int min_bytes_to_use_direct_io: The minimum data volume required for using direct I/O access to the storage disk.
        :param int min_count_to_compile: How many times to potentially use a compiled chunk of code before running compilation.
        :param int min_count_to_compile_expression: A query waits for expression compilation process to complete prior to continuing execution.
        :param int min_execution_speed: Minimal execution speed in rows per second.
        :param int min_execution_speed_bytes: Minimal execution speed in bytes per second.
        :param int min_insert_block_size_bytes: Sets the minimum number of bytes in the block which can be inserted into a table by an INSERT query.
        :param int min_insert_block_size_rows: Sets the minimum number of rows in the block which can be inserted into a table by an INSERT query.
        :param bool output_format_json_quote64bit_integers: If the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.
        :param bool output_format_json_quote_denormals: Enables +nan, -nan, +inf, -inf outputs in JSON output format.
        :param bool prefer_localhost_replica: Enables/disables preferable using the localhost replica when processing distributed queries. Default value: true.
        :param int priority: Query priority.
        :param str quota_mode: Quota accounting mode.
        :param str read_overflow_mode: Sets behaviour on overflow while read. Possible values:
        :param int readonly: Restricts permissions for reading data, write data and change settings queries.
        :param int receive_timeout: Receive timeout in milliseconds on the socket used for communicating with the client.
        :param str remote_filesystem_read_method: Method of reading data from remote filesystem, one of: `read`, `threadpool`.
        :param int replication_alter_partitions_sync: For ALTER ... ATTACH|DETACH|DROP queries, you can use the replication_alter_partitions_sync setting to set up waiting.
        :param str result_overflow_mode: Sets behaviour on overflow in result. Possible values:
        :param bool select_sequential_consistency: Enables or disables sequential consistency for SELECT queries.
        :param bool send_progress_in_http_headers: Enables or disables X-ClickHouse-Progress HTTP response headers in clickhouse-server responses.
        :param int send_timeout: Send timeout in milliseconds on the socket used for communicating with the client.
        :param str set_overflow_mode: Sets behaviour on overflow in the set resulting. Possible values:
        :param bool skip_unavailable_shards: Enables or disables silently skipping of unavailable shards.
        :param str sort_overflow_mode: Sets behaviour on overflow while sort. Possible values:
        :param int timeout_before_checking_execution_speed: Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in min_execution_speed parameter.
               Must be at least 1000.
        :param str timeout_overflow_mode: Sets behaviour on overflow. Possible values:
        :param str transfer_overflow_mode: Sets behaviour on overflow. Possible values:
        :param bool transform_null_in: Enables equality of NULL values for IN operator.
        :param bool use_hedged_requests: Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas > 1 are supported. Default value: true.
        :param bool use_uncompressed_cache: Whether to use a cache of uncompressed blocks.
        :param bool wait_for_async_insert: Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
        :param int wait_for_async_insert_timeout: The timeout (in seconds) for waiting for processing of asynchronous insertion. Value must be at least 1000 (1 second).
        """
        if add_http_cors_header is not None:
            pulumi.set(__self__, "add_http_cors_header", add_http_cors_header)
        if allow_ddl is not None:
            pulumi.set(__self__, "allow_ddl", allow_ddl)
        if allow_introspection_functions is not None:
            pulumi.set(__self__, "allow_introspection_functions", allow_introspection_functions)
        if allow_suspicious_low_cardinality_types is not None:
            pulumi.set(__self__, "allow_suspicious_low_cardinality_types", allow_suspicious_low_cardinality_types)
        if async_insert is not None:
            pulumi.set(__self__, "async_insert", async_insert)
        if async_insert_busy_timeout is not None:
            pulumi.set(__self__, "async_insert_busy_timeout", async_insert_busy_timeout)
        if async_insert_max_data_size is not None:
            pulumi.set(__self__, "async_insert_max_data_size", async_insert_max_data_size)
        if async_insert_stale_timeout is not None:
            pulumi.set(__self__, "async_insert_stale_timeout", async_insert_stale_timeout)
        if async_insert_threads is not None:
            pulumi.set(__self__, "async_insert_threads", async_insert_threads)
        if cancel_http_readonly_queries_on_client_close is not None:
            pulumi.set(__self__, "cancel_http_readonly_queries_on_client_close", cancel_http_readonly_queries_on_client_close)
        if compile is not None:
            pulumi.set(__self__, "compile", compile)
        if compile_expressions is not None:
            pulumi.set(__self__, "compile_expressions", compile_expressions)
        if connect_timeout is not None:
            pulumi.set(__self__, "connect_timeout", connect_timeout)
        if connect_timeout_with_failover is not None:
            pulumi.set(__self__, "connect_timeout_with_failover", connect_timeout_with_failover)
        if count_distinct_implementation is not None:
            pulumi.set(__self__, "count_distinct_implementation", count_distinct_implementation)
        if distinct_overflow_mode is not None:
            pulumi.set(__self__, "distinct_overflow_mode", distinct_overflow_mode)
        if distributed_aggregation_memory_efficient is not None:
            pulumi.set(__self__, "distributed_aggregation_memory_efficient", distributed_aggregation_memory_efficient)
        if distributed_ddl_task_timeout is not None:
            pulumi.set(__self__, "distributed_ddl_task_timeout", distributed_ddl_task_timeout)
        if distributed_product_mode is not None:
            pulumi.set(__self__, "distributed_product_mode", distributed_product_mode)
        if empty_result_for_aggregation_by_empty_set is not None:
            pulumi.set(__self__, "empty_result_for_aggregation_by_empty_set", empty_result_for_aggregation_by_empty_set)
        if enable_http_compression is not None:
            pulumi.set(__self__, "enable_http_compression", enable_http_compression)
        if fallback_to_stale_replicas_for_distributed_queries is not None:
            pulumi.set(__self__, "fallback_to_stale_replicas_for_distributed_queries", fallback_to_stale_replicas_for_distributed_queries)
        if flatten_nested is not None:
            pulumi.set(__self__, "flatten_nested", flatten_nested)
        if force_index_by_date is not None:
            pulumi.set(__self__, "force_index_by_date", force_index_by_date)
        if force_primary_key is not None:
            pulumi.set(__self__, "force_primary_key", force_primary_key)
        if group_by_overflow_mode is not None:
            pulumi.set(__self__, "group_by_overflow_mode", group_by_overflow_mode)
        if group_by_two_level_threshold is not None:
            pulumi.set(__self__, "group_by_two_level_threshold", group_by_two_level_threshold)
        if group_by_two_level_threshold_bytes is not None:
            pulumi.set(__self__, "group_by_two_level_threshold_bytes", group_by_two_level_threshold_bytes)
        if hedged_connection_timeout_ms is not None:
            pulumi.set(__self__, "hedged_connection_timeout_ms", hedged_connection_timeout_ms)
        if http_connection_timeout is not None:
            pulumi.set(__self__, "http_connection_timeout", http_connection_timeout)
        if http_headers_progress_interval is not None:
            pulumi.set(__self__, "http_headers_progress_interval", http_headers_progress_interval)
        if http_receive_timeout is not None:
            pulumi.set(__self__, "http_receive_timeout", http_receive_timeout)
        if http_send_timeout is not None:
            pulumi.set(__self__, "http_send_timeout", http_send_timeout)
        if idle_connection_timeout is not None:
            pulumi.set(__self__, "idle_connection_timeout", idle_connection_timeout)
        if input_format_defaults_for_omitted_fields is not None:
            pulumi.set(__self__, "input_format_defaults_for_omitted_fields", input_format_defaults_for_omitted_fields)
        if input_format_import_nested_json is not None:
            pulumi.set(__self__, "input_format_import_nested_json", input_format_import_nested_json)
        if input_format_parallel_parsing is not None:
            pulumi.set(__self__, "input_format_parallel_parsing", input_format_parallel_parsing)
        if input_format_values_interpret_expressions is not None:
            pulumi.set(__self__, "input_format_values_interpret_expressions", input_format_values_interpret_expressions)
        if insert_keeper_max_retries is not None:
            pulumi.set(__self__, "insert_keeper_max_retries", insert_keeper_max_retries)
        if insert_null_as_default is not None:
            pulumi.set(__self__, "insert_null_as_default", insert_null_as_default)
        if insert_quorum is not None:
            pulumi.set(__self__, "insert_quorum", insert_quorum)
        if insert_quorum_timeout is not None:
            pulumi.set(__self__, "insert_quorum_timeout", insert_quorum_timeout)
        if join_overflow_mode is not None:
            pulumi.set(__self__, "join_overflow_mode", join_overflow_mode)
        if join_use_nulls is not None:
            pulumi.set(__self__, "join_use_nulls", join_use_nulls)
        if joined_subquery_requires_alias is not None:
            pulumi.set(__self__, "joined_subquery_requires_alias", joined_subquery_requires_alias)
        if load_balancing is not None:
            pulumi.set(__self__, "load_balancing", load_balancing)
        if local_filesystem_read_method is not None:
            pulumi.set(__self__, "local_filesystem_read_method", local_filesystem_read_method)
        if log_query_threads is not None:
            pulumi.set(__self__, "log_query_threads", log_query_threads)
        if low_cardinality_allow_in_native_format is not None:
            pulumi.set(__self__, "low_cardinality_allow_in_native_format", low_cardinality_allow_in_native_format)
        if max_ast_depth is not None:
            pulumi.set(__self__, "max_ast_depth", max_ast_depth)
        if max_ast_elements is not None:
            pulumi.set(__self__, "max_ast_elements", max_ast_elements)
        if max_block_size is not None:
            pulumi.set(__self__, "max_block_size", max_block_size)
        if max_bytes_before_external_group_by is not None:
            pulumi.set(__self__, "max_bytes_before_external_group_by", max_bytes_before_external_group_by)
        if max_bytes_before_external_sort is not None:
            pulumi.set(__self__, "max_bytes_before_external_sort", max_bytes_before_external_sort)
        if max_bytes_in_distinct is not None:
            pulumi.set(__self__, "max_bytes_in_distinct", max_bytes_in_distinct)
        if max_bytes_in_join is not None:
            pulumi.set(__self__, "max_bytes_in_join", max_bytes_in_join)
        if max_bytes_in_set is not None:
            pulumi.set(__self__, "max_bytes_in_set", max_bytes_in_set)
        if max_bytes_to_read is not None:
            pulumi.set(__self__, "max_bytes_to_read", max_bytes_to_read)
        if max_bytes_to_sort is not None:
            pulumi.set(__self__, "max_bytes_to_sort", max_bytes_to_sort)
        if max_bytes_to_transfer is not None:
            pulumi.set(__self__, "max_bytes_to_transfer", max_bytes_to_transfer)
        if max_columns_to_read is not None:
            pulumi.set(__self__, "max_columns_to_read", max_columns_to_read)
        if max_concurrent_queries_for_user is not None:
            pulumi.set(__self__, "max_concurrent_queries_for_user", max_concurrent_queries_for_user)
        if max_execution_time is not None:
            pulumi.set(__self__, "max_execution_time", max_execution_time)
        if max_expanded_ast_elements is not None:
            pulumi.set(__self__, "max_expanded_ast_elements", max_expanded_ast_elements)
        if max_final_threads is not None:
            pulumi.set(__self__, "max_final_threads", max_final_threads)
        if max_http_get_redirects is not None:
            pulumi.set(__self__, "max_http_get_redirects", max_http_get_redirects)
        if max_insert_block_size is not None:
            pulumi.set(__self__, "max_insert_block_size", max_insert_block_size)
        if max_insert_threads is not None:
            pulumi.set(__self__, "max_insert_threads", max_insert_threads)
        if max_memory_usage is not None:
            pulumi.set(__self__, "max_memory_usage", max_memory_usage)
        if max_memory_usage_for_user is not None:
            pulumi.set(__self__, "max_memory_usage_for_user", max_memory_usage_for_user)
        if max_network_bandwidth is not None:
            pulumi.set(__self__, "max_network_bandwidth", max_network_bandwidth)
        if max_network_bandwidth_for_user is not None:
            pulumi.set(__self__, "max_network_bandwidth_for_user", max_network_bandwidth_for_user)
        if max_parser_depth is not None:
            pulumi.set(__self__, "max_parser_depth", max_parser_depth)
        if max_query_size is not None:
            pulumi.set(__self__, "max_query_size", max_query_size)
        if max_read_buffer_size is not None:
            pulumi.set(__self__, "max_read_buffer_size", max_read_buffer_size)
        if max_replica_delay_for_distributed_queries is not None:
            pulumi.set(__self__, "max_replica_delay_for_distributed_queries", max_replica_delay_for_distributed_queries)
        if max_result_bytes is not None:
            pulumi.set(__self__, "max_result_bytes", max_result_bytes)
        if max_result_rows is not None:
            pulumi.set(__self__, "max_result_rows", max_result_rows)
        if max_rows_in_distinct is not None:
            pulumi.set(__self__, "max_rows_in_distinct", max_rows_in_distinct)
        if max_rows_in_join is not None:
            pulumi.set(__self__, "max_rows_in_join", max_rows_in_join)
        if max_rows_in_set is not None:
            pulumi.set(__self__, "max_rows_in_set", max_rows_in_set)
        if max_rows_to_group_by is not None:
            pulumi.set(__self__, "max_rows_to_group_by", max_rows_to_group_by)
        if max_rows_to_read is not None:
            pulumi.set(__self__, "max_rows_to_read", max_rows_to_read)
        if max_rows_to_sort is not None:
            pulumi.set(__self__, "max_rows_to_sort", max_rows_to_sort)
        if max_rows_to_transfer is not None:
            pulumi.set(__self__, "max_rows_to_transfer", max_rows_to_transfer)
        if max_temporary_columns is not None:
            pulumi.set(__self__, "max_temporary_columns", max_temporary_columns)
        if max_temporary_data_on_disk_size_for_query is not None:
            pulumi.set(__self__, "max_temporary_data_on_disk_size_for_query", max_temporary_data_on_disk_size_for_query)
        if max_temporary_data_on_disk_size_for_user is not None:
            pulumi.set(__self__, "max_temporary_data_on_disk_size_for_user", max_temporary_data_on_disk_size_for_user)
        if max_temporary_non_const_columns is not None:
            pulumi.set(__self__, "max_temporary_non_const_columns", max_temporary_non_const_columns)
        if max_threads is not None:
            pulumi.set(__self__, "max_threads", max_threads)
        if memory_overcommit_ratio_denominator is not None:
            pulumi.set(__self__, "memory_overcommit_ratio_denominator", memory_overcommit_ratio_denominator)
        if memory_overcommit_ratio_denominator_for_user is not None:
            pulumi.set(__self__, "memory_overcommit_ratio_denominator_for_user", memory_overcommit_ratio_denominator_for_user)
        if memory_profiler_sample_probability is not None:
            pulumi.set(__self__, "memory_profiler_sample_probability", memory_profiler_sample_probability)
        if memory_profiler_step is not None:
            pulumi.set(__self__, "memory_profiler_step", memory_profiler_step)
        if memory_usage_overcommit_max_wait_microseconds is not None:
            pulumi.set(__self__, "memory_usage_overcommit_max_wait_microseconds", memory_usage_overcommit_max_wait_microseconds)
        if merge_tree_max_bytes_to_use_cache is not None:
            pulumi.set(__self__, "merge_tree_max_bytes_to_use_cache", merge_tree_max_bytes_to_use_cache)
        if merge_tree_max_rows_to_use_cache is not None:
            pulumi.set(__self__, "merge_tree_max_rows_to_use_cache", merge_tree_max_rows_to_use_cache)
        if merge_tree_min_bytes_for_concurrent_read is not None:
            pulumi.set(__self__, "merge_tree_min_bytes_for_concurrent_read", merge_tree_min_bytes_for_concurrent_read)
        if merge_tree_min_rows_for_concurrent_read is not None:
            pulumi.set(__self__, "merge_tree_min_rows_for_concurrent_read", merge_tree_min_rows_for_concurrent_read)
        if min_bytes_to_use_direct_io is not None:
            pulumi.set(__self__, "min_bytes_to_use_direct_io", min_bytes_to_use_direct_io)
        if min_count_to_compile is not None:
            pulumi.set(__self__, "min_count_to_compile", min_count_to_compile)
        if min_count_to_compile_expression is not None:
            pulumi.set(__self__, "min_count_to_compile_expression", min_count_to_compile_expression)
        if min_execution_speed is not None:
            pulumi.set(__self__, "min_execution_speed", min_execution_speed)
        if min_execution_speed_bytes is not None:
            pulumi.set(__self__, "min_execution_speed_bytes", min_execution_speed_bytes)
        if min_insert_block_size_bytes is not None:
            pulumi.set(__self__, "min_insert_block_size_bytes", min_insert_block_size_bytes)
        if min_insert_block_size_rows is not None:
            pulumi.set(__self__, "min_insert_block_size_rows", min_insert_block_size_rows)
        if output_format_json_quote64bit_integers is not None:
            pulumi.set(__self__, "output_format_json_quote64bit_integers", output_format_json_quote64bit_integers)
        if output_format_json_quote_denormals is not None:
            pulumi.set(__self__, "output_format_json_quote_denormals", output_format_json_quote_denormals)
        if prefer_localhost_replica is not None:
            pulumi.set(__self__, "prefer_localhost_replica", prefer_localhost_replica)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if quota_mode is not None:
            pulumi.set(__self__, "quota_mode", quota_mode)
        if read_overflow_mode is not None:
            pulumi.set(__self__, "read_overflow_mode", read_overflow_mode)
        if readonly is not None:
            pulumi.set(__self__, "readonly", readonly)
        if receive_timeout is not None:
            pulumi.set(__self__, "receive_timeout", receive_timeout)
        if remote_filesystem_read_method is not None:
            pulumi.set(__self__, "remote_filesystem_read_method", remote_filesystem_read_method)
        if replication_alter_partitions_sync is not None:
            pulumi.set(__self__, "replication_alter_partitions_sync", replication_alter_partitions_sync)
        if result_overflow_mode is not None:
            pulumi.set(__self__, "result_overflow_mode", result_overflow_mode)
        if select_sequential_consistency is not None:
            pulumi.set(__self__, "select_sequential_consistency", select_sequential_consistency)
        if send_progress_in_http_headers is not None:
            pulumi.set(__self__, "send_progress_in_http_headers", send_progress_in_http_headers)
        if send_timeout is not None:
            pulumi.set(__self__, "send_timeout", send_timeout)
        if set_overflow_mode is not None:
            pulumi.set(__self__, "set_overflow_mode", set_overflow_mode)
        if skip_unavailable_shards is not None:
            pulumi.set(__self__, "skip_unavailable_shards", skip_unavailable_shards)
        if sort_overflow_mode is not None:
            pulumi.set(__self__, "sort_overflow_mode", sort_overflow_mode)
        if timeout_before_checking_execution_speed is not None:
            pulumi.set(__self__, "timeout_before_checking_execution_speed", timeout_before_checking_execution_speed)
        if timeout_overflow_mode is not None:
            pulumi.set(__self__, "timeout_overflow_mode", timeout_overflow_mode)
        if transfer_overflow_mode is not None:
            pulumi.set(__self__, "transfer_overflow_mode", transfer_overflow_mode)
        if transform_null_in is not None:
            pulumi.set(__self__, "transform_null_in", transform_null_in)
        if use_hedged_requests is not None:
            pulumi.set(__self__, "use_hedged_requests", use_hedged_requests)
        if use_uncompressed_cache is not None:
            pulumi.set(__self__, "use_uncompressed_cache", use_uncompressed_cache)
        if wait_for_async_insert is not None:
            pulumi.set(__self__, "wait_for_async_insert", wait_for_async_insert)
        if wait_for_async_insert_timeout is not None:
            pulumi.set(__self__, "wait_for_async_insert_timeout", wait_for_async_insert_timeout)

    @property
    @pulumi.getter(name="addHttpCorsHeader")
    def add_http_cors_header(self) -> Optional[bool]:
        """
        Include CORS headers in HTTP responces.
        """
        return pulumi.get(self, "add_http_cors_header")

    @property
    @pulumi.getter(name="allowDdl")
    def allow_ddl(self) -> Optional[bool]:
        """
        Allows or denies DDL queries.
        """
        return pulumi.get(self, "allow_ddl")

    @property
    @pulumi.getter(name="allowIntrospectionFunctions")
    def allow_introspection_functions(self) -> Optional[bool]:
        """
        Enables introspections functions for query profiling.
        """
        return pulumi.get(self, "allow_introspection_functions")

    @property
    @pulumi.getter(name="allowSuspiciousLowCardinalityTypes")
    def allow_suspicious_low_cardinality_types(self) -> Optional[bool]:
        """
        Allows specifying LowCardinality modifier for types of small fixed size (8 or less) in CREATE TABLE statements. Enabling this may increase merge times and memory consumption.
        """
        return pulumi.get(self, "allow_suspicious_low_cardinality_types")

    @property
    @pulumi.getter(name="asyncInsert")
    def async_insert(self) -> Optional[bool]:
        """
        Enables asynchronous inserts. Disabled by default.
        """
        return pulumi.get(self, "async_insert")

    @property
    @pulumi.getter(name="asyncInsertBusyTimeout")
    def async_insert_busy_timeout(self) -> Optional[int]:
        """
        The maximum timeout in milliseconds since the first INSERT query before inserting collected data. If the parameter is set to 0, the timeout is disabled. Default value: 200.
        """
        return pulumi.get(self, "async_insert_busy_timeout")

    @property
    @pulumi.getter(name="asyncInsertMaxDataSize")
    def async_insert_max_data_size(self) -> Optional[int]:
        """
        The maximum size of the unparsed data in bytes collected per query before being inserted. If the parameter is set to 0, asynchronous insertions are disabled. Default value: 100000.
        """
        return pulumi.get(self, "async_insert_max_data_size")

    @property
    @pulumi.getter(name="asyncInsertStaleTimeout")
    def async_insert_stale_timeout(self) -> Optional[int]:
        """
        The maximum timeout in milliseconds since the last INSERT query before dumping collected data. If enabled, the settings prolongs the async_insert_busy_timeout with every INSERT query as long as async_insert_max_data_size is not exceeded.
        """
        return pulumi.get(self, "async_insert_stale_timeout")

    @property
    @pulumi.getter(name="asyncInsertThreads")
    def async_insert_threads(self) -> Optional[int]:
        """
        The maximum number of threads for background data parsing and insertion. If the parameter is set to 0, asynchronous insertions are disabled. Default value: 16.
        """
        return pulumi.get(self, "async_insert_threads")

    @property
    @pulumi.getter(name="cancelHttpReadonlyQueriesOnClientClose")
    def cancel_http_readonly_queries_on_client_close(self) -> Optional[bool]:
        """
        Cancels HTTP read-only queries (e.g. SELECT) when a client closes the connection without waiting for the response.
        Default value: false.
        """
        return pulumi.get(self, "cancel_http_readonly_queries_on_client_close")

    @property
    @pulumi.getter
    def compile(self) -> Optional[bool]:
        """
        Enable compilation of queries.
        """
        return pulumi.get(self, "compile")

    @property
    @pulumi.getter(name="compileExpressions")
    def compile_expressions(self) -> Optional[bool]:
        """
        Turn on expression compilation.
        """
        return pulumi.get(self, "compile_expressions")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> Optional[int]:
        """
        Connect timeout in milliseconds on the socket used for communicating with the client.
        """
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="connectTimeoutWithFailover")
    def connect_timeout_with_failover(self) -> Optional[int]:
        """
        The timeout in milliseconds for connecting to a remote server for a Distributed table engine, if the ‘shard’ and ‘replica’ sections are used in the cluster definition. If unsuccessful, several attempts are made to connect to various replicas. Default value: 50.
        """
        return pulumi.get(self, "connect_timeout_with_failover")

    @property
    @pulumi.getter(name="countDistinctImplementation")
    def count_distinct_implementation(self) -> Optional[str]:
        """
        Specifies which of the uniq* functions should be used to perform the COUNT(DISTINCT …) construction.
        """
        return pulumi.get(self, "count_distinct_implementation")

    @property
    @pulumi.getter(name="distinctOverflowMode")
    def distinct_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow when using DISTINCT. Possible values:
        """
        return pulumi.get(self, "distinct_overflow_mode")

    @property
    @pulumi.getter(name="distributedAggregationMemoryEfficient")
    def distributed_aggregation_memory_efficient(self) -> Optional[bool]:
        """
        Determine the behavior of distributed subqueries.
        """
        return pulumi.get(self, "distributed_aggregation_memory_efficient")

    @property
    @pulumi.getter(name="distributedDdlTaskTimeout")
    def distributed_ddl_task_timeout(self) -> Optional[int]:
        """
        Timeout for DDL queries, in milliseconds.
        """
        return pulumi.get(self, "distributed_ddl_task_timeout")

    @property
    @pulumi.getter(name="distributedProductMode")
    def distributed_product_mode(self) -> Optional[str]:
        """
        Changes the behaviour of distributed subqueries.
        """
        return pulumi.get(self, "distributed_product_mode")

    @property
    @pulumi.getter(name="emptyResultForAggregationByEmptySet")
    def empty_result_for_aggregation_by_empty_set(self) -> Optional[bool]:
        """
        Allows to retunr empty result.
        """
        return pulumi.get(self, "empty_result_for_aggregation_by_empty_set")

    @property
    @pulumi.getter(name="enableHttpCompression")
    def enable_http_compression(self) -> Optional[bool]:
        """
        Enables or disables data compression in the response to an HTTP request.
        """
        return pulumi.get(self, "enable_http_compression")

    @property
    @pulumi.getter(name="fallbackToStaleReplicasForDistributedQueries")
    def fallback_to_stale_replicas_for_distributed_queries(self) -> Optional[bool]:
        """
        Forces a query to an out-of-date replica if updated data is not available.
        """
        return pulumi.get(self, "fallback_to_stale_replicas_for_distributed_queries")

    @property
    @pulumi.getter(name="flattenNested")
    def flatten_nested(self) -> Optional[bool]:
        """
        Sets the data format of a nested columns.
        """
        return pulumi.get(self, "flatten_nested")

    @property
    @pulumi.getter(name="forceIndexByDate")
    def force_index_by_date(self) -> Optional[bool]:
        """
        Disables query execution if the index can’t be used by date.
        """
        return pulumi.get(self, "force_index_by_date")

    @property
    @pulumi.getter(name="forcePrimaryKey")
    def force_primary_key(self) -> Optional[bool]:
        """
        Disables query execution if indexing by the primary key is not possible.
        """
        return pulumi.get(self, "force_primary_key")

    @property
    @pulumi.getter(name="groupByOverflowMode")
    def group_by_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow while GROUP BY operation. Possible values:
        """
        return pulumi.get(self, "group_by_overflow_mode")

    @property
    @pulumi.getter(name="groupByTwoLevelThreshold")
    def group_by_two_level_threshold(self) -> Optional[int]:
        """
        Sets the threshold of the number of keys, after that the two-level aggregation should be used.
        """
        return pulumi.get(self, "group_by_two_level_threshold")

    @property
    @pulumi.getter(name="groupByTwoLevelThresholdBytes")
    def group_by_two_level_threshold_bytes(self) -> Optional[int]:
        """
        Sets the threshold of the number of bytes, after that the two-level aggregation should be used.
        """
        return pulumi.get(self, "group_by_two_level_threshold_bytes")

    @property
    @pulumi.getter(name="hedgedConnectionTimeoutMs")
    def hedged_connection_timeout_ms(self) -> Optional[int]:
        """
        Connection timeout for establishing connection with replica for Hedged requests. Default value: 50 milliseconds.
        """
        return pulumi.get(self, "hedged_connection_timeout_ms")

    @property
    @pulumi.getter(name="httpConnectionTimeout")
    def http_connection_timeout(self) -> Optional[int]:
        """
        Timeout for HTTP connection in milliseconds.
        """
        return pulumi.get(self, "http_connection_timeout")

    @property
    @pulumi.getter(name="httpHeadersProgressInterval")
    def http_headers_progress_interval(self) -> Optional[int]:
        """
        Sets minimal interval between notifications about request process in HTTP header X-ClickHouse-Progress.
        """
        return pulumi.get(self, "http_headers_progress_interval")

    @property
    @pulumi.getter(name="httpReceiveTimeout")
    def http_receive_timeout(self) -> Optional[int]:
        """
        Timeout for HTTP connection in milliseconds.
        """
        return pulumi.get(self, "http_receive_timeout")

    @property
    @pulumi.getter(name="httpSendTimeout")
    def http_send_timeout(self) -> Optional[int]:
        """
        Timeout for HTTP connection in milliseconds.
        """
        return pulumi.get(self, "http_send_timeout")

    @property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> Optional[int]:
        """
        Timeout to close idle TCP connections after specified number of seconds. Default value: 3600 seconds.
        """
        return pulumi.get(self, "idle_connection_timeout")

    @property
    @pulumi.getter(name="inputFormatDefaultsForOmittedFields")
    def input_format_defaults_for_omitted_fields(self) -> Optional[bool]:
        """
        When performing INSERT queries, replace omitted input column values with default values of the respective columns.
        """
        return pulumi.get(self, "input_format_defaults_for_omitted_fields")

    @property
    @pulumi.getter(name="inputFormatImportNestedJson")
    def input_format_import_nested_json(self) -> Optional[bool]:
        """
        Enables or disables the insertion of JSON data with nested objects.
        """
        return pulumi.get(self, "input_format_import_nested_json")

    @property
    @pulumi.getter(name="inputFormatParallelParsing")
    def input_format_parallel_parsing(self) -> Optional[bool]:
        """
        Enables or disables order-preserving parallel parsing of data formats. Supported only for TSV, TKSV, CSV and JSONEachRow formats.
        """
        return pulumi.get(self, "input_format_parallel_parsing")

    @property
    @pulumi.getter(name="inputFormatValuesInterpretExpressions")
    def input_format_values_interpret_expressions(self) -> Optional[bool]:
        """
        Enables or disables the full SQL parser if the fast stream parser can’t parse the data.
        """
        return pulumi.get(self, "input_format_values_interpret_expressions")

    @property
    @pulumi.getter(name="insertKeeperMaxRetries")
    def insert_keeper_max_retries(self) -> Optional[int]:
        """
        The setting sets the maximum number of retries for ClickHouse Keeper (or ZooKeeper) requests during insert into replicated MergeTree. Only Keeper requests which failed due to network error, Keeper session timeout, or request timeout are considered for retries.
        """
        return pulumi.get(self, "insert_keeper_max_retries")

    @property
    @pulumi.getter(name="insertNullAsDefault")
    def insert_null_as_default(self) -> Optional[bool]:
        """
        Enables the insertion of default values instead of NULL into columns with not nullable data type. Default value: true.
        """
        return pulumi.get(self, "insert_null_as_default")

    @property
    @pulumi.getter(name="insertQuorum")
    def insert_quorum(self) -> Optional[int]:
        """
        Enables the quorum writes.
        """
        return pulumi.get(self, "insert_quorum")

    @property
    @pulumi.getter(name="insertQuorumTimeout")
    def insert_quorum_timeout(self) -> Optional[int]:
        """
        Write to a quorum timeout in milliseconds.
        """
        return pulumi.get(self, "insert_quorum_timeout")

    @property
    @pulumi.getter(name="joinOverflowMode")
    def join_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow in JOIN. Possible values:
        """
        return pulumi.get(self, "join_overflow_mode")

    @property
    @pulumi.getter(name="joinUseNulls")
    def join_use_nulls(self) -> Optional[bool]:
        """
        Sets the type of JOIN behaviour. When merging tables, empty cells may appear. ClickHouse fills them differently based on this setting.
        """
        return pulumi.get(self, "join_use_nulls")

    @property
    @pulumi.getter(name="joinedSubqueryRequiresAlias")
    def joined_subquery_requires_alias(self) -> Optional[bool]:
        """
        Require aliases for subselects and table functions in FROM that more than one table is present.
        """
        return pulumi.get(self, "joined_subquery_requires_alias")

    @property
    @pulumi.getter(name="loadBalancing")
    def load_balancing(self) -> Optional[str]:
        """
        Specifies the algorithm of replicas selection that is used for distributed query processing, one of: random, nearest_hostname, in_order, first_or_random, round_robin. Default value: random.
        """
        return pulumi.get(self, "load_balancing")

    @property
    @pulumi.getter(name="localFilesystemReadMethod")
    def local_filesystem_read_method(self) -> Optional[str]:
        """
        Method of reading data from local filesystem. Possible values:
        """
        return pulumi.get(self, "local_filesystem_read_method")

    @property
    @pulumi.getter(name="logQueryThreads")
    def log_query_threads(self) -> Optional[bool]:
        """
        Setting up query threads logging. Query threads log into the system.query_thread_log table. This setting has effect only when log_queries is true. Queries’ threads run by ClickHouse with this setup are logged according to the rules in the query_thread_log server configuration parameter. Default value: true.
        """
        return pulumi.get(self, "log_query_threads")

    @property
    @pulumi.getter(name="lowCardinalityAllowInNativeFormat")
    def low_cardinality_allow_in_native_format(self) -> Optional[bool]:
        """
        Allows or restricts using the LowCardinality data type with the Native format.
        """
        return pulumi.get(self, "low_cardinality_allow_in_native_format")

    @property
    @pulumi.getter(name="maxAstDepth")
    def max_ast_depth(self) -> Optional[int]:
        """
        Maximum abstract syntax tree depth.
        """
        return pulumi.get(self, "max_ast_depth")

    @property
    @pulumi.getter(name="maxAstElements")
    def max_ast_elements(self) -> Optional[int]:
        """
        Maximum abstract syntax tree elements.
        """
        return pulumi.get(self, "max_ast_elements")

    @property
    @pulumi.getter(name="maxBlockSize")
    def max_block_size(self) -> Optional[int]:
        """
        A recommendation for what size of the block (in a count of rows) to load from tables.
        """
        return pulumi.get(self, "max_block_size")

    @property
    @pulumi.getter(name="maxBytesBeforeExternalGroupBy")
    def max_bytes_before_external_group_by(self) -> Optional[int]:
        """
        Limit in bytes for using memoru for GROUP BY before using swap on disk.
        """
        return pulumi.get(self, "max_bytes_before_external_group_by")

    @property
    @pulumi.getter(name="maxBytesBeforeExternalSort")
    def max_bytes_before_external_sort(self) -> Optional[int]:
        """
        This setting is equivalent of the max_bytes_before_external_group_by setting, except for it is for sort operation (ORDER BY), not aggregation.
        """
        return pulumi.get(self, "max_bytes_before_external_sort")

    @property
    @pulumi.getter(name="maxBytesInDistinct")
    def max_bytes_in_distinct(self) -> Optional[int]:
        """
        Limits the maximum size of a hash table in bytes (uncompressed data) when using DISTINCT.
        """
        return pulumi.get(self, "max_bytes_in_distinct")

    @property
    @pulumi.getter(name="maxBytesInJoin")
    def max_bytes_in_join(self) -> Optional[int]:
        """
        Limit on maximum size of the hash table for JOIN, in bytes.
        """
        return pulumi.get(self, "max_bytes_in_join")

    @property
    @pulumi.getter(name="maxBytesInSet")
    def max_bytes_in_set(self) -> Optional[int]:
        """
        Limit on the number of bytes in the set resulting from the execution of the IN section.
        """
        return pulumi.get(self, "max_bytes_in_set")

    @property
    @pulumi.getter(name="maxBytesToRead")
    def max_bytes_to_read(self) -> Optional[int]:
        """
        Limits the maximum number of bytes (uncompressed data) that can be read from a table when running a query.
        """
        return pulumi.get(self, "max_bytes_to_read")

    @property
    @pulumi.getter(name="maxBytesToSort")
    def max_bytes_to_sort(self) -> Optional[int]:
        """
        Limits the maximum number of bytes (uncompressed data) that can be read from a table for sorting.
        """
        return pulumi.get(self, "max_bytes_to_sort")

    @property
    @pulumi.getter(name="maxBytesToTransfer")
    def max_bytes_to_transfer(self) -> Optional[int]:
        """
        Limits the maximum number of bytes (uncompressed data) that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
        """
        return pulumi.get(self, "max_bytes_to_transfer")

    @property
    @pulumi.getter(name="maxColumnsToRead")
    def max_columns_to_read(self) -> Optional[int]:
        """
        Limits the maximum number of columns that can be read from a table in a single query.
        """
        return pulumi.get(self, "max_columns_to_read")

    @property
    @pulumi.getter(name="maxConcurrentQueriesForUser")
    def max_concurrent_queries_for_user(self) -> Optional[int]:
        """
        The maximum number of concurrent requests per user. Default value: 0 (no limit).
        """
        return pulumi.get(self, "max_concurrent_queries_for_user")

    @property
    @pulumi.getter(name="maxExecutionTime")
    def max_execution_time(self) -> Optional[int]:
        """
        Limits the maximum query execution time in milliseconds.
        """
        return pulumi.get(self, "max_execution_time")

    @property
    @pulumi.getter(name="maxExpandedAstElements")
    def max_expanded_ast_elements(self) -> Optional[int]:
        """
        Maximum abstract syntax tree depth after after expansion of aliases.
        """
        return pulumi.get(self, "max_expanded_ast_elements")

    @property
    @pulumi.getter(name="maxFinalThreads")
    def max_final_threads(self) -> Optional[int]:
        """
        Sets the maximum number of parallel threads for the SELECT query data read phase with the FINAL modifier.
        """
        return pulumi.get(self, "max_final_threads")

    @property
    @pulumi.getter(name="maxHttpGetRedirects")
    def max_http_get_redirects(self) -> Optional[int]:
        """
        Limits the maximum number of HTTP GET redirect hops for URL-engine tables.
        """
        return pulumi.get(self, "max_http_get_redirects")

    @property
    @pulumi.getter(name="maxInsertBlockSize")
    def max_insert_block_size(self) -> Optional[int]:
        """
        The size of blocks (in a count of rows) to form for insertion into a table.
        """
        return pulumi.get(self, "max_insert_block_size")

    @property
    @pulumi.getter(name="maxInsertThreads")
    def max_insert_threads(self) -> Optional[int]:
        """
        The maximum number of threads to execute the INSERT SELECT query. Default value: 0.
        """
        return pulumi.get(self, "max_insert_threads")

    @property
    @pulumi.getter(name="maxMemoryUsage")
    def max_memory_usage(self) -> Optional[int]:
        """
        Limits the maximum memory usage (in bytes) for processing queries on a single server.
        """
        return pulumi.get(self, "max_memory_usage")

    @property
    @pulumi.getter(name="maxMemoryUsageForUser")
    def max_memory_usage_for_user(self) -> Optional[int]:
        """
        Limits the maximum memory usage (in bytes) for processing of user's queries on a single server.
        """
        return pulumi.get(self, "max_memory_usage_for_user")

    @property
    @pulumi.getter(name="maxNetworkBandwidth")
    def max_network_bandwidth(self) -> Optional[int]:
        """
        Limits the speed of the data exchange over the network in bytes per second.
        """
        return pulumi.get(self, "max_network_bandwidth")

    @property
    @pulumi.getter(name="maxNetworkBandwidthForUser")
    def max_network_bandwidth_for_user(self) -> Optional[int]:
        """
        Limits the speed of the data exchange over the network in bytes per second.
        """
        return pulumi.get(self, "max_network_bandwidth_for_user")

    @property
    @pulumi.getter(name="maxParserDepth")
    def max_parser_depth(self) -> Optional[int]:
        """
        Limits maximum recursion depth in the recursive descent parser. Allows controlling the stack size. Zero means unlimited.
        """
        return pulumi.get(self, "max_parser_depth")

    @property
    @pulumi.getter(name="maxQuerySize")
    def max_query_size(self) -> Optional[int]:
        """
        The maximum part of a query that can be taken to RAM for parsing with the SQL parser.
        """
        return pulumi.get(self, "max_query_size")

    @property
    @pulumi.getter(name="maxReadBufferSize")
    def max_read_buffer_size(self) -> Optional[int]:
        """
        The maximum size of the buffer to read from the filesystem.
        """
        return pulumi.get(self, "max_read_buffer_size")

    @property
    @pulumi.getter(name="maxReplicaDelayForDistributedQueries")
    def max_replica_delay_for_distributed_queries(self) -> Optional[int]:
        """
        Disables lagging replicas for distributed queries.
        """
        return pulumi.get(self, "max_replica_delay_for_distributed_queries")

    @property
    @pulumi.getter(name="maxResultBytes")
    def max_result_bytes(self) -> Optional[int]:
        """
        Limits the number of bytes in the result.
        """
        return pulumi.get(self, "max_result_bytes")

    @property
    @pulumi.getter(name="maxResultRows")
    def max_result_rows(self) -> Optional[int]:
        """
        Limits the number of rows in the result.
        """
        return pulumi.get(self, "max_result_rows")

    @property
    @pulumi.getter(name="maxRowsInDistinct")
    def max_rows_in_distinct(self) -> Optional[int]:
        """
        Limits the maximum number of different rows when using DISTINCT.
        """
        return pulumi.get(self, "max_rows_in_distinct")

    @property
    @pulumi.getter(name="maxRowsInJoin")
    def max_rows_in_join(self) -> Optional[int]:
        """
        Limit on maximum size of the hash table for JOIN, in rows.
        """
        return pulumi.get(self, "max_rows_in_join")

    @property
    @pulumi.getter(name="maxRowsInSet")
    def max_rows_in_set(self) -> Optional[int]:
        """
        Limit on the number of rows in the set resulting from the execution of the IN section.
        """
        return pulumi.get(self, "max_rows_in_set")

    @property
    @pulumi.getter(name="maxRowsToGroupBy")
    def max_rows_to_group_by(self) -> Optional[int]:
        """
        Limits the maximum number of unique keys received from aggregation function.
        """
        return pulumi.get(self, "max_rows_to_group_by")

    @property
    @pulumi.getter(name="maxRowsToRead")
    def max_rows_to_read(self) -> Optional[int]:
        """
        Limits the maximum number of rows that can be read from a table when running a query.
        """
        return pulumi.get(self, "max_rows_to_read")

    @property
    @pulumi.getter(name="maxRowsToSort")
    def max_rows_to_sort(self) -> Optional[int]:
        """
        Limits the maximum number of rows that can be read from a table for sorting.
        """
        return pulumi.get(self, "max_rows_to_sort")

    @property
    @pulumi.getter(name="maxRowsToTransfer")
    def max_rows_to_transfer(self) -> Optional[int]:
        """
        Limits the maximum number of rows that can be passed to a remote server or saved in a temporary table when using GLOBAL IN.
        """
        return pulumi.get(self, "max_rows_to_transfer")

    @property
    @pulumi.getter(name="maxTemporaryColumns")
    def max_temporary_columns(self) -> Optional[int]:
        """
        Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, including constant columns.
        """
        return pulumi.get(self, "max_temporary_columns")

    @property
    @pulumi.getter(name="maxTemporaryDataOnDiskSizeForQuery")
    def max_temporary_data_on_disk_size_for_query(self) -> Optional[int]:
        """
        The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running queries. Zero means unlimited.
        """
        return pulumi.get(self, "max_temporary_data_on_disk_size_for_query")

    @property
    @pulumi.getter(name="maxTemporaryDataOnDiskSizeForUser")
    def max_temporary_data_on_disk_size_for_user(self) -> Optional[int]:
        """
        The maximum amount of data consumed by temporary files on disk in bytes for all concurrently running user queries. Zero means unlimited.
        """
        return pulumi.get(self, "max_temporary_data_on_disk_size_for_user")

    @property
    @pulumi.getter(name="maxTemporaryNonConstColumns")
    def max_temporary_non_const_columns(self) -> Optional[int]:
        """
        Limits the maximum number of temporary columns that must be kept in RAM at the same time when running a query, excluding constant columns.
        """
        return pulumi.get(self, "max_temporary_non_const_columns")

    @property
    @pulumi.getter(name="maxThreads")
    def max_threads(self) -> Optional[int]:
        """
        The maximum number of query processing threads, excluding threads for retrieving data from remote servers.
        """
        return pulumi.get(self, "max_threads")

    @property
    @pulumi.getter(name="memoryOvercommitRatioDenominator")
    def memory_overcommit_ratio_denominator(self) -> Optional[int]:
        """
        It represents soft memory limit in case when hard limit is reached on user level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
        """
        return pulumi.get(self, "memory_overcommit_ratio_denominator")

    @property
    @pulumi.getter(name="memoryOvercommitRatioDenominatorForUser")
    def memory_overcommit_ratio_denominator_for_user(self) -> Optional[int]:
        """
        It represents soft memory limit in case when hard limit is reached on global level. This value is used to compute overcommit ratio for the query. Zero means skip the query.
        """
        return pulumi.get(self, "memory_overcommit_ratio_denominator_for_user")

    @property
    @pulumi.getter(name="memoryProfilerSampleProbability")
    def memory_profiler_sample_probability(self) -> Optional[float]:
        """
        Collect random allocations and deallocations and write them into system.trace_log with 'MemorySample' trace_type. The probability is for every alloc/free regardless to the size of the allocation. Possible values: from 0 to 1. Default: 0.
        """
        return pulumi.get(self, "memory_profiler_sample_probability")

    @property
    @pulumi.getter(name="memoryProfilerStep")
    def memory_profiler_step(self) -> Optional[int]:
        """
        Memory profiler step (in bytes).  If the next query step requires more memory than this parameter specifies, the memory profiler collects the allocating stack trace. Values lower than a few megabytes slow down query processing. Default value: 4194304 (4 MB). Zero means disabled memory profiler.
        """
        return pulumi.get(self, "memory_profiler_step")

    @property
    @pulumi.getter(name="memoryUsageOvercommitMaxWaitMicroseconds")
    def memory_usage_overcommit_max_wait_microseconds(self) -> Optional[int]:
        """
        Maximum time thread will wait for memory to be freed in the case of memory overcommit on a user level. If the timeout is reached and memory is not freed, an exception is thrown.
        """
        return pulumi.get(self, "memory_usage_overcommit_max_wait_microseconds")

    @property
    @pulumi.getter(name="mergeTreeMaxBytesToUseCache")
    def merge_tree_max_bytes_to_use_cache(self) -> Optional[int]:
        """
        If ClickHouse should read more than merge_tree_max_bytes_to_use_cache bytes in one query, it doesn’t use the cache of uncompressed blocks.
        """
        return pulumi.get(self, "merge_tree_max_bytes_to_use_cache")

    @property
    @pulumi.getter(name="mergeTreeMaxRowsToUseCache")
    def merge_tree_max_rows_to_use_cache(self) -> Optional[int]:
        """
        If ClickHouse should read more than merge_tree_max_rows_to_use_cache rows in one query, it doesn’t use the cache of uncompressed blocks.
        """
        return pulumi.get(self, "merge_tree_max_rows_to_use_cache")

    @property
    @pulumi.getter(name="mergeTreeMinBytesForConcurrentRead")
    def merge_tree_min_bytes_for_concurrent_read(self) -> Optional[int]:
        """
        If the number of bytes to read from one file of a MergeTree-engine table exceeds merge_tree_min_bytes_for_concurrent_read, then ClickHouse tries to concurrently read from this file in several threads.
        """
        return pulumi.get(self, "merge_tree_min_bytes_for_concurrent_read")

    @property
    @pulumi.getter(name="mergeTreeMinRowsForConcurrentRead")
    def merge_tree_min_rows_for_concurrent_read(self) -> Optional[int]:
        """
        If the number of rows to be read from a file of a MergeTree table exceeds merge_tree_min_rows_for_concurrent_read then ClickHouse tries to perform a concurrent reading from this file on several threads.
        """
        return pulumi.get(self, "merge_tree_min_rows_for_concurrent_read")

    @property
    @pulumi.getter(name="minBytesToUseDirectIo")
    def min_bytes_to_use_direct_io(self) -> Optional[int]:
        """
        The minimum data volume required for using direct I/O access to the storage disk.
        """
        return pulumi.get(self, "min_bytes_to_use_direct_io")

    @property
    @pulumi.getter(name="minCountToCompile")
    def min_count_to_compile(self) -> Optional[int]:
        """
        How many times to potentially use a compiled chunk of code before running compilation.
        """
        return pulumi.get(self, "min_count_to_compile")

    @property
    @pulumi.getter(name="minCountToCompileExpression")
    def min_count_to_compile_expression(self) -> Optional[int]:
        """
        A query waits for expression compilation process to complete prior to continuing execution.
        """
        return pulumi.get(self, "min_count_to_compile_expression")

    @property
    @pulumi.getter(name="minExecutionSpeed")
    def min_execution_speed(self) -> Optional[int]:
        """
        Minimal execution speed in rows per second.
        """
        return pulumi.get(self, "min_execution_speed")

    @property
    @pulumi.getter(name="minExecutionSpeedBytes")
    def min_execution_speed_bytes(self) -> Optional[int]:
        """
        Minimal execution speed in bytes per second.
        """
        return pulumi.get(self, "min_execution_speed_bytes")

    @property
    @pulumi.getter(name="minInsertBlockSizeBytes")
    def min_insert_block_size_bytes(self) -> Optional[int]:
        """
        Sets the minimum number of bytes in the block which can be inserted into a table by an INSERT query.
        """
        return pulumi.get(self, "min_insert_block_size_bytes")

    @property
    @pulumi.getter(name="minInsertBlockSizeRows")
    def min_insert_block_size_rows(self) -> Optional[int]:
        """
        Sets the minimum number of rows in the block which can be inserted into a table by an INSERT query.
        """
        return pulumi.get(self, "min_insert_block_size_rows")

    @property
    @pulumi.getter(name="outputFormatJsonQuote64bitIntegers")
    def output_format_json_quote64bit_integers(self) -> Optional[bool]:
        """
        If the value is true, integers appear in quotes when using JSON* Int64 and UInt64 formats (for compatibility with most JavaScript implementations); otherwise, integers are output without the quotes.
        """
        return pulumi.get(self, "output_format_json_quote64bit_integers")

    @property
    @pulumi.getter(name="outputFormatJsonQuoteDenormals")
    def output_format_json_quote_denormals(self) -> Optional[bool]:
        """
        Enables +nan, -nan, +inf, -inf outputs in JSON output format.
        """
        return pulumi.get(self, "output_format_json_quote_denormals")

    @property
    @pulumi.getter(name="preferLocalhostReplica")
    def prefer_localhost_replica(self) -> Optional[bool]:
        """
        Enables/disables preferable using the localhost replica when processing distributed queries. Default value: true.
        """
        return pulumi.get(self, "prefer_localhost_replica")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Query priority.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="quotaMode")
    def quota_mode(self) -> Optional[str]:
        """
        Quota accounting mode.
        """
        return pulumi.get(self, "quota_mode")

    @property
    @pulumi.getter(name="readOverflowMode")
    def read_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow while read. Possible values:
        """
        return pulumi.get(self, "read_overflow_mode")

    @property
    @pulumi.getter
    def readonly(self) -> Optional[int]:
        """
        Restricts permissions for reading data, write data and change settings queries.
        """
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter(name="receiveTimeout")
    def receive_timeout(self) -> Optional[int]:
        """
        Receive timeout in milliseconds on the socket used for communicating with the client.
        """
        return pulumi.get(self, "receive_timeout")

    @property
    @pulumi.getter(name="remoteFilesystemReadMethod")
    def remote_filesystem_read_method(self) -> Optional[str]:
        """
        Method of reading data from remote filesystem, one of: `read`, `threadpool`.
        """
        return pulumi.get(self, "remote_filesystem_read_method")

    @property
    @pulumi.getter(name="replicationAlterPartitionsSync")
    def replication_alter_partitions_sync(self) -> Optional[int]:
        """
        For ALTER ... ATTACH|DETACH|DROP queries, you can use the replication_alter_partitions_sync setting to set up waiting.
        """
        return pulumi.get(self, "replication_alter_partitions_sync")

    @property
    @pulumi.getter(name="resultOverflowMode")
    def result_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow in result. Possible values:
        """
        return pulumi.get(self, "result_overflow_mode")

    @property
    @pulumi.getter(name="selectSequentialConsistency")
    def select_sequential_consistency(self) -> Optional[bool]:
        """
        Enables or disables sequential consistency for SELECT queries.
        """
        return pulumi.get(self, "select_sequential_consistency")

    @property
    @pulumi.getter(name="sendProgressInHttpHeaders")
    def send_progress_in_http_headers(self) -> Optional[bool]:
        """
        Enables or disables X-ClickHouse-Progress HTTP response headers in clickhouse-server responses.
        """
        return pulumi.get(self, "send_progress_in_http_headers")

    @property
    @pulumi.getter(name="sendTimeout")
    def send_timeout(self) -> Optional[int]:
        """
        Send timeout in milliseconds on the socket used for communicating with the client.
        """
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter(name="setOverflowMode")
    def set_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow in the set resulting. Possible values:
        """
        return pulumi.get(self, "set_overflow_mode")

    @property
    @pulumi.getter(name="skipUnavailableShards")
    def skip_unavailable_shards(self) -> Optional[bool]:
        """
        Enables or disables silently skipping of unavailable shards.
        """
        return pulumi.get(self, "skip_unavailable_shards")

    @property
    @pulumi.getter(name="sortOverflowMode")
    def sort_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow while sort. Possible values:
        """
        return pulumi.get(self, "sort_overflow_mode")

    @property
    @pulumi.getter(name="timeoutBeforeCheckingExecutionSpeed")
    def timeout_before_checking_execution_speed(self) -> Optional[int]:
        """
        Timeout (in seconds) between checks of execution speed. It is checked that execution speed is not less that specified in min_execution_speed parameter.
        Must be at least 1000.
        """
        return pulumi.get(self, "timeout_before_checking_execution_speed")

    @property
    @pulumi.getter(name="timeoutOverflowMode")
    def timeout_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow. Possible values:
        """
        return pulumi.get(self, "timeout_overflow_mode")

    @property
    @pulumi.getter(name="transferOverflowMode")
    def transfer_overflow_mode(self) -> Optional[str]:
        """
        Sets behaviour on overflow. Possible values:
        """
        return pulumi.get(self, "transfer_overflow_mode")

    @property
    @pulumi.getter(name="transformNullIn")
    def transform_null_in(self) -> Optional[bool]:
        """
        Enables equality of NULL values for IN operator.
        """
        return pulumi.get(self, "transform_null_in")

    @property
    @pulumi.getter(name="useHedgedRequests")
    def use_hedged_requests(self) -> Optional[bool]:
        """
        Enables hedged requests logic for remote queries. It allows to establish many connections with different replicas for query. New connection is enabled in case existent connection(s) with replica(s) were not established within hedged_connection_timeout or no data was received within receive_data_timeout. Query uses the first connection which send non empty progress packet (or data packet, if allow_changing_replica_until_first_data_packet); other connections are cancelled. Queries with max_parallel_replicas > 1 are supported. Default value: true.
        """
        return pulumi.get(self, "use_hedged_requests")

    @property
    @pulumi.getter(name="useUncompressedCache")
    def use_uncompressed_cache(self) -> Optional[bool]:
        """
        Whether to use a cache of uncompressed blocks.
        """
        return pulumi.get(self, "use_uncompressed_cache")

    @property
    @pulumi.getter(name="waitForAsyncInsert")
    def wait_for_async_insert(self) -> Optional[bool]:
        """
        Enables waiting for processing of asynchronous insertion. If enabled, server returns OK only after the data is inserted.
        """
        return pulumi.get(self, "wait_for_async_insert")

    @property
    @pulumi.getter(name="waitForAsyncInsertTimeout")
    def wait_for_async_insert_timeout(self) -> Optional[int]:
        """
        The timeout (in seconds) for waiting for processing of asynchronous insertion. Value must be at least 1000 (1 second).
        """
        return pulumi.get(self, "wait_for_async_insert_timeout")


@pulumi.output_type
class MdbClickhouseClusterZookeeper(dict):
    def __init__(__self__, *,
                 resources: Optional['outputs.MdbClickhouseClusterZookeeperResources'] = None):
        """
        :param 'MdbClickhouseClusterZookeeperResourcesArgs' resources: Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.MdbClickhouseClusterZookeeperResources']:
        """
        Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbClickhouseClusterZookeeperResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbClickhouseClusterZookeeperResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbClickhouseClusterZookeeperResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbClickhouseClusterZookeeperResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of hosts.
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbElasticsearchClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "adminPassword":
            suggest = "admin_password"
        elif key == "dataNode":
            suggest = "data_node"
        elif key == "masterNode":
            suggest = "master_node"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbElasticsearchClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbElasticsearchClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbElasticsearchClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 admin_password: str,
                 data_node: 'outputs.MdbElasticsearchClusterConfigDataNode',
                 edition: Optional[str] = None,
                 master_node: Optional['outputs.MdbElasticsearchClusterConfigMasterNode'] = None,
                 plugins: Optional[Sequence[str]] = None,
                 version: Optional[str] = None):
        """
        :param str admin_password: Password for admin user of Elasticsearch.
        :param 'MdbElasticsearchClusterConfigDataNodeArgs' data_node: Configuration for Elasticsearch data nodes subcluster. The structure is documented below.
        :param str edition: Edition of Elasticsearch. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-elasticsearch/concepts/es-editions).
        :param 'MdbElasticsearchClusterConfigMasterNodeArgs' master_node: Configuration for Elasticsearch master nodes subcluster. The structure is documented below.
        :param Sequence[str] plugins: A set of Elasticsearch plugins to install.
        :param str version: Version of Elasticsearch.
        """
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "data_node", data_node)
        if edition is not None:
            pulumi.set(__self__, "edition", edition)
        if master_node is not None:
            pulumi.set(__self__, "master_node", master_node)
        if plugins is not None:
            pulumi.set(__self__, "plugins", plugins)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        """
        Password for admin user of Elasticsearch.
        """
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="dataNode")
    def data_node(self) -> 'outputs.MdbElasticsearchClusterConfigDataNode':
        """
        Configuration for Elasticsearch data nodes subcluster. The structure is documented below.
        """
        return pulumi.get(self, "data_node")

    @property
    @pulumi.getter
    def edition(self) -> Optional[str]:
        """
        Edition of Elasticsearch. For more information, see [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-elasticsearch/concepts/es-editions).
        """
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> Optional['outputs.MdbElasticsearchClusterConfigMasterNode']:
        """
        Configuration for Elasticsearch master nodes subcluster. The structure is documented below.
        """
        return pulumi.get(self, "master_node")

    @property
    @pulumi.getter
    def plugins(self) -> Optional[Sequence[str]]:
        """
        A set of Elasticsearch plugins to install.
        """
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of Elasticsearch.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MdbElasticsearchClusterConfigDataNode(dict):
    def __init__(__self__, *,
                 resources: 'outputs.MdbElasticsearchClusterConfigDataNodeResources'):
        """
        :param 'MdbElasticsearchClusterConfigDataNodeResourcesArgs' resources: Resources allocated to hosts of the Elasticsearch data nodes subcluster. The structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbElasticsearchClusterConfigDataNodeResources':
        """
        Resources allocated to hosts of the Elasticsearch data nodes subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbElasticsearchClusterConfigDataNodeResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbElasticsearchClusterConfigDataNodeResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbElasticsearchClusterConfigDataNodeResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbElasticsearchClusterConfigDataNodeResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of Elasticsearch hosts.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of Elasticsearch hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbElasticsearchClusterConfigMasterNode(dict):
    def __init__(__self__, *,
                 resources: 'outputs.MdbElasticsearchClusterConfigMasterNodeResources'):
        """
        :param 'MdbElasticsearchClusterConfigMasterNodeResourcesArgs' resources: Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbElasticsearchClusterConfigMasterNodeResources':
        """
        Resources allocated to hosts of the Elasticsearch master nodes subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbElasticsearchClusterConfigMasterNodeResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbElasticsearchClusterConfigMasterNodeResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbElasticsearchClusterConfigMasterNodeResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbElasticsearchClusterConfigMasterNodeResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of Elasticsearch hosts.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of Elasticsearch hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbElasticsearchClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbElasticsearchClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbElasticsearchClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbElasticsearchClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str name: User defined host name.
        :param str type: The type of the host to be deployed. Can be either `DATA_NODE` or `MASTER_NODE`.
        :param str zone: The availability zone where the Elasticsearch host will be created.
               For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        :param bool assign_public_ip: Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.
        :param str fqdn: The fully qualified domain name of the host.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must
               be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        User defined host name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of the host to be deployed. Can be either `DATA_NODE` or `MASTER_NODE`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the Elasticsearch host will be created.
        For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address on creation. Can be either `true` or `false`.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must
        be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbElasticsearchClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        :param int hour: Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbGreenplumClusterAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLens":
            suggest = "data_lens"
        elif key == "dataTransfer":
            suggest = "data_transfer"
        elif key == "webSql":
            suggest = "web_sql"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None,
                 web_sql: Optional[bool] = None):
        """
        :param bool data_lens: Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        :param bool data_transfer: Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        :param bool web_sql: Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).
        """
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)
        if web_sql is not None:
            pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        """
        Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        """
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        """
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> Optional[bool]:
        """
        Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).
        """
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class MdbGreenplumClusterBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started (UTC).
        :param int minutes: The minute at which backup will be started (UTC).
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started (UTC).
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started (UTC).
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbGreenplumClusterCloudStorage(dict):
    def __init__(__self__, *,
                 enable: Optional[bool] = None):
        """
        :param bool enable: Whether to use cloud storage or not.
        """
        if enable is not None:
            pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> Optional[bool]:
        """
        Whether to use cloud storage or not.
        """
        return pulumi.get(self, "enable")


@pulumi.output_type
class MdbGreenplumClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        :param int hour: Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbGreenplumClusterMasterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterMasterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterMasterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterMasterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None):
        """
        :param bool assign_public_ip: Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
        :param str fqdn: (Computed) The fully qualified domain name of the host.
        """
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the master hosts should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        (Computed) The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class MdbGreenplumClusterMasterSubcluster(dict):
    def __init__(__self__, *,
                 resources: 'outputs.MdbGreenplumClusterMasterSubclusterResources'):
        """
        :param 'MdbGreenplumClusterMasterSubclusterResourcesArgs' resources: Resources allocated to hosts for master subcluster of the Greenplum cluster. The structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbGreenplumClusterMasterSubclusterResources':
        """
        Resources allocated to hosts for master subcluster of the Greenplum cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbGreenplumClusterMasterSubclusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterMasterSubclusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterMasterSubclusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterMasterSubclusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbGreenplumClusterPoolerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolClientIdleTimeout":
            suggest = "pool_client_idle_timeout"
        elif key == "poolSize":
            suggest = "pool_size"
        elif key == "poolingMode":
            suggest = "pooling_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterPoolerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterPoolerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterPoolerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_client_idle_timeout: Optional[int] = None,
                 pool_size: Optional[int] = None,
                 pooling_mode: Optional[str] = None):
        """
        :param int pool_client_idle_timeout: Value for `pool_client_idle_timeout` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer).
        :param int pool_size: Value for `pool_size` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer).
        :param str pooling_mode: Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
        """
        if pool_client_idle_timeout is not None:
            pulumi.set(__self__, "pool_client_idle_timeout", pool_client_idle_timeout)
        if pool_size is not None:
            pulumi.set(__self__, "pool_size", pool_size)
        if pooling_mode is not None:
            pulumi.set(__self__, "pooling_mode", pooling_mode)

    @property
    @pulumi.getter(name="poolClientIdleTimeout")
    def pool_client_idle_timeout(self) -> Optional[int]:
        """
        Value for `pool_client_idle_timeout` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_ttl-integer).
        """
        return pulumi.get(self, "pool_client_idle_timeout")

    @property
    @pulumi.getter(name="poolSize")
    def pool_size(self) -> Optional[int]:
        """
        Value for `pool_size` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_size-integer).
        """
        return pulumi.get(self, "pool_size")

    @property
    @pulumi.getter(name="poolingMode")
    def pooling_mode(self) -> Optional[str]:
        """
        Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
        """
        return pulumi.get(self, "pooling_mode")


@pulumi.output_type
class MdbGreenplumClusterPxfConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connectionTimeout":
            suggest = "connection_timeout"
        elif key == "maxThreads":
            suggest = "max_threads"
        elif key == "poolAllowCoreThreadTimeout":
            suggest = "pool_allow_core_thread_timeout"
        elif key == "poolCoreSize":
            suggest = "pool_core_size"
        elif key == "poolMaxSize":
            suggest = "pool_max_size"
        elif key == "poolQueueCapacity":
            suggest = "pool_queue_capacity"
        elif key == "uploadTimeout":
            suggest = "upload_timeout"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterPxfConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterPxfConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterPxfConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 connection_timeout: Optional[int] = None,
                 max_threads: Optional[int] = None,
                 pool_allow_core_thread_timeout: Optional[bool] = None,
                 pool_core_size: Optional[int] = None,
                 pool_max_size: Optional[int] = None,
                 pool_queue_capacity: Optional[int] = None,
                 upload_timeout: Optional[int] = None,
                 xms: Optional[int] = None,
                 xmx: Optional[int] = None):
        """
        :param int connection_timeout: The Tomcat server connection timeout for read operations in seconds. Value is between 5 and 600.
        :param int max_threads: The maximum number of PXF tomcat threads. Value is between 1 and 1024.
        :param bool pool_allow_core_thread_timeout: Identifies whether or not core streaming threads are allowed to time out.
        :param int pool_core_size: The number of core streaming threads. Value is between 1 and 1024.
        :param int pool_max_size: The maximum allowed number of core streaming threads. Value is between 1 and 1024.
        :param int pool_queue_capacity: The capacity of the core streaming thread pool queue. Value is positive.
        :param int upload_timeout: The Tomcat server connection timeout for write operations in seconds. Value is between 5 and 600.
        :param int xms: Maximum JVM heap size for PXF daemon. Value is between 64 and 16384.
        :param int xmx: Initial JVM heap size for PXF daemon. Value is between 64 and 16384.
        """
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if max_threads is not None:
            pulumi.set(__self__, "max_threads", max_threads)
        if pool_allow_core_thread_timeout is not None:
            pulumi.set(__self__, "pool_allow_core_thread_timeout", pool_allow_core_thread_timeout)
        if pool_core_size is not None:
            pulumi.set(__self__, "pool_core_size", pool_core_size)
        if pool_max_size is not None:
            pulumi.set(__self__, "pool_max_size", pool_max_size)
        if pool_queue_capacity is not None:
            pulumi.set(__self__, "pool_queue_capacity", pool_queue_capacity)
        if upload_timeout is not None:
            pulumi.set(__self__, "upload_timeout", upload_timeout)
        if xms is not None:
            pulumi.set(__self__, "xms", xms)
        if xmx is not None:
            pulumi.set(__self__, "xmx", xmx)

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[int]:
        """
        The Tomcat server connection timeout for read operations in seconds. Value is between 5 and 600.
        """
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter(name="maxThreads")
    def max_threads(self) -> Optional[int]:
        """
        The maximum number of PXF tomcat threads. Value is between 1 and 1024.
        """
        return pulumi.get(self, "max_threads")

    @property
    @pulumi.getter(name="poolAllowCoreThreadTimeout")
    def pool_allow_core_thread_timeout(self) -> Optional[bool]:
        """
        Identifies whether or not core streaming threads are allowed to time out.
        """
        return pulumi.get(self, "pool_allow_core_thread_timeout")

    @property
    @pulumi.getter(name="poolCoreSize")
    def pool_core_size(self) -> Optional[int]:
        """
        The number of core streaming threads. Value is between 1 and 1024.
        """
        return pulumi.get(self, "pool_core_size")

    @property
    @pulumi.getter(name="poolMaxSize")
    def pool_max_size(self) -> Optional[int]:
        """
        The maximum allowed number of core streaming threads. Value is between 1 and 1024.
        """
        return pulumi.get(self, "pool_max_size")

    @property
    @pulumi.getter(name="poolQueueCapacity")
    def pool_queue_capacity(self) -> Optional[int]:
        """
        The capacity of the core streaming thread pool queue. Value is positive.
        """
        return pulumi.get(self, "pool_queue_capacity")

    @property
    @pulumi.getter(name="uploadTimeout")
    def upload_timeout(self) -> Optional[int]:
        """
        The Tomcat server connection timeout for write operations in seconds. Value is between 5 and 600.
        """
        return pulumi.get(self, "upload_timeout")

    @property
    @pulumi.getter
    def xms(self) -> Optional[int]:
        """
        Maximum JVM heap size for PXF daemon. Value is between 64 and 16384.
        """
        return pulumi.get(self, "xms")

    @property
    @pulumi.getter
    def xmx(self) -> Optional[int]:
        """
        Initial JVM heap size for PXF daemon. Value is between 64 and 16384.
        """
        return pulumi.get(self, "xmx")


@pulumi.output_type
class MdbGreenplumClusterSegmentHost(dict):
    def __init__(__self__, *,
                 fqdn: Optional[str] = None):
        """
        :param str fqdn: (Computed) The fully qualified domain name of the host.
        """
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        (Computed) The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class MdbGreenplumClusterSegmentSubcluster(dict):
    def __init__(__self__, *,
                 resources: 'outputs.MdbGreenplumClusterSegmentSubclusterResources'):
        """
        :param 'MdbGreenplumClusterSegmentSubclusterResourcesArgs' resources: Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbGreenplumClusterSegmentSubclusterResources':
        """
        Resources allocated to hosts for segment subcluster of the Greenplum cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbGreenplumClusterSegmentSubclusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbGreenplumClusterSegmentSubclusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbGreenplumClusterSegmentSubclusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbGreenplumClusterSegmentSubclusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbKafkaClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "brokersCount":
            suggest = "brokers_count"
        elif key == "diskSizeAutoscaling":
            suggest = "disk_size_autoscaling"
        elif key == "schemaRegistry":
            suggest = "schema_registry"
        elif key == "unmanagedTopics":
            suggest = "unmanaged_topics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kafka: 'outputs.MdbKafkaClusterConfigKafka',
                 version: str,
                 zones: Sequence[str],
                 access: Optional['outputs.MdbKafkaClusterConfigAccess'] = None,
                 assign_public_ip: Optional[bool] = None,
                 brokers_count: Optional[int] = None,
                 disk_size_autoscaling: Optional['outputs.MdbKafkaClusterConfigDiskSizeAutoscaling'] = None,
                 schema_registry: Optional[bool] = None,
                 unmanaged_topics: Optional[bool] = None,
                 zookeeper: Optional['outputs.MdbKafkaClusterConfigZookeeper'] = None):
        """
        :param 'MdbKafkaClusterConfigKafkaArgs' kafka: Configuration of the Kafka subcluster. The structure is documented below.
        :param str version: Version of the Kafka server software.
        :param Sequence[str] zones: List of availability zones.
        :param 'MdbKafkaClusterConfigAccessArgs' access: Access policy to the Kafka cluster. The structure is documented below.
               
               - - -
        :param bool assign_public_ip: Determines whether each broker will be assigned a public IP address. The default is `false`.
        :param int brokers_count: Count of brokers per availability zone. The default is `1`.
        :param bool schema_registry: Enables managed schema registry on cluster. The default is `false`.
        :param 'MdbKafkaClusterConfigZookeeperArgs' zookeeper: Configuration of the ZooKeeper subcluster. The structure is documented below.
        """
        pulumi.set(__self__, "kafka", kafka)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zones", zones)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if brokers_count is not None:
            pulumi.set(__self__, "brokers_count", brokers_count)
        if disk_size_autoscaling is not None:
            pulumi.set(__self__, "disk_size_autoscaling", disk_size_autoscaling)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if unmanaged_topics is not None:
            pulumi.set(__self__, "unmanaged_topics", unmanaged_topics)
        if zookeeper is not None:
            pulumi.set(__self__, "zookeeper", zookeeper)

    @property
    @pulumi.getter
    def kafka(self) -> 'outputs.MdbKafkaClusterConfigKafka':
        """
        Configuration of the Kafka subcluster. The structure is documented below.
        """
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the Kafka server software.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        """
        List of availability zones.
        """
        return pulumi.get(self, "zones")

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.MdbKafkaClusterConfigAccess']:
        """
        Access policy to the Kafka cluster. The structure is documented below.

        - - -
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Determines whether each broker will be assigned a public IP address. The default is `false`.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="brokersCount")
    def brokers_count(self) -> Optional[int]:
        """
        Count of brokers per availability zone. The default is `1`.
        """
        return pulumi.get(self, "brokers_count")

    @property
    @pulumi.getter(name="diskSizeAutoscaling")
    def disk_size_autoscaling(self) -> Optional['outputs.MdbKafkaClusterConfigDiskSizeAutoscaling']:
        return pulumi.get(self, "disk_size_autoscaling")

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[bool]:
        """
        Enables managed schema registry on cluster. The default is `false`.
        """
        return pulumi.get(self, "schema_registry")

    @property
    @pulumi.getter(name="unmanagedTopics")
    def unmanaged_topics(self) -> Optional[bool]:
        warnings.warn("""The 'unmanaged_topics' field has been deprecated, because feature enabled permanently and can't be disabled.""", DeprecationWarning)
        pulumi.log.warn("""unmanaged_topics is deprecated: The 'unmanaged_topics' field has been deprecated, because feature enabled permanently and can't be disabled.""")

        return pulumi.get(self, "unmanaged_topics")

    @property
    @pulumi.getter
    def zookeeper(self) -> Optional['outputs.MdbKafkaClusterConfigZookeeper']:
        """
        Configuration of the ZooKeeper subcluster. The structure is documented below.
        """
        return pulumi.get(self, "zookeeper")


@pulumi.output_type
class MdbKafkaClusterConfigAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataTransfer":
            suggest = "data_transfer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_transfer: Optional[bool] = None):
        """
        :param bool data_transfer: Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
               
               The `user` block is deprecated. To manage users, please switch to using a separate resource type
               `MdbKafkaUser`. The `user` block supports:
        """
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)

        The `user` block is deprecated. To manage users, please switch to using a separate resource type
        `MdbKafkaUser`. The `user` block supports:
        """
        return pulumi.get(self, "data_transfer")


@pulumi.output_type
class MdbKafkaClusterConfigDiskSizeAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigDiskSizeAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigDiskSizeAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigDiskSizeAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbKafkaClusterConfigKafka(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kafkaConfig":
            suggest = "kafka_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigKafka. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigKafka.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigKafka.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resources: 'outputs.MdbKafkaClusterConfigKafkaResources',
                 kafka_config: Optional['outputs.MdbKafkaClusterConfigKafkaKafkaConfig'] = None):
        """
        :param 'MdbKafkaClusterConfigKafkaResourcesArgs' resources: Resources allocated to hosts of the Kafka subcluster. The structure is documented below.
        :param 'MdbKafkaClusterConfigKafkaKafkaConfigArgs' kafka_config: User-defined settings for the Kafka cluster. The structure is documented below.
        """
        pulumi.set(__self__, "resources", resources)
        if kafka_config is not None:
            pulumi.set(__self__, "kafka_config", kafka_config)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbKafkaClusterConfigKafkaResources':
        """
        Resources allocated to hosts of the Kafka subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="kafkaConfig")
    def kafka_config(self) -> Optional['outputs.MdbKafkaClusterConfigKafkaKafkaConfig']:
        """
        User-defined settings for the Kafka cluster. The structure is documented below.
        """
        return pulumi.get(self, "kafka_config")


@pulumi.output_type
class MdbKafkaClusterConfigKafkaKafkaConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoCreateTopicsEnable":
            suggest = "auto_create_topics_enable"
        elif key == "compressionType":
            suggest = "compression_type"
        elif key == "defaultReplicationFactor":
            suggest = "default_replication_factor"
        elif key == "logFlushIntervalMessages":
            suggest = "log_flush_interval_messages"
        elif key == "logFlushIntervalMs":
            suggest = "log_flush_interval_ms"
        elif key == "logFlushSchedulerIntervalMs":
            suggest = "log_flush_scheduler_interval_ms"
        elif key == "logPreallocate":
            suggest = "log_preallocate"
        elif key == "logRetentionBytes":
            suggest = "log_retention_bytes"
        elif key == "logRetentionHours":
            suggest = "log_retention_hours"
        elif key == "logRetentionMinutes":
            suggest = "log_retention_minutes"
        elif key == "logRetentionMs":
            suggest = "log_retention_ms"
        elif key == "logSegmentBytes":
            suggest = "log_segment_bytes"
        elif key == "messageMaxBytes":
            suggest = "message_max_bytes"
        elif key == "numPartitions":
            suggest = "num_partitions"
        elif key == "offsetsRetentionMinutes":
            suggest = "offsets_retention_minutes"
        elif key == "replicaFetchMaxBytes":
            suggest = "replica_fetch_max_bytes"
        elif key == "saslEnabledMechanisms":
            suggest = "sasl_enabled_mechanisms"
        elif key == "socketReceiveBufferBytes":
            suggest = "socket_receive_buffer_bytes"
        elif key == "socketSendBufferBytes":
            suggest = "socket_send_buffer_bytes"
        elif key == "sslCipherSuites":
            suggest = "ssl_cipher_suites"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigKafkaKafkaConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigKafkaKafkaConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigKafkaKafkaConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[bool] = None,
                 compression_type: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 log_flush_interval_messages: Optional[str] = None,
                 log_flush_interval_ms: Optional[str] = None,
                 log_flush_scheduler_interval_ms: Optional[str] = None,
                 log_preallocate: Optional[bool] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_retention_minutes: Optional[str] = None,
                 log_retention_ms: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 sasl_enabled_mechanisms: Optional[Sequence[str]] = None,
                 socket_receive_buffer_bytes: Optional[str] = None,
                 socket_send_buffer_bytes: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence[str]] = None):
        """
        :param str compression_type: , `log_flush_interval_messages`, `log_flush_interval_ms`, `log_flush_scheduler_interval_ms`, `log_retention_bytes`, `log_retention_hours`,
               `log_retention_minutes`, `log_retention_ms`, `log_segment_bytes`, `log_preallocate`, `socket_send_buffer_bytes`, `socket_receive_buffer_bytes`, `auto_create_topics_enable`,
               `num_partitions`, `default_replication_factor`, `message_max_bytes`, `replica_fetch_max_bytes`, `ssl_cipher_suites`, `offsets_retention_minutes`, `sasl_enabled_mechanisms` - (Optional) Kafka server settings. For more information, see
               [the official documentation](https://cloud.yandex.com/docs/managed-kafka/operations/cluster-update)
               and [the Kafka documentation](https://kafka.apache.org/documentation/#configuration).
        """
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_flush_scheduler_interval_ms is not None:
            pulumi.set(__self__, "log_flush_scheduler_interval_ms", log_flush_scheduler_interval_ms)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_minutes is not None:
            pulumi.set(__self__, "log_retention_minutes", log_retention_minutes)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if sasl_enabled_mechanisms is not None:
            pulumi.set(__self__, "sasl_enabled_mechanisms", sasl_enabled_mechanisms)
        if socket_receive_buffer_bytes is not None:
            pulumi.set(__self__, "socket_receive_buffer_bytes", socket_receive_buffer_bytes)
        if socket_send_buffer_bytes is not None:
            pulumi.set(__self__, "socket_send_buffer_bytes", socket_send_buffer_bytes)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[bool]:
        return pulumi.get(self, "auto_create_topics_enable")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        """
        , `log_flush_interval_messages`, `log_flush_interval_ms`, `log_flush_scheduler_interval_ms`, `log_retention_bytes`, `log_retention_hours`,
        `log_retention_minutes`, `log_retention_ms`, `log_segment_bytes`, `log_preallocate`, `socket_send_buffer_bytes`, `socket_receive_buffer_bytes`, `auto_create_topics_enable`,
        `num_partitions`, `default_replication_factor`, `message_max_bytes`, `replica_fetch_max_bytes`, `ssl_cipher_suites`, `offsets_retention_minutes`, `sasl_enabled_mechanisms` - (Optional) Kafka server settings. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-kafka/operations/cluster-update)
        and [the Kafka documentation](https://kafka.apache.org/documentation/#configuration).
        """
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        return pulumi.get(self, "default_replication_factor")

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_messages")

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_ms")

    @property
    @pulumi.getter(name="logFlushSchedulerIntervalMs")
    def log_flush_scheduler_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_scheduler_interval_ms")

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[bool]:
        return pulumi.get(self, "log_preallocate")

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_bytes")

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_hours")

    @property
    @pulumi.getter(name="logRetentionMinutes")
    def log_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_minutes")

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_ms")

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_bytes")

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "message_max_bytes")

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        return pulumi.get(self, "num_partitions")

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "offsets_retention_minutes")

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @property
    @pulumi.getter(name="saslEnabledMechanisms")
    def sasl_enabled_mechanisms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sasl_enabled_mechanisms")

    @property
    @pulumi.getter(name="socketReceiveBufferBytes")
    def socket_receive_buffer_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_receive_buffer_bytes")

    @property
    @pulumi.getter(name="socketSendBufferBytes")
    def socket_send_buffer_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_send_buffer_bytes")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssl_cipher_suites")


@pulumi.output_type
class MdbKafkaClusterConfigKafkaResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigKafkaResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigKafkaResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigKafkaResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a ZooKeeper host, in gigabytes.
        :param str disk_type_id: Type of the storage of ZooKeeper hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a ZooKeeper host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of ZooKeeper hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbKafkaClusterConfigZookeeper(dict):
    def __init__(__self__, *,
                 resources: Optional['outputs.MdbKafkaClusterConfigZookeeperResources'] = None):
        """
        :param 'MdbKafkaClusterConfigZookeeperResourcesArgs' resources: Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
        """
        if resources is not None:
            pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Optional['outputs.MdbKafkaClusterConfigZookeeperResources']:
        """
        Resources allocated to hosts of the ZooKeeper subcluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")


@pulumi.output_type
class MdbKafkaClusterConfigZookeeperResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterConfigZookeeperResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterConfigZookeeperResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterConfigZookeeperResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a ZooKeeper host, in gigabytes.
        :param str disk_type_id: Type of the storage of ZooKeeper hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).
        """
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        """
        Volume of the storage available to a ZooKeeper host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of ZooKeeper hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts/storage).
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbKafkaClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "subnetId":
            suggest = "subnet_id"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 assign_public_ip: Optional[bool] = None,
                 health: Optional[str] = None,
                 name: Optional[str] = None,
                 role: Optional[str] = None,
                 subnet_id: Optional[str] = None,
                 zone_id: Optional[str] = None):
        """
        :param bool assign_public_ip: Determines whether each broker will be assigned a public IP address. The default is `false`.
        :param str health: Health of the host.
        :param str name: Name of the Kafka cluster. Provided by the client when the cluster is created.
        :param str role: The role type to grant to the topic.
        :param str subnet_id: The ID of the subnet, to which the host belongs.
        :param str zone_id: The availability zone where the Kafka host was created.
        """
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Determines whether each broker will be assigned a public IP address. The default is `false`.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        Health of the host.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Name of the Kafka cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role type to grant to the topic.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        The availability zone where the Kafka host was created.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class MdbKafkaClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        :param int hour: Hour of the day in UTC (in `HH` format). Allowed value is between 1 and 24.
               
               - - -
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of the day in UTC (in `HH` format). Allowed value is between 1 and 24.

        - - -
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbKafkaClusterTopic(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationFactor":
            suggest = "replication_factor"
        elif key == "topicConfig":
            suggest = "topic_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterTopic. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterTopic.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterTopic.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 partitions: int,
                 replication_factor: int,
                 topic_config: Optional['outputs.MdbKafkaClusterTopicTopicConfig'] = None):
        """
        :param str name: Name of the Kafka cluster. Provided by the client when the cluster is created.
        :param int partitions: The number of the topic's partitions.
        :param int replication_factor: Amount of data copies (replicas) for the topic in the cluster.
        :param 'MdbKafkaClusterTopicTopicConfigArgs' topic_config: User-defined settings for the topic. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "replication_factor", replication_factor)
        if topic_config is not None:
            pulumi.set(__self__, "topic_config", topic_config)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Kafka cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> int:
        """
        The number of the topic's partitions.
        """
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        """
        Amount of data copies (replicas) for the topic in the cluster.
        """
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="topicConfig")
    def topic_config(self) -> Optional['outputs.MdbKafkaClusterTopicTopicConfig']:
        """
        User-defined settings for the topic. The structure is documented below.
        """
        return pulumi.get(self, "topic_config")


@pulumi.output_type
class MdbKafkaClusterTopicTopicConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "compressionType":
            suggest = "compression_type"
        elif key == "deleteRetentionMs":
            suggest = "delete_retention_ms"
        elif key == "fileDeleteDelayMs":
            suggest = "file_delete_delay_ms"
        elif key == "flushMessages":
            suggest = "flush_messages"
        elif key == "flushMs":
            suggest = "flush_ms"
        elif key == "maxMessageBytes":
            suggest = "max_message_bytes"
        elif key == "minCompactionLagMs":
            suggest = "min_compaction_lag_ms"
        elif key == "minInsyncReplicas":
            suggest = "min_insync_replicas"
        elif key == "retentionBytes":
            suggest = "retention_bytes"
        elif key == "retentionMs":
            suggest = "retention_ms"
        elif key == "segmentBytes":
            suggest = "segment_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterTopicTopicConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterTopicTopicConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterTopicTopicConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 delete_retention_ms: Optional[str] = None,
                 file_delete_delay_ms: Optional[str] = None,
                 flush_messages: Optional[str] = None,
                 flush_ms: Optional[str] = None,
                 max_message_bytes: Optional[str] = None,
                 min_compaction_lag_ms: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 preallocate: Optional[bool] = None,
                 retention_bytes: Optional[str] = None,
                 retention_ms: Optional[str] = None,
                 segment_bytes: Optional[str] = None):
        """
        :param str compression_type: , `delete_retention_ms`, `file_delete_delay_ms`, `flush_messages`, `flush_ms`, `min_compaction_lag_ms`,
               `retention_bytes`, `retention_ms`, `max_message_bytes`, `min_insync_replicas`, `segment_bytes`, `preallocate`, - (Optional) Kafka topic settings. For more information, see
               [the official documentation](https://cloud.yandex.com/docs/managed-kafka/operations/cluster-topics#update-topic)
               and [the Kafka documentation](https://kafka.apache.org/documentation/#configuration).
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if delete_retention_ms is not None:
            pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        if file_delete_delay_ms is not None:
            pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        if flush_messages is not None:
            pulumi.set(__self__, "flush_messages", flush_messages)
        if flush_ms is not None:
            pulumi.set(__self__, "flush_ms", flush_ms)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if min_compaction_lag_ms is not None:
            pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if preallocate is not None:
            pulumi.set(__self__, "preallocate", preallocate)
        if retention_bytes is not None:
            pulumi.set(__self__, "retention_bytes", retention_bytes)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        """
        , `delete_retention_ms`, `file_delete_delay_ms`, `flush_messages`, `flush_ms`, `min_compaction_lag_ms`,
        `retention_bytes`, `retention_ms`, `max_message_bytes`, `min_insync_replicas`, `segment_bytes`, `preallocate`, - (Optional) Kafka topic settings. For more information, see
        [the official documentation](https://cloud.yandex.com/docs/managed-kafka/operations/cluster-topics#update-topic)
        and [the Kafka documentation](https://kafka.apache.org/documentation/#configuration).
        """
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "delete_retention_ms")

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> Optional[str]:
        return pulumi.get(self, "file_delete_delay_ms")

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> Optional[str]:
        return pulumi.get(self, "flush_messages")

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> Optional[str]:
        return pulumi.get(self, "flush_ms")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "min_compaction_lag_ms")

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        return pulumi.get(self, "min_insync_replicas")

    @property
    @pulumi.getter
    def preallocate(self) -> Optional[bool]:
        return pulumi.get(self, "preallocate")

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "retention_bytes")

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "retention_ms")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "segment_bytes")


@pulumi.output_type
class MdbKafkaClusterUser(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Optional[Sequence['outputs.MdbKafkaClusterUserPermission']] = None):
        """
        :param str name: Name of the Kafka cluster. Provided by the client when the cluster is created.
        :param str password: The password of the user.
        :param Sequence['MdbKafkaClusterUserPermissionArgs'] permissions: Set of permissions granted to the user. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the Kafka cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbKafkaClusterUserPermission']]:
        """
        Set of permissions granted to the user. The structure is documented below.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class MdbKafkaClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicName":
            suggest = "topic_name"
        elif key == "allowHosts":
            suggest = "allow_hosts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 topic_name: str,
                 allow_hosts: Optional[Sequence[str]] = None):
        """
        :param str role: The role type to grant to the topic.
        :param str topic_name: The name of the topic that the permission grants access to.
        :param Sequence[str] allow_hosts: Set of hosts, to which this permission grants access to.
               
               The `topic` block is deprecated. To manage topics, please switch to using a separate resource type
               `MdbKafkaTopic`. The `topic` block supports:
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "topic_name", topic_name)
        if allow_hosts is not None:
            pulumi.set(__self__, "allow_hosts", allow_hosts)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role type to grant to the topic.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The name of the topic that the permission grants access to.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="allowHosts")
    def allow_hosts(self) -> Optional[Sequence[str]]:
        """
        Set of hosts, to which this permission grants access to.

        The `topic` block is deprecated. To manage topics, please switch to using a separate resource type
        `MdbKafkaTopic`. The `topic` block supports:
        """
        return pulumi.get(self, "allow_hosts")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormaker(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "replicationFactor":
            suggest = "replication_factor"
        elif key == "sourceCluster":
            suggest = "source_cluster"
        elif key == "targetCluster":
            suggest = "target_cluster"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigMirrormaker. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormaker.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormaker.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 replication_factor: int,
                 source_cluster: 'outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster',
                 target_cluster: 'outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster',
                 topics: str):
        pulumi.set(__self__, "replication_factor", replication_factor)
        pulumi.set(__self__, "source_cluster", source_cluster)
        pulumi.set(__self__, "target_cluster", target_cluster)
        pulumi.set(__self__, "topics", topics)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="sourceCluster")
    def source_cluster(self) -> 'outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster':
        return pulumi.get(self, "source_cluster")

    @property
    @pulumi.getter(name="targetCluster")
    def target_cluster(self) -> 'outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster':
        return pulumi.get(self, "target_cluster")

    @property
    @pulumi.getter
    def topics(self) -> str:
        return pulumi.get(self, "topics")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalClusters":
            suggest = "external_clusters"
        elif key == "thisClusters":
            suggest = "this_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerSourceCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 external_clusters: Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster']] = None,
                 this_clusters: Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster']] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if external_clusters is not None:
            pulumi.set(__self__, "external_clusters", external_clusters)
        if this_clusters is not None:
            pulumi.set(__self__, "this_clusters", this_clusters)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="externalClusters")
    def external_clusters(self) -> Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster']]:
        return pulumi.get(self, "external_clusters")

    @property
    @pulumi.getter(name="thisClusters")
    def this_clusters(self) -> Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster']]:
        return pulumi.get(self, "this_clusters")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootstrapServers":
            suggest = "bootstrap_servers"
        elif key == "saslMechanism":
            suggest = "sasl_mechanism"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"
        elif key == "securityProtocol":
            suggest = "security_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bootstrap_servers: str,
                 sasl_mechanism: Optional[str] = None,
                 sasl_password: Optional[str] = None,
                 sasl_username: Optional[str] = None,
                 security_protocol: Optional[str] = None):
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> str:
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[str]:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisCluster(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "externalClusters":
            suggest = "external_clusters"
        elif key == "thisClusters":
            suggest = "this_clusters"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerTargetCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 alias: Optional[str] = None,
                 external_clusters: Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster']] = None,
                 this_clusters: Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster']] = None):
        if alias is not None:
            pulumi.set(__self__, "alias", alias)
        if external_clusters is not None:
            pulumi.set(__self__, "external_clusters", external_clusters)
        if this_clusters is not None:
            pulumi.set(__self__, "this_clusters", this_clusters)

    @property
    @pulumi.getter
    def alias(self) -> Optional[str]:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="externalClusters")
    def external_clusters(self) -> Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster']]:
        return pulumi.get(self, "external_clusters")

    @property
    @pulumi.getter(name="thisClusters")
    def this_clusters(self) -> Optional[Sequence['outputs.MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster']]:
        return pulumi.get(self, "this_clusters")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bootstrapServers":
            suggest = "bootstrap_servers"
        elif key == "saslMechanism":
            suggest = "sasl_mechanism"
        elif key == "saslPassword":
            suggest = "sasl_password"
        elif key == "saslUsername":
            suggest = "sasl_username"
        elif key == "securityProtocol":
            suggest = "security_protocol"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalCluster.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bootstrap_servers: str,
                 sasl_mechanism: Optional[str] = None,
                 sasl_password: Optional[str] = None,
                 sasl_username: Optional[str] = None,
                 security_protocol: Optional[str] = None):
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> str:
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[str]:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisCluster(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigS3Sink(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fileCompressionType":
            suggest = "file_compression_type"
        elif key == "s3Connection":
            suggest = "s3_connection"
        elif key == "fileMaxRecords":
            suggest = "file_max_records"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigS3Sink. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigS3Sink.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigS3Sink.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 file_compression_type: str,
                 s3_connection: 'outputs.MdbKafkaConnectorConnectorConfigS3SinkS3Connection',
                 topics: str,
                 file_max_records: Optional[int] = None):
        pulumi.set(__self__, "file_compression_type", file_compression_type)
        pulumi.set(__self__, "s3_connection", s3_connection)
        pulumi.set(__self__, "topics", topics)
        if file_max_records is not None:
            pulumi.set(__self__, "file_max_records", file_max_records)

    @property
    @pulumi.getter(name="fileCompressionType")
    def file_compression_type(self) -> str:
        return pulumi.get(self, "file_compression_type")

    @property
    @pulumi.getter(name="s3Connection")
    def s3_connection(self) -> 'outputs.MdbKafkaConnectorConnectorConfigS3SinkS3Connection':
        return pulumi.get(self, "s3_connection")

    @property
    @pulumi.getter
    def topics(self) -> str:
        return pulumi.get(self, "topics")

    @property
    @pulumi.getter(name="fileMaxRecords")
    def file_max_records(self) -> Optional[int]:
        return pulumi.get(self, "file_max_records")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigS3SinkS3Connection(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "bucketName":
            suggest = "bucket_name"
        elif key == "externalS3s":
            suggest = "external_s3s"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigS3SinkS3Connection. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigS3SinkS3Connection.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigS3SinkS3Connection.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket_name: str,
                 external_s3s: Sequence['outputs.MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3']):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "external_s3s", external_s3s)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="externalS3s")
    def external_s3s(self) -> Sequence['outputs.MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3']:
        return pulumi.get(self, "external_s3s")


@pulumi.output_type
class MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accessKeyId":
            suggest = "access_key_id"
        elif key == "secretAccessKey":
            suggest = "secret_access_key"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 endpoint: str,
                 access_key_id: Optional[str] = None,
                 region: Optional[str] = None,
                 secret_access_key: Optional[str] = None):
        pulumi.set(__self__, "endpoint", endpoint)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if secret_access_key is not None:
            pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> Optional[str]:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> Optional[str]:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class MdbKafkaTopicTopicConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cleanupPolicy":
            suggest = "cleanup_policy"
        elif key == "compressionType":
            suggest = "compression_type"
        elif key == "deleteRetentionMs":
            suggest = "delete_retention_ms"
        elif key == "fileDeleteDelayMs":
            suggest = "file_delete_delay_ms"
        elif key == "flushMessages":
            suggest = "flush_messages"
        elif key == "flushMs":
            suggest = "flush_ms"
        elif key == "maxMessageBytes":
            suggest = "max_message_bytes"
        elif key == "minCompactionLagMs":
            suggest = "min_compaction_lag_ms"
        elif key == "minInsyncReplicas":
            suggest = "min_insync_replicas"
        elif key == "retentionBytes":
            suggest = "retention_bytes"
        elif key == "retentionMs":
            suggest = "retention_ms"
        elif key == "segmentBytes":
            suggest = "segment_bytes"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaTopicTopicConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaTopicTopicConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaTopicTopicConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 delete_retention_ms: Optional[str] = None,
                 file_delete_delay_ms: Optional[str] = None,
                 flush_messages: Optional[str] = None,
                 flush_ms: Optional[str] = None,
                 max_message_bytes: Optional[str] = None,
                 min_compaction_lag_ms: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 preallocate: Optional[bool] = None,
                 retention_bytes: Optional[str] = None,
                 retention_ms: Optional[str] = None,
                 segment_bytes: Optional[str] = None):
        """
        :param str cleanup_policy: , `compression_type`, `delete_retention_ms`, `file_delete_delay_ms`, `flush_messages`, `flush_ms`, 
               `min_compaction_lag_ms`, `retention_bytes`, `retention_ms`, `max_message_bytes`, `min_insync_replicas`,
               `segment_bytes`, `preallocate` - (Optional) Kafka topic settings. For more information, see
               [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-kafka/concepts/settings-list#topic-settings)
               and [the Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
        """
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if delete_retention_ms is not None:
            pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        if file_delete_delay_ms is not None:
            pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        if flush_messages is not None:
            pulumi.set(__self__, "flush_messages", flush_messages)
        if flush_ms is not None:
            pulumi.set(__self__, "flush_ms", flush_ms)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if min_compaction_lag_ms is not None:
            pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if preallocate is not None:
            pulumi.set(__self__, "preallocate", preallocate)
        if retention_bytes is not None:
            pulumi.set(__self__, "retention_bytes", retention_bytes)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        """
        , `compression_type`, `delete_retention_ms`, `file_delete_delay_ms`, `flush_messages`, `flush_ms`, 
        `min_compaction_lag_ms`, `retention_bytes`, `retention_ms`, `max_message_bytes`, `min_insync_replicas`,
        `segment_bytes`, `preallocate` - (Optional) Kafka topic settings. For more information, see
        [the official documentation](https://cloud.yandex.com/en-ru/docs/managed-kafka/concepts/settings-list#topic-settings)
        and [the Kafka documentation](https://kafka.apache.org/documentation/#topicconfigs).
        """
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "delete_retention_ms")

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> Optional[str]:
        return pulumi.get(self, "file_delete_delay_ms")

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> Optional[str]:
        return pulumi.get(self, "flush_messages")

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> Optional[str]:
        return pulumi.get(self, "flush_ms")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "min_compaction_lag_ms")

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        return pulumi.get(self, "min_insync_replicas")

    @property
    @pulumi.getter
    def preallocate(self) -> Optional[bool]:
        return pulumi.get(self, "preallocate")

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "retention_bytes")

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "retention_ms")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "segment_bytes")


@pulumi.output_type
class MdbKafkaUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "topicName":
            suggest = "topic_name"
        elif key == "allowHosts":
            suggest = "allow_hosts"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbKafkaUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbKafkaUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbKafkaUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 role: str,
                 topic_name: str,
                 allow_hosts: Optional[Sequence[str]] = None):
        """
        :param str role: The role type to grant to the topic.
        :param str topic_name: The name of the topic that the permission grants access to.
        :param Sequence[str] allow_hosts: Set of hosts, to which this permission grants access to.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "topic_name", topic_name)
        if allow_hosts is not None:
            pulumi.set(__self__, "allow_hosts", allow_hosts)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        The role type to grant to the topic.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        """
        The name of the topic that the permission grants access to.
        """
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="allowHosts")
    def allow_hosts(self) -> Optional[Sequence[str]]:
        """
        Set of hosts, to which this permission grants access to.
        """
        return pulumi.get(self, "allow_hosts")


@pulumi.output_type
class MdbMongodbClusterClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupRetainPeriodDays":
            suggest = "backup_retain_period_days"
        elif key == "backupWindowStart":
            suggest = "backup_window_start"
        elif key == "featureCompatibilityVersion":
            suggest = "feature_compatibility_version"
        elif key == "performanceDiagnostics":
            suggest = "performance_diagnostics"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 version: str,
                 access: Optional['outputs.MdbMongodbClusterClusterConfigAccess'] = None,
                 backup_retain_period_days: Optional[int] = None,
                 backup_window_start: Optional['outputs.MdbMongodbClusterClusterConfigBackupWindowStart'] = None,
                 feature_compatibility_version: Optional[str] = None,
                 mongocfg: Optional['outputs.MdbMongodbClusterClusterConfigMongocfg'] = None,
                 mongod: Optional['outputs.MdbMongodbClusterClusterConfigMongod'] = None,
                 mongos: Optional['outputs.MdbMongodbClusterClusterConfigMongos'] = None,
                 performance_diagnostics: Optional['outputs.MdbMongodbClusterClusterConfigPerformanceDiagnostics'] = None):
        """
        :param str version: Version of the MongoDB server software. Can be either `4.2`, `4.4`, `4.4-enterprise`, `5.0`, `5.0-enterprise`, `6.0` and `6.0-enterprise`.
        :param 'MdbMongodbClusterClusterConfigAccessArgs' access: Access policy to the MongoDB cluster. The structure is documented below.
        :param int backup_retain_period_days: Retain period of automatically created backup in days.
        :param 'MdbMongodbClusterClusterConfigBackupWindowStartArgs' backup_window_start: Time to start the daily backup, in the UTC timezone. The structure is documented below.
        :param str feature_compatibility_version: Feature compatibility version of MongoDB. If not provided version is taken. Can be either `6.0`, `5.0`, `4.4` and `4.2`.
        :param 'MdbMongodbClusterClusterConfigMongocfgArgs' mongocfg: Configuration of the mongocfg service. The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongodArgs' mongod: Configuration of the mongod service. The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongosArgs' mongos: Configuration of the mongos service. The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigPerformanceDiagnosticsArgs' performance_diagnostics: Performance diagnostics to the MongoDB cluster. The structure is documented below.
        """
        pulumi.set(__self__, "version", version)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if backup_retain_period_days is not None:
            pulumi.set(__self__, "backup_retain_period_days", backup_retain_period_days)
        if backup_window_start is not None:
            pulumi.set(__self__, "backup_window_start", backup_window_start)
        if feature_compatibility_version is not None:
            pulumi.set(__self__, "feature_compatibility_version", feature_compatibility_version)
        if mongocfg is not None:
            pulumi.set(__self__, "mongocfg", mongocfg)
        if mongod is not None:
            pulumi.set(__self__, "mongod", mongod)
        if mongos is not None:
            pulumi.set(__self__, "mongos", mongos)
        if performance_diagnostics is not None:
            pulumi.set(__self__, "performance_diagnostics", performance_diagnostics)

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the MongoDB server software. Can be either `4.2`, `4.4`, `4.4-enterprise`, `5.0`, `5.0-enterprise`, `6.0` and `6.0-enterprise`.
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.MdbMongodbClusterClusterConfigAccess']:
        """
        Access policy to the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="backupRetainPeriodDays")
    def backup_retain_period_days(self) -> Optional[int]:
        """
        Retain period of automatically created backup in days.
        """
        return pulumi.get(self, "backup_retain_period_days")

    @property
    @pulumi.getter(name="backupWindowStart")
    def backup_window_start(self) -> Optional['outputs.MdbMongodbClusterClusterConfigBackupWindowStart']:
        """
        Time to start the daily backup, in the UTC timezone. The structure is documented below.
        """
        return pulumi.get(self, "backup_window_start")

    @property
    @pulumi.getter(name="featureCompatibilityVersion")
    def feature_compatibility_version(self) -> Optional[str]:
        """
        Feature compatibility version of MongoDB. If not provided version is taken. Can be either `6.0`, `5.0`, `4.4` and `4.2`.
        """
        return pulumi.get(self, "feature_compatibility_version")

    @property
    @pulumi.getter
    def mongocfg(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongocfg']:
        """
        Configuration of the mongocfg service. The structure is documented below.
        """
        return pulumi.get(self, "mongocfg")

    @property
    @pulumi.getter
    def mongod(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongod']:
        """
        Configuration of the mongod service. The structure is documented below.
        """
        return pulumi.get(self, "mongod")

    @property
    @pulumi.getter
    def mongos(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongos']:
        """
        Configuration of the mongos service. The structure is documented below.
        """
        return pulumi.get(self, "mongos")

    @property
    @pulumi.getter(name="performanceDiagnostics")
    def performance_diagnostics(self) -> Optional['outputs.MdbMongodbClusterClusterConfigPerformanceDiagnostics']:
        """
        Performance diagnostics to the MongoDB cluster. The structure is documented below.
        """
        return pulumi.get(self, "performance_diagnostics")


@pulumi.output_type
class MdbMongodbClusterClusterConfigAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLens":
            suggest = "data_lens"
        elif key == "dataTransfer":
            suggest = "data_transfer"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None):
        """
        :param bool data_lens: Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        :param bool data_transfer: Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        """
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        """
        Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        """
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        """
        return pulumi.get(self, "data_transfer")


@pulumi.output_type
class MdbMongodbClusterClusterConfigBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started.
        :param int minutes: The minute at which backup will be started.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongocfg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "operationProfiling":
            suggest = "operation_profiling"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongocfg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongocfg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongocfg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 net: Optional['outputs.MdbMongodbClusterClusterConfigMongocfgNet'] = None,
                 operation_profiling: Optional['outputs.MdbMongodbClusterClusterConfigMongocfgOperationProfiling'] = None,
                 storage: Optional['outputs.MdbMongodbClusterClusterConfigMongocfgStorage'] = None):
        """
        :param 'MdbMongodbClusterClusterConfigMongocfgNetArgs' net: A set of network settings
               (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongocfgOperationProfilingArgs' operation_profiling: A set of profiling settings
               (see the [operationProfiling](https://www.mongodb.com/docs/manual/reference/configuration-options/#operationprofiling-options) option).
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongocfgStorageArgs' storage: A set of storage settings
               (see the [storage](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage-options) option).
               The structure is documented below.
        """
        if net is not None:
            pulumi.set(__self__, "net", net)
        if operation_profiling is not None:
            pulumi.set(__self__, "operation_profiling", operation_profiling)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongocfgNet']:
        """
        A set of network settings
        (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="operationProfiling")
    def operation_profiling(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongocfgOperationProfiling']:
        """
        A set of profiling settings
        (see the [operationProfiling](https://www.mongodb.com/docs/manual/reference/configuration-options/#operationprofiling-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "operation_profiling")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongocfgStorage']:
        """
        A set of storage settings
        (see the [storage](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongocfgNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxIncomingConnections":
            suggest = "max_incoming_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongocfgNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongocfgNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongocfgNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_incoming_connections: Optional[int] = None):
        """
        :param int max_incoming_connections: The maximum number of simultaneous connections that host will accept.
               For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
               description in the official documentation.
        """
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        """
        The maximum number of simultaneous connections that host will accept.
        For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
        description in the official documentation.
        """
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongocfgOperationProfiling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slowOpThreshold":
            suggest = "slow_op_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongocfgOperationProfiling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongocfgOperationProfiling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongocfgOperationProfiling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 slow_op_threshold: Optional[int] = None):
        """
        :param str mode: Specifies which operations should be profiled. The following profiler levels are available: off, slow_op, all.
               For more information, see the [operationProfiling.mode](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.mode)
               description in the official documentation.
        :param int slow_op_threshold: The slow operation time threshold, in milliseconds. Operations that run for longer than this threshold are considered slow.
               For more information, see the [operationProfiling.slowOpThresholdMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs)
               description in the official documentation.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if slow_op_threshold is not None:
            pulumi.set(__self__, "slow_op_threshold", slow_op_threshold)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Specifies which operations should be profiled. The following profiler levels are available: off, slow_op, all.
        For more information, see the [operationProfiling.mode](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.mode)
        description in the official documentation.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="slowOpThreshold")
    def slow_op_threshold(self) -> Optional[int]:
        """
        The slow operation time threshold, in milliseconds. Operations that run for longer than this threshold are considered slow.
        For more information, see the [operationProfiling.slowOpThresholdMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs)
        description in the official documentation.
        """
        return pulumi.get(self, "slow_op_threshold")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongocfgStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wiredTiger":
            suggest = "wired_tiger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongocfgStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongocfgStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongocfgStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 wired_tiger: Optional['outputs.MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger'] = None):
        """
        :param 'MdbMongodbClusterClusterConfigMongocfgStorageWiredTigerArgs' wired_tiger: The WiredTiger engine settings.
               (see the [storage.wiredTiger](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage.wiredtiger-options) option).
               These settings available only on `mongod` hosts. The structure is documented below.
        """
        if wired_tiger is not None:
            pulumi.set(__self__, "wired_tiger", wired_tiger)

    @property
    @pulumi.getter(name="wiredTiger")
    def wired_tiger(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger']:
        """
        The WiredTiger engine settings.
        (see the [storage.wiredTiger](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage.wiredtiger-options) option).
        These settings available only on `mongod` hosts. The structure is documented below.
        """
        return pulumi.get(self, "wired_tiger")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cacheSizeGb":
            suggest = "cache_size_gb"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongocfgStorageWiredTiger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cache_size_gb: Optional[float] = None):
        """
        :param float cache_size_gb: Defines the maximum size of the internal cache that WiredTiger will use for all data.
               For more information, see the [storage.wiredTiger.engineConfig.cacheSizeGB](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.engineConfig.cacheSizeGB)
               description in the official documentation.
        """
        if cache_size_gb is not None:
            pulumi.set(__self__, "cache_size_gb", cache_size_gb)

    @property
    @pulumi.getter(name="cacheSizeGb")
    def cache_size_gb(self) -> Optional[float]:
        """
        Defines the maximum size of the internal cache that WiredTiger will use for all data.
        For more information, see the [storage.wiredTiger.engineConfig.cacheSizeGB](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.engineConfig.cacheSizeGB)
        description in the official documentation.
        """
        return pulumi.get(self, "cache_size_gb")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditLog":
            suggest = "audit_log"
        elif key == "operationProfiling":
            suggest = "operation_profiling"
        elif key == "setParameter":
            suggest = "set_parameter"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_log: Optional['outputs.MdbMongodbClusterClusterConfigMongodAuditLog'] = None,
                 net: Optional['outputs.MdbMongodbClusterClusterConfigMongodNet'] = None,
                 operation_profiling: Optional['outputs.MdbMongodbClusterClusterConfigMongodOperationProfiling'] = None,
                 security: Optional['outputs.MdbMongodbClusterClusterConfigMongodSecurity'] = None,
                 set_parameter: Optional['outputs.MdbMongodbClusterClusterConfigMongodSetParameter'] = None,
                 storage: Optional['outputs.MdbMongodbClusterClusterConfigMongodStorage'] = None):
        """
        :param 'MdbMongodbClusterClusterConfigMongodAuditLogArgs' audit_log: A set of audit log settings 
               (see the [auditLog](https://www.mongodb.com/docs/manual/reference/configuration-options/#auditlog-options) option).
               The structure is documented below. Available only in enterprise edition.
        :param 'MdbMongodbClusterClusterConfigMongodNetArgs' net: A set of network settings
               (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongodOperationProfilingArgs' operation_profiling: A set of profiling settings
               (see the [operationProfiling](https://www.mongodb.com/docs/manual/reference/configuration-options/#operationprofiling-options) option).
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongodSecurityArgs' security: A set of MongoDB Security settings
               (see the [security](https://www.mongodb.com/docs/manual/reference/configuration-options/#security-options) option).
               The structure is documented below. Available only in enterprise edition.
        :param 'MdbMongodbClusterClusterConfigMongodSetParameterArgs' set_parameter: A set of MongoDB Server Parameters 
               (see the [setParameter](https://www.mongodb.com/docs/manual/reference/configuration-options/#setparameter-option) option).
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongodStorageArgs' storage: A set of storage settings
               (see the [storage](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage-options) option).
               The structure is documented below.
        """
        if audit_log is not None:
            pulumi.set(__self__, "audit_log", audit_log)
        if net is not None:
            pulumi.set(__self__, "net", net)
        if operation_profiling is not None:
            pulumi.set(__self__, "operation_profiling", operation_profiling)
        if security is not None:
            pulumi.set(__self__, "security", security)
        if set_parameter is not None:
            pulumi.set(__self__, "set_parameter", set_parameter)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="auditLog")
    def audit_log(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodAuditLog']:
        """
        A set of audit log settings 
        (see the [auditLog](https://www.mongodb.com/docs/manual/reference/configuration-options/#auditlog-options) option).
        The structure is documented below. Available only in enterprise edition.
        """
        return pulumi.get(self, "audit_log")

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodNet']:
        """
        A set of network settings
        (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="operationProfiling")
    def operation_profiling(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodOperationProfiling']:
        """
        A set of profiling settings
        (see the [operationProfiling](https://www.mongodb.com/docs/manual/reference/configuration-options/#operationprofiling-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "operation_profiling")

    @property
    @pulumi.getter
    def security(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodSecurity']:
        """
        A set of MongoDB Security settings
        (see the [security](https://www.mongodb.com/docs/manual/reference/configuration-options/#security-options) option).
        The structure is documented below. Available only in enterprise edition.
        """
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="setParameter")
    def set_parameter(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodSetParameter']:
        """
        A set of MongoDB Server Parameters 
        (see the [setParameter](https://www.mongodb.com/docs/manual/reference/configuration-options/#setparameter-option) option).
        The structure is documented below.
        """
        return pulumi.get(self, "set_parameter")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodStorage']:
        """
        A set of storage settings
        (see the [storage](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "storage")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodAuditLog(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "runtimeConfiguration":
            suggest = "runtime_configuration"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodAuditLog. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodAuditLog.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodAuditLog.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 filter: Optional[str] = None,
                 runtime_configuration: Optional[bool] = None):
        """
        :param str filter: Configuration of the audit log filter in JSON format.
               For more information see [auditLog.filter](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.filter)
               description in the official documentation. Available only in enterprise edition.
        :param bool runtime_configuration: Specifies if a node allows runtime configuration of audit filters and the auditAuthorizationSuccess variable.
               For more information see [auditLog.runtimeConfiguration](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.runtimeConfiguration)
               description in the official documentation. Available only in enterprise edition.
        """
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if runtime_configuration is not None:
            pulumi.set(__self__, "runtime_configuration", runtime_configuration)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        """
        Configuration of the audit log filter in JSON format.
        For more information see [auditLog.filter](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.filter)
        description in the official documentation. Available only in enterprise edition.
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="runtimeConfiguration")
    def runtime_configuration(self) -> Optional[bool]:
        """
        Specifies if a node allows runtime configuration of audit filters and the auditAuthorizationSuccess variable.
        For more information see [auditLog.runtimeConfiguration](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-auditLog.runtimeConfiguration)
        description in the official documentation. Available only in enterprise edition.
        """
        return pulumi.get(self, "runtime_configuration")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxIncomingConnections":
            suggest = "max_incoming_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compressors: Optional[Sequence[str]] = None,
                 max_incoming_connections: Optional[int] = None):
        """
        :param Sequence[str] compressors: Specifies the default compressor(s) to use for communication between this mongod or mongos. 
               Accepts array of compressors. Order matters. Available compressors: snappy, zlib, zstd, disabled. To disable network compression, make "disabled" the only value.
               For more information, see the [net.Compression.Compressors](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.compression.compressors)
               description in the official documentation.
        :param int max_incoming_connections: The maximum number of simultaneous connections that host will accept.
               For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
               description in the official documentation.
        """
        if compressors is not None:
            pulumi.set(__self__, "compressors", compressors)
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter
    def compressors(self) -> Optional[Sequence[str]]:
        """
        Specifies the default compressor(s) to use for communication between this mongod or mongos. 
        Accepts array of compressors. Order matters. Available compressors: snappy, zlib, zstd, disabled. To disable network compression, make "disabled" the only value.
        For more information, see the [net.Compression.Compressors](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.compression.compressors)
        description in the official documentation.
        """
        return pulumi.get(self, "compressors")

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        """
        The maximum number of simultaneous connections that host will accept.
        For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
        description in the official documentation.
        """
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodOperationProfiling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "slowOpSampleRate":
            suggest = "slow_op_sample_rate"
        elif key == "slowOpThreshold":
            suggest = "slow_op_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodOperationProfiling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodOperationProfiling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodOperationProfiling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 slow_op_sample_rate: Optional[float] = None,
                 slow_op_threshold: Optional[int] = None):
        """
        :param str mode: Specifies which operations should be profiled. The following profiler levels are available: off, slow_op, all.
               For more information, see the [operationProfiling.mode](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.mode)
               description in the official documentation.
        :param float slow_op_sample_rate: The fraction of slow operations that should be profiled or logged. Accepts values between 0 and 1, inclusive.
               For more information, see the [operationProfiling.slowOpSampleRate](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpSampleRate)
               description in the official documentation.
        :param int slow_op_threshold: The slow operation time threshold, in milliseconds. Operations that run for longer than this threshold are considered slow.
               For more information, see the [operationProfiling.slowOpThresholdMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs)
               description in the official documentation.
        """
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if slow_op_sample_rate is not None:
            pulumi.set(__self__, "slow_op_sample_rate", slow_op_sample_rate)
        if slow_op_threshold is not None:
            pulumi.set(__self__, "slow_op_threshold", slow_op_threshold)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        """
        Specifies which operations should be profiled. The following profiler levels are available: off, slow_op, all.
        For more information, see the [operationProfiling.mode](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.mode)
        description in the official documentation.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="slowOpSampleRate")
    def slow_op_sample_rate(self) -> Optional[float]:
        """
        The fraction of slow operations that should be profiled or logged. Accepts values between 0 and 1, inclusive.
        For more information, see the [operationProfiling.slowOpSampleRate](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpSampleRate)
        description in the official documentation.
        """
        return pulumi.get(self, "slow_op_sample_rate")

    @property
    @pulumi.getter(name="slowOpThreshold")
    def slow_op_threshold(self) -> Optional[int]:
        """
        The slow operation time threshold, in milliseconds. Operations that run for longer than this threshold are considered slow.
        For more information, see the [operationProfiling.slowOpThresholdMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-operationProfiling.slowOpThresholdMs)
        description in the official documentation.
        """
        return pulumi.get(self, "slow_op_threshold")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodSecurity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableEncryption":
            suggest = "enable_encryption"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodSecurity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodSecurity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodSecurity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_encryption: Optional[bool] = None,
                 kmip: Optional['outputs.MdbMongodbClusterClusterConfigMongodSecurityKmip'] = None):
        """
        :param bool enable_encryption: Enables the encryption for the WiredTiger storage engine. Can be either true or false.
               For more information see [security.enableEncryption](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.enableEncryption)
               description in the official documentation. Available only in enterprise edition.
        :param 'MdbMongodbClusterClusterConfigMongodSecurityKmipArgs' kmip: Configuration of the third party key management appliance via the Key Management Interoperability Protocol (KMIP)
               (see [Encryption tutorial](https://www.mongodb.com/docs/rapid/tutorial/configure-encryption) ). Requires `enable_encryption` to be true.
               The structure is documented below. Available only in enterprise edition.
        """
        if enable_encryption is not None:
            pulumi.set(__self__, "enable_encryption", enable_encryption)
        if kmip is not None:
            pulumi.set(__self__, "kmip", kmip)

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        """
        Enables the encryption for the WiredTiger storage engine. Can be either true or false.
        For more information see [security.enableEncryption](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.enableEncryption)
        description in the official documentation. Available only in enterprise edition.
        """
        return pulumi.get(self, "enable_encryption")

    @property
    @pulumi.getter
    def kmip(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodSecurityKmip']:
        """
        Configuration of the third party key management appliance via the Key Management Interoperability Protocol (KMIP)
        (see [Encryption tutorial](https://www.mongodb.com/docs/rapid/tutorial/configure-encryption) ). Requires `enable_encryption` to be true.
        The structure is documented below. Available only in enterprise edition.
        """
        return pulumi.get(self, "kmip")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodSecurityKmip(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientCertificate":
            suggest = "client_certificate"
        elif key == "keyIdentifier":
            suggest = "key_identifier"
        elif key == "serverCa":
            suggest = "server_ca"
        elif key == "serverName":
            suggest = "server_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodSecurityKmip. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodSecurityKmip.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodSecurityKmip.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 client_certificate: Optional[str] = None,
                 key_identifier: Optional[str] = None,
                 port: Optional[int] = None,
                 server_ca: Optional[str] = None,
                 server_name: Optional[str] = None):
        """
        :param str client_certificate: String containing the client certificate used for authenticating MongoDB to the KMIP server.
               For more information see [security.kmip.clientCertificateFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.clientCertificateFile)
               description in the official documentation.
        :param str key_identifier: Unique KMIP identifier for an existing key within the KMIP server.
               For more information see [security.kmip.keyIdentifier](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.keyIdentifier)
               description in the official documentation.
        :param int port: Port number to use to communicate with the KMIP server. Default: 5696
               For more information see [security.kmip.port](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.port)
               description in the official documentation.
        :param str server_ca: Path to CA File. Used for validating secure client connection to KMIP server.
               For more information see [security.kmip.serverCAFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverCAFile)
               description in the official documentation.
        :param str server_name: Hostname or IP address of the KMIP server to connect to.
               For more information see [security.kmip.serverName](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverName)
               description in the official documentation.
        """
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_ca is not None:
            pulumi.set(__self__, "server_ca", server_ca)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        """
        String containing the client certificate used for authenticating MongoDB to the KMIP server.
        For more information see [security.kmip.clientCertificateFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.clientCertificateFile)
        description in the official documentation.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[str]:
        """
        Unique KMIP identifier for an existing key within the KMIP server.
        For more information see [security.kmip.keyIdentifier](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.keyIdentifier)
        description in the official documentation.
        """
        return pulumi.get(self, "key_identifier")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        Port number to use to communicate with the KMIP server. Default: 5696
        For more information see [security.kmip.port](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.port)
        description in the official documentation.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverCa")
    def server_ca(self) -> Optional[str]:
        """
        Path to CA File. Used for validating secure client connection to KMIP server.
        For more information see [security.kmip.serverCAFile](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverCAFile)
        description in the official documentation.
        """
        return pulumi.get(self, "server_ca")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        """
        Hostname or IP address of the KMIP server to connect to.
        For more information see [security.kmip.serverName](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-security.kmip.serverName)
        description in the official documentation.
        """
        return pulumi.get(self, "server_name")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodSetParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "auditAuthorizationSuccess":
            suggest = "audit_authorization_success"
        elif key == "enableFlowControl":
            suggest = "enable_flow_control"
        elif key == "minSnapshotHistoryWindowInSeconds":
            suggest = "min_snapshot_history_window_in_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodSetParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodSetParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodSetParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 audit_authorization_success: Optional[bool] = None,
                 enable_flow_control: Optional[bool] = None,
                 min_snapshot_history_window_in_seconds: Optional[int] = None):
        """
        :param bool audit_authorization_success: Enables the auditing of authorization successes. Can be either true or false.
               For more information, see the [auditAuthorizationSuccess](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.auditAuthorizationSuccess)
               description in the official documentation. Available only in enterprise edition.
        :param bool enable_flow_control: Enables the flow control. Can be either true or false.
               For more information, see the [enableFlowControl](https://www.mongodb.com/docs/rapid/reference/parameters/#mongodb-parameter-param.enableFlowControl)
               description in the official documentation.
        :param int min_snapshot_history_window_in_seconds: The minimum time window in seconds for which the storage engine keeps the snapshot history.
               For more information, see the [minSnapshotHistoryWindowInSeconds](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.minSnapshotHistoryWindowInSeconds)
               description in the official documentation.
        """
        if audit_authorization_success is not None:
            pulumi.set(__self__, "audit_authorization_success", audit_authorization_success)
        if enable_flow_control is not None:
            pulumi.set(__self__, "enable_flow_control", enable_flow_control)
        if min_snapshot_history_window_in_seconds is not None:
            pulumi.set(__self__, "min_snapshot_history_window_in_seconds", min_snapshot_history_window_in_seconds)

    @property
    @pulumi.getter(name="auditAuthorizationSuccess")
    def audit_authorization_success(self) -> Optional[bool]:
        """
        Enables the auditing of authorization successes. Can be either true or false.
        For more information, see the [auditAuthorizationSuccess](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.auditAuthorizationSuccess)
        description in the official documentation. Available only in enterprise edition.
        """
        return pulumi.get(self, "audit_authorization_success")

    @property
    @pulumi.getter(name="enableFlowControl")
    def enable_flow_control(self) -> Optional[bool]:
        """
        Enables the flow control. Can be either true or false.
        For more information, see the [enableFlowControl](https://www.mongodb.com/docs/rapid/reference/parameters/#mongodb-parameter-param.enableFlowControl)
        description in the official documentation.
        """
        return pulumi.get(self, "enable_flow_control")

    @property
    @pulumi.getter(name="minSnapshotHistoryWindowInSeconds")
    def min_snapshot_history_window_in_seconds(self) -> Optional[int]:
        """
        The minimum time window in seconds for which the storage engine keeps the snapshot history.
        For more information, see the [minSnapshotHistoryWindowInSeconds](https://www.mongodb.com/docs/manual/reference/parameters/#mongodb-parameter-param.minSnapshotHistoryWindowInSeconds)
        description in the official documentation.
        """
        return pulumi.get(self, "min_snapshot_history_window_in_seconds")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodStorage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "wiredTiger":
            suggest = "wired_tiger"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodStorage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodStorage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodStorage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 journal: Optional['outputs.MdbMongodbClusterClusterConfigMongodStorageJournal'] = None,
                 wired_tiger: Optional['outputs.MdbMongodbClusterClusterConfigMongodStorageWiredTiger'] = None):
        """
        :param 'MdbMongodbClusterClusterConfigMongodStorageJournalArgs' journal: The durability journal to ensure data files remain valid and recoverable.
               The structure is documented below.
        :param 'MdbMongodbClusterClusterConfigMongodStorageWiredTigerArgs' wired_tiger: The WiredTiger engine settings.
               (see the [storage.wiredTiger](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage.wiredtiger-options) option).
               These settings available only on `mongod` hosts. The structure is documented below.
        """
        if journal is not None:
            pulumi.set(__self__, "journal", journal)
        if wired_tiger is not None:
            pulumi.set(__self__, "wired_tiger", wired_tiger)

    @property
    @pulumi.getter
    def journal(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodStorageJournal']:
        """
        The durability journal to ensure data files remain valid and recoverable.
        The structure is documented below.
        """
        return pulumi.get(self, "journal")

    @property
    @pulumi.getter(name="wiredTiger")
    def wired_tiger(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongodStorageWiredTiger']:
        """
        The WiredTiger engine settings.
        (see the [storage.wiredTiger](https://www.mongodb.com/docs/manual/reference/configuration-options/#storage.wiredtiger-options) option).
        These settings available only on `mongod` hosts. The structure is documented below.
        """
        return pulumi.get(self, "wired_tiger")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodStorageJournal(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "commitInterval":
            suggest = "commit_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodStorageJournal. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodStorageJournal.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodStorageJournal.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 commit_interval: Optional[int] = None):
        """
        :param int commit_interval: The maximum amount of time in milliseconds that the mongod process allows between journal operations.
               For more information, see the [storage.journal.commitIntervalMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.journal.commitIntervalMs)
               description in the official documentation.
        """
        if commit_interval is not None:
            pulumi.set(__self__, "commit_interval", commit_interval)

    @property
    @pulumi.getter(name="commitInterval")
    def commit_interval(self) -> Optional[int]:
        """
        The maximum amount of time in milliseconds that the mongod process allows between journal operations.
        For more information, see the [storage.journal.commitIntervalMs](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.journal.commitIntervalMs)
        description in the official documentation.
        """
        return pulumi.get(self, "commit_interval")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongodStorageWiredTiger(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "blockCompressor":
            suggest = "block_compressor"
        elif key == "cacheSizeGb":
            suggest = "cache_size_gb"
        elif key == "prefixCompression":
            suggest = "prefix_compression"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongodStorageWiredTiger. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongodStorageWiredTiger.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongodStorageWiredTiger.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 block_compressor: Optional[str] = None,
                 cache_size_gb: Optional[float] = None,
                 prefix_compression: Optional[bool] = None):
        """
        :param str block_compressor: Specifies the default compression for collection data. You can override this on a per-collection basis when creating collections.
               Available compressors are: none, snappy, zlib, zstd. This setting available only on `mongod` hosts.
               For more information, see the [storage.wiredTiger.collectionConfig.blockCompressor](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.collectionConfig.blockCompressor)
               description in the official documentation.
        :param float cache_size_gb: Defines the maximum size of the internal cache that WiredTiger will use for all data.
               For more information, see the [storage.wiredTiger.engineConfig.cacheSizeGB](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.engineConfig.cacheSizeGB)
               description in the official documentation.
        :param bool prefix_compression: Enables or disables prefix compression for index data. Сan be either true or false.
               For more information, see the [storage.wiredTiger.indexConfig.prefixCompression](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.indexConfig.prefixCompression)
               description in the official documentation.
        """
        if block_compressor is not None:
            pulumi.set(__self__, "block_compressor", block_compressor)
        if cache_size_gb is not None:
            pulumi.set(__self__, "cache_size_gb", cache_size_gb)
        if prefix_compression is not None:
            pulumi.set(__self__, "prefix_compression", prefix_compression)

    @property
    @pulumi.getter(name="blockCompressor")
    def block_compressor(self) -> Optional[str]:
        """
        Specifies the default compression for collection data. You can override this on a per-collection basis when creating collections.
        Available compressors are: none, snappy, zlib, zstd. This setting available only on `mongod` hosts.
        For more information, see the [storage.wiredTiger.collectionConfig.blockCompressor](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.collectionConfig.blockCompressor)
        description in the official documentation.
        """
        return pulumi.get(self, "block_compressor")

    @property
    @pulumi.getter(name="cacheSizeGb")
    def cache_size_gb(self) -> Optional[float]:
        """
        Defines the maximum size of the internal cache that WiredTiger will use for all data.
        For more information, see the [storage.wiredTiger.engineConfig.cacheSizeGB](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.engineConfig.cacheSizeGB)
        description in the official documentation.
        """
        return pulumi.get(self, "cache_size_gb")

    @property
    @pulumi.getter(name="prefixCompression")
    def prefix_compression(self) -> Optional[bool]:
        """
        Enables or disables prefix compression for index data. Сan be either true or false.
        For more information, see the [storage.wiredTiger.indexConfig.prefixCompression](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-storage.wiredTiger.indexConfig.prefixCompression)
        description in the official documentation.
        """
        return pulumi.get(self, "prefix_compression")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongos(dict):
    def __init__(__self__, *,
                 net: Optional['outputs.MdbMongodbClusterClusterConfigMongosNet'] = None):
        """
        :param 'MdbMongodbClusterClusterConfigMongosNetArgs' net: A set of network settings
               (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
               The structure is documented below.
        """
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.MdbMongodbClusterClusterConfigMongosNet']:
        """
        A set of network settings
        (see the [net](https://www.mongodb.com/docs/manual/reference/configuration-options/#net-options) option).
        The structure is documented below.
        """
        return pulumi.get(self, "net")


@pulumi.output_type
class MdbMongodbClusterClusterConfigMongosNet(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxIncomingConnections":
            suggest = "max_incoming_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterClusterConfigMongosNet. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterClusterConfigMongosNet.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterClusterConfigMongosNet.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 compressors: Optional[Sequence[str]] = None,
                 max_incoming_connections: Optional[int] = None):
        """
        :param Sequence[str] compressors: Specifies the default compressor(s) to use for communication between this mongod or mongos. 
               Accepts array of compressors. Order matters. Available compressors: snappy, zlib, zstd, disabled. To disable network compression, make "disabled" the only value.
               For more information, see the [net.Compression.Compressors](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.compression.compressors)
               description in the official documentation.
        :param int max_incoming_connections: The maximum number of simultaneous connections that host will accept.
               For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
               description in the official documentation.
        """
        if compressors is not None:
            pulumi.set(__self__, "compressors", compressors)
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter
    def compressors(self) -> Optional[Sequence[str]]:
        """
        Specifies the default compressor(s) to use for communication between this mongod or mongos. 
        Accepts array of compressors. Order matters. Available compressors: snappy, zlib, zstd, disabled. To disable network compression, make "disabled" the only value.
        For more information, see the [net.Compression.Compressors](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.compression.compressors)
        description in the official documentation.
        """
        return pulumi.get(self, "compressors")

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        """
        The maximum number of simultaneous connections that host will accept.
        For more information, see the [net.maxIncomingConnections](https://www.mongodb.com/docs/manual/reference/configuration-options/#mongodb-setting-net.maxIncomingConnections)
        description in the official documentation.
        """
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class MdbMongodbClusterClusterConfigPerformanceDiagnostics(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable or disable performance diagnostics.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable or disable performance diagnostics.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class MdbMongodbClusterDatabase(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the database.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MdbMongodbClusterDiskSizeAutoscalingMongocfg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterDiskSizeAutoscalingMongocfg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongocfg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongocfg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbMongodbClusterDiskSizeAutoscalingMongod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterDiskSizeAutoscalingMongod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbMongodbClusterDiskSizeAutoscalingMongoinfra(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterDiskSizeAutoscalingMongoinfra. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongoinfra.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongoinfra.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbMongodbClusterDiskSizeAutoscalingMongos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterDiskSizeAutoscalingMongos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterDiskSizeAutoscalingMongos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbMongodbClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "subnetId":
            suggest = "subnet_id"
        elif key == "zoneId":
            suggest = "zone_id"
        elif key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "hostParameters":
            suggest = "host_parameters"
        elif key == "shardName":
            suggest = "shard_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 subnet_id: str,
                 zone_id: str,
                 assign_public_ip: Optional[bool] = None,
                 health: Optional[str] = None,
                 host_parameters: Optional['outputs.MdbMongodbClusterHostHostParameters'] = None,
                 name: Optional[str] = None,
                 role: Optional[str] = None,
                 shard_name: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must
               be a part of the network to which the cluster belongs.
        :param str zone_id: The availability zone where the MongoDB host will be created.
               For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        :param bool assign_public_ip: Should this host have assigned public IP assigned. Can be either `true` or `false`.
        :param str health: The health of the host.
        :param 'MdbMongodbClusterHostHostParametersArgs' host_parameters: The parameters of mongod host in replicaset.
        :param str name: The fully qualified domain name of the host. Computed on server side.
        :param str role: The role of the cluster (either PRIMARY or SECONDARY).
        :param str shard_name: The name of the shard to which the host belongs. Only for sharded cluster.
        :param str type: type of mongo daemon which runs on this host (mongod, mongos, mongocfg, mongoinfra). Defaults to mongod.
        """
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone_id", zone_id)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if health is not None:
            pulumi.set(__self__, "health", health)
        if host_parameters is not None:
            pulumi.set(__self__, "host_parameters", host_parameters)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if shard_name is not None:
            pulumi.set(__self__, "shard_name", shard_name)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        """
        The ID of the subnet, to which the host belongs. The subnet must
        be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The availability zone where the MongoDB host will be created.
        For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        """
        return pulumi.get(self, "zone_id")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Should this host have assigned public IP assigned. Can be either `true` or `false`.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def health(self) -> Optional[str]:
        """
        The health of the host.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="hostParameters")
    def host_parameters(self) -> Optional['outputs.MdbMongodbClusterHostHostParameters']:
        """
        The parameters of mongod host in replicaset.
        """
        return pulumi.get(self, "host_parameters")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The fully qualified domain name of the host. Computed on server side.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        The role of the cluster (either PRIMARY or SECONDARY).
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> Optional[str]:
        """
        The name of the shard to which the host belongs. Only for sharded cluster.
        """
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        type of mongo daemon which runs on this host (mongod, mongos, mongocfg, mongoinfra). Defaults to mongod.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class MdbMongodbClusterHostHostParameters(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "secondaryDelaySecs":
            suggest = "secondary_delay_secs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterHostHostParameters. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterHostHostParameters.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterHostHostParameters.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hidden: Optional[bool] = None,
                 priority: Optional[float] = None,
                 secondary_delay_secs: Optional[int] = None,
                 tags: Optional[Mapping[str, str]] = None):
        """
        :param bool hidden: Should this host be hidden in replicaset. Can be either `true` of `false`. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.hidden)
        :param float priority: A floating point number that indicates the relative likelihood of a replica set member to become the primary. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.priority)
        :param int secondary_delay_secs: The number of seconds "behind" the primary that this replica set member should "lag". For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.secondaryDelaySecs)
        :param Mapping[str, str] tags: A set of key/value pairs to assign for the replica set member. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.tags)
        """
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if secondary_delay_secs is not None:
            pulumi.set(__self__, "secondary_delay_secs", secondary_delay_secs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        """
        Should this host be hidden in replicaset. Can be either `true` of `false`. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.hidden)
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        """
        A floating point number that indicates the relative likelihood of a replica set member to become the primary. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.priority)
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="secondaryDelaySecs")
    def secondary_delay_secs(self) -> Optional[int]:
        """
        The number of seconds "behind" the primary that this replica set member should "lag". For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.secondaryDelaySecs)
        """
        return pulumi.get(self, "secondary_delay_secs")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        """
        A set of key/value pairs to assign for the replica set member. For more information see [the official documentation](https://www.mongodb.com/docs/current/reference/replica-configuration/#mongodb-rsconf-rsconf.members-n-.tags)
        """
        return pulumi.get(self, "tags")


@pulumi.output_type
class MdbMongodbClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        :param int hour: Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbMongodbClusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MongoDB host, in gigabytes.
        :param str disk_type_id: Type of the storage of MongoDB hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).
               
               The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MongoDB host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MongoDB hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).

        The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMongodbClusterResourcesMongocfg(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterResourcesMongocfg. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterResourcesMongocfg.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterResourcesMongocfg.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MongoDB host, in gigabytes.
        :param str disk_type_id: Type of the storage of MongoDB hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).
               
               The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MongoDB host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MongoDB hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).

        The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMongodbClusterResourcesMongod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterResourcesMongod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterResourcesMongod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterResourcesMongod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MongoDB host, in gigabytes.
        :param str disk_type_id: Type of the storage of MongoDB hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).
               
               The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MongoDB host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MongoDB hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).

        The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMongodbClusterResourcesMongoinfra(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterResourcesMongoinfra. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterResourcesMongoinfra.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterResourcesMongoinfra.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MongoDB host, in gigabytes.
        :param str disk_type_id: Type of the storage of MongoDB hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).
               
               The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MongoDB host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MongoDB hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).

        The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMongodbClusterResourcesMongos(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterResourcesMongos. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterResourcesMongos.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterResourcesMongos.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MongoDB host, in gigabytes.
        :param str disk_type_id: Type of the storage of MongoDB hosts.
               For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).
               
               The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MongoDB host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MongoDB hosts.
        For more information see [the official documentation](https://cloud.yandex.com/docs/managed-clickhouse/concepts/storage).

        The `disk_size_autoscaling_mongod`, `disk_size_autoscaling_mongos`, `disk_size_autoscaling_mongoinfra`, `disk_size_autoscaling_mongocfg` blocks support:
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMongodbClusterRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: str,
                 time: Optional[str] = None):
        """
        :param str backup_id: Backup ID. The cluster will be created from the specified backup. [How to get a list of PostgreSQL backups](https://cloud.yandex.com/en-ru/docs/managed-mongodb/operations/cluster-backups)
        :param str time: Timestamp of the moment to which the MongoDB cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        Backup ID. The cluster will be created from the specified backup. [How to get a list of PostgreSQL backups](https://cloud.yandex.com/en-ru/docs/managed-mongodb/operations/cluster-backups)
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        Timestamp of the moment to which the MongoDB cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MdbMongodbClusterUser(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Optional[Sequence['outputs.MdbMongodbClusterUserPermission']] = None):
        """
        :param str name: The name of the user.
        :param str password: The password of the user.
        :param Sequence['MdbMongodbClusterUserPermissionArgs'] permissions: Set of permissions granted to the user. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbMongodbClusterUserPermission']]:
        """
        Set of permissions granted to the user. The structure is documented below.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class MdbMongodbClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMongodbClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMongodbClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMongodbClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        """
        :param str database_name: The name of the database that the permission grants access to.
        :param Sequence[str] roles: The roles of the user in this database. For more information see [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts/users-and-roles).
        """
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        The roles of the user in this database. For more information see [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts/users-and-roles).
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class MdbMysqlClusterAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLens":
            suggest = "data_lens"
        elif key == "dataTransfer":
            suggest = "data_transfer"
        elif key == "webSql":
            suggest = "web_sql"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None,
                 web_sql: Optional[bool] = None):
        """
        :param bool data_lens: Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        :param bool data_transfer: Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        :param bool web_sql: Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).
        """
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)
        if web_sql is not None:
            pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        """
        Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        """
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        """
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> Optional[bool]:
        """
        Allows access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-mysql/operations/web-sql-query).
        """
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class MdbMysqlClusterBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started.
        :param int minutes: The minute at which backup will be started.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbMysqlClusterDatabase(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the database.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MdbMysqlClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "backupPriority":
            suggest = "backup_priority"
        elif key == "replicationSource":
            suggest = "replication_source"
        elif key == "replicationSourceName":
            suggest = "replication_source_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 backup_priority: Optional[int] = None,
                 fqdn: Optional[str] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 replication_source: Optional[str] = None,
                 replication_source_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str zone: The availability zone where the MySQL host will be created.
        :param bool assign_public_ip: Sets whether the host should get a public IP address. It can be changed on the fly only when `name` is set.
        :param int backup_priority: Host backup priority. Value is between 0 and 100, default is 0.
        :param str fqdn: The fully qualified domain name of the host.
        :param str name: Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.
        :param int priority: Host master promotion priority. Value is between 0 and 100, default is 0.
        :param str replication_source: Host replication source (fqdn), when replication_source is empty then host is in HA group.
        :param str replication_source_name: Host replication source name points to host's `name` from which this host should replicate. When not set then host in HA group. It works only when `name` is set.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if backup_priority is not None:
            pulumi.set(__self__, "backup_priority", backup_priority)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if replication_source is not None:
            pulumi.set(__self__, "replication_source", replication_source)
        if replication_source_name is not None:
            pulumi.set(__self__, "replication_source_name", replication_source_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the MySQL host will be created.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address. It can be changed on the fly only when `name` is set.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="backupPriority")
    def backup_priority(self) -> Optional[int]:
        """
        Host backup priority. Value is between 0 and 100, default is 0.
        """
        return pulumi.get(self, "backup_priority")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please refer to `replication_source_name` parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Host master promotion priority. Value is between 0 and 100, default is 0.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="replicationSource")
    def replication_source(self) -> Optional[str]:
        """
        Host replication source (fqdn), when replication_source is empty then host is in HA group.
        """
        return pulumi.get(self, "replication_source")

    @property
    @pulumi.getter(name="replicationSourceName")
    def replication_source_name(self) -> Optional[str]:
        """
        Host replication source name points to host's `name` from which this host should replicate. When not set then host in HA group. It works only when `name` is set.
        """
        return pulumi.get(self, "replication_source_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbMysqlClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        :param int hour: Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of the day in UTC (in `HH` format). Allowed value is between 0 and 23.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbMysqlClusterPerformanceDiagnostics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sessionsSamplingInterval":
            suggest = "sessions_sampling_interval"
        elif key == "statementsSamplingInterval":
            suggest = "statements_sampling_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterPerformanceDiagnostics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterPerformanceDiagnostics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterPerformanceDiagnostics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sessions_sampling_interval: int,
                 statements_sampling_interval: int,
                 enabled: Optional[bool] = None):
        """
        :param int sessions_sampling_interval: Interval (in seconds) for my_stat_activity sampling Acceptable values are 1 to 86400, inclusive.
        :param int statements_sampling_interval: Interval (in seconds) for my_stat_statements sampling Acceptable values are 1 to 86400, inclusive.
        :param bool enabled: Enable performance diagnostics
        """
        pulumi.set(__self__, "sessions_sampling_interval", sessions_sampling_interval)
        pulumi.set(__self__, "statements_sampling_interval", statements_sampling_interval)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="sessionsSamplingInterval")
    def sessions_sampling_interval(self) -> int:
        """
        Interval (in seconds) for my_stat_activity sampling Acceptable values are 1 to 86400, inclusive.
        """
        return pulumi.get(self, "sessions_sampling_interval")

    @property
    @pulumi.getter(name="statementsSamplingInterval")
    def statements_sampling_interval(self) -> int:
        """
        Interval (in seconds) for my_stat_statements sampling Acceptable values are 1 to 86400, inclusive.
        """
        return pulumi.get(self, "statements_sampling_interval")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable performance diagnostics
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class MdbMysqlClusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a MySQL host, in gigabytes.
        :param str disk_type_id: Type of the storage of MySQL hosts.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a MySQL host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of MySQL hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbMysqlClusterRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: str,
                 time: Optional[str] = None):
        """
        :param str backup_id: Backup ID. The cluster will be created from the specified backup. [How to get a list of MySQL backups](https://cloud.yandex.com/docs/managed-mysql/operations/cluster-backups).
        :param str time: Timestamp of the moment to which the MySQL cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        Backup ID. The cluster will be created from the specified backup. [How to get a list of MySQL backups](https://cloud.yandex.com/docs/managed-mysql/operations/cluster-backups).
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        Timestamp of the moment to which the MySQL cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        """
        return pulumi.get(self, "time")


@pulumi.output_type
class MdbMysqlClusterUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "authenticationPlugin":
            suggest = "authentication_plugin"
        elif key == "connectionLimits":
            suggest = "connection_limits"
        elif key == "globalPermissions":
            suggest = "global_permissions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 password: str,
                 authentication_plugin: Optional[str] = None,
                 connection_limits: Optional['outputs.MdbMysqlClusterUserConnectionLimits'] = None,
                 global_permissions: Optional[Sequence[str]] = None,
                 permissions: Optional[Sequence['outputs.MdbMysqlClusterUserPermission']] = None):
        """
        :param str name: The name of the user.
        :param str password: The password of the user.
        :param str authentication_plugin: Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
        :param 'MdbMysqlClusterUserConnectionLimitsArgs' connection_limits: User's connection limits. The structure is documented below.
               If the attribute is not specified there will be no changes.
        :param Sequence[str] global_permissions: List user's global permissions     
               Allowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.
               If the attribute is not specified there will be no changes.
        :param Sequence['MdbMysqlClusterUserPermissionArgs'] permissions: Set of permissions granted to the user. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if authentication_plugin is not None:
            pulumi.set(__self__, "authentication_plugin", authentication_plugin)
        if connection_limits is not None:
            pulumi.set(__self__, "connection_limits", connection_limits)
        if global_permissions is not None:
            pulumi.set(__self__, "global_permissions", global_permissions)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="authenticationPlugin")
    def authentication_plugin(self) -> Optional[str]:
        """
        Authentication plugin. Allowed values: `MYSQL_NATIVE_PASSWORD`, `CACHING_SHA2_PASSWORD`, `SHA256_PASSWORD` (for version 5.7 `MYSQL_NATIVE_PASSWORD`, `SHA256_PASSWORD`)
        """
        return pulumi.get(self, "authentication_plugin")

    @property
    @pulumi.getter(name="connectionLimits")
    def connection_limits(self) -> Optional['outputs.MdbMysqlClusterUserConnectionLimits']:
        """
        User's connection limits. The structure is documented below.
        If the attribute is not specified there will be no changes.
        """
        return pulumi.get(self, "connection_limits")

    @property
    @pulumi.getter(name="globalPermissions")
    def global_permissions(self) -> Optional[Sequence[str]]:
        """
        List user's global permissions     
        Allowed permissions:  `REPLICATION_CLIENT`, `REPLICATION_SLAVE`, `PROCESS` for clear list use empty list.
        If the attribute is not specified there will be no changes.
        """
        return pulumi.get(self, "global_permissions")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbMysqlClusterUserPermission']]:
        """
        Set of permissions granted to the user. The structure is documented below.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class MdbMysqlClusterUserConnectionLimits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConnectionsPerHour":
            suggest = "max_connections_per_hour"
        elif key == "maxQuestionsPerHour":
            suggest = "max_questions_per_hour"
        elif key == "maxUpdatesPerHour":
            suggest = "max_updates_per_hour"
        elif key == "maxUserConnections":
            suggest = "max_user_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterUserConnectionLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterUserConnectionLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterUserConnectionLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_connections_per_hour: Optional[int] = None,
                 max_questions_per_hour: Optional[int] = None,
                 max_updates_per_hour: Optional[int] = None,
                 max_user_connections: Optional[int] = None):
        """
        :param int max_connections_per_hour: Max connections per hour.
        :param int max_questions_per_hour: Max questions per hour.
        :param int max_updates_per_hour: Max updates per hour.
        :param int max_user_connections: Max user connections.
        """
        if max_connections_per_hour is not None:
            pulumi.set(__self__, "max_connections_per_hour", max_connections_per_hour)
        if max_questions_per_hour is not None:
            pulumi.set(__self__, "max_questions_per_hour", max_questions_per_hour)
        if max_updates_per_hour is not None:
            pulumi.set(__self__, "max_updates_per_hour", max_updates_per_hour)
        if max_user_connections is not None:
            pulumi.set(__self__, "max_user_connections", max_user_connections)

    @property
    @pulumi.getter(name="maxConnectionsPerHour")
    def max_connections_per_hour(self) -> Optional[int]:
        """
        Max connections per hour.
        """
        return pulumi.get(self, "max_connections_per_hour")

    @property
    @pulumi.getter(name="maxQuestionsPerHour")
    def max_questions_per_hour(self) -> Optional[int]:
        """
        Max questions per hour.
        """
        return pulumi.get(self, "max_questions_per_hour")

    @property
    @pulumi.getter(name="maxUpdatesPerHour")
    def max_updates_per_hour(self) -> Optional[int]:
        """
        Max updates per hour.
        """
        return pulumi.get(self, "max_updates_per_hour")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> Optional[int]:
        """
        Max user connections.
        """
        return pulumi.get(self, "max_user_connections")


@pulumi.output_type
class MdbMysqlClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        """
        :param str database_name: The name of the database that the permission grants access to.
        :param Sequence[str] roles: List user's roles in the database.
               Allowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,
               `CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.
        """
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        List user's roles in the database.
        Allowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,
        `CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class MdbMysqlUserConnectionLimits(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxConnectionsPerHour":
            suggest = "max_connections_per_hour"
        elif key == "maxQuestionsPerHour":
            suggest = "max_questions_per_hour"
        elif key == "maxUpdatesPerHour":
            suggest = "max_updates_per_hour"
        elif key == "maxUserConnections":
            suggest = "max_user_connections"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlUserConnectionLimits. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlUserConnectionLimits.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlUserConnectionLimits.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_connections_per_hour: Optional[int] = None,
                 max_questions_per_hour: Optional[int] = None,
                 max_updates_per_hour: Optional[int] = None,
                 max_user_connections: Optional[int] = None):
        """
        :param int max_connections_per_hour: Max connections per hour.
        :param int max_questions_per_hour: Max questions per hour.
        :param int max_updates_per_hour: Max updates per hour.
        :param int max_user_connections: Max user connections.
        """
        if max_connections_per_hour is not None:
            pulumi.set(__self__, "max_connections_per_hour", max_connections_per_hour)
        if max_questions_per_hour is not None:
            pulumi.set(__self__, "max_questions_per_hour", max_questions_per_hour)
        if max_updates_per_hour is not None:
            pulumi.set(__self__, "max_updates_per_hour", max_updates_per_hour)
        if max_user_connections is not None:
            pulumi.set(__self__, "max_user_connections", max_user_connections)

    @property
    @pulumi.getter(name="maxConnectionsPerHour")
    def max_connections_per_hour(self) -> Optional[int]:
        """
        Max connections per hour.
        """
        return pulumi.get(self, "max_connections_per_hour")

    @property
    @pulumi.getter(name="maxQuestionsPerHour")
    def max_questions_per_hour(self) -> Optional[int]:
        """
        Max questions per hour.
        """
        return pulumi.get(self, "max_questions_per_hour")

    @property
    @pulumi.getter(name="maxUpdatesPerHour")
    def max_updates_per_hour(self) -> Optional[int]:
        """
        Max updates per hour.
        """
        return pulumi.get(self, "max_updates_per_hour")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> Optional[int]:
        """
        Max user connections.
        """
        return pulumi.get(self, "max_user_connections")


@pulumi.output_type
class MdbMysqlUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbMysqlUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbMysqlUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbMysqlUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        """
        :param str database_name: The name of the database that the permission grants access to.
        :param Sequence[str] roles: List user's roles in the database.
               Allowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,
               `CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.
        """
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        List user's roles in the database.
        Allowed roles: `ALL`,`ALTER`,`ALTER_ROUTINE`,`CREATE`,`CREATE_ROUTINE`,`CREATE_TEMPORARY_TABLES`,
        `CREATE_VIEW`,`DELETE`,`DROP`,`EVENT`,`EXECUTE`,`INDEX`,`INSERT`,`LOCK_TABLES`,`SELECT`,`SHOW_VIEW`,`TRIGGER`,`UPDATE`.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class MdbPostgresqlClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupRetainPeriodDays":
            suggest = "backup_retain_period_days"
        elif key == "backupWindowStart":
            suggest = "backup_window_start"
        elif key == "diskSizeAutoscaling":
            suggest = "disk_size_autoscaling"
        elif key == "performanceDiagnostics":
            suggest = "performance_diagnostics"
        elif key == "poolerConfig":
            suggest = "pooler_config"
        elif key == "postgresqlConfig":
            suggest = "postgresql_config"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 resources: 'outputs.MdbPostgresqlClusterConfigResources',
                 version: str,
                 access: Optional['outputs.MdbPostgresqlClusterConfigAccess'] = None,
                 autofailover: Optional[bool] = None,
                 backup_retain_period_days: Optional[int] = None,
                 backup_window_start: Optional['outputs.MdbPostgresqlClusterConfigBackupWindowStart'] = None,
                 disk_size_autoscaling: Optional['outputs.MdbPostgresqlClusterConfigDiskSizeAutoscaling'] = None,
                 performance_diagnostics: Optional['outputs.MdbPostgresqlClusterConfigPerformanceDiagnostics'] = None,
                 pooler_config: Optional['outputs.MdbPostgresqlClusterConfigPoolerConfig'] = None,
                 postgresql_config: Optional[Mapping[str, str]] = None):
        """
        :param 'MdbPostgresqlClusterConfigResourcesArgs' resources: Resources allocated to hosts of the PostgreSQL cluster. The structure is documented below.
        :param str version: Version of the PostgreSQL cluster. (allowed versions are: 10, 10-1c, 11, 11-1c, 12, 12-1c, 13, 13-1c, 14, 14-1c, 15, 15-1c, 16)
        :param 'MdbPostgresqlClusterConfigAccessArgs' access: Access policy to the PostgreSQL cluster. The structure is documented below.
        :param bool autofailover: Configuration setting which enables/disables autofailover in cluster.
        :param int backup_retain_period_days: The period in days during which backups are stored.
        :param 'MdbPostgresqlClusterConfigBackupWindowStartArgs' backup_window_start: Time to start the daily backup, in the UTC timezone. The structure is documented below.
        :param 'MdbPostgresqlClusterConfigDiskSizeAutoscalingArgs' disk_size_autoscaling: Cluster disk size autoscaling settings. The structure is documented below.
        :param 'MdbPostgresqlClusterConfigPerformanceDiagnosticsArgs' performance_diagnostics: Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/en-ru/docs/managed-postgresql/api-ref/grpc/cluster_service#PerformanceDiagnostics)
        :param 'MdbPostgresqlClusterConfigPoolerConfigArgs' pooler_config: Configuration of the connection pooler. The structure is documented below.
        :param Mapping[str, str] postgresql_config: PostgreSQL cluster config. Detail info in "postresql config" section (documented below).
        """
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "version", version)
        if access is not None:
            pulumi.set(__self__, "access", access)
        if autofailover is not None:
            pulumi.set(__self__, "autofailover", autofailover)
        if backup_retain_period_days is not None:
            pulumi.set(__self__, "backup_retain_period_days", backup_retain_period_days)
        if backup_window_start is not None:
            pulumi.set(__self__, "backup_window_start", backup_window_start)
        if disk_size_autoscaling is not None:
            pulumi.set(__self__, "disk_size_autoscaling", disk_size_autoscaling)
        if performance_diagnostics is not None:
            pulumi.set(__self__, "performance_diagnostics", performance_diagnostics)
        if pooler_config is not None:
            pulumi.set(__self__, "pooler_config", pooler_config)
        if postgresql_config is not None:
            pulumi.set(__self__, "postgresql_config", postgresql_config)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.MdbPostgresqlClusterConfigResources':
        """
        Resources allocated to hosts of the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of the PostgreSQL cluster. (allowed versions are: 10, 10-1c, 11, 11-1c, 12, 12-1c, 13, 13-1c, 14, 14-1c, 15, 15-1c, 16)
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def access(self) -> Optional['outputs.MdbPostgresqlClusterConfigAccess']:
        """
        Access policy to the PostgreSQL cluster. The structure is documented below.
        """
        return pulumi.get(self, "access")

    @property
    @pulumi.getter
    def autofailover(self) -> Optional[bool]:
        """
        Configuration setting which enables/disables autofailover in cluster.
        """
        return pulumi.get(self, "autofailover")

    @property
    @pulumi.getter(name="backupRetainPeriodDays")
    def backup_retain_period_days(self) -> Optional[int]:
        """
        The period in days during which backups are stored.
        """
        return pulumi.get(self, "backup_retain_period_days")

    @property
    @pulumi.getter(name="backupWindowStart")
    def backup_window_start(self) -> Optional['outputs.MdbPostgresqlClusterConfigBackupWindowStart']:
        """
        Time to start the daily backup, in the UTC timezone. The structure is documented below.
        """
        return pulumi.get(self, "backup_window_start")

    @property
    @pulumi.getter(name="diskSizeAutoscaling")
    def disk_size_autoscaling(self) -> Optional['outputs.MdbPostgresqlClusterConfigDiskSizeAutoscaling']:
        """
        Cluster disk size autoscaling settings. The structure is documented below.
        """
        return pulumi.get(self, "disk_size_autoscaling")

    @property
    @pulumi.getter(name="performanceDiagnostics")
    def performance_diagnostics(self) -> Optional['outputs.MdbPostgresqlClusterConfigPerformanceDiagnostics']:
        """
        Cluster performance diagnostics settings. The structure is documented below. [YC Documentation](https://cloud.yandex.com/en-ru/docs/managed-postgresql/api-ref/grpc/cluster_service#PerformanceDiagnostics)
        """
        return pulumi.get(self, "performance_diagnostics")

    @property
    @pulumi.getter(name="poolerConfig")
    def pooler_config(self) -> Optional['outputs.MdbPostgresqlClusterConfigPoolerConfig']:
        """
        Configuration of the connection pooler. The structure is documented below.
        """
        return pulumi.get(self, "pooler_config")

    @property
    @pulumi.getter(name="postgresqlConfig")
    def postgresql_config(self) -> Optional[Mapping[str, str]]:
        """
        PostgreSQL cluster config. Detail info in "postresql config" section (documented below).
        """
        return pulumi.get(self, "postgresql_config")


@pulumi.output_type
class MdbPostgresqlClusterConfigAccess(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dataLens":
            suggest = "data_lens"
        elif key == "dataTransfer":
            suggest = "data_transfer"
        elif key == "webSql":
            suggest = "web_sql"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfigAccess. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfigAccess.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfigAccess.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None,
                 serverless: Optional[bool] = None,
                 web_sql: Optional[bool] = None):
        """
        :param bool data_lens: Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        :param bool data_transfer: Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        :param bool serverless: Allow access for [connection to managed databases from functions](https://cloud.yandex.com/docs/functions/operations/database-connection)
        :param bool web_sql: Allow access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-postgresql/operations/web-sql-query)
        """
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)
        if web_sql is not None:
            pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        """
        Allow access for [Yandex DataLens](https://cloud.yandex.com/services/datalens).
        """
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        """
        Allow access for [DataTransfer](https://cloud.yandex.com/services/data-transfer)
        """
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter
    def serverless(self) -> Optional[bool]:
        """
        Allow access for [connection to managed databases from functions](https://cloud.yandex.com/docs/functions/operations/database-connection)
        """
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> Optional[bool]:
        """
        Allow access for [SQL queries in the management console](https://cloud.yandex.com/docs/managed-postgresql/operations/web-sql-query)
        """
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class MdbPostgresqlClusterConfigBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started (UTC).
        :param int minutes: The minute at which backup will be started (UTC).
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started (UTC).
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started (UTC).
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbPostgresqlClusterConfigDiskSizeAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfigDiskSizeAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfigDiskSizeAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfigDiskSizeAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbPostgresqlClusterConfigPerformanceDiagnostics(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sessionsSamplingInterval":
            suggest = "sessions_sampling_interval"
        elif key == "statementsSamplingInterval":
            suggest = "statements_sampling_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfigPerformanceDiagnostics. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfigPerformanceDiagnostics.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfigPerformanceDiagnostics.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 sessions_sampling_interval: int,
                 statements_sampling_interval: int,
                 enabled: Optional[bool] = None):
        """
        :param int sessions_sampling_interval: Interval (in seconds) for pg_stat_activity sampling Acceptable values are 1 to 86400, inclusive.
        :param int statements_sampling_interval: Interval (in seconds) for pg_stat_statements sampling Acceptable values are 1 to 86400, inclusive.
        :param bool enabled: Enable performance diagnostics
        """
        pulumi.set(__self__, "sessions_sampling_interval", sessions_sampling_interval)
        pulumi.set(__self__, "statements_sampling_interval", statements_sampling_interval)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="sessionsSamplingInterval")
    def sessions_sampling_interval(self) -> int:
        """
        Interval (in seconds) for pg_stat_activity sampling Acceptable values are 1 to 86400, inclusive.
        """
        return pulumi.get(self, "sessions_sampling_interval")

    @property
    @pulumi.getter(name="statementsSamplingInterval")
    def statements_sampling_interval(self) -> int:
        """
        Interval (in seconds) for pg_stat_statements sampling Acceptable values are 1 to 86400, inclusive.
        """
        return pulumi.get(self, "statements_sampling_interval")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable performance diagnostics
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class MdbPostgresqlClusterConfigPoolerConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "poolDiscard":
            suggest = "pool_discard"
        elif key == "poolingMode":
            suggest = "pooling_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfigPoolerConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfigPoolerConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfigPoolerConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 pool_discard: Optional[bool] = None,
                 pooling_mode: Optional[str] = None):
        """
        :param bool pool_discard: Setting `pool_discard` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_discard-yesno).
        :param str pooling_mode: Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
        """
        if pool_discard is not None:
            pulumi.set(__self__, "pool_discard", pool_discard)
        if pooling_mode is not None:
            pulumi.set(__self__, "pooling_mode", pooling_mode)

    @property
    @pulumi.getter(name="poolDiscard")
    def pool_discard(self) -> Optional[bool]:
        """
        Setting `pool_discard` [parameter in Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool_discard-yesno).
        """
        return pulumi.get(self, "pool_discard")

    @property
    @pulumi.getter(name="poolingMode")
    def pooling_mode(self) -> Optional[str]:
        """
        Mode that the connection pooler is working in. See descriptions of all modes in the [documentation for Odyssey](https://github.com/yandex/odyssey/blob/master/documentation/configuration.md#pool-string.
        """
        return pulumi.get(self, "pooling_mode")


@pulumi.output_type
class MdbPostgresqlClusterConfigResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"
        elif key == "diskTypeId":
            suggest = "disk_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterConfigResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterConfigResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterConfigResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 resource_preset_id: str,
                 disk_type_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a PostgreSQL host, in gigabytes.
        :param str disk_type_id: Type of the storage of PostgreSQL hosts.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a PostgreSQL host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of PostgreSQL hosts.
        """
        return pulumi.get(self, "disk_type_id")


@pulumi.output_type
class MdbPostgresqlClusterDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "lcCollate":
            suggest = "lc_collate"
        elif key == "lcType":
            suggest = "lc_type"
        elif key == "templateDb":
            suggest = "template_db"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 owner: str,
                 extensions: Optional[Sequence['outputs.MdbPostgresqlClusterDatabaseExtension']] = None,
                 lc_collate: Optional[str] = None,
                 lc_type: Optional[str] = None,
                 template_db: Optional[str] = None):
        """
        :param str name: Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_type is not None:
            pulumi.set(__self__, "lc_type", lc_type)
        if template_db is not None:
            pulumi.set(__self__, "template_db", template_db)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.MdbPostgresqlClusterDatabaseExtension']]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[str]:
        return pulumi.get(self, "lc_collate")

    @property
    @pulumi.getter(name="lcType")
    def lc_type(self) -> Optional[str]:
        return pulumi.get(self, "lc_type")

    @property
    @pulumi.getter(name="templateDb")
    def template_db(self) -> Optional[str]:
        return pulumi.get(self, "template_db")


@pulumi.output_type
class MdbPostgresqlClusterDatabaseExtension(dict):
    def __init__(__self__, *,
                 name: str,
                 version: Optional[str] = None):
        """
        :param str name: Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        :param str version: Version of the PostgreSQL cluster. (allowed versions are: 10, 10-1c, 11, 11-1c, 12, 12-1c, 13, 13-1c, 14, 14-1c, 15, 15-1c, 16)
        """
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the PostgreSQL cluster. (allowed versions are: 10, 10-1c, 11, 11-1c, 12, 12-1c, 13, 13-1c, 14, 14-1c, 15, 15-1c, 16)
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MdbPostgresqlClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "replicationSource":
            suggest = "replication_source"
        elif key == "replicationSourceName":
            suggest = "replication_source_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 replication_source: Optional[str] = None,
                 replication_source_name: Optional[str] = None,
                 role: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str zone: The availability zone where the PostgreSQL host will be created.
        :param bool assign_public_ip: Sets whether the host should get a public IP address on creation. It can be changed on the fly only when `name` is set.
        :param str fqdn: The fully qualified domain name of the host.
        :param str name: Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
               Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        :param int priority: Host priority in HA group. It works only when `name` is set.
        :param str replication_source: Host replication source (fqdn), when replication_source is empty then host is in HA group.
        :param str replication_source_name: Host replication source name points to host's `name` from which this host should replicate. When not set then host in HA group. It works only when `name` is set.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if replication_source is not None:
            pulumi.set(__self__, "replication_source", replication_source)
        if replication_source_name is not None:
            pulumi.set(__self__, "replication_source_name", replication_source_name)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the PostgreSQL host will be created.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address on creation. It can be changed on the fly only when `name` is set.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Host state name. It should be set for all hosts or unset for all hosts. This field can be used by another host, to select which host will be its replication source. Please see `replication_source_name` parameter.
        Also, this field is used to select which host will be selected as a master host. Please see `host_master_name` parameter.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        """
        Host priority in HA group. It works only when `name` is set.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="replicationSource")
    def replication_source(self) -> Optional[str]:
        """
        Host replication source (fqdn), when replication_source is empty then host is in HA group.
        """
        return pulumi.get(self, "replication_source")

    @property
    @pulumi.getter(name="replicationSourceName")
    def replication_source_name(self) -> Optional[str]:
        """
        Host replication source name points to host's `name` from which this host should replicate. When not set then host in HA group. It works only when `name` is set.
        """
        return pulumi.get(self, "replication_source_name")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbPostgresqlClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        :param int hour: Hour of the day in UTC (in `HH` format). Allowed value is between 1 and 24.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of the week (in `DDD` format). Allowed values: "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN"
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of the day in UTC (in `HH` format). Allowed value is between 1 and 24.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbPostgresqlClusterRestore(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "backupId":
            suggest = "backup_id"
        elif key == "timeInclusive":
            suggest = "time_inclusive"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterRestore. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterRestore.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterRestore.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 backup_id: str,
                 time: Optional[str] = None,
                 time_inclusive: Optional[bool] = None):
        """
        :param str backup_id: Backup ID. The cluster will be created from the specified backup. [How to get a list of PostgreSQL backups](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-backups).
        :param str time: Timestamp of the moment to which the PostgreSQL cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        :param bool time_inclusive: Flag that indicates whether a database should be restored to the first backup point available just after the timestamp specified in the [time] field instead of just before.  
               Possible values:
               - false (default) — the restore point refers to the first backup moment before [time].
               - true — the restore point refers to the first backup point after [time].
        """
        pulumi.set(__self__, "backup_id", backup_id)
        if time is not None:
            pulumi.set(__self__, "time", time)
        if time_inclusive is not None:
            pulumi.set(__self__, "time_inclusive", time_inclusive)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> str:
        """
        Backup ID. The cluster will be created from the specified backup. [How to get a list of PostgreSQL backups](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-backups).
        """
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        """
        Timestamp of the moment to which the PostgreSQL cluster should be restored. (Format: "2006-01-02T15:04:05" - UTC). When not set, current time is used.
        """
        return pulumi.get(self, "time")

    @property
    @pulumi.getter(name="timeInclusive")
    def time_inclusive(self) -> Optional[bool]:
        """
        Flag that indicates whether a database should be restored to the first backup point available just after the timestamp specified in the [time] field instead of just before.  
        Possible values:
        - false (default) — the restore point refers to the first backup moment before [time].
        - true — the restore point refers to the first backup point after [time].
        """
        return pulumi.get(self, "time_inclusive")


@pulumi.output_type
class MdbPostgresqlClusterUser(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "connLimit":
            suggest = "conn_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterUser. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterUser.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterUser.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 password: str,
                 conn_limit: Optional[int] = None,
                 grants: Optional[Sequence[str]] = None,
                 login: Optional[bool] = None,
                 permissions: Optional[Sequence['outputs.MdbPostgresqlClusterUserPermission']] = None,
                 settings: Optional[Mapping[str, str]] = None):
        """
        :param str name: Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if conn_limit is not None:
            pulumi.set(__self__, "conn_limit", conn_limit)
        if grants is not None:
            pulumi.set(__self__, "grants", grants)
        if login is not None:
            pulumi.set(__self__, "login", login)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the PostgreSQL cluster. Provided by the client when the cluster is created.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="connLimit")
    def conn_limit(self) -> Optional[int]:
        return pulumi.get(self, "conn_limit")

    @property
    @pulumi.getter
    def grants(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def login(self) -> Optional[bool]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbPostgresqlClusterUserPermission']]:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "settings")


@pulumi.output_type
class MdbPostgresqlClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class MdbPostgresqlDatabaseExtension(dict):
    def __init__(__self__, *,
                 name: str,
                 version: Optional[str] = None):
        """
        :param str name: Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).
        :param str version: Version of the extension.
        """
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the database extension. For more information on available extensions see [the official documentation](https://cloud.yandex.com/docs/managed-postgresql/operations/cluster-extensions).
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        """
        Version of the extension.
        """
        return pulumi.get(self, "version")


@pulumi.output_type
class MdbPostgresqlUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbPostgresqlUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbPostgresqlUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbPostgresqlUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str):
        """
        :param str database_name: The name of the database that the permission grants access to.
        """
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")


@pulumi.output_type
class MdbRedisClusterConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "clientOutputBufferLimitNormal":
            suggest = "client_output_buffer_limit_normal"
        elif key == "clientOutputBufferLimitPubsub":
            suggest = "client_output_buffer_limit_pubsub"
        elif key == "maxmemoryPercent":
            suggest = "maxmemory_percent"
        elif key == "maxmemoryPolicy":
            suggest = "maxmemory_policy"
        elif key == "notifyKeyspaceEvents":
            suggest = "notify_keyspace_events"
        elif key == "slowlogLogSlowerThan":
            suggest = "slowlog_log_slower_than"
        elif key == "slowlogMaxLen":
            suggest = "slowlog_max_len"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbRedisClusterConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbRedisClusterConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbRedisClusterConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 password: str,
                 version: str,
                 client_output_buffer_limit_normal: Optional[str] = None,
                 client_output_buffer_limit_pubsub: Optional[str] = None,
                 databases: Optional[int] = None,
                 maxmemory_percent: Optional[int] = None,
                 maxmemory_policy: Optional[str] = None,
                 notify_keyspace_events: Optional[str] = None,
                 slowlog_log_slower_than: Optional[int] = None,
                 slowlog_max_len: Optional[int] = None,
                 timeout: Optional[int] = None):
        """
        :param str password: Password for the Redis cluster.
        :param str version: Version of Redis (6.2).
        :param str client_output_buffer_limit_normal: Normal clients output buffer limits.
               See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
        :param str client_output_buffer_limit_pubsub: Pubsub clients output buffer limits.
               See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
        :param int databases: Number of databases (changing requires redis-server restart).
        :param int maxmemory_percent: Redis maxmemory usage in percent
        :param str maxmemory_policy: Redis key eviction policy for a dataset that reaches maximum memory.
               Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
        :param str notify_keyspace_events: Select the events that Redis will notify among a set of classes.
        :param int slowlog_log_slower_than: Log slow queries below this number in microseconds.
        :param int slowlog_max_len: Slow queries log length.
        :param int timeout: Close the connection after a client is idle for N seconds.
        """
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "version", version)
        if client_output_buffer_limit_normal is not None:
            pulumi.set(__self__, "client_output_buffer_limit_normal", client_output_buffer_limit_normal)
        if client_output_buffer_limit_pubsub is not None:
            pulumi.set(__self__, "client_output_buffer_limit_pubsub", client_output_buffer_limit_pubsub)
        if databases is not None:
            pulumi.set(__self__, "databases", databases)
        if maxmemory_percent is not None:
            pulumi.set(__self__, "maxmemory_percent", maxmemory_percent)
        if maxmemory_policy is not None:
            pulumi.set(__self__, "maxmemory_policy", maxmemory_policy)
        if notify_keyspace_events is not None:
            pulumi.set(__self__, "notify_keyspace_events", notify_keyspace_events)
        if slowlog_log_slower_than is not None:
            pulumi.set(__self__, "slowlog_log_slower_than", slowlog_log_slower_than)
        if slowlog_max_len is not None:
            pulumi.set(__self__, "slowlog_max_len", slowlog_max_len)
        if timeout is not None:
            pulumi.set(__self__, "timeout", timeout)

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Password for the Redis cluster.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        Version of Redis (6.2).
        """
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="clientOutputBufferLimitNormal")
    def client_output_buffer_limit_normal(self) -> Optional[str]:
        """
        Normal clients output buffer limits.
        See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1841).
        """
        return pulumi.get(self, "client_output_buffer_limit_normal")

    @property
    @pulumi.getter(name="clientOutputBufferLimitPubsub")
    def client_output_buffer_limit_pubsub(self) -> Optional[str]:
        """
        Pubsub clients output buffer limits.
        See [redis config file](https://github.com/redis/redis/blob/6.2/redis.conf#L1843).
        """
        return pulumi.get(self, "client_output_buffer_limit_pubsub")

    @property
    @pulumi.getter
    def databases(self) -> Optional[int]:
        """
        Number of databases (changing requires redis-server restart).
        """
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="maxmemoryPercent")
    def maxmemory_percent(self) -> Optional[int]:
        """
        Redis maxmemory usage in percent
        """
        return pulumi.get(self, "maxmemory_percent")

    @property
    @pulumi.getter(name="maxmemoryPolicy")
    def maxmemory_policy(self) -> Optional[str]:
        """
        Redis key eviction policy for a dataset that reaches maximum memory.
        Can be any of the listed in [the official RedisDB documentation](https://docs.redislabs.com/latest/rs/administering/database-operations/eviction-policy/).
        """
        return pulumi.get(self, "maxmemory_policy")

    @property
    @pulumi.getter(name="notifyKeyspaceEvents")
    def notify_keyspace_events(self) -> Optional[str]:
        """
        Select the events that Redis will notify among a set of classes.
        """
        return pulumi.get(self, "notify_keyspace_events")

    @property
    @pulumi.getter(name="slowlogLogSlowerThan")
    def slowlog_log_slower_than(self) -> Optional[int]:
        """
        Log slow queries below this number in microseconds.
        """
        return pulumi.get(self, "slowlog_log_slower_than")

    @property
    @pulumi.getter(name="slowlogMaxLen")
    def slowlog_max_len(self) -> Optional[int]:
        """
        Slow queries log length.
        """
        return pulumi.get(self, "slowlog_max_len")

    @property
    @pulumi.getter
    def timeout(self) -> Optional[int]:
        """
        Close the connection after a client is idle for N seconds.
        """
        return pulumi.get(self, "timeout")


@pulumi.output_type
class MdbRedisClusterDiskSizeAutoscaling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSizeLimit":
            suggest = "disk_size_limit"
        elif key == "emergencyUsageThreshold":
            suggest = "emergency_usage_threshold"
        elif key == "plannedUsageThreshold":
            suggest = "planned_usage_threshold"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbRedisClusterDiskSizeAutoscaling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbRedisClusterDiskSizeAutoscaling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbRedisClusterDiskSizeAutoscaling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        """
        :param int disk_size_limit: Limit of disk size after autoscaling (GiB).
        :param int emergency_usage_threshold: Immediate autoscaling disk usage (percent).
        :param int planned_usage_threshold: Maintenance window autoscaling disk usage (percent).
        """
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        """
        Limit of disk size after autoscaling (GiB).
        """
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        """
        Immediate autoscaling disk usage (percent).
        """
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        """
        Maintenance window autoscaling disk usage (percent).
        """
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class MdbRedisClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "replicaPriority":
            suggest = "replica_priority"
        elif key == "shardName":
            suggest = "shard_name"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbRedisClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbRedisClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbRedisClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 replica_priority: Optional[int] = None,
                 shard_name: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str zone: The availability zone where the Redis host will be created.
               For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        :param bool assign_public_ip: Sets whether the host should get a public IP address or not.
        :param str fqdn: The fully qualified domain name of the host.
        :param int replica_priority: Replica priority of a current replica (usable for non-sharded only).
        :param str shard_name: The name of the shard to which the host belongs.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must
               be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if replica_priority is not None:
            pulumi.set(__self__, "replica_priority", replica_priority)
        if shard_name is not None:
            pulumi.set(__self__, "shard_name", shard_name)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the Redis host will be created.
        For more information see [the official documentation](https://cloud.yandex.com/docs/overview/concepts/geo-scope).
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address or not.
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="replicaPriority")
    def replica_priority(self) -> Optional[int]:
        """
        Replica priority of a current replica (usable for non-sharded only).
        """
        return pulumi.get(self, "replica_priority")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> Optional[str]:
        """
        The name of the shard to which the host belongs.
        """
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must
        be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbRedisClusterMaintenanceWindow(dict):
    def __init__(__self__, *,
                 type: str,
                 day: Optional[str] = None,
                 hour: Optional[int] = None):
        """
        :param str type: Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        :param str day: Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        :param int hour: Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        pulumi.set(__self__, "type", type)
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of maintenance window. Can be either `ANYTIME` or `WEEKLY`. A day and hour of window need to be specified with weekly window.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        """
        Day of week for maintenance window if window type is weekly. Possible values: `MON`, `TUE`, `WED`, `THU`, `FRI`, `SAT`, `SUN`.
        """
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        """
        Hour of day in UTC time zone (1-24) for maintenance window if window type is weekly.
        """
        return pulumi.get(self, "hour")


@pulumi.output_type
class MdbRedisClusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"
        elif key == "diskTypeId":
            suggest = "disk_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbRedisClusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbRedisClusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbRedisClusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 resource_preset_id: str,
                 disk_type_id: Optional[str] = None):
        """
        :param int disk_size: Volume of the storage available to a host, in gigabytes.
        :param str disk_type_id: Type of the storage of Redis hosts - environment default is used if missing.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        """
        Type of the storage of Redis hosts - environment default is used if missing.
        """
        return pulumi.get(self, "disk_type_id")


@pulumi.output_type
class MdbSqlserverClusterBackupWindowStart(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        """
        :param int hours: The hour at which backup will be started.
        :param int minutes: The minute at which backup will be started.
        """
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        """
        The hour at which backup will be started.
        """
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        """
        The minute at which backup will be started.
        """
        return pulumi.get(self, "minutes")


@pulumi.output_type
class MdbSqlserverClusterDatabase(dict):
    def __init__(__self__, *,
                 name: str):
        """
        :param str name: The name of the database.
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the database.
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class MdbSqlserverClusterHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "assignPublicIp":
            suggest = "assign_public_ip"
        elif key == "subnetId":
            suggest = "subnet_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbSqlserverClusterHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbSqlserverClusterHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbSqlserverClusterHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 fqdn: Optional[str] = None,
                 subnet_id: Optional[str] = None):
        """
        :param str zone: The availability zone where the SQLServer host will be created.
        :param bool assign_public_ip: Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment
        :param str fqdn: The fully qualified domain name of the host.
        :param str subnet_id: The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if fqdn is not None:
            pulumi.set(__self__, "fqdn", fqdn)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        The availability zone where the SQLServer host will be created.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        """
        Sets whether the host should get a public IP address on creation. Changing this parameter for an existing host is not supported at the moment
        """
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> Optional[str]:
        """
        The fully qualified domain name of the host.
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        """
        The ID of the subnet, to which the host belongs. The subnet must be a part of the network to which the cluster belongs.
        """
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class MdbSqlserverClusterResources(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "diskSize":
            suggest = "disk_size"
        elif key == "diskTypeId":
            suggest = "disk_type_id"
        elif key == "resourcePresetId":
            suggest = "resource_preset_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbSqlserverClusterResources. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbSqlserverClusterResources.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbSqlserverClusterResources.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        """
        :param int disk_size: Volume of the storage available to a SQLServer host, in gigabytes.
        :param str disk_type_id: Type of the storage of SQLServer hosts.
        """
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        """
        Volume of the storage available to a SQLServer host, in gigabytes.
        """
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        """
        Type of the storage of SQLServer hosts.
        """
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class MdbSqlserverClusterUser(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Optional[Sequence['outputs.MdbSqlserverClusterUserPermission']] = None):
        """
        :param str name: The name of the user.
        :param str password: The password of the user.
        :param Sequence['MdbSqlserverClusterUserPermissionArgs'] permissions: Set of permissions granted to the user. The structure is documented below.
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The name of the user.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        The password of the user.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.MdbSqlserverClusterUserPermission']]:
        """
        Set of permissions granted to the user. The structure is documented below.
        """
        return pulumi.get(self, "permissions")


@pulumi.output_type
class MdbSqlserverClusterUserPermission(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "databaseName":
            suggest = "database_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MdbSqlserverClusterUserPermission. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MdbSqlserverClusterUserPermission.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MdbSqlserverClusterUserPermission.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        """
        :param str database_name: The name of the database that the permission grants access to.
        :param Sequence[str] roles: List user's roles in the database.
               Allowed roles: `OWNER`, `SECURITYADMIN`, `ACCESSADMIN`, `BACKUPOPERATOR`, `DDLADMIN`, `DATAWRITER`, `DATAREADER`, `DENYDATAWRITER`, `DENYDATAREADER`.
        """
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        """
        The name of the database that the permission grants access to.
        """
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        """
        List user's roles in the database.
        Allowed roles: `OWNER`, `SECURITYADMIN`, `ACCESSADMIN`, `BACKUPOPERATOR`, `DDLADMIN`, `DATAWRITER`, `DATAREADER`, `DENYDATAWRITER`, `DENYDATAREADER`.
        """
        return pulumi.get(self, "roles")


@pulumi.output_type
class MonitoringDashboardParametrization(dict):
    def __init__(__self__, *,
                 parameters: Optional[Sequence['outputs.MonitoringDashboardParametrizationParameter']] = None,
                 selectors: Optional[str] = None):
        """
        :param Sequence['MonitoringDashboardParametrizationParameterArgs'] parameters: parameters list.
        :param str selectors: dashboard predefined parameters selector.
        """
        if parameters is not None:
            pulumi.set(__self__, "parameters", parameters)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def parameters(self) -> Optional[Sequence['outputs.MonitoringDashboardParametrizationParameter']]:
        """
        parameters list.
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def selectors(self) -> Optional[str]:
        """
        dashboard predefined parameters selector.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class MonitoringDashboardParametrizationParameter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelValues":
            suggest = "label_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardParametrizationParameter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardParametrizationParameter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardParametrizationParameter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 id: str,
                 customs: Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterCustom']] = None,
                 description: Optional[str] = None,
                 hidden: Optional[bool] = None,
                 label_values: Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterLabelValue']] = None,
                 texts: Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterText']] = None,
                 title: Optional[str] = None):
        """
        :param str id: Parameter identifier
        :param Sequence['MonitoringDashboardParametrizationParameterCustomArgs'] customs: Custom values parameter. Oneof: label_values, custom, text.
        :param str description: Parameter description.
        :param bool hidden: UI-visibility.
        :param Sequence['MonitoringDashboardParametrizationParameterLabelValueArgs'] label_values: Label values parameter. Oneof: label_values, custom, text.
        :param Sequence['MonitoringDashboardParametrizationParameterTextArgs'] texts: Text parameter. Oneof: label_values, custom, text.
        :param str title: UI-visible title of the parameter.
        """
        pulumi.set(__self__, "id", id)
        if customs is not None:
            pulumi.set(__self__, "customs", customs)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if label_values is not None:
            pulumi.set(__self__, "label_values", label_values)
        if texts is not None:
            pulumi.set(__self__, "texts", texts)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def customs(self) -> Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterCustom']]:
        """
        Custom values parameter. Oneof: label_values, custom, text.
        """
        return pulumi.get(self, "customs")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Parameter description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        """
        UI-visibility.
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter(name="labelValues")
    def label_values(self) -> Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterLabelValue']]:
        """
        Label values parameter. Oneof: label_values, custom, text.
        """
        return pulumi.get(self, "label_values")

    @property
    @pulumi.getter
    def texts(self) -> Optional[Sequence['outputs.MonitoringDashboardParametrizationParameterText']]:
        """
        Text parameter. Oneof: label_values, custom, text.
        """
        return pulumi.get(self, "texts")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        UI-visible title of the parameter.
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class MonitoringDashboardParametrizationParameterCustom(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValues":
            suggest = "default_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardParametrizationParameterCustom. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardParametrizationParameterCustom.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardParametrizationParameterCustom.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_values: Optional[Sequence[str]] = None,
                 multiselectable: Optional[bool] = None,
                 values: Optional[Sequence[str]] = None):
        """
        :param Sequence[str] default_values: Default value.
        :param bool multiselectable: Specifies the multiselectable values of parameter.
        :param Sequence[str] values: Parameter values.
        """
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if multiselectable is not None:
            pulumi.set(__self__, "multiselectable", multiselectable)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[Sequence[str]]:
        """
        Default value.
        """
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def multiselectable(self) -> Optional[bool]:
        """
        Specifies the multiselectable values of parameter.
        """
        return pulumi.get(self, "multiselectable")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        Parameter values.
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class MonitoringDashboardParametrizationParameterLabelValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "labelKey":
            suggest = "label_key"
        elif key == "defaultValues":
            suggest = "default_values"
        elif key == "folderId":
            suggest = "folder_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardParametrizationParameterLabelValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardParametrizationParameterLabelValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardParametrizationParameterLabelValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 label_key: str,
                 default_values: Optional[Sequence[str]] = None,
                 folder_id: Optional[str] = None,
                 multiselectable: Optional[bool] = None,
                 selectors: Optional[str] = None):
        """
        :param str label_key: Label key to list label values.
        :param Sequence[str] default_values: Default value.
        :param str folder_id: Labels folder ID.
        :param bool multiselectable: Specifies the multiselectable values of parameter.
        :param str selectors: Selectors to select metric label values.
        """
        pulumi.set(__self__, "label_key", label_key)
        if default_values is not None:
            pulumi.set(__self__, "default_values", default_values)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if multiselectable is not None:
            pulumi.set(__self__, "multiselectable", multiselectable)
        if selectors is not None:
            pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> str:
        """
        Label key to list label values.
        """
        return pulumi.get(self, "label_key")

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Optional[Sequence[str]]:
        """
        Default value.
        """
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Labels folder ID.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def multiselectable(self) -> Optional[bool]:
        """
        Specifies the multiselectable values of parameter.
        """
        return pulumi.get(self, "multiselectable")

    @property
    @pulumi.getter
    def selectors(self) -> Optional[str]:
        """
        Selectors to select metric label values.
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class MonitoringDashboardParametrizationParameterText(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultValue":
            suggest = "default_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardParametrizationParameterText. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardParametrizationParameterText.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardParametrizationParameterText.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_value: Optional[str] = None):
        """
        :param str default_value: Default value.
        """
        if default_value is not None:
            pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> Optional[str]:
        """
        Default value.
        """
        return pulumi.get(self, "default_value")


@pulumi.output_type
class MonitoringDashboardWidget(dict):
    def __init__(__self__, *,
                 charts: Optional[Sequence['outputs.MonitoringDashboardWidgetChart']] = None,
                 positions: Optional[Sequence['outputs.MonitoringDashboardWidgetPosition']] = None,
                 texts: Optional[Sequence['outputs.MonitoringDashboardWidgetText']] = None,
                 titles: Optional[Sequence['outputs.MonitoringDashboardWidgetTitle']] = None):
        """
        :param Sequence['MonitoringDashboardWidgetChartArgs'] charts: Chart widget settings. Oneof: text, title or chart.
        :param Sequence['MonitoringDashboardWidgetPositionArgs'] positions: Widget position.
        :param Sequence['MonitoringDashboardWidgetTextArgs'] texts: Text widget settings. Oneof: text, title or chart.
        :param Sequence['MonitoringDashboardWidgetTitleArgs'] titles: Title widget settings. Oneof: text, title or chart.
        """
        if charts is not None:
            pulumi.set(__self__, "charts", charts)
        if positions is not None:
            pulumi.set(__self__, "positions", positions)
        if texts is not None:
            pulumi.set(__self__, "texts", texts)
        if titles is not None:
            pulumi.set(__self__, "titles", titles)

    @property
    @pulumi.getter
    def charts(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChart']]:
        """
        Chart widget settings. Oneof: text, title or chart.
        """
        return pulumi.get(self, "charts")

    @property
    @pulumi.getter
    def positions(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetPosition']]:
        """
        Widget position.
        """
        return pulumi.get(self, "positions")

    @property
    @pulumi.getter
    def texts(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetText']]:
        """
        Text widget settings. Oneof: text, title or chart.
        """
        return pulumi.get(self, "texts")

    @property
    @pulumi.getter
    def titles(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetTitle']]:
        """
        Title widget settings. Oneof: text, title or chart.
        """
        return pulumi.get(self, "titles")


@pulumi.output_type
class MonitoringDashboardWidgetChart(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "chartId":
            suggest = "chart_id"
        elif key == "displayLegend":
            suggest = "display_legend"
        elif key == "nameHidingSettings":
            suggest = "name_hiding_settings"
        elif key == "seriesOverrides":
            suggest = "series_overrides"
        elif key == "visualizationSettings":
            suggest = "visualization_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChart. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChart.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChart.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 chart_id: Optional[str] = None,
                 description: Optional[str] = None,
                 display_legend: Optional[bool] = None,
                 freeze: Optional[str] = None,
                 name_hiding_settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartNameHidingSetting']] = None,
                 queries: Optional[Sequence['outputs.MonitoringDashboardWidgetChartQuery']] = None,
                 series_overrides: Optional[Sequence['outputs.MonitoringDashboardWidgetChartSeriesOverride']] = None,
                 title: Optional[str] = None,
                 visualization_settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSetting']] = None):
        """
        :param str chart_id: Chart ID.
        :param str description: Chart description in dashboard (not enabled in UI).
        :param bool display_legend: Enable legend under chart.
        :param str freeze: Fixed time interval for chart. Values:
               - FREEZE_DURATION_HOUR: Last hour.
               - FREEZE_DURATION_DAY: Last day = last 24 hours.
               - FREEZE_DURATION_WEEK: Last 7 days.
               - FREEZE_DURATION_MONTH: Last 31 days.
        :param Sequence['MonitoringDashboardWidgetChartNameHidingSettingArgs'] name_hiding_settings: Names settings.
        :param Sequence['MonitoringDashboardWidgetChartQueryArgs'] queries: Queries settings.
        :param Sequence['MonitoringDashboardWidgetChartSeriesOverrideArgs'] series_overrides: Time series settings.
        :param str title: Chart widget title.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingArgs'] visualization_settings: Visualization settings.
        """
        if chart_id is not None:
            pulumi.set(__self__, "chart_id", chart_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if display_legend is not None:
            pulumi.set(__self__, "display_legend", display_legend)
        if freeze is not None:
            pulumi.set(__self__, "freeze", freeze)
        if name_hiding_settings is not None:
            pulumi.set(__self__, "name_hiding_settings", name_hiding_settings)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)
        if series_overrides is not None:
            pulumi.set(__self__, "series_overrides", series_overrides)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if visualization_settings is not None:
            pulumi.set(__self__, "visualization_settings", visualization_settings)

    @property
    @pulumi.getter(name="chartId")
    def chart_id(self) -> Optional[str]:
        """
        Chart ID.
        """
        return pulumi.get(self, "chart_id")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Chart description in dashboard (not enabled in UI).
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayLegend")
    def display_legend(self) -> Optional[bool]:
        """
        Enable legend under chart.
        """
        return pulumi.get(self, "display_legend")

    @property
    @pulumi.getter
    def freeze(self) -> Optional[str]:
        """
        Fixed time interval for chart. Values:
        - FREEZE_DURATION_HOUR: Last hour.
        - FREEZE_DURATION_DAY: Last day = last 24 hours.
        - FREEZE_DURATION_WEEK: Last 7 days.
        - FREEZE_DURATION_MONTH: Last 31 days.
        """
        return pulumi.get(self, "freeze")

    @property
    @pulumi.getter(name="nameHidingSettings")
    def name_hiding_settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartNameHidingSetting']]:
        """
        Names settings.
        """
        return pulumi.get(self, "name_hiding_settings")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartQuery']]:
        """
        Queries settings.
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartSeriesOverride']]:
        """
        Time series settings.
        """
        return pulumi.get(self, "series_overrides")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Chart widget title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="visualizationSettings")
    def visualization_settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSetting']]:
        """
        Visualization settings.
        """
        return pulumi.get(self, "visualization_settings")


@pulumi.output_type
class MonitoringDashboardWidgetChartNameHidingSetting(dict):
    def __init__(__self__, *,
                 names: Optional[Sequence[str]] = None,
                 positive: Optional[bool] = None):
        """
        :param Sequence[str] names: Series name.
        :param bool positive: True if we want to show concrete series names only, false if we want to hide concrete series names.
        """
        if names is not None:
            pulumi.set(__self__, "names", names)
        if positive is not None:
            pulumi.set(__self__, "positive", positive)

    @property
    @pulumi.getter
    def names(self) -> Optional[Sequence[str]]:
        """
        Series name.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def positive(self) -> Optional[bool]:
        """
        True if we want to show concrete series names only, false if we want to hide concrete series names.
        """
        return pulumi.get(self, "positive")


@pulumi.output_type
class MonitoringDashboardWidgetChartQuery(dict):
    def __init__(__self__, *,
                 downsamplings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartQueryDownsampling']] = None,
                 targets: Optional[Sequence['outputs.MonitoringDashboardWidgetChartQueryTarget']] = None):
        """
        :param Sequence['MonitoringDashboardWidgetChartQueryDownsamplingArgs'] downsamplings: Downsamplang settings.
        :param Sequence['MonitoringDashboardWidgetChartQueryTargetArgs'] targets: Query targets.
        """
        if downsamplings is not None:
            pulumi.set(__self__, "downsamplings", downsamplings)
        if targets is not None:
            pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def downsamplings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartQueryDownsampling']]:
        """
        Downsamplang settings.
        """
        return pulumi.get(self, "downsamplings")

    @property
    @pulumi.getter
    def targets(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartQueryTarget']]:
        """
        Query targets.
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class MonitoringDashboardWidgetChartQueryDownsampling(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "gapFilling":
            suggest = "gap_filling"
        elif key == "gridAggregation":
            suggest = "grid_aggregation"
        elif key == "gridInterval":
            suggest = "grid_interval"
        elif key == "maxPoints":
            suggest = "max_points"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartQueryDownsampling. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartQueryDownsampling.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartQueryDownsampling.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 gap_filling: Optional[str] = None,
                 grid_aggregation: Optional[str] = None,
                 grid_interval: Optional[int] = None,
                 max_points: Optional[int] = None):
        """
        :param bool disabled: Disable downsampling.
        :param str gap_filling: Parameters for filling gaps in data.
        :param str grid_aggregation: Function that is used for downsampling.
        :param int grid_interval: Time interval (grid) for downsampling in milliseconds. Points in the specified range are aggregated into one time point
        :param int max_points: Maximum number of points to be returned.
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if gap_filling is not None:
            pulumi.set(__self__, "gap_filling", gap_filling)
        if grid_aggregation is not None:
            pulumi.set(__self__, "grid_aggregation", grid_aggregation)
        if grid_interval is not None:
            pulumi.set(__self__, "grid_interval", grid_interval)
        if max_points is not None:
            pulumi.set(__self__, "max_points", max_points)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Disable downsampling.
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="gapFilling")
    def gap_filling(self) -> Optional[str]:
        """
        Parameters for filling gaps in data.
        """
        return pulumi.get(self, "gap_filling")

    @property
    @pulumi.getter(name="gridAggregation")
    def grid_aggregation(self) -> Optional[str]:
        """
        Function that is used for downsampling.
        """
        return pulumi.get(self, "grid_aggregation")

    @property
    @pulumi.getter(name="gridInterval")
    def grid_interval(self) -> Optional[int]:
        """
        Time interval (grid) for downsampling in milliseconds. Points in the specified range are aggregated into one time point
        """
        return pulumi.get(self, "grid_interval")

    @property
    @pulumi.getter(name="maxPoints")
    def max_points(self) -> Optional[int]:
        """
        Maximum number of points to be returned.
        """
        return pulumi.get(self, "max_points")


@pulumi.output_type
class MonitoringDashboardWidgetChartQueryTarget(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "textMode":
            suggest = "text_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartQueryTarget. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartQueryTarget.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartQueryTarget.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 hidden: Optional[bool] = None,
                 query: Optional[str] = None,
                 text_mode: Optional[bool] = None):
        """
        :param bool hidden: Checks that target is visible or invisible.
        :param str query: Query.
        :param bool text_mode: Text mode enabled.
        """
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if query is not None:
            pulumi.set(__self__, "query", query)
        if text_mode is not None:
            pulumi.set(__self__, "text_mode", text_mode)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        """
        Checks that target is visible or invisible.
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def query(self) -> Optional[str]:
        """
        Query.
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="textMode")
    def text_mode(self) -> Optional[bool]:
        """
        Text mode enabled.
        """
        return pulumi.get(self, "text_mode")


@pulumi.output_type
class MonitoringDashboardWidgetChartSeriesOverride(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetIndex":
            suggest = "target_index"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartSeriesOverride. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartSeriesOverride.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartSeriesOverride.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: Optional[str] = None,
                 settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartSeriesOverrideSetting']] = None,
                 target_index: Optional[str] = None):
        """
        :param str name: Series name. Oneof: name or target_index.
        :param Sequence['MonitoringDashboardWidgetChartSeriesOverrideSettingArgs'] settings: Override settings.
        :param str target_index: Series index. Oneof: name or target_index.
        """
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)
        if target_index is not None:
            pulumi.set(__self__, "target_index", target_index)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Series name. Oneof: name or target_index.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartSeriesOverrideSetting']]:
        """
        Override settings.
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="targetIndex")
    def target_index(self) -> Optional[str]:
        """
        Series index. Oneof: name or target_index.
        """
        return pulumi.get(self, "target_index")


@pulumi.output_type
class MonitoringDashboardWidgetChartSeriesOverrideSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "growDown":
            suggest = "grow_down"
        elif key == "stackName":
            suggest = "stack_name"
        elif key == "yaxisPosition":
            suggest = "yaxis_position"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartSeriesOverrideSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartSeriesOverrideSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartSeriesOverrideSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 color: Optional[str] = None,
                 grow_down: Optional[bool] = None,
                 name: Optional[str] = None,
                 stack_name: Optional[str] = None,
                 type: Optional[str] = None,
                 yaxis_position: Optional[str] = None):
        """
        :param str color: Series color or empty.
        :param bool grow_down: Stack grow down.
        :param str name: Series name or empty.
        :param str stack_name: Stack name or empty.
        :param str type: Type.
        :param str yaxis_position: Yaxis position.
        """
        if color is not None:
            pulumi.set(__self__, "color", color)
        if grow_down is not None:
            pulumi.set(__self__, "grow_down", grow_down)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if stack_name is not None:
            pulumi.set(__self__, "stack_name", stack_name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if yaxis_position is not None:
            pulumi.set(__self__, "yaxis_position", yaxis_position)

    @property
    @pulumi.getter
    def color(self) -> Optional[str]:
        """
        Series color or empty.
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="growDown")
    def grow_down(self) -> Optional[bool]:
        """
        Stack grow down.
        """
        return pulumi.get(self, "grow_down")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        Series name or empty.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> Optional[str]:
        """
        Stack name or empty.
        """
        return pulumi.get(self, "stack_name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="yaxisPosition")
    def yaxis_position(self) -> Optional[str]:
        """
        Yaxis position.
        """
        return pulumi.get(self, "yaxis_position")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "colorSchemeSettings":
            suggest = "color_scheme_settings"
        elif key == "heatmapSettings":
            suggest = "heatmap_settings"
        elif key == "showLabels":
            suggest = "show_labels"
        elif key == "yaxisSettings":
            suggest = "yaxis_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartVisualizationSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartVisualizationSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartVisualizationSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 aggregation: Optional[str] = None,
                 color_scheme_settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting']] = None,
                 heatmap_settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting']] = None,
                 interpolate: Optional[str] = None,
                 normalize: Optional[bool] = None,
                 show_labels: Optional[bool] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None,
                 yaxis_settings: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting']] = None):
        """
        :param str aggregation: Aggregation. Values:
               - SERIES_AGGREGATION_UNSPECIFIED: Not specified (avg by default).
               - SERIES_AGGREGATION_AVG: Average.
               - SERIES_AGGREGATION_MIN: Minimum.
               - SERIES_AGGREGATION_MAX: Maximum.
               - SERIES_AGGREGATION_LAST: Last non-NaN value.
               - SERIES_AGGREGATION_SUM: Sum.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingArgs'] color_scheme_settings: Color settings.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingArgs'] heatmap_settings: Heatmap settings.
        :param str interpolate: Interpolate values. Values:
               - INTERPOLATE_UNSPECIFIED: Not specified (linear by default).
               - INTERPOLATE_LINEAR: Linear.
               - INTERPOLATE_LEFT: Left.
               - INTERPOLATE_RIGHT: Right.
        :param bool normalize: Normalize values.
        :param bool show_labels: Show chart labels.
        :param str title: Inside chart title.
        :param str type: Visualization type. Values:
               - VISUALIZATION_TYPE_UNSPECIFIED: Not specified (line by default).
               - VISUALIZATION_TYPE_LINE: Line chart.
               - VISUALIZATION_TYPE_STACK: Stack chart.
               - VISUALIZATION_TYPE_COLUMN: Points as columns chart.
               - VISUALIZATION_TYPE_POINTS: Points.
               - VISUALIZATION_TYPE_PIE: Pie aggregation chart.
               - VISUALIZATION_TYPE_BARS: Bars aggregation chart.
               - VISUALIZATION_TYPE_DISTRIBUTION: Distribution aggregation chart.
               - VISUALIZATION_TYPE_HEATMAP: Heatmap aggregation chart.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingArgs'] yaxis_settings: Y axis settings.
        """
        if aggregation is not None:
            pulumi.set(__self__, "aggregation", aggregation)
        if color_scheme_settings is not None:
            pulumi.set(__self__, "color_scheme_settings", color_scheme_settings)
        if heatmap_settings is not None:
            pulumi.set(__self__, "heatmap_settings", heatmap_settings)
        if interpolate is not None:
            pulumi.set(__self__, "interpolate", interpolate)
        if normalize is not None:
            pulumi.set(__self__, "normalize", normalize)
        if show_labels is not None:
            pulumi.set(__self__, "show_labels", show_labels)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if yaxis_settings is not None:
            pulumi.set(__self__, "yaxis_settings", yaxis_settings)

    @property
    @pulumi.getter
    def aggregation(self) -> Optional[str]:
        """
        Aggregation. Values:
        - SERIES_AGGREGATION_UNSPECIFIED: Not specified (avg by default).
        - SERIES_AGGREGATION_AVG: Average.
        - SERIES_AGGREGATION_MIN: Minimum.
        - SERIES_AGGREGATION_MAX: Maximum.
        - SERIES_AGGREGATION_LAST: Last non-NaN value.
        - SERIES_AGGREGATION_SUM: Sum.
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="colorSchemeSettings")
    def color_scheme_settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting']]:
        """
        Color settings.
        """
        return pulumi.get(self, "color_scheme_settings")

    @property
    @pulumi.getter(name="heatmapSettings")
    def heatmap_settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting']]:
        """
        Heatmap settings.
        """
        return pulumi.get(self, "heatmap_settings")

    @property
    @pulumi.getter
    def interpolate(self) -> Optional[str]:
        """
        Interpolate values. Values:
        - INTERPOLATE_UNSPECIFIED: Not specified (linear by default).
        - INTERPOLATE_LINEAR: Linear.
        - INTERPOLATE_LEFT: Left.
        - INTERPOLATE_RIGHT: Right.
        """
        return pulumi.get(self, "interpolate")

    @property
    @pulumi.getter
    def normalize(self) -> Optional[bool]:
        """
        Normalize values.
        """
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="showLabels")
    def show_labels(self) -> Optional[bool]:
        """
        Show chart labels.
        """
        return pulumi.get(self, "show_labels")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Inside chart title.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Visualization type. Values:
        - VISUALIZATION_TYPE_UNSPECIFIED: Not specified (line by default).
        - VISUALIZATION_TYPE_LINE: Line chart.
        - VISUALIZATION_TYPE_STACK: Stack chart.
        - VISUALIZATION_TYPE_COLUMN: Points as columns chart.
        - VISUALIZATION_TYPE_POINTS: Points.
        - VISUALIZATION_TYPE_PIE: Pie aggregation chart.
        - VISUALIZATION_TYPE_BARS: Bars aggregation chart.
        - VISUALIZATION_TYPE_DISTRIBUTION: Distribution aggregation chart.
        - VISUALIZATION_TYPE_HEATMAP: Heatmap aggregation chart.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="yaxisSettings")
    def yaxis_settings(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting']]:
        """
        Y axis settings.
        """
        return pulumi.get(self, "yaxis_settings")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSetting(dict):
    def __init__(__self__, *,
                 automatics: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic']] = None,
                 gradients: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient']] = None,
                 standards: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard']] = None):
        """
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticArgs'] automatics: Automatic color scheme. Oneof: automatic, standard or gradient.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientArgs'] gradients: Gradient color scheme. Oneof: automatic, standard or gradient.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardArgs'] standards: Standard color scheme. Oneof: automatic, standard or gradient.
        """
        if automatics is not None:
            pulumi.set(__self__, "automatics", automatics)
        if gradients is not None:
            pulumi.set(__self__, "gradients", gradients)
        if standards is not None:
            pulumi.set(__self__, "standards", standards)

    @property
    @pulumi.getter
    def automatics(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic']]:
        """
        Automatic color scheme. Oneof: automatic, standard or gradient.
        """
        return pulumi.get(self, "automatics")

    @property
    @pulumi.getter
    def gradients(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient']]:
        """
        Gradient color scheme. Oneof: automatic, standard or gradient.
        """
        return pulumi.get(self, "gradients")

    @property
    @pulumi.getter
    def standards(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard']]:
        """
        Standard color scheme. Oneof: automatic, standard or gradient.
        """
        return pulumi.get(self, "standards")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomatic(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "greenValue":
            suggest = "green_value"
        elif key == "redValue":
            suggest = "red_value"
        elif key == "violetValue":
            suggest = "violet_value"
        elif key == "yellowValue":
            suggest = "yellow_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradient.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 green_value: Optional[str] = None,
                 red_value: Optional[str] = None,
                 violet_value: Optional[str] = None,
                 yellow_value: Optional[str] = None):
        """
        :param str green_value: Gradient green value.
        :param str red_value: Gradient red value.
        :param str violet_value: Gradient violet value.
        :param str yellow_value: Gradient yellow value.
        """
        if green_value is not None:
            pulumi.set(__self__, "green_value", green_value)
        if red_value is not None:
            pulumi.set(__self__, "red_value", red_value)
        if violet_value is not None:
            pulumi.set(__self__, "violet_value", violet_value)
        if yellow_value is not None:
            pulumi.set(__self__, "yellow_value", yellow_value)

    @property
    @pulumi.getter(name="greenValue")
    def green_value(self) -> Optional[str]:
        """
        Gradient green value.
        """
        return pulumi.get(self, "green_value")

    @property
    @pulumi.getter(name="redValue")
    def red_value(self) -> Optional[str]:
        """
        Gradient red value.
        """
        return pulumi.get(self, "red_value")

    @property
    @pulumi.getter(name="violetValue")
    def violet_value(self) -> Optional[str]:
        """
        Gradient violet value.
        """
        return pulumi.get(self, "violet_value")

    @property
    @pulumi.getter(name="yellowValue")
    def yellow_value(self) -> Optional[str]:
        """
        Gradient yellow value.
        """
        return pulumi.get(self, "yellow_value")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandard(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "greenValue":
            suggest = "green_value"
        elif key == "redValue":
            suggest = "red_value"
        elif key == "violetValue":
            suggest = "violet_value"
        elif key == "yellowValue":
            suggest = "yellow_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingHeatmapSetting.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 green_value: Optional[str] = None,
                 red_value: Optional[str] = None,
                 violet_value: Optional[str] = None,
                 yellow_value: Optional[str] = None):
        """
        :param str green_value: Heatmap green value.
        :param str red_value: Heatmap red value.
        :param str violet_value: Heatmap violet value.
        :param str yellow_value: Heatmap yellow value.
        """
        if green_value is not None:
            pulumi.set(__self__, "green_value", green_value)
        if red_value is not None:
            pulumi.set(__self__, "red_value", red_value)
        if violet_value is not None:
            pulumi.set(__self__, "violet_value", violet_value)
        if yellow_value is not None:
            pulumi.set(__self__, "yellow_value", yellow_value)

    @property
    @pulumi.getter(name="greenValue")
    def green_value(self) -> Optional[str]:
        """
        Heatmap green value.
        """
        return pulumi.get(self, "green_value")

    @property
    @pulumi.getter(name="redValue")
    def red_value(self) -> Optional[str]:
        """
        Heatmap red value.
        """
        return pulumi.get(self, "red_value")

    @property
    @pulumi.getter(name="violetValue")
    def violet_value(self) -> Optional[str]:
        """
        Heatmap violet value.
        """
        return pulumi.get(self, "violet_value")

    @property
    @pulumi.getter(name="yellowValue")
    def yellow_value(self) -> Optional[str]:
        """
        Heatmap yellow value.
        """
        return pulumi.get(self, "yellow_value")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingYaxisSetting(dict):
    def __init__(__self__, *,
                 lefts: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft']] = None,
                 rights: Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight']] = None):
        """
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftArgs'] lefts: Left yaxis config.
        :param Sequence['MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightArgs'] rights: Right yaxis config.
        """
        if lefts is not None:
            pulumi.set(__self__, "lefts", lefts)
        if rights is not None:
            pulumi.set(__self__, "rights", rights)

    @property
    @pulumi.getter
    def lefts(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft']]:
        """
        Left yaxis config.
        """
        return pulumi.get(self, "lefts")

    @property
    @pulumi.getter
    def rights(self) -> Optional[Sequence['outputs.MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight']]:
        """
        Right yaxis config.
        """
        return pulumi.get(self, "rights")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unitFormat":
            suggest = "unit_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeft.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 precision: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None,
                 unit_format: Optional[str] = None):
        """
        :param str max: Max value in extended number format or empty.
        :param str min: Min value in extended number format or empty.
        :param int precision: Tick value precision (null as default, 0-7 in other cases).
        :param str title: Title or empty.
        :param str type: Type. Values:
               - YAXIS_TYPE_UNSPECIFIED: Not specified (linear by default).
               - YAXIS_TYPE_LINEAR: Linear.
               - YAXIS_TYPE_LOGARITHMIC: Logarithmic.
        :param str unit_format: Unit format. Values:
               - UNIT_NONE: Misc. None (show tick values as-is).
               - UNIT_COUNT: Count.
               - UNIT_PERCENT: Percent (0-100).
               - UNIT_PERCENT_UNIT: Percent (0-1).
               - UNIT_NANOSECONDS: Time. Nanoseconds (ns).
               - UNIT_MICROSECONDS: Microseconds (µs).
               - UNIT_MILLISECONDS: Milliseconds (ms).
               - UNIT_SECONDS: Seconds (s).
               - UNIT_MINUTES: Minutes (m).
               - UNIT_HOURS: Hours (h).
               - UNIT_DAYS: Days (d).
               - UNIT_BITS_SI: Data (SI). Bits (SI).
               - UNIT_BYTES_SI: Bytes (SI).
               - UNIT_KILOBYTES: Kilobytes (KB).
               - UNIT_MEGABYTES: Megabytes (MB).
               - UNIT_GIGABYTES: Gigabytes (GB).
               - UNIT_TERABYTES: Terabytes (TB)
               - UNIT_PETABYTES: Petabytes (PB).
               - UNIT_EXABYTES: Exabytes (EB).
               - UNIT_BITS_IEC: Data (IEC). Bits (IEC).
               - UNIT_BYTES_IEC: Bytes (IEC).
               - UNIT_KIBIBYTES: Kibibytes (KiB).
               - UNIT_MEBIBYTES: Mebibytes (MiB).
               - UNIT_GIBIBYTES: Gigibytes (GiB).
               - UNIT_TEBIBYTES: Tebibytes (TiB).
               - UNIT_PEBIBYTES: Pebibytes (PiB).
               - UNIT_EXBIBYTES: Exbibytes (EiB).
               - UNIT_REQUESTS_PER_SECOND: Throughput. Requests per second (reqps).
               - UNIT_OPERATIONS_PER_SECOND: Operations per second (ops).
               - UNIT_WRITES_PER_SECOND: Writes per second (wps).
               - UNIT_READS_PER_SECOND: Reads per second (rps).
               - UNIT_PACKETS_PER_SECOND: Packets per second (pps).
               - UNIT_IO_OPERATIONS_PER_SECOND: IO operations per second (iops).
               - UNIT_COUNTS_PER_SECOND: Counts per second (counts/sec).
               - UNIT_BITS_SI_PER_SECOND: Data Rate (SI). Bits (SI) per second (bits/sec).
               - UNIT_BYTES_SI_PER_SECOND: Bytes (SI) per second (bytes/sec).
               - UNIT_KILOBITS_PER_SECOND: Kilobits per second (KBits/sec).
               - UNIT_KILOBYTES_PER_SECOND: Kilobytes per second (KB/sec).
               - UNIT_MEGABITS_PER_SECOND: Megabits per second (MBits/sec).
               - UNIT_MEGABYTES_PER_SECOND: Megabytes per second (MB/sec).
               - UNIT_GIGABITS_PER_SECOND: Gigabits per second (GBits/sec).
               - UNIT_GIGABYTES_PER_SECOND: Gigabytes per second (GB/sec).
               - UNIT_TERABITS_PER_SECOND: Terabits per second (TBits/sec).
               - UNIT_TERABYTES_PER_SECOND: Terabytes per second (TB/sec).
               - UNIT_PETABITS_PER_SECOND: Petabits per second (Pbits/sec).
               - UNIT_PETABYTES_PER_SECOND: Petabytes per second (PB/sec).
               - UNIT_BITS_IEC_PER_SECOND: Data Rate (IEC). Bits (IEC) per second (bits/sec).
               - UNIT_BYTES_IEC_PER_SECOND: Bytes (IEC) per second (bytes/sec).
               - UNIT_KIBIBITS_PER_SECOND: Kibibits per second (KiBits/sec).
               - UNIT_KIBIBYTES_PER_SECOND: Kibibytes per second (KiB/sec).
               - UNIT_MEBIBITS_PER_SECOND: Mebibits per second (MiBits/sec).
               - UNIT_MEBIBYTES_PER_SECOND: Mebibytes per second (MiB/sec).
               - UNIT_GIBIBITS_PER_SECOND: Gibibits per second (GiBits/sec).
               - UNIT_GIBIBYTES_PER_SECOND: Gibibytes per second (GiB/sec).
               - UNIT_TEBIBITS_PER_SECOND: Tebibits per second (TiBits/sec).
               - UNIT_TEBIBYTES_PER_SECOND: Tebibytes per second (TiB/sec).
               - UNIT_PEBIBITS_PER_SECOND: Pebibits per second (PiBits/sec).
               - UNIT_PEBIBYTES_PER_SECOND: Pebibytes per second (PiB/sec).
               - UNIT_DATETIME_UTC: Date & time. Datetime (UTC).
               - UNIT_DATETIME_LOCAL: Datetime (local).
               - UNIT_HERTZ: Frequency. Hertz (Hz).
               - UNIT_KILOHERTZ: Kilohertz (KHz).
               - UNIT_MEGAHERTZ: Megahertz (MHz).
               - UNIT_GIGAHERTZ: Gigahertz (GHz).
               - UNIT_DOLLAR: Currency. Dollar.
               - UNIT_EURO: Euro.
               - UNIT_ROUBLE: Rouble.
               - UNIT_CELSIUS: Temperature. Celsius (°C).
               - UNIT_FAHRENHEIT: Fahrenheit (°F).
               - UNIT_KELVIN: Kelvin (K).
               - UNIT_FLOP_PER_SECOND: Computation. Flop per second (FLOP/sec).
               - UNIT_KILOFLOP_PER_SECOND: Kiloflop per second (KFLOP/sec).
               - UNIT_MEGAFLOP_PER_SECOND: Megaflop per second (MFLOP/sec).
               - UNIT_GIGAFLOP_PER_SECOND: Gigaflop per second (GFLOP/sec).
               - UNIT_PETAFLOP_PER_SECOND: Petaflop per second (PFLOP/sec).
               - UNIT_EXAFLOP_PER_SECOND: Exaflop per second (EFLOP/sec).
               - UNIT_METERS_PER_SECOND: Velocity. Meters per second (m/sec).
               - UNIT_KILOMETERS_PER_HOUR: Kilometers per hour (km/h).
               - UNIT_MILES_PER_HOUR: Miles per hour (mi/h).
               - UNIT_MILLIMETER: Length. Millimeter.
               - UNIT_CENTIMETER: Centimeter.
               - UNIT_METER: Meter.
               - UNIT_KILOMETER: Kilometer.
               - UNIT_MILE: Mile.
               - UNIT_PPM: Concentration. Parts per million (ppm).
               - UNIT_EVENTS_PER_SECOND: Events per second
               - UNIT_PACKETS: Packets
               - UNIT_DBM: dBm (dbm)
               - UNIT_VIRTUAL_CPU: Virtual CPU cores based on CPU time (vcpu)
               - UNIT_MESSAGES_PER_SECOND: Messages per second (mps)
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit_format is not None:
            pulumi.set(__self__, "unit_format", unit_format)

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        """
        Max value in extended number format or empty.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        """
        Min value in extended number format or empty.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        """
        Tick value precision (null as default, 0-7 in other cases).
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title or empty.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type. Values:
        - YAXIS_TYPE_UNSPECIFIED: Not specified (linear by default).
        - YAXIS_TYPE_LINEAR: Linear.
        - YAXIS_TYPE_LOGARITHMIC: Logarithmic.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitFormat")
    def unit_format(self) -> Optional[str]:
        """
        Unit format. Values:
        - UNIT_NONE: Misc. None (show tick values as-is).
        - UNIT_COUNT: Count.
        - UNIT_PERCENT: Percent (0-100).
        - UNIT_PERCENT_UNIT: Percent (0-1).
        - UNIT_NANOSECONDS: Time. Nanoseconds (ns).
        - UNIT_MICROSECONDS: Microseconds (µs).
        - UNIT_MILLISECONDS: Milliseconds (ms).
        - UNIT_SECONDS: Seconds (s).
        - UNIT_MINUTES: Minutes (m).
        - UNIT_HOURS: Hours (h).
        - UNIT_DAYS: Days (d).
        - UNIT_BITS_SI: Data (SI). Bits (SI).
        - UNIT_BYTES_SI: Bytes (SI).
        - UNIT_KILOBYTES: Kilobytes (KB).
        - UNIT_MEGABYTES: Megabytes (MB).
        - UNIT_GIGABYTES: Gigabytes (GB).
        - UNIT_TERABYTES: Terabytes (TB)
        - UNIT_PETABYTES: Petabytes (PB).
        - UNIT_EXABYTES: Exabytes (EB).
        - UNIT_BITS_IEC: Data (IEC). Bits (IEC).
        - UNIT_BYTES_IEC: Bytes (IEC).
        - UNIT_KIBIBYTES: Kibibytes (KiB).
        - UNIT_MEBIBYTES: Mebibytes (MiB).
        - UNIT_GIBIBYTES: Gigibytes (GiB).
        - UNIT_TEBIBYTES: Tebibytes (TiB).
        - UNIT_PEBIBYTES: Pebibytes (PiB).
        - UNIT_EXBIBYTES: Exbibytes (EiB).
        - UNIT_REQUESTS_PER_SECOND: Throughput. Requests per second (reqps).
        - UNIT_OPERATIONS_PER_SECOND: Operations per second (ops).
        - UNIT_WRITES_PER_SECOND: Writes per second (wps).
        - UNIT_READS_PER_SECOND: Reads per second (rps).
        - UNIT_PACKETS_PER_SECOND: Packets per second (pps).
        - UNIT_IO_OPERATIONS_PER_SECOND: IO operations per second (iops).
        - UNIT_COUNTS_PER_SECOND: Counts per second (counts/sec).
        - UNIT_BITS_SI_PER_SECOND: Data Rate (SI). Bits (SI) per second (bits/sec).
        - UNIT_BYTES_SI_PER_SECOND: Bytes (SI) per second (bytes/sec).
        - UNIT_KILOBITS_PER_SECOND: Kilobits per second (KBits/sec).
        - UNIT_KILOBYTES_PER_SECOND: Kilobytes per second (KB/sec).
        - UNIT_MEGABITS_PER_SECOND: Megabits per second (MBits/sec).
        - UNIT_MEGABYTES_PER_SECOND: Megabytes per second (MB/sec).
        - UNIT_GIGABITS_PER_SECOND: Gigabits per second (GBits/sec).
        - UNIT_GIGABYTES_PER_SECOND: Gigabytes per second (GB/sec).
        - UNIT_TERABITS_PER_SECOND: Terabits per second (TBits/sec).
        - UNIT_TERABYTES_PER_SECOND: Terabytes per second (TB/sec).
        - UNIT_PETABITS_PER_SECOND: Petabits per second (Pbits/sec).
        - UNIT_PETABYTES_PER_SECOND: Petabytes per second (PB/sec).
        - UNIT_BITS_IEC_PER_SECOND: Data Rate (IEC). Bits (IEC) per second (bits/sec).
        - UNIT_BYTES_IEC_PER_SECOND: Bytes (IEC) per second (bytes/sec).
        - UNIT_KIBIBITS_PER_SECOND: Kibibits per second (KiBits/sec).
        - UNIT_KIBIBYTES_PER_SECOND: Kibibytes per second (KiB/sec).
        - UNIT_MEBIBITS_PER_SECOND: Mebibits per second (MiBits/sec).
        - UNIT_MEBIBYTES_PER_SECOND: Mebibytes per second (MiB/sec).
        - UNIT_GIBIBITS_PER_SECOND: Gibibits per second (GiBits/sec).
        - UNIT_GIBIBYTES_PER_SECOND: Gibibytes per second (GiB/sec).
        - UNIT_TEBIBITS_PER_SECOND: Tebibits per second (TiBits/sec).
        - UNIT_TEBIBYTES_PER_SECOND: Tebibytes per second (TiB/sec).
        - UNIT_PEBIBITS_PER_SECOND: Pebibits per second (PiBits/sec).
        - UNIT_PEBIBYTES_PER_SECOND: Pebibytes per second (PiB/sec).
        - UNIT_DATETIME_UTC: Date & time. Datetime (UTC).
        - UNIT_DATETIME_LOCAL: Datetime (local).
        - UNIT_HERTZ: Frequency. Hertz (Hz).
        - UNIT_KILOHERTZ: Kilohertz (KHz).
        - UNIT_MEGAHERTZ: Megahertz (MHz).
        - UNIT_GIGAHERTZ: Gigahertz (GHz).
        - UNIT_DOLLAR: Currency. Dollar.
        - UNIT_EURO: Euro.
        - UNIT_ROUBLE: Rouble.
        - UNIT_CELSIUS: Temperature. Celsius (°C).
        - UNIT_FAHRENHEIT: Fahrenheit (°F).
        - UNIT_KELVIN: Kelvin (K).
        - UNIT_FLOP_PER_SECOND: Computation. Flop per second (FLOP/sec).
        - UNIT_KILOFLOP_PER_SECOND: Kiloflop per second (KFLOP/sec).
        - UNIT_MEGAFLOP_PER_SECOND: Megaflop per second (MFLOP/sec).
        - UNIT_GIGAFLOP_PER_SECOND: Gigaflop per second (GFLOP/sec).
        - UNIT_PETAFLOP_PER_SECOND: Petaflop per second (PFLOP/sec).
        - UNIT_EXAFLOP_PER_SECOND: Exaflop per second (EFLOP/sec).
        - UNIT_METERS_PER_SECOND: Velocity. Meters per second (m/sec).
        - UNIT_KILOMETERS_PER_HOUR: Kilometers per hour (km/h).
        - UNIT_MILES_PER_HOUR: Miles per hour (mi/h).
        - UNIT_MILLIMETER: Length. Millimeter.
        - UNIT_CENTIMETER: Centimeter.
        - UNIT_METER: Meter.
        - UNIT_KILOMETER: Kilometer.
        - UNIT_MILE: Mile.
        - UNIT_PPM: Concentration. Parts per million (ppm).
        - UNIT_EVENTS_PER_SECOND: Events per second
        - UNIT_PACKETS: Packets
        - UNIT_DBM: dBm (dbm)
        - UNIT_VIRTUAL_CPU: Virtual CPU cores based on CPU time (vcpu)
        - UNIT_MESSAGES_PER_SECOND: Messages per second (mps)
        """
        return pulumi.get(self, "unit_format")


@pulumi.output_type
class MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "unitFormat":
            suggest = "unit_format"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        MonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRight.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max: Optional[str] = None,
                 min: Optional[str] = None,
                 precision: Optional[int] = None,
                 title: Optional[str] = None,
                 type: Optional[str] = None,
                 unit_format: Optional[str] = None):
        """
        :param str max: Max value in extended number format or empty.
        :param str min: Min value in extended number format or empty.
        :param int precision: Tick value precision (null as default, 0-7 in other cases).
        :param str title: Title or empty.
        :param str type: Type.
        :param str unit_format: Unit format.
        """
        if max is not None:
            pulumi.set(__self__, "max", max)
        if min is not None:
            pulumi.set(__self__, "min", min)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)
        if title is not None:
            pulumi.set(__self__, "title", title)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if unit_format is not None:
            pulumi.set(__self__, "unit_format", unit_format)

    @property
    @pulumi.getter
    def max(self) -> Optional[str]:
        """
        Max value in extended number format or empty.
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> Optional[str]:
        """
        Min value in extended number format or empty.
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        """
        Tick value precision (null as default, 0-7 in other cases).
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        """
        Title or empty.
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        Type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitFormat")
    def unit_format(self) -> Optional[str]:
        """
        Unit format.
        """
        return pulumi.get(self, "unit_format")


@pulumi.output_type
class MonitoringDashboardWidgetPosition(dict):
    def __init__(__self__, *,
                 h: Optional[int] = None,
                 w: Optional[int] = None,
                 x: Optional[int] = None,
                 y: Optional[int] = None):
        """
        :param int h: Height.
        :param int w: Width.
        :param int x: X-axis top-left corner coordinate.
        :param int y: Y-axis top-left corner coordinate.
        """
        if h is not None:
            pulumi.set(__self__, "h", h)
        if w is not None:
            pulumi.set(__self__, "w", w)
        if x is not None:
            pulumi.set(__self__, "x", x)
        if y is not None:
            pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def h(self) -> Optional[int]:
        """
        Height.
        """
        return pulumi.get(self, "h")

    @property
    @pulumi.getter
    def w(self) -> Optional[int]:
        """
        Width.
        """
        return pulumi.get(self, "w")

    @property
    @pulumi.getter
    def x(self) -> Optional[int]:
        """
        X-axis top-left corner coordinate.
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> Optional[int]:
        """
        Y-axis top-left corner coordinate.
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class MonitoringDashboardWidgetText(dict):
    def __init__(__self__, *,
                 text: Optional[str] = None):
        """
        :param str text: Widget text.
        """
        if text is not None:
            pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> Optional[str]:
        """
        Widget text.
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class MonitoringDashboardWidgetTitle(dict):
    def __init__(__self__, *,
                 text: str,
                 size: Optional[str] = None):
        """
        :param str text: Title text.
        :param str size: Title size. Values: 
               - TITLE_SIZE_XS: Extra small size.
               - TITLE_SIZE_S: Small size.
               - TITLE_SIZE_M: Middle size.
               - TITLE_SIZE_L: Large size.
        """
        pulumi.set(__self__, "text", text)
        if size is not None:
            pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Title text.
        """
        return pulumi.get(self, "text")

    @property
    @pulumi.getter
    def size(self) -> Optional[str]:
        """
        Title size. Values: 
        - TITLE_SIZE_XS: Extra small size.
        - TITLE_SIZE_S: Small size.
        - TITLE_SIZE_M: Middle size.
        - TITLE_SIZE_L: Large size.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class OrganizationmanagerOsLoginSettingsSshCertificateSettings(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enables or disables usage of ssh certificates signed by trusted CA.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables usage of ssh certificates signed by trusted CA.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class OrganizationmanagerOsLoginSettingsUserSshKeySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowManageOwnKeys":
            suggest = "allow_manage_own_keys"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationmanagerOsLoginSettingsUserSshKeySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationmanagerOsLoginSettingsUserSshKeySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationmanagerOsLoginSettingsUserSshKeySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allow_manage_own_keys: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        """
        :param bool allow_manage_own_keys: If set to true subject is allowed to manage own ssh keys without having to be assigned specific permissions.
        :param bool enabled: Enables or disables usage of ssh keys assigned to a specific subject.
        """
        if allow_manage_own_keys is not None:
            pulumi.set(__self__, "allow_manage_own_keys", allow_manage_own_keys)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowManageOwnKeys")
    def allow_manage_own_keys(self) -> Optional[bool]:
        """
        If set to true subject is allowed to manage own ssh keys without having to be assigned specific permissions.
        """
        return pulumi.get(self, "allow_manage_own_keys")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enables or disables usage of ssh keys assigned to a specific subject.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class OrganizationmanagerSamlFederationSecuritySettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "encryptedAssertions":
            suggest = "encrypted_assertions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in OrganizationmanagerSamlFederationSecuritySettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        OrganizationmanagerSamlFederationSecuritySettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        OrganizationmanagerSamlFederationSecuritySettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 encrypted_assertions: bool):
        """
        :param bool encrypted_assertions: Enable encrypted assertions.
        """
        pulumi.set(__self__, "encrypted_assertions", encrypted_assertions)

    @property
    @pulumi.getter(name="encryptedAssertions")
    def encrypted_assertions(self) -> bool:
        """
        Enable encrypted assertions.
        """
        return pulumi.get(self, "encrypted_assertions")


@pulumi.output_type
class ServerlessContainerConnectivity(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "networkId":
            suggest = "network_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerConnectivity. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerConnectivity.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerConnectivity.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class ServerlessContainerImage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "workDir":
            suggest = "work_dir"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerImage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerImage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerImage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 url: str,
                 args: Optional[Sequence[str]] = None,
                 commands: Optional[Sequence[str]] = None,
                 digest: Optional[str] = None,
                 environment: Optional[Mapping[str, str]] = None,
                 work_dir: Optional[str] = None):
        """
        :param str url: Invoke URL for the Yandex Cloud Serverless Container
        """
        pulumi.set(__self__, "url", url)
        if args is not None:
            pulumi.set(__self__, "args", args)
        if commands is not None:
            pulumi.set(__self__, "commands", commands)
        if digest is not None:
            pulumi.set(__self__, "digest", digest)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if work_dir is not None:
            pulumi.set(__self__, "work_dir", work_dir)

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        Invoke URL for the Yandex Cloud Serverless Container
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter
    def args(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def digest(self) -> Optional[str]:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter
    def environment(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> Optional[str]:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class ServerlessContainerLogOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "folderId":
            suggest = "folder_id"
        elif key == "logGroupId":
            suggest = "log_group_id"
        elif key == "minLevel":
            suggest = "min_level"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerLogOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerLogOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerLogOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 disabled: Optional[bool] = None,
                 folder_id: Optional[str] = None,
                 log_group_id: Optional[str] = None,
                 min_level: Optional[str] = None):
        """
        :param bool disabled: Is logging from container disabled
        :param str folder_id: Folder ID for the Yandex Cloud Serverless Container
        :param str log_group_id: Log entries are written to specified log group
        :param str min_level: Minimum log entry level
        """
        if disabled is not None:
            pulumi.set(__self__, "disabled", disabled)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if log_group_id is not None:
            pulumi.set(__self__, "log_group_id", log_group_id)
        if min_level is not None:
            pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> Optional[bool]:
        """
        Is logging from container disabled
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[str]:
        """
        Folder ID for the Yandex Cloud Serverless Container
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> Optional[str]:
        """
        Log entries are written to specified log group
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> Optional[str]:
        """
        Minimum log entry level
        """
        return pulumi.get(self, "min_level")


@pulumi.output_type
class ServerlessContainerProvisionPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "minInstances":
            suggest = "min_instances"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerProvisionPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerProvisionPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerProvisionPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 min_instances: int):
        pulumi.set(__self__, "min_instances", min_instances)

    @property
    @pulumi.getter(name="minInstances")
    def min_instances(self) -> int:
        return pulumi.get(self, "min_instances")


@pulumi.output_type
class ServerlessContainerSecret(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "environmentVariable":
            suggest = "environment_variable"
        elif key == "versionId":
            suggest = "version_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerSecret. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerSecret.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerSecret.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 environment_variable: str,
                 id: str,
                 key: str,
                 version_id: str):
        """
        :param str environment_variable: (Required) Container's environment variable in which secret's value will be stored.
        :param str id: (Required) Secret's id.
        :param str key: (Required) Secret's entries key which value will be stored in environment variable.
        :param str version_id: (Required) Secret's version id.
        """
        pulumi.set(__self__, "environment_variable", environment_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="environmentVariable")
    def environment_variable(self) -> str:
        """
        (Required) Container's environment variable in which secret's value will be stored.
        """
        return pulumi.get(self, "environment_variable")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        (Required) Secret's id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        (Required) Secret's entries key which value will be stored in environment variable.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        """
        (Required) Secret's version id.
        """
        return pulumi.get(self, "version_id")


@pulumi.output_type
class ServerlessContainerStorageMount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "mountPointPath":
            suggest = "mount_point_path"
        elif key == "readOnly":
            suggest = "read_only"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ServerlessContainerStorageMount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ServerlessContainerStorageMount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ServerlessContainerStorageMount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 bucket: str,
                 mount_point_path: str,
                 prefix: Optional[str] = None,
                 read_only: Optional[bool] = None):
        """
        :param str bucket: (Required) Name of the mounting bucket.
        :param str mount_point_path: (Required) Path inside the container to access the directory in which the bucket is mounted.
        :param str prefix: Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
        :param bool read_only: Mount the bucket in read-only mode.
        """
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "mount_point_path", mount_point_path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        """
        (Required) Name of the mounting bucket.
        """
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="mountPointPath")
    def mount_point_path(self) -> str:
        """
        (Required) Path inside the container to access the directory in which the bucket is mounted.
        """
        return pulumi.get(self, "mount_point_path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Prefix within the bucket. If you leave this field empty, the entire bucket will be mounted.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        """
        Mount the bucket in read-only mode.
        """
        return pulumi.get(self, "read_only")


@pulumi.output_type
class SmartcaptchaCaptchaOverrideVariant(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "challengeType":
            suggest = "challenge_type"
        elif key == "preCheckType":
            suggest = "pre_check_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaOverrideVariant. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaOverrideVariant.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaOverrideVariant.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 challenge_type: Optional[str] = None,
                 complexity: Optional[str] = None,
                 description: Optional[str] = None,
                 pre_check_type: Optional[str] = None,
                 uuid: Optional[str] = None):
        if challenge_type is not None:
            pulumi.set(__self__, "challenge_type", challenge_type)
        if complexity is not None:
            pulumi.set(__self__, "complexity", complexity)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if pre_check_type is not None:
            pulumi.set(__self__, "pre_check_type", pre_check_type)
        if uuid is not None:
            pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="challengeType")
    def challenge_type(self) -> Optional[str]:
        return pulumi.get(self, "challenge_type")

    @property
    @pulumi.getter
    def complexity(self) -> Optional[str]:
        return pulumi.get(self, "complexity")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="preCheckType")
    def pre_check_type(self) -> Optional[str]:
        return pulumi.get(self, "pre_check_type")

    @property
    @pulumi.getter
    def uuid(self) -> Optional[str]:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "overrideVariantUuid":
            suggest = "override_variant_uuid"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 condition: Optional['outputs.SmartcaptchaCaptchaSecurityRuleCondition'] = None,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 override_variant_uuid: Optional[str] = None,
                 priority: Optional[int] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if override_variant_uuid is not None:
            pulumi.set(__self__, "override_variant_uuid", override_variant_uuid)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def condition(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleCondition']:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideVariantUuid")
    def override_variant_uuid(self) -> Optional[str]:
        return pulumi.get(self, "override_variant_uuid")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 headers: Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionHeader']] = None,
                 host: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionHost'] = None,
                 source_ip: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIp'] = None,
                 uri: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionUri'] = None):
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if host is not None:
            pulumi.set(__self__, "host", host)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def host(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionHost']:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIp']:
        return pulumi.get(self, "source_ip")

    @property
    @pulumi.getter
    def uri(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionUri']:
        return pulumi.get(self, "uri")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionHeader(dict):
    def __init__(__self__, *,
                 value: 'outputs.SmartcaptchaCaptchaSecurityRuleConditionHeaderValue',
                 name: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SmartcaptchaCaptchaSecurityRuleConditionHeaderValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionHeaderValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionHeaderValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionHeaderValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionHeaderValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionHost(dict):
    def __init__(__self__, *,
                 hosts: Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionHostHost']] = None):
        if hosts is not None:
            pulumi.set(__self__, "hosts", hosts)

    @property
    @pulumi.getter
    def hosts(self) -> Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionHostHost']]:
        return pulumi.get(self, "hosts")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionHostHost(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionHostHost. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionHostHost.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionHostHost.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionSourceIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoIpMatch":
            suggest = "geo_ip_match"
        elif key == "geoIpNotMatch":
            suggest = "geo_ip_not_match"
        elif key == "ipRangesMatch":
            suggest = "ip_ranges_match"
        elif key == "ipRangesNotMatch":
            suggest = "ip_ranges_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionSourceIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_ip_match: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch'] = None,
                 geo_ip_not_match: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch'] = None,
                 ip_ranges_match: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch'] = None,
                 ip_ranges_not_match: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch'] = None):
        if geo_ip_match is not None:
            pulumi.set(__self__, "geo_ip_match", geo_ip_match)
        if geo_ip_not_match is not None:
            pulumi.set(__self__, "geo_ip_not_match", geo_ip_not_match)
        if ip_ranges_match is not None:
            pulumi.set(__self__, "ip_ranges_match", ip_ranges_match)
        if ip_ranges_not_match is not None:
            pulumi.set(__self__, "ip_ranges_not_match", ip_ranges_not_match)

    @property
    @pulumi.getter(name="geoIpMatch")
    def geo_ip_match(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch']:
        return pulumi.get(self, "geo_ip_match")

    @property
    @pulumi.getter(name="geoIpNotMatch")
    def geo_ip_not_match(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch']:
        return pulumi.get(self, "geo_ip_not_match")

    @property
    @pulumi.getter(name="ipRangesMatch")
    def ip_ranges_match(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch']:
        return pulumi.get(self, "ip_ranges_match")

    @property
    @pulumi.getter(name="ipRangesNotMatch")
    def ip_ranges_not_match(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch']:
        return pulumi.get(self, "ip_ranges_not_match")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionUri(dict):
    def __init__(__self__, *,
                 path: Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionUriPath'] = None,
                 queries: Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionUriQuery']] = None):
        if path is not None:
            pulumi.set(__self__, "path", path)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.SmartcaptchaCaptchaSecurityRuleConditionUriPath']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.SmartcaptchaCaptchaSecurityRuleConditionUriQuery']]:
        return pulumi.get(self, "queries")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionUriPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionUriPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionUriPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionUriPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionUriQuery(dict):
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue'):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue':
        return pulumi.get(self, "value")


@pulumi.output_type
class SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SmartcaptchaCaptchaSecurityRuleConditionUriQueryValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class StorageBucketAnonymousAccessFlags(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "configRead":
            suggest = "config_read"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketAnonymousAccessFlags. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketAnonymousAccessFlags.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketAnonymousAccessFlags.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 config_read: Optional[bool] = None,
                 list: Optional[bool] = None,
                 read: Optional[bool] = None):
        """
        :param bool list: Allows to list object in bucket anonymously.
        :param bool read: Allows to read objects in bucket anonymously.
        """
        if config_read is not None:
            pulumi.set(__self__, "config_read", config_read)
        if list is not None:
            pulumi.set(__self__, "list", list)
        if read is not None:
            pulumi.set(__self__, "read", read)

    @property
    @pulumi.getter(name="configRead")
    def config_read(self) -> Optional[bool]:
        return pulumi.get(self, "config_read")

    @property
    @pulumi.getter
    def list(self) -> Optional[bool]:
        """
        Allows to list object in bucket anonymously.
        """
        return pulumi.get(self, "list")

    @property
    @pulumi.getter
    def read(self) -> Optional[bool]:
        """
        Allows to read objects in bucket anonymously.
        """
        return pulumi.get(self, "read")


@pulumi.output_type
class StorageBucketCorsRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "allowedMethods":
            suggest = "allowed_methods"
        elif key == "allowedOrigins":
            suggest = "allowed_origins"
        elif key == "allowedHeaders":
            suggest = "allowed_headers"
        elif key == "exposeHeaders":
            suggest = "expose_headers"
        elif key == "maxAgeSeconds":
            suggest = "max_age_seconds"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketCorsRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketCorsRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketCorsRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 allowed_methods: Sequence[str],
                 allowed_origins: Sequence[str],
                 allowed_headers: Optional[Sequence[str]] = None,
                 expose_headers: Optional[Sequence[str]] = None,
                 max_age_seconds: Optional[int] = None):
        """
        :param Sequence[str] allowed_methods: Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        :param Sequence[str] allowed_origins: Specifies which origins are allowed.
        :param Sequence[str] allowed_headers: Specifies which headers are allowed.
        :param Sequence[str] expose_headers: Specifies expose header in the response.
        :param int max_age_seconds: Specifies time in seconds that browser can cache the response for a preflight request.
        """
        pulumi.set(__self__, "allowed_methods", allowed_methods)
        pulumi.set(__self__, "allowed_origins", allowed_origins)
        if allowed_headers is not None:
            pulumi.set(__self__, "allowed_headers", allowed_headers)
        if expose_headers is not None:
            pulumi.set(__self__, "expose_headers", expose_headers)
        if max_age_seconds is not None:
            pulumi.set(__self__, "max_age_seconds", max_age_seconds)

    @property
    @pulumi.getter(name="allowedMethods")
    def allowed_methods(self) -> Sequence[str]:
        """
        Specifies which methods are allowed. Can be `GET`, `PUT`, `POST`, `DELETE` or `HEAD`.
        """
        return pulumi.get(self, "allowed_methods")

    @property
    @pulumi.getter(name="allowedOrigins")
    def allowed_origins(self) -> Sequence[str]:
        """
        Specifies which origins are allowed.
        """
        return pulumi.get(self, "allowed_origins")

    @property
    @pulumi.getter(name="allowedHeaders")
    def allowed_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies which headers are allowed.
        """
        return pulumi.get(self, "allowed_headers")

    @property
    @pulumi.getter(name="exposeHeaders")
    def expose_headers(self) -> Optional[Sequence[str]]:
        """
        Specifies expose header in the response.
        """
        return pulumi.get(self, "expose_headers")

    @property
    @pulumi.getter(name="maxAgeSeconds")
    def max_age_seconds(self) -> Optional[int]:
        """
        Specifies time in seconds that browser can cache the response for a preflight request.
        """
        return pulumi.get(self, "max_age_seconds")


@pulumi.output_type
class StorageBucketGrant(dict):
    def __init__(__self__, *,
                 permissions: Sequence[str],
                 type: str,
                 id: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        :param Sequence[str] permissions: List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `FULL_CONTROL`.
        :param str type: Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`.
        :param str id: Canonical user id to grant for. Used only when type is `CanonicalUser`.
        :param str uri: Uri address to grant for. Used only when type is Group.
               
               > **Note:** To manage `grant` argument, service account with `storage.admin` role should be used.
        """
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "type", type)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence[str]:
        """
        List of permissions to apply for grantee. Valid values are `READ`, `WRITE`, `FULL_CONTROL`.
        """
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of grantee to apply for. Valid values are `CanonicalUser` and `Group`.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Canonical user id to grant for. Used only when type is `CanonicalUser`.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        Uri address to grant for. Used only when type is Group.

        > **Note:** To manage `grant` argument, service account with `storage.admin` role should be used.
        """
        return pulumi.get(self, "uri")


@pulumi.output_type
class StorageBucketHttps(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "certificateId":
            suggest = "certificate_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketHttps. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketHttps.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketHttps.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 certificate_id: str):
        """
        :param str certificate_id: — Id of the certificate in Certificate Manager, that will be used for bucket.
               
               The `tags` object for setting tags (or labels) for bucket. See [tags](https://cloud.yandex.ru/docs/storage/concepts/tags) for more information.
        """
        pulumi.set(__self__, "certificate_id", certificate_id)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        """
        — Id of the certificate in Certificate Manager, that will be used for bucket.

        The `tags` object for setting tags (or labels) for bucket. See [tags](https://cloud.yandex.ru/docs/storage/concepts/tags) for more information.
        """
        return pulumi.get(self, "certificate_id")


@pulumi.output_type
class StorageBucketLifecycleRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "abortIncompleteMultipartUploadDays":
            suggest = "abort_incomplete_multipart_upload_days"
        elif key == "noncurrentVersionExpiration":
            suggest = "noncurrent_version_expiration"
        elif key == "noncurrentVersionTransitions":
            suggest = "noncurrent_version_transitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enabled: bool,
                 abort_incomplete_multipart_upload_days: Optional[int] = None,
                 expiration: Optional['outputs.StorageBucketLifecycleRuleExpiration'] = None,
                 filter: Optional['outputs.StorageBucketLifecycleRuleFilter'] = None,
                 id: Optional[str] = None,
                 noncurrent_version_expiration: Optional['outputs.StorageBucketLifecycleRuleNoncurrentVersionExpiration'] = None,
                 noncurrent_version_transitions: Optional[Sequence['outputs.StorageBucketLifecycleRuleNoncurrentVersionTransition']] = None,
                 prefix: Optional[str] = None,
                 transitions: Optional[Sequence['outputs.StorageBucketLifecycleRuleTransition']] = None):
        """
        :param bool enabled: Specifies lifecycle rule status.
        :param int abort_incomplete_multipart_upload_days: Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
        :param 'StorageBucketLifecycleRuleExpirationArgs' expiration: Specifies a period in the object's expire (documented below).
        :param 'StorageBucketLifecycleRuleFilterArgs' filter: Filter block identifies one or more objects to which the rule applies. A Filter must have exactly one of Prefix, Tag, or And specified. The filter supports the following options:
               
               - object_size_greater_than - (Optional) Minimum object size to which the rule applies.
               - object_size_less_than - (Optional) Maximum object size to which the rule applies.
               - prefix - (Optional) Object key prefix identifying one or more objects to which the rule applies.
               - tag - (Optional) A key and value pair for filtering objects. E.g.: key=key1, value=value1.
               - and - (Optional) A logical `and` operator applied to one or more filter parameters. It should be used when two or more of the above parameters are used. It supports the following parameters:
               
               - object_size_greater_than - (Optional) Minimum object size to which the rule applies.
               - object_size_less_than - (Optional) Maximum object size to which the rule applies.
               - prefix - (Optional) Object key prefix identifying one or more objects to which the rule applies.
               - tags - (Optional) Key-value pairs for filtering objects. All of these tags must exist in the object's tags to apply the rule. E.g.: key1=value1, key2=value2
        :param str id: Unique identifier for the rule. Must be less than or equal to 255 characters in length.
        :param 'StorageBucketLifecycleRuleNoncurrentVersionExpirationArgs' noncurrent_version_expiration: Specifies when noncurrent object versions expire (documented below).
        :param Sequence['StorageBucketLifecycleRuleNoncurrentVersionTransitionArgs'] noncurrent_version_transitions: Specifies when noncurrent object versions transitions (documented below).
               
               At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
        :param str prefix: Object key prefix identifying one or more objects to which the rule applies.
        :param Sequence['StorageBucketLifecycleRuleTransitionArgs'] transitions: Specifies a period in the object's transitions (documented below).
        """
        pulumi.set(__self__, "enabled", enabled)
        if abort_incomplete_multipart_upload_days is not None:
            pulumi.set(__self__, "abort_incomplete_multipart_upload_days", abort_incomplete_multipart_upload_days)
        if expiration is not None:
            pulumi.set(__self__, "expiration", expiration)
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if noncurrent_version_expiration is not None:
            pulumi.set(__self__, "noncurrent_version_expiration", noncurrent_version_expiration)
        if noncurrent_version_transitions is not None:
            pulumi.set(__self__, "noncurrent_version_transitions", noncurrent_version_transitions)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if transitions is not None:
            pulumi.set(__self__, "transitions", transitions)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        """
        Specifies lifecycle rule status.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="abortIncompleteMultipartUploadDays")
    def abort_incomplete_multipart_upload_days(self) -> Optional[int]:
        """
        Specifies the number of days after initiating a multipart upload when the multipart upload must be completed.
        """
        return pulumi.get(self, "abort_incomplete_multipart_upload_days")

    @property
    @pulumi.getter
    def expiration(self) -> Optional['outputs.StorageBucketLifecycleRuleExpiration']:
        """
        Specifies a period in the object's expire (documented below).
        """
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter
    def filter(self) -> Optional['outputs.StorageBucketLifecycleRuleFilter']:
        """
        Filter block identifies one or more objects to which the rule applies. A Filter must have exactly one of Prefix, Tag, or And specified. The filter supports the following options:

        - object_size_greater_than - (Optional) Minimum object size to which the rule applies.
        - object_size_less_than - (Optional) Maximum object size to which the rule applies.
        - prefix - (Optional) Object key prefix identifying one or more objects to which the rule applies.
        - tag - (Optional) A key and value pair for filtering objects. E.g.: key=key1, value=value1.
        - and - (Optional) A logical `and` operator applied to one or more filter parameters. It should be used when two or more of the above parameters are used. It supports the following parameters:

        - object_size_greater_than - (Optional) Minimum object size to which the rule applies.
        - object_size_less_than - (Optional) Maximum object size to which the rule applies.
        - prefix - (Optional) Object key prefix identifying one or more objects to which the rule applies.
        - tags - (Optional) Key-value pairs for filtering objects. All of these tags must exist in the object's tags to apply the rule. E.g.: key1=value1, key2=value2
        """
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Unique identifier for the rule. Must be less than or equal to 255 characters in length.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="noncurrentVersionExpiration")
    def noncurrent_version_expiration(self) -> Optional['outputs.StorageBucketLifecycleRuleNoncurrentVersionExpiration']:
        """
        Specifies when noncurrent object versions expire (documented below).
        """
        return pulumi.get(self, "noncurrent_version_expiration")

    @property
    @pulumi.getter(name="noncurrentVersionTransitions")
    def noncurrent_version_transitions(self) -> Optional[Sequence['outputs.StorageBucketLifecycleRuleNoncurrentVersionTransition']]:
        """
        Specifies when noncurrent object versions transitions (documented below).

        At least one of `abort_incomplete_multipart_upload_days`, `expiration`, `transition`, `noncurrent_version_expiration`, `noncurrent_version_transition` must be specified.
        """
        return pulumi.get(self, "noncurrent_version_transitions")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        warnings.warn("""Use filter instead""", DeprecationWarning)
        pulumi.log.warn("""prefix is deprecated: Use filter instead""")

        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def transitions(self) -> Optional[Sequence['outputs.StorageBucketLifecycleRuleTransition']]:
        """
        Specifies a period in the object's transitions (documented below).
        """
        return pulumi.get(self, "transitions")


@pulumi.output_type
class StorageBucketLifecycleRuleExpiration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expiredObjectDeleteMarker":
            suggest = "expired_object_delete_marker"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRuleExpiration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRuleExpiration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 date: Optional[str] = None,
                 days: Optional[int] = None,
                 expired_object_delete_marker: Optional[bool] = None):
        """
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param bool expired_object_delete_marker: On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Object Storage to delete expired object delete markers.
        """
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if expired_object_delete_marker is not None:
            pulumi.set(__self__, "expired_object_delete_marker", expired_object_delete_marker)

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter(name="expiredObjectDeleteMarker")
    def expired_object_delete_marker(self) -> Optional[bool]:
        """
        On a versioned bucket (versioning-enabled or versioning-suspended bucket), you can add this element in the lifecycle configuration to direct Object Storage to delete expired object delete markers.
        """
        return pulumi.get(self, "expired_object_delete_marker")


@pulumi.output_type
class StorageBucketLifecycleRuleFilter(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "and":
            suggest = "and_"
        elif key == "objectSizeGreaterThan":
            suggest = "object_size_greater_than"
        elif key == "objectSizeLessThan":
            suggest = "object_size_less_than"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRuleFilter. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRuleFilter.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRuleFilter.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 and_: Optional['outputs.StorageBucketLifecycleRuleFilterAnd'] = None,
                 object_size_greater_than: Optional[int] = None,
                 object_size_less_than: Optional[int] = None,
                 prefix: Optional[str] = None,
                 tag: Optional['outputs.StorageBucketLifecycleRuleFilterTag'] = None):
        """
        :param str prefix: Object key prefix identifying one or more objects to which the rule applies.
        """
        if and_ is not None:
            pulumi.set(__self__, "and_", and_)
        if object_size_greater_than is not None:
            pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        if object_size_less_than is not None:
            pulumi.set(__self__, "object_size_less_than", object_size_less_than)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="and")
    def and_(self) -> Optional['outputs.StorageBucketLifecycleRuleFilterAnd']:
        return pulumi.get(self, "and_")

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> Optional[int]:
        return pulumi.get(self, "object_size_greater_than")

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> Optional[int]:
        return pulumi.get(self, "object_size_less_than")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tag(self) -> Optional['outputs.StorageBucketLifecycleRuleFilterTag']:
        return pulumi.get(self, "tag")


@pulumi.output_type
class StorageBucketLifecycleRuleFilterAnd(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectSizeGreaterThan":
            suggest = "object_size_greater_than"
        elif key == "objectSizeLessThan":
            suggest = "object_size_less_than"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRuleFilterAnd. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRuleFilterAnd.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRuleFilterAnd.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_size_greater_than: Optional[int] = None,
                 object_size_less_than: Optional[int] = None,
                 prefix: Optional[str] = None,
                 tags: Optional[Mapping[str, str]] = None):
        """
        :param str prefix: Object key prefix identifying one or more objects to which the rule applies.
        """
        if object_size_greater_than is not None:
            pulumi.set(__self__, "object_size_greater_than", object_size_greater_than)
        if object_size_less_than is not None:
            pulumi.set(__self__, "object_size_less_than", object_size_less_than)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter(name="objectSizeGreaterThan")
    def object_size_greater_than(self) -> Optional[int]:
        return pulumi.get(self, "object_size_greater_than")

    @property
    @pulumi.getter(name="objectSizeLessThan")
    def object_size_less_than(self) -> Optional[int]:
        return pulumi.get(self, "object_size_less_than")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        """
        Object key prefix identifying one or more objects to which the rule applies.
        """
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class StorageBucketLifecycleRuleFilterTag(dict):
    def __init__(__self__, *,
                 key: str,
                 value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class StorageBucketLifecycleRuleNoncurrentVersionExpiration(dict):
    def __init__(__self__, *,
                 days: Optional[int] = None):
        """
        :param int days: Specifies the number of days noncurrent object versions expire.
        """
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days noncurrent object versions expire.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class StorageBucketLifecycleRuleNoncurrentVersionTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRuleNoncurrentVersionTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRuleNoncurrentVersionTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRuleNoncurrentVersionTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the noncurrent object versions to transition. Supported values: [`STANDARD_IA`, `COLD`, `ICE`].
        :param int days: Specifies the number of days noncurrent object versions transition.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the noncurrent object versions to transition. Supported values: [`STANDARD_IA`, `COLD`, `ICE`].
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days noncurrent object versions transition.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class StorageBucketLifecycleRuleTransition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "storageClass":
            suggest = "storage_class"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLifecycleRuleTransition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLifecycleRuleTransition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLifecycleRuleTransition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 storage_class: str,
                 date: Optional[str] = None,
                 days: Optional[int] = None):
        """
        :param str storage_class: Specifies the storage class to which you want the object to transition. Supported values: [`STANDARD_IA`, `COLD`, `ICE`].
        :param str date: Specifies the date after which you want the corresponding action to take effect.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        """
        pulumi.set(__self__, "storage_class", storage_class)
        if date is not None:
            pulumi.set(__self__, "date", date)
        if days is not None:
            pulumi.set(__self__, "days", days)

    @property
    @pulumi.getter(name="storageClass")
    def storage_class(self) -> str:
        """
        Specifies the storage class to which you want the object to transition. Supported values: [`STANDARD_IA`, `COLD`, `ICE`].
        """
        return pulumi.get(self, "storage_class")

    @property
    @pulumi.getter
    def date(self) -> Optional[str]:
        """
        Specifies the date after which you want the corresponding action to take effect.
        """
        return pulumi.get(self, "date")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")


@pulumi.output_type
class StorageBucketLogging(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "targetBucket":
            suggest = "target_bucket"
        elif key == "targetPrefix":
            suggest = "target_prefix"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketLogging. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketLogging.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketLogging.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 target_bucket: str,
                 target_prefix: Optional[str] = None):
        """
        :param str target_bucket: The name of the bucket that will receive the log objects.
        :param str target_prefix: To specify a key prefix for log objects.
        """
        pulumi.set(__self__, "target_bucket", target_bucket)
        if target_prefix is not None:
            pulumi.set(__self__, "target_prefix", target_prefix)

    @property
    @pulumi.getter(name="targetBucket")
    def target_bucket(self) -> str:
        """
        The name of the bucket that will receive the log objects.
        """
        return pulumi.get(self, "target_bucket")

    @property
    @pulumi.getter(name="targetPrefix")
    def target_prefix(self) -> Optional[str]:
        """
        To specify a key prefix for log objects.
        """
        return pulumi.get(self, "target_prefix")


@pulumi.output_type
class StorageBucketObjectLockConfiguration(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "objectLockEnabled":
            suggest = "object_lock_enabled"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketObjectLockConfiguration. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketObjectLockConfiguration.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketObjectLockConfiguration.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 object_lock_enabled: Optional[str] = None,
                 rule: Optional['outputs.StorageBucketObjectLockConfigurationRule'] = None):
        """
        :param str object_lock_enabled: Enable object locking in a bucket. Require versioning to be enabled.
        :param 'StorageBucketObjectLockConfigurationRuleArgs' rule: Specifies a default locking configuration for added objects. Require object_lock_enabled to be enabled.
        """
        if object_lock_enabled is not None:
            pulumi.set(__self__, "object_lock_enabled", object_lock_enabled)
        if rule is not None:
            pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter(name="objectLockEnabled")
    def object_lock_enabled(self) -> Optional[str]:
        """
        Enable object locking in a bucket. Require versioning to be enabled.
        """
        return pulumi.get(self, "object_lock_enabled")

    @property
    @pulumi.getter
    def rule(self) -> Optional['outputs.StorageBucketObjectLockConfigurationRule']:
        """
        Specifies a default locking configuration for added objects. Require object_lock_enabled to be enabled.
        """
        return pulumi.get(self, "rule")


@pulumi.output_type
class StorageBucketObjectLockConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "defaultRetention":
            suggest = "default_retention"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketObjectLockConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketObjectLockConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketObjectLockConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 default_retention: 'outputs.StorageBucketObjectLockConfigurationRuleDefaultRetention'):
        pulumi.set(__self__, "default_retention", default_retention)

    @property
    @pulumi.getter(name="defaultRetention")
    def default_retention(self) -> 'outputs.StorageBucketObjectLockConfigurationRuleDefaultRetention':
        return pulumi.get(self, "default_retention")


@pulumi.output_type
class StorageBucketObjectLockConfigurationRuleDefaultRetention(dict):
    def __init__(__self__, *,
                 mode: str,
                 days: Optional[int] = None,
                 years: Optional[int] = None):
        """
        :param str mode: Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`.
        :param int days: Specifies the number of days after object creation when the specific rule action takes effect.
        :param int years: Specifies a retention period in years after uploading an object version. It must be a positive integer. You can't set it simultaneously with `days`.
        """
        pulumi.set(__self__, "mode", mode)
        if days is not None:
            pulumi.set(__self__, "days", days)
        if years is not None:
            pulumi.set(__self__, "years", years)

    @property
    @pulumi.getter
    def mode(self) -> str:
        """
        Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`.
        """
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def days(self) -> Optional[int]:
        """
        Specifies the number of days after object creation when the specific rule action takes effect.
        """
        return pulumi.get(self, "days")

    @property
    @pulumi.getter
    def years(self) -> Optional[int]:
        """
        Specifies a retention period in years after uploading an object version. It must be a positive integer. You can't set it simultaneously with `days`.
        """
        return pulumi.get(self, "years")


@pulumi.output_type
class StorageBucketServerSideEncryptionConfiguration(dict):
    def __init__(__self__, *,
                 rule: 'outputs.StorageBucketServerSideEncryptionConfigurationRule'):
        """
        :param 'StorageBucketServerSideEncryptionConfigurationRuleArgs' rule: A single object for server-side encryption by default configuration. (documented below)
        """
        pulumi.set(__self__, "rule", rule)

    @property
    @pulumi.getter
    def rule(self) -> 'outputs.StorageBucketServerSideEncryptionConfigurationRule':
        """
        A single object for server-side encryption by default configuration. (documented below)
        """
        return pulumi.get(self, "rule")


@pulumi.output_type
class StorageBucketServerSideEncryptionConfigurationRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "applyServerSideEncryptionByDefault":
            suggest = "apply_server_side_encryption_by_default"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketServerSideEncryptionConfigurationRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketServerSideEncryptionConfigurationRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketServerSideEncryptionConfigurationRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 apply_server_side_encryption_by_default: 'outputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault'):
        """
        :param 'StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefaultArgs' apply_server_side_encryption_by_default: A single object for setting server-side encryption by default. (documented below)
        """
        pulumi.set(__self__, "apply_server_side_encryption_by_default", apply_server_side_encryption_by_default)

    @property
    @pulumi.getter(name="applyServerSideEncryptionByDefault")
    def apply_server_side_encryption_by_default(self) -> 'outputs.StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault':
        """
        A single object for setting server-side encryption by default. (documented below)
        """
        return pulumi.get(self, "apply_server_side_encryption_by_default")


@pulumi.output_type
class StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "kmsMasterKeyId":
            suggest = "kms_master_key_id"
        elif key == "sseAlgorithm":
            suggest = "sse_algorithm"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketServerSideEncryptionConfigurationRuleApplyServerSideEncryptionByDefault.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 kms_master_key_id: str,
                 sse_algorithm: str):
        """
        :param str kms_master_key_id: The KMS master key ID used for the SSE-KMS encryption.
               
               The `policy` object should contain the only field with the text of the policy. See [policy documentation](https://cloud.yandex.com/docs/storage/concepts/policy) for more information on policy format.
               
               Extended parameters of the bucket:
               
               > **NOTE:** for this parameters, authorization by `IAM-token` will be used.
        :param str sse_algorithm: The server-side encryption algorithm to use. Single valid value is `aws:kms`
        """
        pulumi.set(__self__, "kms_master_key_id", kms_master_key_id)
        pulumi.set(__self__, "sse_algorithm", sse_algorithm)

    @property
    @pulumi.getter(name="kmsMasterKeyId")
    def kms_master_key_id(self) -> str:
        """
        The KMS master key ID used for the SSE-KMS encryption.

        The `policy` object should contain the only field with the text of the policy. See [policy documentation](https://cloud.yandex.com/docs/storage/concepts/policy) for more information on policy format.

        Extended parameters of the bucket:

        > **NOTE:** for this parameters, authorization by `IAM-token` will be used.
        """
        return pulumi.get(self, "kms_master_key_id")

    @property
    @pulumi.getter(name="sseAlgorithm")
    def sse_algorithm(self) -> str:
        """
        The server-side encryption algorithm to use. Single valid value is `aws:kms`
        """
        return pulumi.get(self, "sse_algorithm")


@pulumi.output_type
class StorageBucketVersioning(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        """
        :param bool enabled: Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
        """
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        """
        Enable versioning. Once you version-enable a bucket, it can never return to an unversioned state. You can, however, suspend versioning on that bucket.
        """
        return pulumi.get(self, "enabled")


@pulumi.output_type
class StorageBucketWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "errorDocument":
            suggest = "error_document"
        elif key == "indexDocument":
            suggest = "index_document"
        elif key == "redirectAllRequestsTo":
            suggest = "redirect_all_requests_to"
        elif key == "routingRules":
            suggest = "routing_rules"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in StorageBucketWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        StorageBucketWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        StorageBucketWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 error_document: Optional[str] = None,
                 index_document: Optional[str] = None,
                 redirect_all_requests_to: Optional[str] = None,
                 routing_rules: Optional[str] = None):
        """
        :param str error_document: An absolute path to the document to return in case of a 4XX error.
        :param str index_document: Storage returns this index document when requests are made to the root domain or any of the subfolders.
        :param str redirect_all_requests_to: A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
        :param str routing_rules: A json array containing [routing rules](https://cloud.yandex.com/docs/storage/s3/api-ref/hosting/upload#request-scheme) describing redirect behavior and when redirects are applied.
               
               The `CORS` object supports the following:
        """
        if error_document is not None:
            pulumi.set(__self__, "error_document", error_document)
        if index_document is not None:
            pulumi.set(__self__, "index_document", index_document)
        if redirect_all_requests_to is not None:
            pulumi.set(__self__, "redirect_all_requests_to", redirect_all_requests_to)
        if routing_rules is not None:
            pulumi.set(__self__, "routing_rules", routing_rules)

    @property
    @pulumi.getter(name="errorDocument")
    def error_document(self) -> Optional[str]:
        """
        An absolute path to the document to return in case of a 4XX error.
        """
        return pulumi.get(self, "error_document")

    @property
    @pulumi.getter(name="indexDocument")
    def index_document(self) -> Optional[str]:
        """
        Storage returns this index document when requests are made to the root domain or any of the subfolders.
        """
        return pulumi.get(self, "index_document")

    @property
    @pulumi.getter(name="redirectAllRequestsTo")
    def redirect_all_requests_to(self) -> Optional[str]:
        """
        A hostname to redirect all website requests for this bucket to. Hostname can optionally be prefixed with a protocol (`http://` or `https://`) to use when redirecting requests. The default is the protocol that is used in the original request.
        """
        return pulumi.get(self, "redirect_all_requests_to")

    @property
    @pulumi.getter(name="routingRules")
    def routing_rules(self) -> Optional[str]:
        """
        A json array containing [routing rules](https://cloud.yandex.com/docs/storage/s3/api-ref/hosting/upload#request-scheme) describing redirect behavior and when redirects are applied.

        The `CORS` object supports the following:
        """
        return pulumi.get(self, "routing_rules")


@pulumi.output_type
class SwsSecurityProfileSecurityRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dryRun":
            suggest = "dry_run"
        elif key == "ruleCondition":
            suggest = "rule_condition"
        elif key == "smartProtection":
            suggest = "smart_protection"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 description: Optional[str] = None,
                 dry_run: Optional[bool] = None,
                 name: Optional[str] = None,
                 priority: Optional[int] = None,
                 rule_condition: Optional['outputs.SwsSecurityProfileSecurityRuleRuleCondition'] = None,
                 smart_protection: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtection'] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if dry_run is not None:
            pulumi.set(__self__, "dry_run", dry_run)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if rule_condition is not None:
            pulumi.set(__self__, "rule_condition", rule_condition)
        if smart_protection is not None:
            pulumi.set(__self__, "smart_protection", smart_protection)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> Optional[bool]:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="ruleCondition")
    def rule_condition(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleCondition']:
        return pulumi.get(self, "rule_condition")

    @property
    @pulumi.getter(name="smartProtection")
    def smart_protection(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtection']:
        return pulumi.get(self, "smart_protection")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleCondition(dict):
    def __init__(__self__, *,
                 action: Optional[str] = None,
                 condition: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionCondition'] = None):
        if action is not None:
            pulumi.set(__self__, "action", action)
        if condition is not None:
            pulumi.set(__self__, "condition", condition)

    @property
    @pulumi.getter
    def action(self) -> Optional[str]:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def condition(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionCondition']:
        return pulumi.get(self, "condition")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMethod":
            suggest = "http_method"
        elif key == "requestUri":
            suggest = "request_uri"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authority: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority'] = None,
                 headers: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeader']] = None,
                 http_method: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod'] = None,
                 request_uri: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri'] = None,
                 source_ip: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp'] = None):
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if request_uri is not None:
            pulumi.set(__self__, "request_uri", request_uri)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter
    def authority(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority']:
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod']:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="requestUri")
    def request_uri(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri']:
        return pulumi.get(self, "request_uri")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp']:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionAuthority(dict):
    def __init__(__self__, *,
                 authorities: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority']] = None):
        if authorities is not None:
            pulumi.set(__self__, "authorities", authorities)

    @property
    @pulumi.getter
    def authorities(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority']]:
        return pulumi.get(self, "authorities")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthority.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionHeader(dict):
    def __init__(__self__, *,
                 value: 'outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue',
                 name: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMethods":
            suggest = "http_methods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_methods: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod']] = None):
        if http_methods is not None:
            pulumi.set(__self__, "http_methods", http_methods)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod']]:
        return pulumi.get(self, "http_methods")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUri(dict):
    def __init__(__self__, *,
                 path: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath'] = None,
                 queries: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery']] = None):
        if path is not None:
            pulumi.set(__self__, "path", path)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery']]:
        return pulumi.get(self, "queries")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQuery(dict):
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue'):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue':
        return pulumi.get(self, "value")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoIpMatch":
            suggest = "geo_ip_match"
        elif key == "geoIpNotMatch":
            suggest = "geo_ip_not_match"
        elif key == "ipRangesMatch":
            suggest = "ip_ranges_match"
        elif key == "ipRangesNotMatch":
            suggest = "ip_ranges_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_ip_match: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch'] = None,
                 geo_ip_not_match: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch'] = None,
                 ip_ranges_match: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch'] = None,
                 ip_ranges_not_match: Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch'] = None):
        if geo_ip_match is not None:
            pulumi.set(__self__, "geo_ip_match", geo_ip_match)
        if geo_ip_not_match is not None:
            pulumi.set(__self__, "geo_ip_not_match", geo_ip_not_match)
        if ip_ranges_match is not None:
            pulumi.set(__self__, "ip_ranges_match", ip_ranges_match)
        if ip_ranges_not_match is not None:
            pulumi.set(__self__, "ip_ranges_not_match", ip_ranges_not_match)

    @property
    @pulumi.getter(name="geoIpMatch")
    def geo_ip_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch']:
        return pulumi.get(self, "geo_ip_match")

    @property
    @pulumi.getter(name="geoIpNotMatch")
    def geo_ip_not_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch']:
        return pulumi.get(self, "geo_ip_not_match")

    @property
    @pulumi.getter(name="ipRangesMatch")
    def ip_ranges_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch']:
        return pulumi.get(self, "ip_ranges_match")

    @property
    @pulumi.getter(name="ipRangesNotMatch")
    def ip_ranges_not_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch']:
        return pulumi.get(self, "ip_ranges_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtection(dict):
    def __init__(__self__, *,
                 condition: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionCondition'] = None,
                 mode: Optional[str] = None):
        if condition is not None:
            pulumi.set(__self__, "condition", condition)
        if mode is not None:
            pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def condition(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionCondition']:
        return pulumi.get(self, "condition")

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionCondition(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMethod":
            suggest = "http_method"
        elif key == "requestUri":
            suggest = "request_uri"
        elif key == "sourceIp":
            suggest = "source_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionCondition. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionCondition.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionCondition.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 authority: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority'] = None,
                 headers: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader']] = None,
                 http_method: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod'] = None,
                 request_uri: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri'] = None,
                 source_ip: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp'] = None):
        if authority is not None:
            pulumi.set(__self__, "authority", authority)
        if headers is not None:
            pulumi.set(__self__, "headers", headers)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if request_uri is not None:
            pulumi.set(__self__, "request_uri", request_uri)
        if source_ip is not None:
            pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter
    def authority(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority']:
        return pulumi.get(self, "authority")

    @property
    @pulumi.getter
    def headers(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader']]:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod']:
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="requestUri")
    def request_uri(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri']:
        return pulumi.get(self, "request_uri")

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp']:
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthority(dict):
    def __init__(__self__, *,
                 authorities: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority']] = None):
        if authorities is not None:
            pulumi.set(__self__, "authorities", authorities)

    @property
    @pulumi.getter
    def authorities(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority']]:
        return pulumi.get(self, "authorities")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthority.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionHeader(dict):
    def __init__(__self__, *,
                 value: 'outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue',
                 name: Optional[str] = None):
        pulumi.set(__self__, "value", value)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue':
        return pulumi.get(self, "value")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "httpMethods":
            suggest = "http_methods"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 http_methods: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod']] = None):
        if http_methods is not None:
            pulumi.set(__self__, "http_methods", http_methods)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod']]:
        return pulumi.get(self, "http_methods")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethod.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUri(dict):
    def __init__(__self__, *,
                 path: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath'] = None,
                 queries: Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery']] = None):
        if path is not None:
            pulumi.set(__self__, "path", path)
        if queries is not None:
            pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def path(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath']:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def queries(self) -> Optional[Sequence['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery']]:
        return pulumi.get(self, "queries")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPath.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQuery(dict):
    def __init__(__self__, *,
                 key: str,
                 value: 'outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue'):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def value(self) -> 'outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue':
        return pulumi.get(self, "value")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "exactMatch":
            suggest = "exact_match"
        elif key == "exactNotMatch":
            suggest = "exact_not_match"
        elif key == "pireRegexMatch":
            suggest = "pire_regex_match"
        elif key == "pireRegexNotMatch":
            suggest = "pire_regex_not_match"
        elif key == "prefixMatch":
            suggest = "prefix_match"
        elif key == "prefixNotMatch":
            suggest = "prefix_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValue.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 exact_match: Optional[str] = None,
                 exact_not_match: Optional[str] = None,
                 pire_regex_match: Optional[str] = None,
                 pire_regex_not_match: Optional[str] = None,
                 prefix_match: Optional[str] = None,
                 prefix_not_match: Optional[str] = None):
        if exact_match is not None:
            pulumi.set(__self__, "exact_match", exact_match)
        if exact_not_match is not None:
            pulumi.set(__self__, "exact_not_match", exact_not_match)
        if pire_regex_match is not None:
            pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        if pire_regex_not_match is not None:
            pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        if prefix_match is not None:
            pulumi.set(__self__, "prefix_match", prefix_match)
        if prefix_not_match is not None:
            pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> Optional[str]:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> Optional[str]:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> Optional[str]:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "geoIpMatch":
            suggest = "geo_ip_match"
        elif key == "geoIpNotMatch":
            suggest = "geo_ip_not_match"
        elif key == "ipRangesMatch":
            suggest = "ip_ranges_match"
        elif key == "ipRangesNotMatch":
            suggest = "ip_ranges_not_match"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIp.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 geo_ip_match: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch'] = None,
                 geo_ip_not_match: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch'] = None,
                 ip_ranges_match: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch'] = None,
                 ip_ranges_not_match: Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch'] = None):
        if geo_ip_match is not None:
            pulumi.set(__self__, "geo_ip_match", geo_ip_match)
        if geo_ip_not_match is not None:
            pulumi.set(__self__, "geo_ip_not_match", geo_ip_not_match)
        if ip_ranges_match is not None:
            pulumi.set(__self__, "ip_ranges_match", ip_ranges_match)
        if ip_ranges_not_match is not None:
            pulumi.set(__self__, "ip_ranges_not_match", ip_ranges_not_match)

    @property
    @pulumi.getter(name="geoIpMatch")
    def geo_ip_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch']:
        return pulumi.get(self, "geo_ip_match")

    @property
    @pulumi.getter(name="geoIpNotMatch")
    def geo_ip_not_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch']:
        return pulumi.get(self, "geo_ip_not_match")

    @property
    @pulumi.getter(name="ipRangesMatch")
    def ip_ranges_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch']:
        return pulumi.get(self, "ip_ranges_match")

    @property
    @pulumi.getter(name="ipRangesNotMatch")
    def ip_ranges_not_match(self) -> Optional['outputs.SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch']:
        return pulumi.get(self, "ip_ranges_not_match")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatch(dict):
    def __init__(__self__, *,
                 locations: Optional[Sequence[str]] = None):
        if locations is not None:
            pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ipRanges":
            suggest = "ip_ranges"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatch.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 ip_ranges: Optional[Sequence[str]] = None):
        if ip_ranges is not None:
            pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class VpcAddressDnsRecord(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "dnsZoneId":
            suggest = "dns_zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcAddressDnsRecord. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcAddressDnsRecord.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcAddressDnsRecord.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: Optional[bool] = None,
                 ttl: Optional[int] = None):
        """
        :param str dns_zone_id: DNS zone id to create record at.
        :param str fqdn: FQDN for record to address
        :param bool ptr: If PTR record is needed
        :param int ttl: TTL of DNS record
        """
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        if ptr is not None:
            pulumi.set(__self__, "ptr", ptr)
        if ttl is not None:
            pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        """
        DNS zone id to create record at.
        """
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        """
        FQDN for record to address
        """
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> Optional[bool]:
        """
        If PTR record is needed
        """
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> Optional[int]:
        """
        TTL of DNS record
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class VpcAddressExternalIpv4Address(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "ddosProtectionProvider":
            suggest = "ddos_protection_provider"
        elif key == "outgoingSmtpCapability":
            suggest = "outgoing_smtp_capability"
        elif key == "zoneId":
            suggest = "zone_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcAddressExternalIpv4Address. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcAddressExternalIpv4Address.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcAddressExternalIpv4Address.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 address: Optional[str] = None,
                 ddos_protection_provider: Optional[str] = None,
                 outgoing_smtp_capability: Optional[str] = None,
                 zone_id: Optional[str] = None):
        """
        :param str address: Allocated IP address.
        :param str ddos_protection_provider: Enable DDOS protection. Possible values are: "qrator"
        :param str outgoing_smtp_capability: Wanted outgoing smtp capability.
               
               > **NOTE:** Either one `address` or `zone_id` arguments can be specified.
               > **NOTE:** Either one `ddos_protection_provider` or `outgoing_smtp_capability` arguments can be specified.
               > **NOTE:** Change any argument in `external_ipv4_address` will cause an address recreate
        :param str zone_id: Zone for allocating address.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if ddos_protection_provider is not None:
            pulumi.set(__self__, "ddos_protection_provider", ddos_protection_provider)
        if outgoing_smtp_capability is not None:
            pulumi.set(__self__, "outgoing_smtp_capability", outgoing_smtp_capability)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        """
        Allocated IP address.
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ddosProtectionProvider")
    def ddos_protection_provider(self) -> Optional[str]:
        """
        Enable DDOS protection. Possible values are: "qrator"
        """
        return pulumi.get(self, "ddos_protection_provider")

    @property
    @pulumi.getter(name="outgoingSmtpCapability")
    def outgoing_smtp_capability(self) -> Optional[str]:
        """
        Wanted outgoing smtp capability.

        > **NOTE:** Either one `address` or `zone_id` arguments can be specified.
        > **NOTE:** Either one `ddos_protection_provider` or `outgoing_smtp_capability` arguments can be specified.
        > **NOTE:** Change any argument in `external_ipv4_address` will cause an address recreate
        """
        return pulumi.get(self, "outgoing_smtp_capability")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        """
        Zone for allocating address.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class VpcDefaultSecurityGroupEgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "predefinedTarget":
            suggest = "predefined_target"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "toPort":
            suggest = "to_port"
        elif key == "v4CidrBlocks":
            suggest = "v4_cidr_blocks"
        elif key == "v6CidrBlocks":
            suggest = "v6_cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcDefaultSecurityGroupEgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcDefaultSecurityGroupEgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcDefaultSecurityGroupEgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 description: Optional[str] = None,
                 from_port: Optional[int] = None,
                 id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 port: Optional[int] = None,
                 predefined_target: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 to_port: Optional[int] = None,
                 v4_cidr_blocks: Optional[Sequence[str]] = None,
                 v6_cidr_blocks: Optional[Sequence[str]] = None):
        """
        :param str protocol: (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        :param str description: Description of the security group.
        :param int from_port: (Optional) - Minimum port number.
        :param str id: Id of the security group.
        :param Mapping[str, str] labels: Labels to assign to this security group.
        :param int port: (Optional) - Port number (if applied to a single port).
        :param str predefined_target: (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        :param str security_group_id: (Optional) - Target security group ID for this rule.
        :param int to_port: (Optional) - Maximum port number.
        :param Sequence[str] v4_cidr_blocks: (Optional) - The blocks of IPv4 addresses for this rule.
        :param Sequence[str] v6_cidr_blocks: (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_port is not None:
            pulumi.set(__self__, "from_port", from_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if predefined_target is not None:
            pulumi.set(__self__, "predefined_target", predefined_target)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if to_port is not None:
            pulumi.set(__self__, "to_port", to_port)
        if v4_cidr_blocks is not None:
            pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        if v6_cidr_blocks is not None:
            pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[int]:
        """
        (Optional) - Minimum port number.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the security group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels to assign to this security group.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        (Optional) - Port number (if applied to a single port).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> Optional[str]:
        """
        (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        """
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        """
        (Optional) - Target security group ID for this rule.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[int]:
        """
        (Optional) - Maximum port number.
        """
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv4 addresses for this rule.
        """
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class VpcDefaultSecurityGroupIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "predefinedTarget":
            suggest = "predefined_target"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "toPort":
            suggest = "to_port"
        elif key == "v4CidrBlocks":
            suggest = "v4_cidr_blocks"
        elif key == "v6CidrBlocks":
            suggest = "v6_cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcDefaultSecurityGroupIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcDefaultSecurityGroupIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcDefaultSecurityGroupIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 description: Optional[str] = None,
                 from_port: Optional[int] = None,
                 id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 port: Optional[int] = None,
                 predefined_target: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 to_port: Optional[int] = None,
                 v4_cidr_blocks: Optional[Sequence[str]] = None,
                 v6_cidr_blocks: Optional[Sequence[str]] = None):
        """
        :param str protocol: (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        :param str description: Description of the security group.
        :param int from_port: (Optional) - Minimum port number.
        :param str id: Id of the security group.
        :param Mapping[str, str] labels: Labels to assign to this security group.
        :param int port: (Optional) - Port number (if applied to a single port).
        :param str predefined_target: (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        :param str security_group_id: (Optional) - Target security group ID for this rule.
        :param int to_port: (Optional) - Maximum port number.
        :param Sequence[str] v4_cidr_blocks: (Optional) - The blocks of IPv4 addresses for this rule.
        :param Sequence[str] v6_cidr_blocks: (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_port is not None:
            pulumi.set(__self__, "from_port", from_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if predefined_target is not None:
            pulumi.set(__self__, "predefined_target", predefined_target)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if to_port is not None:
            pulumi.set(__self__, "to_port", to_port)
        if v4_cidr_blocks is not None:
            pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        if v6_cidr_blocks is not None:
            pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[int]:
        """
        (Optional) - Minimum port number.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the security group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels to assign to this security group.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        (Optional) - Port number (if applied to a single port).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> Optional[str]:
        """
        (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        """
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        """
        (Optional) - Target security group ID for this rule.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[int]:
        """
        (Optional) - Maximum port number.
        """
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv4 addresses for this rule.
        """
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class VpcGatewaySharedEgressGateway(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class VpcRouteTableStaticRoute(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "destinationPrefix":
            suggest = "destination_prefix"
        elif key == "gatewayId":
            suggest = "gateway_id"
        elif key == "nextHopAddress":
            suggest = "next_hop_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcRouteTableStaticRoute. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcRouteTableStaticRoute.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcRouteTableStaticRoute.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 destination_prefix: Optional[str] = None,
                 gateway_id: Optional[str] = None,
                 next_hop_address: Optional[str] = None):
        """
        :param str destination_prefix: Route prefix in CIDR notation.
        :param str gateway_id: ID of the gateway used ad next hop.
               
               > **NOTE:** Only one of `next_hop_address` or `gateway_id` should be specified.
        :param str next_hop_address: Address of the next hop.
        """
        if destination_prefix is not None:
            pulumi.set(__self__, "destination_prefix", destination_prefix)
        if gateway_id is not None:
            pulumi.set(__self__, "gateway_id", gateway_id)
        if next_hop_address is not None:
            pulumi.set(__self__, "next_hop_address", next_hop_address)

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> Optional[str]:
        """
        Route prefix in CIDR notation.
        """
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> Optional[str]:
        """
        ID of the gateway used ad next hop.

        > **NOTE:** Only one of `next_hop_address` or `gateway_id` should be specified.
        """
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="nextHopAddress")
    def next_hop_address(self) -> Optional[str]:
        """
        Address of the next hop.
        """
        return pulumi.get(self, "next_hop_address")


@pulumi.output_type
class VpcSecurityGroupEgress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "predefinedTarget":
            suggest = "predefined_target"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "toPort":
            suggest = "to_port"
        elif key == "v4CidrBlocks":
            suggest = "v4_cidr_blocks"
        elif key == "v6CidrBlocks":
            suggest = "v6_cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcSecurityGroupEgress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcSecurityGroupEgress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcSecurityGroupEgress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 description: Optional[str] = None,
                 from_port: Optional[int] = None,
                 id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 port: Optional[int] = None,
                 predefined_target: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 to_port: Optional[int] = None,
                 v4_cidr_blocks: Optional[Sequence[str]] = None,
                 v6_cidr_blocks: Optional[Sequence[str]] = None):
        """
        :param str protocol: (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        :param str description: Description of the security group.
        :param int from_port: (Optional) - Minimum port number.
        :param str id: Id of the rule.
        :param Mapping[str, str] labels: Labels to assign to this security group.
        :param int port: (Optional) - Port number (if applied to a single port).
        :param str predefined_target: (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        :param str security_group_id: (Optional) - Target security group ID for this rule.
        :param int to_port: (Optional) - Maximum port number.
        :param Sequence[str] v4_cidr_blocks: (Optional) - The blocks of IPv4 addresses for this rule.
        :param Sequence[str] v6_cidr_blocks: (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_port is not None:
            pulumi.set(__self__, "from_port", from_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if predefined_target is not None:
            pulumi.set(__self__, "predefined_target", predefined_target)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if to_port is not None:
            pulumi.set(__self__, "to_port", to_port)
        if v4_cidr_blocks is not None:
            pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        if v6_cidr_blocks is not None:
            pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[int]:
        """
        (Optional) - Minimum port number.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels to assign to this security group.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        (Optional) - Port number (if applied to a single port).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> Optional[str]:
        """
        (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        """
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        """
        (Optional) - Target security group ID for this rule.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[int]:
        """
        (Optional) - Maximum port number.
        """
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv4 addresses for this rule.
        """
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class VpcSecurityGroupIngress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fromPort":
            suggest = "from_port"
        elif key == "predefinedTarget":
            suggest = "predefined_target"
        elif key == "securityGroupId":
            suggest = "security_group_id"
        elif key == "toPort":
            suggest = "to_port"
        elif key == "v4CidrBlocks":
            suggest = "v4_cidr_blocks"
        elif key == "v6CidrBlocks":
            suggest = "v6_cidr_blocks"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcSecurityGroupIngress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcSecurityGroupIngress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcSecurityGroupIngress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 description: Optional[str] = None,
                 from_port: Optional[int] = None,
                 id: Optional[str] = None,
                 labels: Optional[Mapping[str, str]] = None,
                 port: Optional[int] = None,
                 predefined_target: Optional[str] = None,
                 security_group_id: Optional[str] = None,
                 to_port: Optional[int] = None,
                 v4_cidr_blocks: Optional[Sequence[str]] = None,
                 v6_cidr_blocks: Optional[Sequence[str]] = None):
        """
        :param str protocol: (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        :param str description: Description of the security group.
        :param int from_port: (Optional) - Minimum port number.
        :param str id: Id of the rule.
        :param Mapping[str, str] labels: Labels to assign to this security group.
        :param int port: (Optional) - Port number (if applied to a single port).
        :param str predefined_target: (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        :param str security_group_id: (Optional) - Target security group ID for this rule.
        :param int to_port: (Optional) - Maximum port number.
        :param Sequence[str] v4_cidr_blocks: (Optional) - The blocks of IPv4 addresses for this rule.
        :param Sequence[str] v6_cidr_blocks: (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        pulumi.set(__self__, "protocol", protocol)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if from_port is not None:
            pulumi.set(__self__, "from_port", from_port)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if predefined_target is not None:
            pulumi.set(__self__, "predefined_target", predefined_target)
        if security_group_id is not None:
            pulumi.set(__self__, "security_group_id", security_group_id)
        if to_port is not None:
            pulumi.set(__self__, "to_port", to_port)
        if v4_cidr_blocks is not None:
            pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        if v6_cidr_blocks is not None:
            pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        """
        (Required) - One of `ANY`, `TCP`, `UDP`, `ICMP`, `IPV6_ICMP`.
        """
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        Description of the security group.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> Optional[int]:
        """
        (Optional) - Minimum port number.
        """
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        """
        Id of the rule.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels to assign to this security group.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        """
        (Optional) - Port number (if applied to a single port).
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> Optional[str]:
        """
        (Optional) - Special-purpose targets. `self_security_group` refers to this particular security group. `loadbalancer_healthchecks` represents [loadbalancer health check nodes](https://cloud.yandex.com/docs/network-load-balancer/concepts/health-check).
        """
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> Optional[str]:
        """
        (Optional) - Target security group ID for this rule.
        """
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> Optional[int]:
        """
        (Optional) - Maximum port number.
        """
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv4 addresses for this rule.
        """
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Optional[Sequence[str]]:
        """
        (Optional) - The blocks of IPv6 addresses for this rule. `v6_cidr_blocks` argument is currently not supported. It will be available in the future.
        """
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class VpcSubnetDhcpOptions(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "domainName":
            suggest = "domain_name"
        elif key == "domainNameServers":
            suggest = "domain_name_servers"
        elif key == "ntpServers":
            suggest = "ntp_servers"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in VpcSubnetDhcpOptions. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        VpcSubnetDhcpOptions.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        VpcSubnetDhcpOptions.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 domain_name: Optional[str] = None,
                 domain_name_servers: Optional[Sequence[str]] = None,
                 ntp_servers: Optional[Sequence[str]] = None):
        """
        :param str domain_name: Domain name.
        :param Sequence[str] domain_name_servers: Domain name server IP addresses.
        :param Sequence[str] ntp_servers: NTP server IP addresses.
        """
        if domain_name is not None:
            pulumi.set(__self__, "domain_name", domain_name)
        if domain_name_servers is not None:
            pulumi.set(__self__, "domain_name_servers", domain_name_servers)
        if ntp_servers is not None:
            pulumi.set(__self__, "ntp_servers", ntp_servers)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> Optional[str]:
        """
        Domain name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainNameServers")
    def domain_name_servers(self) -> Optional[Sequence[str]]:
        """
        Domain name server IP addresses.
        """
        return pulumi.get(self, "domain_name_servers")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Optional[Sequence[str]]:
        """
        NTP server IP addresses.
        """
        return pulumi.get(self, "ntp_servers")


@pulumi.output_type
class YdbDatabaseDedicatedLocation(dict):
    def __init__(__self__, *,
                 region: Optional['outputs.YdbDatabaseDedicatedLocationRegion'] = None):
        """
        :param 'YdbDatabaseDedicatedLocationRegionArgs' region: Region for the Yandex Database cluster.
               The structure is documented below.
        """
        if region is not None:
            pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> Optional['outputs.YdbDatabaseDedicatedLocationRegion']:
        """
        Region for the Yandex Database cluster.
        The structure is documented below.
        """
        return pulumi.get(self, "region")


@pulumi.output_type
class YdbDatabaseDedicatedLocationRegion(dict):
    def __init__(__self__, *,
                 id: str):
        """
        :param str id: Region ID for the Yandex Database cluster.
        """
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Region ID for the Yandex Database cluster.
        """
        return pulumi.get(self, "id")


@pulumi.output_type
class YdbDatabaseDedicatedScalePolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fixedScale":
            suggest = "fixed_scale"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbDatabaseDedicatedScalePolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbDatabaseDedicatedScalePolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbDatabaseDedicatedScalePolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 fixed_scale: 'outputs.YdbDatabaseDedicatedScalePolicyFixedScale'):
        """
        :param 'YdbDatabaseDedicatedScalePolicyFixedScaleArgs' fixed_scale: Fixed scaling policy for the Yandex Database cluster.
               The structure is documented below.
               
               > **NOTE:** Currently, only `fixed_scale` is supported.
        """
        pulumi.set(__self__, "fixed_scale", fixed_scale)

    @property
    @pulumi.getter(name="fixedScale")
    def fixed_scale(self) -> 'outputs.YdbDatabaseDedicatedScalePolicyFixedScale':
        """
        Fixed scaling policy for the Yandex Database cluster.
        The structure is documented below.

        > **NOTE:** Currently, only `fixed_scale` is supported.
        """
        return pulumi.get(self, "fixed_scale")


@pulumi.output_type
class YdbDatabaseDedicatedScalePolicyFixedScale(dict):
    def __init__(__self__, *,
                 size: int):
        """
        :param int size: Number of instances for the Yandex Database cluster.
        """
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> int:
        """
        Number of instances for the Yandex Database cluster.
        """
        return pulumi.get(self, "size")


@pulumi.output_type
class YdbDatabaseDedicatedStorageConfig(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "groupCount":
            suggest = "group_count"
        elif key == "storageTypeId":
            suggest = "storage_type_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbDatabaseDedicatedStorageConfig. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbDatabaseDedicatedStorageConfig.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbDatabaseDedicatedStorageConfig.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 group_count: int,
                 storage_type_id: str):
        """
        :param int group_count: Amount of storage groups of selected type for the Yandex Database cluster.
        :param str storage_type_id: Storage type ID for the Yandex Database cluster.
               Available presets can be obtained via `yc ydb storage-type list` command.
        """
        pulumi.set(__self__, "group_count", group_count)
        pulumi.set(__self__, "storage_type_id", storage_type_id)

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> int:
        """
        Amount of storage groups of selected type for the Yandex Database cluster.
        """
        return pulumi.get(self, "group_count")

    @property
    @pulumi.getter(name="storageTypeId")
    def storage_type_id(self) -> str:
        """
        Storage type ID for the Yandex Database cluster.
        Available presets can be obtained via `yc ydb storage-type list` command.
        """
        return pulumi.get(self, "storage_type_id")


@pulumi.output_type
class YdbDatabaseServerlessServerlessDatabase(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "enableThrottlingRcuLimit":
            suggest = "enable_throttling_rcu_limit"
        elif key == "provisionedRcuLimit":
            suggest = "provisioned_rcu_limit"
        elif key == "storageSizeLimit":
            suggest = "storage_size_limit"
        elif key == "throttlingRcuLimit":
            suggest = "throttling_rcu_limit"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbDatabaseServerlessServerlessDatabase. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbDatabaseServerlessServerlessDatabase.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbDatabaseServerlessServerlessDatabase.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 enable_throttling_rcu_limit: Optional[bool] = None,
                 provisioned_rcu_limit: Optional[int] = None,
                 storage_size_limit: Optional[int] = None,
                 throttling_rcu_limit: Optional[int] = None):
        if enable_throttling_rcu_limit is not None:
            pulumi.set(__self__, "enable_throttling_rcu_limit", enable_throttling_rcu_limit)
        if provisioned_rcu_limit is not None:
            pulumi.set(__self__, "provisioned_rcu_limit", provisioned_rcu_limit)
        if storage_size_limit is not None:
            pulumi.set(__self__, "storage_size_limit", storage_size_limit)
        if throttling_rcu_limit is not None:
            pulumi.set(__self__, "throttling_rcu_limit", throttling_rcu_limit)

    @property
    @pulumi.getter(name="enableThrottlingRcuLimit")
    def enable_throttling_rcu_limit(self) -> Optional[bool]:
        return pulumi.get(self, "enable_throttling_rcu_limit")

    @property
    @pulumi.getter(name="provisionedRcuLimit")
    def provisioned_rcu_limit(self) -> Optional[int]:
        return pulumi.get(self, "provisioned_rcu_limit")

    @property
    @pulumi.getter(name="storageSizeLimit")
    def storage_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "storage_size_limit")

    @property
    @pulumi.getter(name="throttlingRcuLimit")
    def throttling_rcu_limit(self) -> Optional[int]:
        return pulumi.get(self, "throttling_rcu_limit")


@pulumi.output_type
class YdbTableChangefeedConsumer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startingMessageTimestampMs":
            suggest = "starting_message_timestamp_ms"
        elif key == "supportedCodecs":
            suggest = "supported_codecs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbTableChangefeedConsumer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbTableChangefeedConsumer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbTableChangefeedConsumer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 important: Optional[bool] = None,
                 starting_message_timestamp_ms: Optional[int] = None,
                 supported_codecs: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "name", name)
        if important is not None:
            pulumi.set(__self__, "important", important)
        if starting_message_timestamp_ms is not None:
            pulumi.set(__self__, "starting_message_timestamp_ms", starting_message_timestamp_ms)
        if supported_codecs is not None:
            pulumi.set(__self__, "supported_codecs", supported_codecs)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def important(self) -> Optional[bool]:
        return pulumi.get(self, "important")

    @property
    @pulumi.getter(name="startingMessageTimestampMs")
    def starting_message_timestamp_ms(self) -> Optional[int]:
        return pulumi.get(self, "starting_message_timestamp_ms")

    @property
    @pulumi.getter(name="supportedCodecs")
    def supported_codecs(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "supported_codecs")


@pulumi.output_type
class YdbTableColumn(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "notNull":
            suggest = "not_null"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbTableColumn. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbTableColumn.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbTableColumn.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 type: str,
                 family: Optional[str] = None,
                 not_null: Optional[bool] = None):
        """
        :param str name: Column family name
        :param str type: Column data type. YQL data types are used.
        :param str family: Column group
        :param bool not_null: A column cannot have the NULL data type. (	Default: false	)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "type", type)
        if family is not None:
            pulumi.set(__self__, "family", family)
        if not_null is not None:
            pulumi.set(__self__, "not_null", not_null)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column family name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Column data type. YQL data types are used.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def family(self) -> Optional[str]:
        """
        Column group
        """
        return pulumi.get(self, "family")

    @property
    @pulumi.getter(name="notNull")
    def not_null(self) -> Optional[bool]:
        """
        A column cannot have the NULL data type. (	Default: false	)
        """
        return pulumi.get(self, "not_null")


@pulumi.output_type
class YdbTableFamily(dict):
    def __init__(__self__, *,
                 compression: str,
                 data: str,
                 name: str):
        """
        :param str compression: Data codec (acceptable values: off, lz4).
        :param str data: Type of storage device for column data in this group (acceptable values: ssd, rot (from HDD spindle rotation)).
        :param str name: Column family name
        """
        pulumi.set(__self__, "compression", compression)
        pulumi.set(__self__, "data", data)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def compression(self) -> str:
        """
        Data codec (acceptable values: off, lz4).
        """
        return pulumi.get(self, "compression")

    @property
    @pulumi.getter
    def data(self) -> str:
        """
        Type of storage device for column data in this group (acceptable values: ssd, rot (from HDD spindle rotation)).
        """
        return pulumi.get(self, "data")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Column family name
        """
        return pulumi.get(self, "name")


@pulumi.output_type
class YdbTablePartitioningSettings(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "autoPartitioningByLoad":
            suggest = "auto_partitioning_by_load"
        elif key == "autoPartitioningBySizeEnabled":
            suggest = "auto_partitioning_by_size_enabled"
        elif key == "autoPartitioningMaxPartitionsCount":
            suggest = "auto_partitioning_max_partitions_count"
        elif key == "autoPartitioningMinPartitionsCount":
            suggest = "auto_partitioning_min_partitions_count"
        elif key == "autoPartitioningPartitionSizeMb":
            suggest = "auto_partitioning_partition_size_mb"
        elif key == "partitionAtKeys":
            suggest = "partition_at_keys"
        elif key == "uniformPartitions":
            suggest = "uniform_partitions"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbTablePartitioningSettings. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbTablePartitioningSettings.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbTablePartitioningSettings.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 auto_partitioning_by_load: Optional[bool] = None,
                 auto_partitioning_by_size_enabled: Optional[bool] = None,
                 auto_partitioning_max_partitions_count: Optional[int] = None,
                 auto_partitioning_min_partitions_count: Optional[int] = None,
                 auto_partitioning_partition_size_mb: Optional[int] = None,
                 partition_at_keys: Optional[Sequence['outputs.YdbTablePartitioningSettingsPartitionAtKey']] = None,
                 uniform_partitions: Optional[int] = None):
        if auto_partitioning_by_load is not None:
            pulumi.set(__self__, "auto_partitioning_by_load", auto_partitioning_by_load)
        if auto_partitioning_by_size_enabled is not None:
            pulumi.set(__self__, "auto_partitioning_by_size_enabled", auto_partitioning_by_size_enabled)
        if auto_partitioning_max_partitions_count is not None:
            pulumi.set(__self__, "auto_partitioning_max_partitions_count", auto_partitioning_max_partitions_count)
        if auto_partitioning_min_partitions_count is not None:
            pulumi.set(__self__, "auto_partitioning_min_partitions_count", auto_partitioning_min_partitions_count)
        if auto_partitioning_partition_size_mb is not None:
            pulumi.set(__self__, "auto_partitioning_partition_size_mb", auto_partitioning_partition_size_mb)
        if partition_at_keys is not None:
            pulumi.set(__self__, "partition_at_keys", partition_at_keys)
        if uniform_partitions is not None:
            pulumi.set(__self__, "uniform_partitions", uniform_partitions)

    @property
    @pulumi.getter(name="autoPartitioningByLoad")
    def auto_partitioning_by_load(self) -> Optional[bool]:
        return pulumi.get(self, "auto_partitioning_by_load")

    @property
    @pulumi.getter(name="autoPartitioningBySizeEnabled")
    def auto_partitioning_by_size_enabled(self) -> Optional[bool]:
        return pulumi.get(self, "auto_partitioning_by_size_enabled")

    @property
    @pulumi.getter(name="autoPartitioningMaxPartitionsCount")
    def auto_partitioning_max_partitions_count(self) -> Optional[int]:
        return pulumi.get(self, "auto_partitioning_max_partitions_count")

    @property
    @pulumi.getter(name="autoPartitioningMinPartitionsCount")
    def auto_partitioning_min_partitions_count(self) -> Optional[int]:
        return pulumi.get(self, "auto_partitioning_min_partitions_count")

    @property
    @pulumi.getter(name="autoPartitioningPartitionSizeMb")
    def auto_partitioning_partition_size_mb(self) -> Optional[int]:
        return pulumi.get(self, "auto_partitioning_partition_size_mb")

    @property
    @pulumi.getter(name="partitionAtKeys")
    def partition_at_keys(self) -> Optional[Sequence['outputs.YdbTablePartitioningSettingsPartitionAtKey']]:
        return pulumi.get(self, "partition_at_keys")

    @property
    @pulumi.getter(name="uniformPartitions")
    def uniform_partitions(self) -> Optional[int]:
        return pulumi.get(self, "uniform_partitions")


@pulumi.output_type
class YdbTablePartitioningSettingsPartitionAtKey(dict):
    def __init__(__self__, *,
                 keys: Sequence[str]):
        pulumi.set(__self__, "keys", keys)

    @property
    @pulumi.getter
    def keys(self) -> Sequence[str]:
        return pulumi.get(self, "keys")


@pulumi.output_type
class YdbTableTtl(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "columnName":
            suggest = "column_name"
        elif key == "expireInterval":
            suggest = "expire_interval"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbTableTtl. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbTableTtl.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbTableTtl.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 column_name: str,
                 expire_interval: str,
                 unit: Optional[str] = None):
        """
        :param str column_name: Column name for TTL
        :param str expire_interval: Interval in the ISO 8601 format
        """
        pulumi.set(__self__, "column_name", column_name)
        pulumi.set(__self__, "expire_interval", expire_interval)
        if unit is not None:
            pulumi.set(__self__, "unit", unit)

    @property
    @pulumi.getter(name="columnName")
    def column_name(self) -> str:
        """
        Column name for TTL
        """
        return pulumi.get(self, "column_name")

    @property
    @pulumi.getter(name="expireInterval")
    def expire_interval(self) -> str:
        """
        Interval in the ISO 8601 format
        """
        return pulumi.get(self, "expire_interval")

    @property
    @pulumi.getter
    def unit(self) -> Optional[str]:
        return pulumi.get(self, "unit")


@pulumi.output_type
class YdbTopicConsumer(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "startingMessageTimestampMs":
            suggest = "starting_message_timestamp_ms"
        elif key == "supportedCodecs":
            suggest = "supported_codecs"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in YdbTopicConsumer. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        YdbTopicConsumer.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        YdbTopicConsumer.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 name: str,
                 important: Optional[bool] = None,
                 starting_message_timestamp_ms: Optional[int] = None,
                 supported_codecs: Optional[Sequence[str]] = None):
        """
        :param str name: Topic name. Type: string, required. Default value: "".
        :param Sequence[str] supported_codecs: Supported data encodings. Types: array[string]. Default value: ["gzip", "raw", "zstd"].
        """
        pulumi.set(__self__, "name", name)
        if important is not None:
            pulumi.set(__self__, "important", important)
        if starting_message_timestamp_ms is not None:
            pulumi.set(__self__, "starting_message_timestamp_ms", starting_message_timestamp_ms)
        if supported_codecs is not None:
            pulumi.set(__self__, "supported_codecs", supported_codecs)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Topic name. Type: string, required. Default value: "".
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def important(self) -> Optional[bool]:
        return pulumi.get(self, "important")

    @property
    @pulumi.getter(name="startingMessageTimestampMs")
    def starting_message_timestamp_ms(self) -> Optional[int]:
        return pulumi.get(self, "starting_message_timestamp_ms")

    @property
    @pulumi.getter(name="supportedCodecs")
    def supported_codecs(self) -> Optional[Sequence[str]]:
        """
        Supported data encodings. Types: array[string]. Default value: ["gzip", "raw", "zstd"].
        """
        return pulumi.get(self, "supported_codecs")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendResult(dict):
    def __init__(__self__, *,
                 healthcheck: 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckResult',
                 load_balancing_config: 'outputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfigResult',
                 name: str,
                 port: int,
                 target_group_ids: Sequence[str],
                 tls: 'outputs.GetAlbBackendGroupGrpcBackendTlsResult',
                 weight: int):
        pulumi.set(__self__, "healthcheck", healthcheck)
        pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        pulumi.set(__self__, "tls", tls)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def healthcheck(self) -> 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckResult':
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> 'outputs.GetAlbBackendGroupGrpcBackendLoadBalancingConfigResult':
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.GetAlbBackendGroupGrpcBackendTlsResult':
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendHealthcheckResult(dict):
    def __init__(__self__, *,
                 grpc_healthcheck: 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckResult',
                 healthcheck_port: int,
                 healthy_threshold: int,
                 http_healthcheck: 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckResult',
                 interval: str,
                 interval_jitter_percent: float,
                 stream_healthcheck: 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckResult',
                 timeout: str,
                 unhealthy_threshold: int):
        pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckResult':
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> int:
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckResult':
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> float:
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> 'outputs.GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckResult':
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendHealthcheckGrpcHealthcheckResult(dict):
    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendHealthcheckHttpHealthcheckResult(dict):
    def __init__(__self__, *,
                 host: str,
                 http2: bool,
                 path: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http2", http2)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> bool:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendHealthcheckStreamHealthcheckResult(dict):
    def __init__(__self__, *,
                 receive: str,
                 send: str):
        pulumi.set(__self__, "receive", receive)
        pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> str:
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> str:
        return pulumi.get(self, "send")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendLoadBalancingConfigResult(dict):
    def __init__(__self__, *,
                 locality_aware_routing_percent: int,
                 mode: str,
                 panic_threshold: int,
                 strict_locality: bool):
        pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "panic_threshold", panic_threshold)
        pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> int:
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> int:
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> bool:
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendTlsResult(dict):
    def __init__(__self__, *,
                 sni: str,
                 validation_context: 'outputs.GetAlbBackendGroupGrpcBackendTlsValidationContextResult'):
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> str:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> 'outputs.GetAlbBackendGroupGrpcBackendTlsValidationContextResult':
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class GetAlbBackendGroupGrpcBackendTlsValidationContextResult(dict):
    def __init__(__self__, *,
                 trusted_ca_bytes: str,
                 trusted_ca_id: str):
        pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> str:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> str:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendResult(dict):
    def __init__(__self__, *,
                 healthcheck: 'outputs.GetAlbBackendGroupHttpBackendHealthcheckResult',
                 http2: bool,
                 load_balancing_config: 'outputs.GetAlbBackendGroupHttpBackendLoadBalancingConfigResult',
                 name: str,
                 port: int,
                 storage_bucket: str,
                 target_group_ids: Sequence[str],
                 tls: 'outputs.GetAlbBackendGroupHttpBackendTlsResult',
                 weight: int):
        pulumi.set(__self__, "healthcheck", healthcheck)
        pulumi.set(__self__, "http2", http2)
        pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "storage_bucket", storage_bucket)
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        pulumi.set(__self__, "tls", tls)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def healthcheck(self) -> 'outputs.GetAlbBackendGroupHttpBackendHealthcheckResult':
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter
    def http2(self) -> bool:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> 'outputs.GetAlbBackendGroupHttpBackendLoadBalancingConfigResult':
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="storageBucket")
    def storage_bucket(self) -> str:
        return pulumi.get(self, "storage_bucket")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.GetAlbBackendGroupHttpBackendTlsResult':
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendHealthcheckResult(dict):
    def __init__(__self__, *,
                 grpc_healthcheck: 'outputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckResult',
                 healthcheck_port: int,
                 healthy_threshold: int,
                 http_healthcheck: 'outputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckResult',
                 interval: str,
                 interval_jitter_percent: float,
                 stream_healthcheck: 'outputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckResult',
                 timeout: str,
                 unhealthy_threshold: int):
        pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> 'outputs.GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckResult':
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> int:
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> 'outputs.GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckResult':
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> float:
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> 'outputs.GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckResult':
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendHealthcheckGrpcHealthcheckResult(dict):
    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendHealthcheckHttpHealthcheckResult(dict):
    def __init__(__self__, *,
                 host: str,
                 http2: bool,
                 path: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http2", http2)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> bool:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendHealthcheckStreamHealthcheckResult(dict):
    def __init__(__self__, *,
                 receive: str,
                 send: str):
        pulumi.set(__self__, "receive", receive)
        pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> str:
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> str:
        return pulumi.get(self, "send")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendLoadBalancingConfigResult(dict):
    def __init__(__self__, *,
                 locality_aware_routing_percent: int,
                 mode: str,
                 panic_threshold: int,
                 strict_locality: bool):
        pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "panic_threshold", panic_threshold)
        pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> int:
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> int:
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> bool:
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendTlsResult(dict):
    def __init__(__self__, *,
                 sni: str,
                 validation_context: 'outputs.GetAlbBackendGroupHttpBackendTlsValidationContextResult'):
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> str:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> 'outputs.GetAlbBackendGroupHttpBackendTlsValidationContextResult':
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class GetAlbBackendGroupHttpBackendTlsValidationContextResult(dict):
    def __init__(__self__, *,
                 trusted_ca_bytes: str,
                 trusted_ca_id: str):
        pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> str:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> str:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class GetAlbBackendGroupSessionAffinityResult(dict):
    def __init__(__self__, *,
                 connection: 'outputs.GetAlbBackendGroupSessionAffinityConnectionResult',
                 cookie: 'outputs.GetAlbBackendGroupSessionAffinityCookieResult',
                 header: 'outputs.GetAlbBackendGroupSessionAffinityHeaderResult'):
        """
        :param 'GetAlbBackendGroupSessionAffinityConnectionArgs' connection: IP address affinity
        :param 'GetAlbBackendGroupSessionAffinityCookieArgs' cookie: Cookie affinity
        :param 'GetAlbBackendGroupSessionAffinityHeaderArgs' header: Request header affinity
        """
        pulumi.set(__self__, "connection", connection)
        pulumi.set(__self__, "cookie", cookie)
        pulumi.set(__self__, "header", header)

    @property
    @pulumi.getter
    def connection(self) -> 'outputs.GetAlbBackendGroupSessionAffinityConnectionResult':
        """
        IP address affinity
        """
        return pulumi.get(self, "connection")

    @property
    @pulumi.getter
    def cookie(self) -> 'outputs.GetAlbBackendGroupSessionAffinityCookieResult':
        """
        Cookie affinity
        """
        return pulumi.get(self, "cookie")

    @property
    @pulumi.getter
    def header(self) -> 'outputs.GetAlbBackendGroupSessionAffinityHeaderResult':
        """
        Request header affinity
        """
        return pulumi.get(self, "header")


@pulumi.output_type
class GetAlbBackendGroupSessionAffinityConnectionResult(dict):
    def __init__(__self__, *,
                 source_ip: bool):
        """
        :param bool source_ip: Use source IP address
        """
        pulumi.set(__self__, "source_ip", source_ip)

    @property
    @pulumi.getter(name="sourceIp")
    def source_ip(self) -> bool:
        """
        Use source IP address
        """
        return pulumi.get(self, "source_ip")


@pulumi.output_type
class GetAlbBackendGroupSessionAffinityCookieResult(dict):
    def __init__(__self__, *,
                 name: str,
                 ttl: str):
        """
        :param str name: Name of the HTTP cookie
        :param str ttl: TTL for the cookie (if not set, session cookie will be used)
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the HTTP cookie
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def ttl(self) -> str:
        """
        TTL for the cookie (if not set, session cookie will be used)
        """
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetAlbBackendGroupSessionAffinityHeaderResult(dict):
    def __init__(__self__, *,
                 header_name: str):
        """
        :param str header_name: The name of the request header that will be used
        """
        pulumi.set(__self__, "header_name", header_name)

    @property
    @pulumi.getter(name="headerName")
    def header_name(self) -> str:
        """
        The name of the request header that will be used
        """
        return pulumi.get(self, "header_name")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendResult(dict):
    def __init__(__self__, *,
                 enable_proxy_protocol: bool,
                 healthcheck: 'outputs.GetAlbBackendGroupStreamBackendHealthcheckResult',
                 load_balancing_config: 'outputs.GetAlbBackendGroupStreamBackendLoadBalancingConfigResult',
                 name: str,
                 port: int,
                 target_group_ids: Sequence[str],
                 tls: 'outputs.GetAlbBackendGroupStreamBackendTlsResult',
                 weight: int):
        pulumi.set(__self__, "enable_proxy_protocol", enable_proxy_protocol)
        pulumi.set(__self__, "healthcheck", healthcheck)
        pulumi.set(__self__, "load_balancing_config", load_balancing_config)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "target_group_ids", target_group_ids)
        pulumi.set(__self__, "tls", tls)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="enableProxyProtocol")
    def enable_proxy_protocol(self) -> bool:
        return pulumi.get(self, "enable_proxy_protocol")

    @property
    @pulumi.getter
    def healthcheck(self) -> 'outputs.GetAlbBackendGroupStreamBackendHealthcheckResult':
        return pulumi.get(self, "healthcheck")

    @property
    @pulumi.getter(name="loadBalancingConfig")
    def load_balancing_config(self) -> 'outputs.GetAlbBackendGroupStreamBackendLoadBalancingConfigResult':
        return pulumi.get(self, "load_balancing_config")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="targetGroupIds")
    def target_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "target_group_ids")

    @property
    @pulumi.getter
    def tls(self) -> 'outputs.GetAlbBackendGroupStreamBackendTlsResult':
        return pulumi.get(self, "tls")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendHealthcheckResult(dict):
    def __init__(__self__, *,
                 grpc_healthcheck: 'outputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckResult',
                 healthcheck_port: int,
                 healthy_threshold: int,
                 http_healthcheck: 'outputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckResult',
                 interval: str,
                 interval_jitter_percent: float,
                 stream_healthcheck: 'outputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckResult',
                 timeout: str,
                 unhealthy_threshold: int):
        pulumi.set(__self__, "grpc_healthcheck", grpc_healthcheck)
        pulumi.set(__self__, "healthcheck_port", healthcheck_port)
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "http_healthcheck", http_healthcheck)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "interval_jitter_percent", interval_jitter_percent)
        pulumi.set(__self__, "stream_healthcheck", stream_healthcheck)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="grpcHealthcheck")
    def grpc_healthcheck(self) -> 'outputs.GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckResult':
        return pulumi.get(self, "grpc_healthcheck")

    @property
    @pulumi.getter(name="healthcheckPort")
    def healthcheck_port(self) -> int:
        return pulumi.get(self, "healthcheck_port")

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpHealthcheck")
    def http_healthcheck(self) -> 'outputs.GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckResult':
        return pulumi.get(self, "http_healthcheck")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="intervalJitterPercent")
    def interval_jitter_percent(self) -> float:
        return pulumi.get(self, "interval_jitter_percent")

    @property
    @pulumi.getter(name="streamHealthcheck")
    def stream_healthcheck(self) -> 'outputs.GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckResult':
        return pulumi.get(self, "stream_healthcheck")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendHealthcheckGrpcHealthcheckResult(dict):
    def __init__(__self__, *,
                 service_name: str):
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendHealthcheckHttpHealthcheckResult(dict):
    def __init__(__self__, *,
                 host: str,
                 http2: bool,
                 path: str):
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "http2", http2)
        pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def http2(self) -> bool:
        return pulumi.get(self, "http2")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendHealthcheckStreamHealthcheckResult(dict):
    def __init__(__self__, *,
                 receive: str,
                 send: str):
        pulumi.set(__self__, "receive", receive)
        pulumi.set(__self__, "send", send)

    @property
    @pulumi.getter
    def receive(self) -> str:
        return pulumi.get(self, "receive")

    @property
    @pulumi.getter
    def send(self) -> str:
        return pulumi.get(self, "send")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendLoadBalancingConfigResult(dict):
    def __init__(__self__, *,
                 locality_aware_routing_percent: int,
                 mode: str,
                 panic_threshold: int,
                 strict_locality: bool):
        pulumi.set(__self__, "locality_aware_routing_percent", locality_aware_routing_percent)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "panic_threshold", panic_threshold)
        pulumi.set(__self__, "strict_locality", strict_locality)

    @property
    @pulumi.getter(name="localityAwareRoutingPercent")
    def locality_aware_routing_percent(self) -> int:
        return pulumi.get(self, "locality_aware_routing_percent")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="panicThreshold")
    def panic_threshold(self) -> int:
        return pulumi.get(self, "panic_threshold")

    @property
    @pulumi.getter(name="strictLocality")
    def strict_locality(self) -> bool:
        return pulumi.get(self, "strict_locality")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendTlsResult(dict):
    def __init__(__self__, *,
                 sni: str,
                 validation_context: 'outputs.GetAlbBackendGroupStreamBackendTlsValidationContextResult'):
        pulumi.set(__self__, "sni", sni)
        pulumi.set(__self__, "validation_context", validation_context)

    @property
    @pulumi.getter
    def sni(self) -> str:
        return pulumi.get(self, "sni")

    @property
    @pulumi.getter(name="validationContext")
    def validation_context(self) -> 'outputs.GetAlbBackendGroupStreamBackendTlsValidationContextResult':
        return pulumi.get(self, "validation_context")


@pulumi.output_type
class GetAlbBackendGroupStreamBackendTlsValidationContextResult(dict):
    def __init__(__self__, *,
                 trusted_ca_bytes: str,
                 trusted_ca_id: str):
        pulumi.set(__self__, "trusted_ca_bytes", trusted_ca_bytes)
        pulumi.set(__self__, "trusted_ca_id", trusted_ca_id)

    @property
    @pulumi.getter(name="trustedCaBytes")
    def trusted_ca_bytes(self) -> str:
        return pulumi.get(self, "trusted_ca_bytes")

    @property
    @pulumi.getter(name="trustedCaId")
    def trusted_ca_id(self) -> str:
        return pulumi.get(self, "trusted_ca_id")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionResult(dict):
    def __init__(__self__, *,
                 rbacs: Sequence['outputs.GetAlbHttpRouterRouteOptionRbacResult'],
                 security_profile_id: Optional[str] = None):
        pulumi.set(__self__, "rbacs", rbacs)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbacs(self) -> Sequence['outputs.GetAlbHttpRouterRouteOptionRbacResult']:
        return pulumi.get(self, "rbacs")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionRbacResult(dict):
    def __init__(__self__, *,
                 action: str,
                 principals: Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalResult']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalResult']:
        return pulumi.get(self, "principals")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionRbacPrincipalResult(dict):
    def __init__(__self__, *,
                 and_principals: Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalResult']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalResult']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalResult(dict):
    def __init__(__self__, *,
                 any: bool,
                 headers: Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderResult'],
                 remote_ip: str):
        pulumi.set(__self__, "any", any)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> bool:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> str:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAlbHttpRouterRouteOptionRbacPrincipalAndPrincipalHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact: str,
                 prefix: str,
                 regex: str):
        pulumi.set(__self__, "exact", exact)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> str:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlbLoadBalancerAllocationPolicyResult(dict):
    def __init__(__self__, *,
                 locations: Sequence['outputs.GetAlbLoadBalancerAllocationPolicyLocationResult']):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetAlbLoadBalancerAllocationPolicyLocationResult']:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetAlbLoadBalancerAllocationPolicyLocationResult(dict):
    def __init__(__self__, *,
                 disable_traffic: bool,
                 subnet_id: str,
                 zone_id: str):
        pulumi.set(__self__, "disable_traffic", disable_traffic)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="disableTraffic")
    def disable_traffic(self) -> bool:
        return pulumi.get(self, "disable_traffic")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetAlbLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 endpoints: Sequence['outputs.GetAlbLoadBalancerListenerEndpointResult'],
                 name: str,
                 https: Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpResult']] = None,
                 stream: Optional['outputs.GetAlbLoadBalancerListenerStreamResult'] = None,
                 tls: Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlResult']] = None):
        pulumi.set(__self__, "endpoints", endpoints)
        pulumi.set(__self__, "name", name)
        if https is not None:
            pulumi.set(__self__, "https", https)
        if stream is not None:
            pulumi.set(__self__, "stream", stream)
        if tls is not None:
            pulumi.set(__self__, "tls", tls)

    @property
    @pulumi.getter
    def endpoints(self) -> Sequence['outputs.GetAlbLoadBalancerListenerEndpointResult']:
        return pulumi.get(self, "endpoints")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def https(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpResult']]:
        return pulumi.get(self, "https")

    @property
    @pulumi.getter
    def stream(self) -> Optional['outputs.GetAlbLoadBalancerListenerStreamResult']:
        return pulumi.get(self, "stream")

    @property
    @pulumi.getter
    def tls(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlResult']]:
        return pulumi.get(self, "tls")


@pulumi.output_type
class GetAlbLoadBalancerListenerEndpointResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressResult'],
                 ports: Sequence[int]):
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "ports", ports)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressResult']:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter
    def ports(self) -> Sequence[int]:
        return pulumi.get(self, "ports")


@pulumi.output_type
class GetAlbLoadBalancerListenerEndpointAddressResult(dict):
    def __init__(__self__, *,
                 external_ipv4_addresses: Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressExternalIpv4AddressResult'],
                 external_ipv6_addresses: Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressExternalIpv6AddressResult'],
                 internal_ipv4_addresses: Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressInternalIpv4AddressResult']):
        pulumi.set(__self__, "external_ipv4_addresses", external_ipv4_addresses)
        pulumi.set(__self__, "external_ipv6_addresses", external_ipv6_addresses)
        pulumi.set(__self__, "internal_ipv4_addresses", internal_ipv4_addresses)

    @property
    @pulumi.getter(name="externalIpv4Addresses")
    def external_ipv4_addresses(self) -> Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressExternalIpv4AddressResult']:
        return pulumi.get(self, "external_ipv4_addresses")

    @property
    @pulumi.getter(name="externalIpv6Addresses")
    def external_ipv6_addresses(self) -> Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressExternalIpv6AddressResult']:
        return pulumi.get(self, "external_ipv6_addresses")

    @property
    @pulumi.getter(name="internalIpv4Addresses")
    def internal_ipv4_addresses(self) -> Sequence['outputs.GetAlbLoadBalancerListenerEndpointAddressInternalIpv4AddressResult']:
        return pulumi.get(self, "internal_ipv4_addresses")


@pulumi.output_type
class GetAlbLoadBalancerListenerEndpointAddressExternalIpv4AddressResult(dict):
    def __init__(__self__, *,
                 address: str):
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")


@pulumi.output_type
class GetAlbLoadBalancerListenerEndpointAddressExternalIpv6AddressResult(dict):
    def __init__(__self__, *,
                 address: str):
        pulumi.set(__self__, "address", address)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")


@pulumi.output_type
class GetAlbLoadBalancerListenerEndpointAddressInternalIpv4AddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 subnet_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAlbLoadBalancerListenerHttpResult(dict):
    def __init__(__self__, *,
                 handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpHandlerResult']] = None,
                 redirects: Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpRedirectResult']] = None):
        if handlers is not None:
            pulumi.set(__self__, "handlers", handlers)
        if redirects is not None:
            pulumi.set(__self__, "redirects", redirects)

    @property
    @pulumi.getter
    def handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpHandlerResult']]:
        return pulumi.get(self, "handlers")

    @property
    @pulumi.getter
    def redirects(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerHttpRedirectResult']]:
        return pulumi.get(self, "redirects")


@pulumi.output_type
class GetAlbLoadBalancerListenerHttpHandlerResult(dict):
    def __init__(__self__, *,
                 http2_options: Sequence['outputs.GetAlbLoadBalancerListenerHttpHandlerHttp2OptionResult'],
                 http_router_id: str,
                 rewrite_request_id: bool,
                 allow_http10: Optional[bool] = None):
        pulumi.set(__self__, "http2_options", http2_options)
        pulumi.set(__self__, "http_router_id", http_router_id)
        pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Sequence['outputs.GetAlbLoadBalancerListenerHttpHandlerHttp2OptionResult']:
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> str:
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> bool:
        return pulumi.get(self, "rewrite_request_id")

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        return pulumi.get(self, "allow_http10")


@pulumi.output_type
class GetAlbLoadBalancerListenerHttpHandlerHttp2OptionResult(dict):
    def __init__(__self__, *,
                 max_concurrent_streams: int):
        pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> int:
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class GetAlbLoadBalancerListenerHttpRedirectResult(dict):
    def __init__(__self__, *,
                 http_to_https: bool):
        pulumi.set(__self__, "http_to_https", http_to_https)

    @property
    @pulumi.getter(name="httpToHttps")
    def http_to_https(self) -> bool:
        return pulumi.get(self, "http_to_https")


@pulumi.output_type
class GetAlbLoadBalancerListenerStreamResult(dict):
    def __init__(__self__, *,
                 handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerStreamHandlerResult']] = None):
        if handlers is not None:
            pulumi.set(__self__, "handlers", handlers)

    @property
    @pulumi.getter
    def handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerStreamHandlerResult']]:
        return pulumi.get(self, "handlers")


@pulumi.output_type
class GetAlbLoadBalancerListenerStreamHandlerResult(dict):
    def __init__(__self__, *,
                 backend_group_id: str):
        pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlResult(dict):
    def __init__(__self__, *,
                 default_handlers: Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerResult'],
                 sni_handlers: Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerResult']):
        pulumi.set(__self__, "default_handlers", default_handlers)
        pulumi.set(__self__, "sni_handlers", sni_handlers)

    @property
    @pulumi.getter(name="defaultHandlers")
    def default_handlers(self) -> Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerResult']:
        return pulumi.get(self, "default_handlers")

    @property
    @pulumi.getter(name="sniHandlers")
    def sni_handlers(self) -> Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerResult']:
        return pulumi.get(self, "sni_handlers")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlDefaultHandlerResult(dict):
    def __init__(__self__, *,
                 certificate_ids: Sequence[str],
                 http_handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerResult']] = None,
                 stream_handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerStreamHandlerResult']] = None):
        pulumi.set(__self__, "certificate_ids", certificate_ids)
        if http_handlers is not None:
            pulumi.set(__self__, "http_handlers", http_handlers)
        if stream_handlers is not None:
            pulumi.set(__self__, "stream_handlers", stream_handlers)

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "certificate_ids")

    @property
    @pulumi.getter(name="httpHandlers")
    def http_handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerResult']]:
        return pulumi.get(self, "http_handlers")

    @property
    @pulumi.getter(name="streamHandlers")
    def stream_handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerStreamHandlerResult']]:
        return pulumi.get(self, "stream_handlers")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerResult(dict):
    def __init__(__self__, *,
                 http2_options: Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2OptionResult'],
                 http_router_id: str,
                 rewrite_request_id: bool,
                 allow_http10: Optional[bool] = None):
        pulumi.set(__self__, "http2_options", http2_options)
        pulumi.set(__self__, "http_router_id", http_router_id)
        pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Sequence['outputs.GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2OptionResult']:
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> str:
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> bool:
        return pulumi.get(self, "rewrite_request_id")

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        return pulumi.get(self, "allow_http10")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlDefaultHandlerHttpHandlerHttp2OptionResult(dict):
    def __init__(__self__, *,
                 max_concurrent_streams: int):
        pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> int:
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlDefaultHandlerStreamHandlerResult(dict):
    def __init__(__self__, *,
                 backend_group_id: str):
        pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlSniHandlerResult(dict):
    def __init__(__self__, *,
                 handlers: Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerResult'],
                 name: str,
                 server_names: Sequence[str]):
        pulumi.set(__self__, "handlers", handlers)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "server_names", server_names)

    @property
    @pulumi.getter
    def handlers(self) -> Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerResult']:
        return pulumi.get(self, "handlers")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="serverNames")
    def server_names(self) -> Sequence[str]:
        return pulumi.get(self, "server_names")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlSniHandlerHandlerResult(dict):
    def __init__(__self__, *,
                 certificate_ids: Sequence[str],
                 http_handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerResult']] = None,
                 stream_handlers: Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandlerResult']] = None):
        pulumi.set(__self__, "certificate_ids", certificate_ids)
        if http_handlers is not None:
            pulumi.set(__self__, "http_handlers", http_handlers)
        if stream_handlers is not None:
            pulumi.set(__self__, "stream_handlers", stream_handlers)

    @property
    @pulumi.getter(name="certificateIds")
    def certificate_ids(self) -> Sequence[str]:
        return pulumi.get(self, "certificate_ids")

    @property
    @pulumi.getter(name="httpHandlers")
    def http_handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerResult']]:
        return pulumi.get(self, "http_handlers")

    @property
    @pulumi.getter(name="streamHandlers")
    def stream_handlers(self) -> Optional[Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandlerResult']]:
        return pulumi.get(self, "stream_handlers")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerResult(dict):
    def __init__(__self__, *,
                 http2_options: Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2OptionResult'],
                 http_router_id: str,
                 rewrite_request_id: bool,
                 allow_http10: Optional[bool] = None):
        pulumi.set(__self__, "http2_options", http2_options)
        pulumi.set(__self__, "http_router_id", http_router_id)
        pulumi.set(__self__, "rewrite_request_id", rewrite_request_id)
        if allow_http10 is not None:
            pulumi.set(__self__, "allow_http10", allow_http10)

    @property
    @pulumi.getter(name="http2Options")
    def http2_options(self) -> Sequence['outputs.GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2OptionResult']:
        return pulumi.get(self, "http2_options")

    @property
    @pulumi.getter(name="httpRouterId")
    def http_router_id(self) -> str:
        return pulumi.get(self, "http_router_id")

    @property
    @pulumi.getter(name="rewriteRequestId")
    def rewrite_request_id(self) -> bool:
        return pulumi.get(self, "rewrite_request_id")

    @property
    @pulumi.getter(name="allowHttp10")
    def allow_http10(self) -> Optional[bool]:
        return pulumi.get(self, "allow_http10")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlSniHandlerHandlerHttpHandlerHttp2OptionResult(dict):
    def __init__(__self__, *,
                 max_concurrent_streams: int):
        pulumi.set(__self__, "max_concurrent_streams", max_concurrent_streams)

    @property
    @pulumi.getter(name="maxConcurrentStreams")
    def max_concurrent_streams(self) -> int:
        return pulumi.get(self, "max_concurrent_streams")


@pulumi.output_type
class GetAlbLoadBalancerListenerTlSniHandlerHandlerStreamHandlerResult(dict):
    def __init__(__self__, *,
                 backend_group_id: str):
        pulumi.set(__self__, "backend_group_id", backend_group_id)

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        return pulumi.get(self, "backend_group_id")


@pulumi.output_type
class GetAlbLoadBalancerLogOptionResult(dict):
    def __init__(__self__, *,
                 disable: bool,
                 discard_rules: Sequence['outputs.GetAlbLoadBalancerLogOptionDiscardRuleResult'],
                 log_group_id: str):
        pulumi.set(__self__, "disable", disable)
        pulumi.set(__self__, "discard_rules", discard_rules)
        pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter
    def disable(self) -> bool:
        return pulumi.get(self, "disable")

    @property
    @pulumi.getter(name="discardRules")
    def discard_rules(self) -> Sequence['outputs.GetAlbLoadBalancerLogOptionDiscardRuleResult']:
        return pulumi.get(self, "discard_rules")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class GetAlbLoadBalancerLogOptionDiscardRuleResult(dict):
    def __init__(__self__, *,
                 discard_percent: int,
                 grpc_codes: Sequence[str],
                 http_code_intervals: Sequence[str],
                 http_codes: Sequence[int]):
        pulumi.set(__self__, "discard_percent", discard_percent)
        pulumi.set(__self__, "grpc_codes", grpc_codes)
        pulumi.set(__self__, "http_code_intervals", http_code_intervals)
        pulumi.set(__self__, "http_codes", http_codes)

    @property
    @pulumi.getter(name="discardPercent")
    def discard_percent(self) -> int:
        return pulumi.get(self, "discard_percent")

    @property
    @pulumi.getter(name="grpcCodes")
    def grpc_codes(self) -> Sequence[str]:
        return pulumi.get(self, "grpc_codes")

    @property
    @pulumi.getter(name="httpCodeIntervals")
    def http_code_intervals(self) -> Sequence[str]:
        return pulumi.get(self, "http_code_intervals")

    @property
    @pulumi.getter(name="httpCodes")
    def http_codes(self) -> Sequence[int]:
        return pulumi.get(self, "http_codes")


@pulumi.output_type
class GetAlbTargetGroupTargetResult(dict):
    def __init__(__self__, *,
                 ip_address: str,
                 private_ipv4_address: Optional[bool] = None,
                 subnet_id: Optional[str] = None):
        pulumi.set(__self__, "ip_address", ip_address)
        if private_ipv4_address is not None:
            pulumi.set(__self__, "private_ipv4_address", private_ipv4_address)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter(name="privateIpv4Address")
    def private_ipv4_address(self) -> Optional[bool]:
        return pulumi.get(self, "private_ipv4_address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetAlbVirtualHostModifyRequestHeaderResult(dict):
    def __init__(__self__, *,
                 append: str,
                 name: str,
                 remove: bool,
                 replace: str):
        pulumi.set(__self__, "append", append)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remove", remove)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def append(self) -> str:
        return pulumi.get(self, "append")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remove(self) -> bool:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def replace(self) -> str:
        return pulumi.get(self, "replace")


@pulumi.output_type
class GetAlbVirtualHostModifyResponseHeaderResult(dict):
    def __init__(__self__, *,
                 append: str,
                 name: str,
                 remove: bool,
                 replace: str):
        pulumi.set(__self__, "append", append)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "remove", remove)
        pulumi.set(__self__, "replace", replace)

    @property
    @pulumi.getter
    def append(self) -> str:
        return pulumi.get(self, "append")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def remove(self) -> bool:
        return pulumi.get(self, "remove")

    @property
    @pulumi.getter
    def replace(self) -> str:
        return pulumi.get(self, "replace")


@pulumi.output_type
class GetAlbVirtualHostRouteResult(dict):
    def __init__(__self__, *,
                 grpc_routes: Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteResult'],
                 http_routes: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteResult'],
                 name: str,
                 route_options: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionResult']):
        pulumi.set(__self__, "grpc_routes", grpc_routes)
        pulumi.set(__self__, "http_routes", http_routes)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "route_options", route_options)

    @property
    @pulumi.getter(name="grpcRoutes")
    def grpc_routes(self) -> Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteResult']:
        return pulumi.get(self, "grpc_routes")

    @property
    @pulumi.getter(name="httpRoutes")
    def http_routes(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteResult']:
        return pulumi.get(self, "http_routes")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="routeOptions")
    def route_options(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionResult']:
        return pulumi.get(self, "route_options")


@pulumi.output_type
class GetAlbVirtualHostRouteGrpcRouteResult(dict):
    def __init__(__self__, *,
                 grpc_matches: Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcMatchResult'],
                 grpc_route_actions: Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcRouteActionResult'],
                 grpc_status_response_actions: Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionResult']):
        pulumi.set(__self__, "grpc_matches", grpc_matches)
        pulumi.set(__self__, "grpc_route_actions", grpc_route_actions)
        pulumi.set(__self__, "grpc_status_response_actions", grpc_status_response_actions)

    @property
    @pulumi.getter(name="grpcMatches")
    def grpc_matches(self) -> Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcMatchResult']:
        return pulumi.get(self, "grpc_matches")

    @property
    @pulumi.getter(name="grpcRouteActions")
    def grpc_route_actions(self) -> Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcRouteActionResult']:
        return pulumi.get(self, "grpc_route_actions")

    @property
    @pulumi.getter(name="grpcStatusResponseActions")
    def grpc_status_response_actions(self) -> Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionResult']:
        return pulumi.get(self, "grpc_status_response_actions")


@pulumi.output_type
class GetAlbVirtualHostRouteGrpcRouteGrpcMatchResult(dict):
    def __init__(__self__, *,
                 fqmns: Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcMatchFqmnResult']):
        pulumi.set(__self__, "fqmns", fqmns)

    @property
    @pulumi.getter
    def fqmns(self) -> Sequence['outputs.GetAlbVirtualHostRouteGrpcRouteGrpcMatchFqmnResult']:
        return pulumi.get(self, "fqmns")


@pulumi.output_type
class GetAlbVirtualHostRouteGrpcRouteGrpcMatchFqmnResult(dict):
    def __init__(__self__, *,
                 exact: str,
                 prefix: str,
                 regex: str):
        pulumi.set(__self__, "exact", exact)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> str:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlbVirtualHostRouteGrpcRouteGrpcRouteActionResult(dict):
    def __init__(__self__, *,
                 auto_host_rewrite: bool,
                 backend_group_id: str,
                 host_rewrite: str,
                 idle_timeout: str,
                 max_timeout: str):
        pulumi.set(__self__, "auto_host_rewrite", auto_host_rewrite)
        pulumi.set(__self__, "backend_group_id", backend_group_id)
        pulumi.set(__self__, "host_rewrite", host_rewrite)
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        pulumi.set(__self__, "max_timeout", max_timeout)

    @property
    @pulumi.getter(name="autoHostRewrite")
    def auto_host_rewrite(self) -> bool:
        return pulumi.get(self, "auto_host_rewrite")

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        return pulumi.get(self, "backend_group_id")

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> str:
        return pulumi.get(self, "host_rewrite")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> str:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="maxTimeout")
    def max_timeout(self) -> str:
        return pulumi.get(self, "max_timeout")


@pulumi.output_type
class GetAlbVirtualHostRouteGrpcRouteGrpcStatusResponseActionResult(dict):
    def __init__(__self__, *,
                 status: str):
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteResult(dict):
    def __init__(__self__, *,
                 direct_response_actions: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteDirectResponseActionResult'],
                 http_matches: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpMatchResult'],
                 http_route_actions: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpRouteActionResult'],
                 redirect_actions: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteRedirectActionResult']):
        pulumi.set(__self__, "direct_response_actions", direct_response_actions)
        pulumi.set(__self__, "http_matches", http_matches)
        pulumi.set(__self__, "http_route_actions", http_route_actions)
        pulumi.set(__self__, "redirect_actions", redirect_actions)

    @property
    @pulumi.getter(name="directResponseActions")
    def direct_response_actions(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteDirectResponseActionResult']:
        return pulumi.get(self, "direct_response_actions")

    @property
    @pulumi.getter(name="httpMatches")
    def http_matches(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpMatchResult']:
        return pulumi.get(self, "http_matches")

    @property
    @pulumi.getter(name="httpRouteActions")
    def http_route_actions(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpRouteActionResult']:
        return pulumi.get(self, "http_route_actions")

    @property
    @pulumi.getter(name="redirectActions")
    def redirect_actions(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteRedirectActionResult']:
        return pulumi.get(self, "redirect_actions")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteDirectResponseActionResult(dict):
    def __init__(__self__, *,
                 body: str,
                 status: int):
        pulumi.set(__self__, "body", body)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def body(self) -> str:
        return pulumi.get(self, "body")

    @property
    @pulumi.getter
    def status(self) -> int:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteHttpMatchResult(dict):
    def __init__(__self__, *,
                 http_methods: Sequence[str],
                 paths: Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpMatchPathResult']):
        pulumi.set(__self__, "http_methods", http_methods)
        pulumi.set(__self__, "paths", paths)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Sequence[str]:
        return pulumi.get(self, "http_methods")

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.GetAlbVirtualHostRouteHttpRouteHttpMatchPathResult']:
        return pulumi.get(self, "paths")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteHttpMatchPathResult(dict):
    def __init__(__self__, *,
                 exact: str,
                 prefix: str,
                 regex: str):
        pulumi.set(__self__, "exact", exact)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> str:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteHttpRouteActionResult(dict):
    def __init__(__self__, *,
                 auto_host_rewrite: bool,
                 backend_group_id: str,
                 host_rewrite: str,
                 idle_timeout: str,
                 prefix_rewrite: str,
                 timeout: str,
                 upgrade_types: Sequence[str]):
        pulumi.set(__self__, "auto_host_rewrite", auto_host_rewrite)
        pulumi.set(__self__, "backend_group_id", backend_group_id)
        pulumi.set(__self__, "host_rewrite", host_rewrite)
        pulumi.set(__self__, "idle_timeout", idle_timeout)
        pulumi.set(__self__, "prefix_rewrite", prefix_rewrite)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "upgrade_types", upgrade_types)

    @property
    @pulumi.getter(name="autoHostRewrite")
    def auto_host_rewrite(self) -> bool:
        return pulumi.get(self, "auto_host_rewrite")

    @property
    @pulumi.getter(name="backendGroupId")
    def backend_group_id(self) -> str:
        return pulumi.get(self, "backend_group_id")

    @property
    @pulumi.getter(name="hostRewrite")
    def host_rewrite(self) -> str:
        return pulumi.get(self, "host_rewrite")

    @property
    @pulumi.getter(name="idleTimeout")
    def idle_timeout(self) -> str:
        return pulumi.get(self, "idle_timeout")

    @property
    @pulumi.getter(name="prefixRewrite")
    def prefix_rewrite(self) -> str:
        return pulumi.get(self, "prefix_rewrite")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="upgradeTypes")
    def upgrade_types(self) -> Sequence[str]:
        return pulumi.get(self, "upgrade_types")


@pulumi.output_type
class GetAlbVirtualHostRouteHttpRouteRedirectActionResult(dict):
    def __init__(__self__, *,
                 remove_query: bool,
                 replace_host: str,
                 replace_path: str,
                 replace_port: int,
                 replace_prefix: str,
                 replace_scheme: str,
                 response_code: str):
        pulumi.set(__self__, "remove_query", remove_query)
        pulumi.set(__self__, "replace_host", replace_host)
        pulumi.set(__self__, "replace_path", replace_path)
        pulumi.set(__self__, "replace_port", replace_port)
        pulumi.set(__self__, "replace_prefix", replace_prefix)
        pulumi.set(__self__, "replace_scheme", replace_scheme)
        pulumi.set(__self__, "response_code", response_code)

    @property
    @pulumi.getter(name="removeQuery")
    def remove_query(self) -> bool:
        return pulumi.get(self, "remove_query")

    @property
    @pulumi.getter(name="replaceHost")
    def replace_host(self) -> str:
        return pulumi.get(self, "replace_host")

    @property
    @pulumi.getter(name="replacePath")
    def replace_path(self) -> str:
        return pulumi.get(self, "replace_path")

    @property
    @pulumi.getter(name="replacePort")
    def replace_port(self) -> int:
        return pulumi.get(self, "replace_port")

    @property
    @pulumi.getter(name="replacePrefix")
    def replace_prefix(self) -> str:
        return pulumi.get(self, "replace_prefix")

    @property
    @pulumi.getter(name="replaceScheme")
    def replace_scheme(self) -> str:
        return pulumi.get(self, "replace_scheme")

    @property
    @pulumi.getter(name="responseCode")
    def response_code(self) -> str:
        return pulumi.get(self, "response_code")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionResult(dict):
    def __init__(__self__, *,
                 rbacs: Sequence['outputs.GetAlbVirtualHostRouteOptionRbacResult'],
                 security_profile_id: Optional[str] = None):
        pulumi.set(__self__, "rbacs", rbacs)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbacs(self) -> Sequence['outputs.GetAlbVirtualHostRouteOptionRbacResult']:
        return pulumi.get(self, "rbacs")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionRbacResult(dict):
    def __init__(__self__, *,
                 action: str,
                 principals: Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalResult']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalResult']:
        return pulumi.get(self, "principals")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionRbacPrincipalResult(dict):
    def __init__(__self__, *,
                 and_principals: Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalResult']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalResult']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalResult(dict):
    def __init__(__self__, *,
                 any: bool,
                 headers: Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderResult'],
                 remote_ip: str):
        pulumi.set(__self__, "any", any)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> bool:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> str:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAlbVirtualHostRouteOptionRbacPrincipalAndPrincipalHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact: str,
                 prefix: str,
                 regex: str):
        pulumi.set(__self__, "exact", exact)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> str:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionResult(dict):
    def __init__(__self__, *,
                 rbacs: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacResult'],
                 security_profile_id: Optional[str] = None):
        pulumi.set(__self__, "rbacs", rbacs)
        if security_profile_id is not None:
            pulumi.set(__self__, "security_profile_id", security_profile_id)

    @property
    @pulumi.getter
    def rbacs(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacResult']:
        return pulumi.get(self, "rbacs")

    @property
    @pulumi.getter(name="securityProfileId")
    def security_profile_id(self) -> Optional[str]:
        return pulumi.get(self, "security_profile_id")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionRbacResult(dict):
    def __init__(__self__, *,
                 action: str,
                 principals: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalResult']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "principals", principals)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def principals(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalResult']:
        return pulumi.get(self, "principals")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionRbacPrincipalResult(dict):
    def __init__(__self__, *,
                 and_principals: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalResult']):
        pulumi.set(__self__, "and_principals", and_principals)

    @property
    @pulumi.getter(name="andPrincipals")
    def and_principals(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalResult']:
        return pulumi.get(self, "and_principals")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalResult(dict):
    def __init__(__self__, *,
                 any: bool,
                 headers: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderResult'],
                 remote_ip: str):
        pulumi.set(__self__, "any", any)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "remote_ip", remote_ip)

    @property
    @pulumi.getter
    def any(self) -> bool:
        return pulumi.get(self, "any")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="remoteIp")
    def remote_ip(self) -> str:
        return pulumi.get(self, "remote_ip")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetAlbVirtualHostRouteRouteOptionRbacPrincipalAndPrincipalHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact: str,
                 prefix: str,
                 regex: str):
        pulumi.set(__self__, "exact", exact)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "regex", regex)

    @property
    @pulumi.getter
    def exact(self) -> str:
        return pulumi.get(self, "exact")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def regex(self) -> str:
        return pulumi.get(self, "regex")


@pulumi.output_type
class GetApiGatewayCanaryResult(dict):
    def __init__(__self__, *,
                 variables: Optional[Mapping[str, str]] = None,
                 weight: Optional[int] = None):
        if variables is not None:
            pulumi.set(__self__, "variables", variables)
        if weight is not None:
            pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def variables(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "variables")

    @property
    @pulumi.getter
    def weight(self) -> Optional[int]:
        return pulumi.get(self, "weight")


@pulumi.output_type
class GetApiGatewayConnectivityResult(dict):
    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class GetApiGatewayCustomDomainResult(dict):
    def __init__(__self__, *,
                 certificate_id: str,
                 domain_id: str,
                 fqdn: str):
        pulumi.set(__self__, "certificate_id", certificate_id)
        pulumi.set(__self__, "domain_id", domain_id)
        pulumi.set(__self__, "fqdn", fqdn)

    @property
    @pulumi.getter(name="certificateId")
    def certificate_id(self) -> str:
        return pulumi.get(self, "certificate_id")

    @property
    @pulumi.getter(name="domainId")
    def domain_id(self) -> str:
        return pulumi.get(self, "domain_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class GetApiGatewayLogOptionResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 folder_id: str,
                 log_group_id: str,
                 min_level: str):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> str:
        return pulumi.get(self, "min_level")


@pulumi.output_type
class GetAuditTrailsTrailDataStreamDestinationResult(dict):
    def __init__(__self__, *,
                 database_id: str,
                 stream_name: str):
        pulumi.set(__self__, "database_id", database_id)
        pulumi.set(__self__, "stream_name", stream_name)

    @property
    @pulumi.getter(name="databaseId")
    def database_id(self) -> str:
        return pulumi.get(self, "database_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")


@pulumi.output_type
class GetAuditTrailsTrailFilterResult(dict):
    def __init__(__self__, *,
                 event_filters: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterResult'],
                 path_filters: Sequence['outputs.GetAuditTrailsTrailFilterPathFilterResult']):
        pulumi.set(__self__, "event_filters", event_filters)
        pulumi.set(__self__, "path_filters", path_filters)

    @property
    @pulumi.getter(name="eventFilters")
    def event_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterResult']:
        return pulumi.get(self, "event_filters")

    @property
    @pulumi.getter(name="pathFilters")
    def path_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterPathFilterResult']:
        return pulumi.get(self, "path_filters")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterResult(dict):
    def __init__(__self__, *,
                 categories: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterCategoryResult'],
                 path_filters: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterResult'],
                 service: str):
        pulumi.set(__self__, "categories", categories)
        pulumi.set(__self__, "path_filters", path_filters)
        pulumi.set(__self__, "service", service)

    @property
    @pulumi.getter
    def categories(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterCategoryResult']:
        return pulumi.get(self, "categories")

    @property
    @pulumi.getter(name="pathFilters")
    def path_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterResult']:
        return pulumi.get(self, "path_filters")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterCategoryResult(dict):
    def __init__(__self__, *,
                 plane: str,
                 type: str):
        pulumi.set(__self__, "plane", plane)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def plane(self) -> str:
        return pulumi.get(self, "plane")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterPathFilterResult(dict):
    def __init__(__self__, *,
                 any_filters: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterAnyFilterResult'],
                 some_filters: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterResult']):
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "some_filters", some_filters)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterAnyFilterResult']:
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="someFilters")
    def some_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterResult']:
        return pulumi.get(self, "some_filters")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterPathFilterAnyFilterResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterResult(dict):
    def __init__(__self__, *,
                 any_filters: Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilterResult'],
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilterResult']:
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailFilterEventFilterPathFilterSomeFilterAnyFilterResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailFilterPathFilterResult(dict):
    def __init__(__self__, *,
                 any_filters: Sequence['outputs.GetAuditTrailsTrailFilterPathFilterAnyFilterResult'],
                 some_filters: Sequence['outputs.GetAuditTrailsTrailFilterPathFilterSomeFilterResult']):
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "some_filters", some_filters)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterPathFilterAnyFilterResult']:
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="someFilters")
    def some_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterPathFilterSomeFilterResult']:
        return pulumi.get(self, "some_filters")


@pulumi.output_type
class GetAuditTrailsTrailFilterPathFilterAnyFilterResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailFilterPathFilterSomeFilterResult(dict):
    def __init__(__self__, *,
                 any_filters: Sequence['outputs.GetAuditTrailsTrailFilterPathFilterSomeFilterAnyFilterResult'],
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "any_filters", any_filters)
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="anyFilters")
    def any_filters(self) -> Sequence['outputs.GetAuditTrailsTrailFilterPathFilterSomeFilterAnyFilterResult']:
        return pulumi.get(self, "any_filters")

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailFilterPathFilterSomeFilterAnyFilterResult(dict):
    def __init__(__self__, *,
                 resource_id: str,
                 resource_type: str):
        pulumi.set(__self__, "resource_id", resource_id)
        pulumi.set(__self__, "resource_type", resource_type)

    @property
    @pulumi.getter(name="resourceId")
    def resource_id(self) -> str:
        return pulumi.get(self, "resource_id")

    @property
    @pulumi.getter(name="resourceType")
    def resource_type(self) -> str:
        return pulumi.get(self, "resource_type")


@pulumi.output_type
class GetAuditTrailsTrailLoggingDestinationResult(dict):
    def __init__(__self__, *,
                 log_group_id: str):
        pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class GetAuditTrailsTrailStorageDestinationResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 object_prefix: str):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "object_prefix", object_prefix)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="objectPrefix")
    def object_prefix(self) -> str:
        return pulumi.get(self, "object_prefix")


@pulumi.output_type
class GetBackupPolicyReattemptResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: str,
                 max_attempts: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        return pulumi.get(self, "max_attempts")


@pulumi.output_type
class GetBackupPolicyRetentionResult(dict):
    def __init__(__self__, *,
                 after_backup: bool,
                 rules: Sequence['outputs.GetBackupPolicyRetentionRuleResult']):
        pulumi.set(__self__, "after_backup", after_backup)
        pulumi.set(__self__, "rules", rules)

    @property
    @pulumi.getter(name="afterBackup")
    def after_backup(self) -> bool:
        return pulumi.get(self, "after_backup")

    @property
    @pulumi.getter
    def rules(self) -> Sequence['outputs.GetBackupPolicyRetentionRuleResult']:
        return pulumi.get(self, "rules")


@pulumi.output_type
class GetBackupPolicyRetentionRuleResult(dict):
    def __init__(__self__, *,
                 max_age: Optional[str] = None,
                 max_count: Optional[int] = None,
                 repeat_periods: Optional[Sequence[str]] = None):
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if max_count is not None:
            pulumi.set(__self__, "max_count", max_count)
        if repeat_periods is not None:
            pulumi.set(__self__, "repeat_periods", repeat_periods)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[str]:
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter(name="maxCount")
    def max_count(self) -> Optional[int]:
        return pulumi.get(self, "max_count")

    @property
    @pulumi.getter(name="repeatPeriods")
    def repeat_periods(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "repeat_periods")


@pulumi.output_type
class GetBackupPolicySchedulingResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 max_parallel_backups: int,
                 random_max_delay: str,
                 scheme: str,
                 weekly_backup_day: str,
                 backup_sets: Optional[Sequence['outputs.GetBackupPolicySchedulingBackupSetResult']] = None):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "max_parallel_backups", max_parallel_backups)
        pulumi.set(__self__, "random_max_delay", random_max_delay)
        pulumi.set(__self__, "scheme", scheme)
        pulumi.set(__self__, "weekly_backup_day", weekly_backup_day)
        if backup_sets is not None:
            pulumi.set(__self__, "backup_sets", backup_sets)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="maxParallelBackups")
    def max_parallel_backups(self) -> int:
        return pulumi.get(self, "max_parallel_backups")

    @property
    @pulumi.getter(name="randomMaxDelay")
    def random_max_delay(self) -> str:
        return pulumi.get(self, "random_max_delay")

    @property
    @pulumi.getter
    def scheme(self) -> str:
        return pulumi.get(self, "scheme")

    @property
    @pulumi.getter(name="weeklyBackupDay")
    def weekly_backup_day(self) -> str:
        return pulumi.get(self, "weekly_backup_day")

    @property
    @pulumi.getter(name="backupSets")
    def backup_sets(self) -> Optional[Sequence['outputs.GetBackupPolicySchedulingBackupSetResult']]:
        return pulumi.get(self, "backup_sets")


@pulumi.output_type
class GetBackupPolicySchedulingBackupSetResult(dict):
    def __init__(__self__, *,
                 execute_by_interval: int,
                 execute_by_times: Sequence['outputs.GetBackupPolicySchedulingBackupSetExecuteByTimeResult'],
                 type: str):
        pulumi.set(__self__, "execute_by_interval", execute_by_interval)
        pulumi.set(__self__, "execute_by_times", execute_by_times)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="executeByInterval")
    def execute_by_interval(self) -> int:
        return pulumi.get(self, "execute_by_interval")

    @property
    @pulumi.getter(name="executeByTimes")
    def execute_by_times(self) -> Sequence['outputs.GetBackupPolicySchedulingBackupSetExecuteByTimeResult']:
        return pulumi.get(self, "execute_by_times")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetBackupPolicySchedulingBackupSetExecuteByTimeResult(dict):
    def __init__(__self__, *,
                 include_last_day_of_month: bool,
                 monthdays: Sequence[int],
                 months: Sequence[int],
                 repeat_ats: Sequence[str],
                 repeat_every: str,
                 type: str,
                 weekdays: Sequence[str]):
        pulumi.set(__self__, "include_last_day_of_month", include_last_day_of_month)
        pulumi.set(__self__, "monthdays", monthdays)
        pulumi.set(__self__, "months", months)
        pulumi.set(__self__, "repeat_ats", repeat_ats)
        pulumi.set(__self__, "repeat_every", repeat_every)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "weekdays", weekdays)

    @property
    @pulumi.getter(name="includeLastDayOfMonth")
    def include_last_day_of_month(self) -> bool:
        return pulumi.get(self, "include_last_day_of_month")

    @property
    @pulumi.getter
    def monthdays(self) -> Sequence[int]:
        return pulumi.get(self, "monthdays")

    @property
    @pulumi.getter
    def months(self) -> Sequence[int]:
        return pulumi.get(self, "months")

    @property
    @pulumi.getter(name="repeatAts")
    def repeat_ats(self) -> Sequence[str]:
        return pulumi.get(self, "repeat_ats")

    @property
    @pulumi.getter(name="repeatEvery")
    def repeat_every(self) -> str:
        return pulumi.get(self, "repeat_every")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def weekdays(self) -> Sequence[str]:
        return pulumi.get(self, "weekdays")


@pulumi.output_type
class GetBackupPolicyVmSnapshotReattemptResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 interval: str,
                 max_attempts: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "max_attempts", max_attempts)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter
    def interval(self) -> str:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="maxAttempts")
    def max_attempts(self) -> int:
        return pulumi.get(self, "max_attempts")


@pulumi.output_type
class GetCdnOriginGroupOriginResult(dict):
    def __init__(__self__, *,
                 origin_group_id: int,
                 source: str,
                 backup: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        pulumi.set(__self__, "origin_group_id", origin_group_id)
        pulumi.set(__self__, "source", source)
        if backup is not None:
            pulumi.set(__self__, "backup", backup)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="originGroupId")
    def origin_group_id(self) -> int:
        return pulumi.get(self, "origin_group_id")

    @property
    @pulumi.getter
    def source(self) -> str:
        return pulumi.get(self, "source")

    @property
    @pulumi.getter
    def backup(self) -> Optional[bool]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetCdnResourceOptionsResult(dict):
    def __init__(__self__, *,
                 allowed_http_methods: Sequence[str],
                 browser_cache_settings: int,
                 cache_http_headers: Sequence[str],
                 cors: Sequence[str],
                 custom_host_header: str,
                 custom_server_name: str,
                 disable_cache: bool,
                 disable_proxy_force_ranges: bool,
                 edge_cache_settings: int,
                 enable_ip_url_signing: bool,
                 fetched_compressed: bool,
                 forward_host_header: bool,
                 gzip_on: bool,
                 ignore_cookie: bool,
                 ignore_query_params: bool,
                 ip_address_acl: 'outputs.GetCdnResourceOptionsIpAddressAclResult',
                 proxy_cache_methods_set: bool,
                 query_params_blacklists: Sequence[str],
                 query_params_whitelists: Sequence[str],
                 redirect_http_to_https: bool,
                 redirect_https_to_http: bool,
                 secure_key: str,
                 slice: bool,
                 static_request_headers: Mapping[str, str],
                 static_response_headers: Mapping[str, str]):
        pulumi.set(__self__, "allowed_http_methods", allowed_http_methods)
        pulumi.set(__self__, "browser_cache_settings", browser_cache_settings)
        pulumi.set(__self__, "cache_http_headers", cache_http_headers)
        pulumi.set(__self__, "cors", cors)
        pulumi.set(__self__, "custom_host_header", custom_host_header)
        pulumi.set(__self__, "custom_server_name", custom_server_name)
        pulumi.set(__self__, "disable_cache", disable_cache)
        pulumi.set(__self__, "disable_proxy_force_ranges", disable_proxy_force_ranges)
        pulumi.set(__self__, "edge_cache_settings", edge_cache_settings)
        pulumi.set(__self__, "enable_ip_url_signing", enable_ip_url_signing)
        pulumi.set(__self__, "fetched_compressed", fetched_compressed)
        pulumi.set(__self__, "forward_host_header", forward_host_header)
        pulumi.set(__self__, "gzip_on", gzip_on)
        pulumi.set(__self__, "ignore_cookie", ignore_cookie)
        pulumi.set(__self__, "ignore_query_params", ignore_query_params)
        pulumi.set(__self__, "ip_address_acl", ip_address_acl)
        pulumi.set(__self__, "proxy_cache_methods_set", proxy_cache_methods_set)
        pulumi.set(__self__, "query_params_blacklists", query_params_blacklists)
        pulumi.set(__self__, "query_params_whitelists", query_params_whitelists)
        pulumi.set(__self__, "redirect_http_to_https", redirect_http_to_https)
        pulumi.set(__self__, "redirect_https_to_http", redirect_https_to_http)
        pulumi.set(__self__, "secure_key", secure_key)
        pulumi.set(__self__, "slice", slice)
        pulumi.set(__self__, "static_request_headers", static_request_headers)
        pulumi.set(__self__, "static_response_headers", static_response_headers)

    @property
    @pulumi.getter(name="allowedHttpMethods")
    def allowed_http_methods(self) -> Sequence[str]:
        return pulumi.get(self, "allowed_http_methods")

    @property
    @pulumi.getter(name="browserCacheSettings")
    def browser_cache_settings(self) -> int:
        return pulumi.get(self, "browser_cache_settings")

    @property
    @pulumi.getter(name="cacheHttpHeaders")
    def cache_http_headers(self) -> Sequence[str]:
        return pulumi.get(self, "cache_http_headers")

    @property
    @pulumi.getter
    def cors(self) -> Sequence[str]:
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="customHostHeader")
    def custom_host_header(self) -> str:
        return pulumi.get(self, "custom_host_header")

    @property
    @pulumi.getter(name="customServerName")
    def custom_server_name(self) -> str:
        return pulumi.get(self, "custom_server_name")

    @property
    @pulumi.getter(name="disableCache")
    def disable_cache(self) -> bool:
        return pulumi.get(self, "disable_cache")

    @property
    @pulumi.getter(name="disableProxyForceRanges")
    def disable_proxy_force_ranges(self) -> bool:
        return pulumi.get(self, "disable_proxy_force_ranges")

    @property
    @pulumi.getter(name="edgeCacheSettings")
    def edge_cache_settings(self) -> int:
        return pulumi.get(self, "edge_cache_settings")

    @property
    @pulumi.getter(name="enableIpUrlSigning")
    def enable_ip_url_signing(self) -> bool:
        return pulumi.get(self, "enable_ip_url_signing")

    @property
    @pulumi.getter(name="fetchedCompressed")
    def fetched_compressed(self) -> bool:
        return pulumi.get(self, "fetched_compressed")

    @property
    @pulumi.getter(name="forwardHostHeader")
    def forward_host_header(self) -> bool:
        return pulumi.get(self, "forward_host_header")

    @property
    @pulumi.getter(name="gzipOn")
    def gzip_on(self) -> bool:
        return pulumi.get(self, "gzip_on")

    @property
    @pulumi.getter(name="ignoreCookie")
    def ignore_cookie(self) -> bool:
        return pulumi.get(self, "ignore_cookie")

    @property
    @pulumi.getter(name="ignoreQueryParams")
    def ignore_query_params(self) -> bool:
        return pulumi.get(self, "ignore_query_params")

    @property
    @pulumi.getter(name="ipAddressAcl")
    def ip_address_acl(self) -> 'outputs.GetCdnResourceOptionsIpAddressAclResult':
        return pulumi.get(self, "ip_address_acl")

    @property
    @pulumi.getter(name="proxyCacheMethodsSet")
    def proxy_cache_methods_set(self) -> bool:
        return pulumi.get(self, "proxy_cache_methods_set")

    @property
    @pulumi.getter(name="queryParamsBlacklists")
    def query_params_blacklists(self) -> Sequence[str]:
        return pulumi.get(self, "query_params_blacklists")

    @property
    @pulumi.getter(name="queryParamsWhitelists")
    def query_params_whitelists(self) -> Sequence[str]:
        return pulumi.get(self, "query_params_whitelists")

    @property
    @pulumi.getter(name="redirectHttpToHttps")
    def redirect_http_to_https(self) -> bool:
        return pulumi.get(self, "redirect_http_to_https")

    @property
    @pulumi.getter(name="redirectHttpsToHttp")
    def redirect_https_to_http(self) -> bool:
        return pulumi.get(self, "redirect_https_to_http")

    @property
    @pulumi.getter(name="secureKey")
    def secure_key(self) -> str:
        return pulumi.get(self, "secure_key")

    @property
    @pulumi.getter
    def slice(self) -> bool:
        return pulumi.get(self, "slice")

    @property
    @pulumi.getter(name="staticRequestHeaders")
    def static_request_headers(self) -> Mapping[str, str]:
        return pulumi.get(self, "static_request_headers")

    @property
    @pulumi.getter(name="staticResponseHeaders")
    def static_response_headers(self) -> Mapping[str, str]:
        return pulumi.get(self, "static_response_headers")


@pulumi.output_type
class GetCdnResourceOptionsIpAddressAclResult(dict):
    def __init__(__self__, *,
                 excepted_values: Sequence[str],
                 policy_type: str):
        pulumi.set(__self__, "excepted_values", excepted_values)
        pulumi.set(__self__, "policy_type", policy_type)

    @property
    @pulumi.getter(name="exceptedValues")
    def excepted_values(self) -> Sequence[str]:
        return pulumi.get(self, "excepted_values")

    @property
    @pulumi.getter(name="policyType")
    def policy_type(self) -> str:
        return pulumi.get(self, "policy_type")


@pulumi.output_type
class GetCdnResourceSslCertificateResult(dict):
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 certificate_manager_id: Optional[str] = None):
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if certificate_manager_id is not None:
            pulumi.set(__self__, "certificate_manager_id", certificate_manager_id)

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="certificateManagerId")
    def certificate_manager_id(self) -> Optional[str]:
        return pulumi.get(self, "certificate_manager_id")


@pulumi.output_type
class GetCmCertificateChallengeResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 dns_name: str,
                 dns_type: str,
                 dns_value: str,
                 domain: str,
                 http_content: str,
                 http_url: str,
                 message: str,
                 type: str,
                 updated_at: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "dns_name", dns_name)
        pulumi.set(__self__, "dns_type", dns_type)
        pulumi.set(__self__, "dns_value", dns_value)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "http_content", http_content)
        pulumi.set(__self__, "http_url", http_url)
        pulumi.set(__self__, "message", message)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "updated_at", updated_at)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter(name="dnsName")
    def dns_name(self) -> str:
        return pulumi.get(self, "dns_name")

    @property
    @pulumi.getter(name="dnsType")
    def dns_type(self) -> str:
        return pulumi.get(self, "dns_type")

    @property
    @pulumi.getter(name="dnsValue")
    def dns_value(self) -> str:
        return pulumi.get(self, "dns_value")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="httpContent")
    def http_content(self) -> str:
        return pulumi.get(self, "http_content")

    @property
    @pulumi.getter(name="httpUrl")
    def http_url(self) -> str:
        return pulumi.get(self, "http_url")

    @property
    @pulumi.getter
    def message(self) -> str:
        return pulumi.get(self, "message")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="updatedAt")
    def updated_at(self) -> str:
        return pulumi.get(self, "updated_at")


@pulumi.output_type
class GetComputeDiskDiskPlacementPolicyResult(dict):
    def __init__(__self__, *,
                 disk_placement_group_id: str):
        pulumi.set(__self__, "disk_placement_group_id", disk_placement_group_id)

    @property
    @pulumi.getter(name="diskPlacementGroupId")
    def disk_placement_group_id(self) -> str:
        return pulumi.get(self, "disk_placement_group_id")


@pulumi.output_type
class GetComputeInstanceBootDiskResult(dict):
    def __init__(__self__, *,
                 auto_delete: bool,
                 device_name: str,
                 disk_id: str,
                 initialize_params: Sequence['outputs.GetComputeInstanceBootDiskInitializeParamResult'],
                 mode: str):
        pulumi.set(__self__, "auto_delete", auto_delete)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "initialize_params", initialize_params)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> bool:
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Sequence['outputs.GetComputeInstanceBootDiskInitializeParamResult']:
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetComputeInstanceBootDiskInitializeParamResult(dict):
    def __init__(__self__, *,
                 block_size: int,
                 description: str,
                 image_id: str,
                 name: str,
                 size: int,
                 snapshot_id: str,
                 type: str):
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetComputeInstanceFilesystemResult(dict):
    def __init__(__self__, *,
                 device_name: str,
                 filesystem_id: str,
                 mode: str):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "filesystem_id", filesystem_id)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="filesystemId")
    def filesystem_id(self) -> str:
        return pulumi.get(self, "filesystem_id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetComputeInstanceGroupAllocationPolicyResult(dict):
    def __init__(__self__, *,
                 instance_tags_pools: Sequence['outputs.GetComputeInstanceGroupAllocationPolicyInstanceTagsPoolResult'],
                 zones: Sequence[str]):
        pulumi.set(__self__, "instance_tags_pools", instance_tags_pools)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter(name="instanceTagsPools")
    def instance_tags_pools(self) -> Sequence['outputs.GetComputeInstanceGroupAllocationPolicyInstanceTagsPoolResult']:
        return pulumi.get(self, "instance_tags_pools")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetComputeInstanceGroupAllocationPolicyInstanceTagsPoolResult(dict):
    def __init__(__self__, *,
                 tags: Sequence[str],
                 zone: str):
        pulumi.set(__self__, "tags", tags)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def tags(self) -> Sequence[str]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetComputeInstanceGroupApplicationBalancerStateResult(dict):
    def __init__(__self__, *,
                 status_message: str,
                 target_group_id: str):
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")


@pulumi.output_type
class GetComputeInstanceGroupApplicationLoadBalancerResult(dict):
    def __init__(__self__, *,
                 ignore_health_checks: bool,
                 max_opening_traffic_duration: int,
                 status_message: str,
                 target_group_description: str,
                 target_group_id: str,
                 target_group_labels: Mapping[str, str],
                 target_group_name: str):
        pulumi.set(__self__, "ignore_health_checks", ignore_health_checks)
        pulumi.set(__self__, "max_opening_traffic_duration", max_opening_traffic_duration)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "target_group_description", target_group_description)
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "target_group_labels", target_group_labels)
        pulumi.set(__self__, "target_group_name", target_group_name)

    @property
    @pulumi.getter(name="ignoreHealthChecks")
    def ignore_health_checks(self) -> bool:
        return pulumi.get(self, "ignore_health_checks")

    @property
    @pulumi.getter(name="maxOpeningTrafficDuration")
    def max_opening_traffic_duration(self) -> int:
        return pulumi.get(self, "max_opening_traffic_duration")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupDescription")
    def target_group_description(self) -> str:
        return pulumi.get(self, "target_group_description")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupLabels")
    def target_group_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "target_group_labels")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> str:
        return pulumi.get(self, "target_group_name")


@pulumi.output_type
class GetComputeInstanceGroupDeployPolicyResult(dict):
    def __init__(__self__, *,
                 max_creating: int,
                 max_deleting: int,
                 max_expansion: int,
                 max_unavailable: int,
                 startup_duration: int,
                 strategy: str):
        pulumi.set(__self__, "max_creating", max_creating)
        pulumi.set(__self__, "max_deleting", max_deleting)
        pulumi.set(__self__, "max_expansion", max_expansion)
        pulumi.set(__self__, "max_unavailable", max_unavailable)
        pulumi.set(__self__, "startup_duration", startup_duration)
        pulumi.set(__self__, "strategy", strategy)

    @property
    @pulumi.getter(name="maxCreating")
    def max_creating(self) -> int:
        return pulumi.get(self, "max_creating")

    @property
    @pulumi.getter(name="maxDeleting")
    def max_deleting(self) -> int:
        return pulumi.get(self, "max_deleting")

    @property
    @pulumi.getter(name="maxExpansion")
    def max_expansion(self) -> int:
        return pulumi.get(self, "max_expansion")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> int:
        return pulumi.get(self, "max_unavailable")

    @property
    @pulumi.getter(name="startupDuration")
    def startup_duration(self) -> int:
        return pulumi.get(self, "startup_duration")

    @property
    @pulumi.getter
    def strategy(self) -> str:
        return pulumi.get(self, "strategy")


@pulumi.output_type
class GetComputeInstanceGroupHealthCheckResult(dict):
    def __init__(__self__, *,
                 healthy_threshold: int,
                 http_options: Sequence['outputs.GetComputeInstanceGroupHealthCheckHttpOptionResult'],
                 interval: int,
                 tcp_options: Sequence['outputs.GetComputeInstanceGroupHealthCheckTcpOptionResult'],
                 timeout: int,
                 unhealthy_threshold: int):
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "http_options", http_options)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "tcp_options", tcp_options)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpOptions")
    def http_options(self) -> Sequence['outputs.GetComputeInstanceGroupHealthCheckHttpOptionResult']:
        return pulumi.get(self, "http_options")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Sequence['outputs.GetComputeInstanceGroupHealthCheckTcpOptionResult']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetComputeInstanceGroupHealthCheckHttpOptionResult(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetComputeInstanceGroupHealthCheckTcpOptionResult(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetComputeInstanceGroupInstanceResult(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 instance_id: str,
                 instance_tag: str,
                 name: str,
                 network_interfaces: Sequence['outputs.GetComputeInstanceGroupInstanceNetworkInterfaceResult'],
                 status: str,
                 status_changed_at: str,
                 status_message: str,
                 zone_id: str):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "instance_id", instance_id)
        pulumi.set(__self__, "instance_tag", instance_tag)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "status_changed_at", status_changed_at)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="instanceId")
    def instance_id(self) -> str:
        return pulumi.get(self, "instance_id")

    @property
    @pulumi.getter(name="instanceTag")
    def instance_tag(self) -> str:
        return pulumi.get(self, "instance_tag")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="statusChangedAt")
    def status_changed_at(self) -> str:
        return pulumi.get(self, "status_changed_at")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetComputeInstanceGroupInstanceNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 index: int,
                 ip_address: str,
                 ipv4: bool,
                 ipv6: bool,
                 ipv6_address: str,
                 mac_address: str,
                 nat: bool,
                 nat_ip_address: str,
                 nat_ip_version: str,
                 subnet_id: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> bool:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> str:
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> str:
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateResult(dict):
    def __init__(__self__, *,
                 boot_disks: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateBootDiskResult'],
                 description: str,
                 hostname: str,
                 labels: Mapping[str, str],
                 metadata: Mapping[str, str],
                 metadata_options: 'outputs.GetComputeInstanceGroupInstanceTemplateMetadataOptionsResult',
                 name: str,
                 network_interfaces: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult'],
                 network_settings: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkSettingResult'],
                 platform_id: str,
                 resources: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateResourceResult'],
                 scheduling_policies: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSchedulingPolicyResult'],
                 secondary_disks: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSecondaryDiskResult'],
                 service_account_id: str,
                 filesystems: Optional[Sequence['outputs.GetComputeInstanceGroupInstanceTemplateFilesystemResult']] = None,
                 placement_policy: Optional['outputs.GetComputeInstanceGroupInstanceTemplatePlacementPolicyResult'] = None):
        pulumi.set(__self__, "boot_disks", boot_disks)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hostname", hostname)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "metadata_options", metadata_options)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "network_settings", network_settings)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "scheduling_policies", scheduling_policies)
        pulumi.set(__self__, "secondary_disks", secondary_disks)
        pulumi.set(__self__, "service_account_id", service_account_id)
        if filesystems is not None:
            pulumi.set(__self__, "filesystems", filesystems)
        if placement_policy is not None:
            pulumi.set(__self__, "placement_policy", placement_policy)

    @property
    @pulumi.getter(name="bootDisks")
    def boot_disks(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateBootDiskResult']:
        return pulumi.get(self, "boot_disks")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hostname(self) -> str:
        return pulumi.get(self, "hostname")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="metadataOptions")
    def metadata_options(self) -> 'outputs.GetComputeInstanceGroupInstanceTemplateMetadataOptionsResult':
        return pulumi.get(self, "metadata_options")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="networkSettings")
    def network_settings(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkSettingResult']:
        return pulumi.get(self, "network_settings")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="schedulingPolicies")
    def scheduling_policies(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSchedulingPolicyResult']:
        return pulumi.get(self, "scheduling_policies")

    @property
    @pulumi.getter(name="secondaryDisks")
    def secondary_disks(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSecondaryDiskResult']:
        return pulumi.get(self, "secondary_disks")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def filesystems(self) -> Optional[Sequence['outputs.GetComputeInstanceGroupInstanceTemplateFilesystemResult']]:
        return pulumi.get(self, "filesystems")

    @property
    @pulumi.getter(name="placementPolicy")
    def placement_policy(self) -> Optional['outputs.GetComputeInstanceGroupInstanceTemplatePlacementPolicyResult']:
        return pulumi.get(self, "placement_policy")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateBootDiskResult(dict):
    def __init__(__self__, *,
                 device_name: str,
                 disk_id: str,
                 initialize_params: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateBootDiskInitializeParamResult'],
                 mode: str,
                 name: str):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "initialize_params", initialize_params)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateBootDiskInitializeParamResult']:
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateBootDiskInitializeParamResult(dict):
    def __init__(__self__, *,
                 description: str,
                 image_id: str,
                 size: int,
                 snapshot_id: str,
                 type: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateFilesystemResult(dict):
    def __init__(__self__, *,
                 device_name: str,
                 filesystem_id: str,
                 mode: str):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "filesystem_id", filesystem_id)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="filesystemId")
    def filesystem_id(self) -> str:
        return pulumi.get(self, "filesystem_id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateMetadataOptionsResult(dict):
    def __init__(__self__, *,
                 aws_v1_http_endpoint: int,
                 aws_v1_http_token: int,
                 gce_http_endpoint: int,
                 gce_http_token: int):
        pulumi.set(__self__, "aws_v1_http_endpoint", aws_v1_http_endpoint)
        pulumi.set(__self__, "aws_v1_http_token", aws_v1_http_token)
        pulumi.set(__self__, "gce_http_endpoint", gce_http_endpoint)
        pulumi.set(__self__, "gce_http_token", gce_http_token)

    @property
    @pulumi.getter(name="awsV1HttpEndpoint")
    def aws_v1_http_endpoint(self) -> int:
        return pulumi.get(self, "aws_v1_http_endpoint")

    @property
    @pulumi.getter(name="awsV1HttpToken")
    def aws_v1_http_token(self) -> int:
        return pulumi.get(self, "aws_v1_http_token")

    @property
    @pulumi.getter(name="gceHttpEndpoint")
    def gce_http_endpoint(self) -> int:
        return pulumi.get(self, "gce_http_endpoint")

    @property
    @pulumi.getter(name="gceHttpToken")
    def gce_http_token(self) -> int:
        return pulumi.get(self, "gce_http_token")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 dns_records: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult'],
                 ip_address: str,
                 ipv4: bool,
                 ipv6: bool,
                 ipv6_address: str,
                 ipv6_dns_records: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult'],
                 nat: bool,
                 nat_dns_records: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult'],
                 nat_ip_address: str,
                 network_id: str,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str]):
        pulumi.set(__self__, "dns_records", dns_records)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_dns_records", nat_dns_records)
        pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        pulumi.set(__self__, "network_id", network_id)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult']:
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> bool:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult']:
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natDnsRecords")
    def nat_dns_records(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult']:
        return pulumi.get(self, "nat_dns_records")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> str:
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateNetworkInterfaceDnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateNetworkInterfaceNatDnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateNetworkSettingResult(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplatePlacementPolicyResult(dict):
    def __init__(__self__, *,
                 placement_group_id: str):
        pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> str:
        return pulumi.get(self, "placement_group_id")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateResourceResult(dict):
    def __init__(__self__, *,
                 core_fraction: int,
                 cores: int,
                 gpus: int,
                 memory: float):
        pulumi.set(__self__, "core_fraction", core_fraction)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "gpus", gpus)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> int:
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> int:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def gpus(self) -> int:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> float:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateSchedulingPolicyResult(dict):
    def __init__(__self__, *,
                 preemptible: bool):
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> bool:
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateSecondaryDiskResult(dict):
    def __init__(__self__, *,
                 device_name: str,
                 disk_id: str,
                 initialize_params: Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParamResult'],
                 mode: str,
                 name: str):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "initialize_params", initialize_params)
        pulumi.set(__self__, "mode", mode)
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Sequence['outputs.GetComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParamResult']:
        return pulumi.get(self, "initialize_params")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetComputeInstanceGroupInstanceTemplateSecondaryDiskInitializeParamResult(dict):
    def __init__(__self__, *,
                 description: str,
                 image_id: str,
                 size: int,
                 snapshot_id: str,
                 type: str):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "image_id", image_id)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="imageId")
    def image_id(self) -> str:
        return pulumi.get(self, "image_id")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetComputeInstanceGroupLoadBalancerResult(dict):
    def __init__(__self__, *,
                 ignore_health_checks: bool,
                 max_opening_traffic_duration: int,
                 status_message: str,
                 target_group_description: str,
                 target_group_id: str,
                 target_group_labels: Mapping[str, str],
                 target_group_name: str):
        pulumi.set(__self__, "ignore_health_checks", ignore_health_checks)
        pulumi.set(__self__, "max_opening_traffic_duration", max_opening_traffic_duration)
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "target_group_description", target_group_description)
        pulumi.set(__self__, "target_group_id", target_group_id)
        pulumi.set(__self__, "target_group_labels", target_group_labels)
        pulumi.set(__self__, "target_group_name", target_group_name)

    @property
    @pulumi.getter(name="ignoreHealthChecks")
    def ignore_health_checks(self) -> bool:
        return pulumi.get(self, "ignore_health_checks")

    @property
    @pulumi.getter(name="maxOpeningTrafficDuration")
    def max_opening_traffic_duration(self) -> int:
        return pulumi.get(self, "max_opening_traffic_duration")

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupDescription")
    def target_group_description(self) -> str:
        return pulumi.get(self, "target_group_description")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")

    @property
    @pulumi.getter(name="targetGroupLabels")
    def target_group_labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "target_group_labels")

    @property
    @pulumi.getter(name="targetGroupName")
    def target_group_name(self) -> str:
        return pulumi.get(self, "target_group_name")


@pulumi.output_type
class GetComputeInstanceGroupLoadBalancerStateResult(dict):
    def __init__(__self__, *,
                 status_message: str,
                 target_group_id: str):
        pulumi.set(__self__, "status_message", status_message)
        pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter(name="statusMessage")
    def status_message(self) -> str:
        return pulumi.get(self, "status_message")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyResult(dict):
    def __init__(__self__, *,
                 auto_scales: Sequence['outputs.GetComputeInstanceGroupScalePolicyAutoScaleResult'],
                 fixed_scales: Sequence['outputs.GetComputeInstanceGroupScalePolicyFixedScaleResult'],
                 test_auto_scales: Sequence['outputs.GetComputeInstanceGroupScalePolicyTestAutoScaleResult']):
        pulumi.set(__self__, "auto_scales", auto_scales)
        pulumi.set(__self__, "fixed_scales", fixed_scales)
        pulumi.set(__self__, "test_auto_scales", test_auto_scales)

    @property
    @pulumi.getter(name="autoScales")
    def auto_scales(self) -> Sequence['outputs.GetComputeInstanceGroupScalePolicyAutoScaleResult']:
        return pulumi.get(self, "auto_scales")

    @property
    @pulumi.getter(name="fixedScales")
    def fixed_scales(self) -> Sequence['outputs.GetComputeInstanceGroupScalePolicyFixedScaleResult']:
        return pulumi.get(self, "fixed_scales")

    @property
    @pulumi.getter(name="testAutoScales")
    def test_auto_scales(self) -> Sequence['outputs.GetComputeInstanceGroupScalePolicyTestAutoScaleResult']:
        return pulumi.get(self, "test_auto_scales")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyAutoScaleResult(dict):
    def __init__(__self__, *,
                 auto_scale_type: str,
                 cpu_utilization_target: float,
                 custom_rules: Sequence['outputs.GetComputeInstanceGroupScalePolicyAutoScaleCustomRuleResult'],
                 initial_size: int,
                 max_size: int,
                 measurement_duration: int,
                 min_zone_size: int,
                 stabilization_duration: int,
                 warmup_duration: int):
        pulumi.set(__self__, "auto_scale_type", auto_scale_type)
        pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        pulumi.set(__self__, "custom_rules", custom_rules)
        pulumi.set(__self__, "initial_size", initial_size)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "measurement_duration", measurement_duration)
        pulumi.set(__self__, "min_zone_size", min_zone_size)
        pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="autoScaleType")
    def auto_scale_type(self) -> str:
        return pulumi.get(self, "auto_scale_type")

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> float:
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="customRules")
    def custom_rules(self) -> Sequence['outputs.GetComputeInstanceGroupScalePolicyAutoScaleCustomRuleResult']:
        return pulumi.get(self, "custom_rules")

    @property
    @pulumi.getter(name="initialSize")
    def initial_size(self) -> int:
        return pulumi.get(self, "initial_size")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> int:
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter(name="minZoneSize")
    def min_zone_size(self) -> int:
        return pulumi.get(self, "min_zone_size")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> int:
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> int:
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyAutoScaleCustomRuleResult(dict):
    def __init__(__self__, *,
                 folder_id: str,
                 labels: Mapping[str, str],
                 metric_name: str,
                 metric_type: str,
                 rule_type: str,
                 service: str,
                 target: float):
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def target(self) -> float:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyFixedScaleResult(dict):
    def __init__(__self__, *,
                 size: int):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyTestAutoScaleResult(dict):
    def __init__(__self__, *,
                 auto_scale_type: str,
                 cpu_utilization_target: float,
                 custom_rules: Sequence['outputs.GetComputeInstanceGroupScalePolicyTestAutoScaleCustomRuleResult'],
                 initial_size: int,
                 max_size: int,
                 measurement_duration: int,
                 min_zone_size: int,
                 stabilization_duration: int,
                 warmup_duration: int):
        pulumi.set(__self__, "auto_scale_type", auto_scale_type)
        pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        pulumi.set(__self__, "custom_rules", custom_rules)
        pulumi.set(__self__, "initial_size", initial_size)
        pulumi.set(__self__, "max_size", max_size)
        pulumi.set(__self__, "measurement_duration", measurement_duration)
        pulumi.set(__self__, "min_zone_size", min_zone_size)
        pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="autoScaleType")
    def auto_scale_type(self) -> str:
        return pulumi.get(self, "auto_scale_type")

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> float:
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="customRules")
    def custom_rules(self) -> Sequence['outputs.GetComputeInstanceGroupScalePolicyTestAutoScaleCustomRuleResult']:
        return pulumi.get(self, "custom_rules")

    @property
    @pulumi.getter(name="initialSize")
    def initial_size(self) -> int:
        return pulumi.get(self, "initial_size")

    @property
    @pulumi.getter(name="maxSize")
    def max_size(self) -> int:
        return pulumi.get(self, "max_size")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> int:
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter(name="minZoneSize")
    def min_zone_size(self) -> int:
        return pulumi.get(self, "min_zone_size")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> int:
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> int:
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class GetComputeInstanceGroupScalePolicyTestAutoScaleCustomRuleResult(dict):
    def __init__(__self__, *,
                 folder_id: str,
                 labels: Mapping[str, str],
                 metric_name: str,
                 metric_type: str,
                 rule_type: str,
                 service: str,
                 target: float):
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "metric_name", metric_name)
        pulumi.set(__self__, "metric_type", metric_type)
        pulumi.set(__self__, "rule_type", rule_type)
        pulumi.set(__self__, "service", service)
        pulumi.set(__self__, "target", target)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="metricName")
    def metric_name(self) -> str:
        return pulumi.get(self, "metric_name")

    @property
    @pulumi.getter(name="metricType")
    def metric_type(self) -> str:
        return pulumi.get(self, "metric_type")

    @property
    @pulumi.getter(name="ruleType")
    def rule_type(self) -> str:
        return pulumi.get(self, "rule_type")

    @property
    @pulumi.getter
    def service(self) -> str:
        return pulumi.get(self, "service")

    @property
    @pulumi.getter
    def target(self) -> float:
        return pulumi.get(self, "target")


@pulumi.output_type
class GetComputeInstanceLocalDiskResult(dict):
    def __init__(__self__, *,
                 device_name: str,
                 size_bytes: int):
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "size_bytes", size_bytes)

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="sizeBytes")
    def size_bytes(self) -> int:
        return pulumi.get(self, "size_bytes")


@pulumi.output_type
class GetComputeInstanceMetadataOptionsResult(dict):
    def __init__(__self__, *,
                 aws_v1_http_endpoint: int,
                 aws_v1_http_token: int,
                 gce_http_endpoint: int,
                 gce_http_token: int):
        pulumi.set(__self__, "aws_v1_http_endpoint", aws_v1_http_endpoint)
        pulumi.set(__self__, "aws_v1_http_token", aws_v1_http_token)
        pulumi.set(__self__, "gce_http_endpoint", gce_http_endpoint)
        pulumi.set(__self__, "gce_http_token", gce_http_token)

    @property
    @pulumi.getter(name="awsV1HttpEndpoint")
    def aws_v1_http_endpoint(self) -> int:
        return pulumi.get(self, "aws_v1_http_endpoint")

    @property
    @pulumi.getter(name="awsV1HttpToken")
    def aws_v1_http_token(self) -> int:
        return pulumi.get(self, "aws_v1_http_token")

    @property
    @pulumi.getter(name="gceHttpEndpoint")
    def gce_http_endpoint(self) -> int:
        return pulumi.get(self, "gce_http_endpoint")

    @property
    @pulumi.getter(name="gceHttpToken")
    def gce_http_token(self) -> int:
        return pulumi.get(self, "gce_http_token")


@pulumi.output_type
class GetComputeInstanceNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 dns_records: Sequence['outputs.GetComputeInstanceNetworkInterfaceDnsRecordResult'],
                 index: int,
                 ip_address: str,
                 ipv4: bool,
                 ipv6: bool,
                 ipv6_address: str,
                 ipv6_dns_records: Sequence['outputs.GetComputeInstanceNetworkInterfaceIpv6DnsRecordResult'],
                 mac_address: str,
                 nat: bool,
                 nat_dns_records: Sequence['outputs.GetComputeInstanceNetworkInterfaceNatDnsRecordResult'],
                 nat_ip_address: str,
                 nat_ip_version: str,
                 security_group_ids: Sequence[str],
                 subnet_id: str):
        pulumi.set(__self__, "dns_records", dns_records)
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_dns_records", nat_dns_records)
        pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="dnsRecords")
    def dns_records(self) -> Sequence['outputs.GetComputeInstanceNetworkInterfaceDnsRecordResult']:
        return pulumi.get(self, "dns_records")

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> bool:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Sequence['outputs.GetComputeInstanceNetworkInterfaceIpv6DnsRecordResult']:
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natDnsRecords")
    def nat_dns_records(self) -> Sequence['outputs.GetComputeInstanceNetworkInterfaceNatDnsRecordResult']:
        return pulumi.get(self, "nat_dns_records")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> str:
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> str:
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetComputeInstanceNetworkInterfaceDnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstanceNetworkInterfaceIpv6DnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstanceNetworkInterfaceNatDnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetComputeInstancePlacementPolicyResult(dict):
    def __init__(__self__, *,
                 host_affinity_rules: Sequence['outputs.GetComputeInstancePlacementPolicyHostAffinityRuleResult'],
                 placement_group_id: Optional[str] = None,
                 placement_group_partition: Optional[int] = None):
        pulumi.set(__self__, "host_affinity_rules", host_affinity_rules)
        if placement_group_id is not None:
            pulumi.set(__self__, "placement_group_id", placement_group_id)
        if placement_group_partition is not None:
            pulumi.set(__self__, "placement_group_partition", placement_group_partition)

    @property
    @pulumi.getter(name="hostAffinityRules")
    def host_affinity_rules(self) -> Sequence['outputs.GetComputeInstancePlacementPolicyHostAffinityRuleResult']:
        return pulumi.get(self, "host_affinity_rules")

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> Optional[str]:
        return pulumi.get(self, "placement_group_id")

    @property
    @pulumi.getter(name="placementGroupPartition")
    def placement_group_partition(self) -> Optional[int]:
        return pulumi.get(self, "placement_group_partition")


@pulumi.output_type
class GetComputeInstancePlacementPolicyHostAffinityRuleResult(dict):
    def __init__(__self__, *,
                 key: str,
                 op: str,
                 values: Sequence[str]):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "op", op)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def op(self) -> str:
        return pulumi.get(self, "op")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetComputeInstanceResourceResult(dict):
    def __init__(__self__, *,
                 core_fraction: int,
                 cores: int,
                 gpus: int,
                 memory: float):
        pulumi.set(__self__, "core_fraction", core_fraction)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "gpus", gpus)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> int:
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> int:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def gpus(self) -> int:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> float:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetComputeInstanceSchedulingPolicyResult(dict):
    def __init__(__self__, *,
                 preemptible: Optional[bool] = None):
        if preemptible is not None:
            pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> Optional[bool]:
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class GetComputeInstanceSecondaryDiskResult(dict):
    def __init__(__self__, *,
                 auto_delete: bool,
                 device_name: str,
                 disk_id: str,
                 mode: str):
        pulumi.set(__self__, "auto_delete", auto_delete)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> bool:
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetComputeSnapshotScheduleSchedulePolicyResult(dict):
    def __init__(__self__, *,
                 expression: str,
                 start_at: str):
        pulumi.set(__self__, "expression", expression)
        pulumi.set(__self__, "start_at", start_at)

    @property
    @pulumi.getter
    def expression(self) -> str:
        return pulumi.get(self, "expression")

    @property
    @pulumi.getter(name="startAt")
    def start_at(self) -> str:
        return pulumi.get(self, "start_at")


@pulumi.output_type
class GetComputeSnapshotScheduleSnapshotSpecResult(dict):
    def __init__(__self__, *,
                 description: str,
                 labels: Mapping[str, str]):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")


@pulumi.output_type
class GetContainerRepositoryLifecyclePolicyRuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 expire_period: str,
                 retained_top: int,
                 tag_regexp: str,
                 untagged: bool):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "expire_period", expire_period)
        pulumi.set(__self__, "retained_top", retained_top)
        pulumi.set(__self__, "tag_regexp", tag_regexp)
        pulumi.set(__self__, "untagged", untagged)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="expirePeriod")
    def expire_period(self) -> str:
        return pulumi.get(self, "expire_period")

    @property
    @pulumi.getter(name="retainedTop")
    def retained_top(self) -> int:
        return pulumi.get(self, "retained_top")

    @property
    @pulumi.getter(name="tagRegexp")
    def tag_regexp(self) -> str:
        return pulumi.get(self, "tag_regexp")

    @property
    @pulumi.getter
    def untagged(self) -> bool:
        return pulumi.get(self, "untagged")


@pulumi.output_type
class GetDataprocClusterClusterConfigResult(dict):
    def __init__(__self__, *,
                 hadoops: Sequence['outputs.GetDataprocClusterClusterConfigHadoopResult'],
                 subcluster_specs: Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecResult'],
                 version_id: str):
        pulumi.set(__self__, "hadoops", hadoops)
        pulumi.set(__self__, "subcluster_specs", subcluster_specs)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter
    def hadoops(self) -> Sequence['outputs.GetDataprocClusterClusterConfigHadoopResult']:
        return pulumi.get(self, "hadoops")

    @property
    @pulumi.getter(name="subclusterSpecs")
    def subcluster_specs(self) -> Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecResult']:
        return pulumi.get(self, "subcluster_specs")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetDataprocClusterClusterConfigHadoopResult(dict):
    def __init__(__self__, *,
                 initialization_actions: Sequence['outputs.GetDataprocClusterClusterConfigHadoopInitializationActionResult'],
                 properties: Mapping[str, str],
                 services: Sequence[str],
                 ssh_public_keys: Sequence[str]):
        pulumi.set(__self__, "initialization_actions", initialization_actions)
        pulumi.set(__self__, "properties", properties)
        pulumi.set(__self__, "services", services)
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)

    @property
    @pulumi.getter(name="initializationActions")
    def initialization_actions(self) -> Sequence['outputs.GetDataprocClusterClusterConfigHadoopInitializationActionResult']:
        return pulumi.get(self, "initialization_actions")

    @property
    @pulumi.getter
    def properties(self) -> Mapping[str, str]:
        return pulumi.get(self, "properties")

    @property
    @pulumi.getter
    def services(self) -> Sequence[str]:
        return pulumi.get(self, "services")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence[str]:
        return pulumi.get(self, "ssh_public_keys")


@pulumi.output_type
class GetDataprocClusterClusterConfigHadoopInitializationActionResult(dict):
    def __init__(__self__, *,
                 args: Sequence[str],
                 timeout: str,
                 uri: str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def timeout(self) -> str:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def uri(self) -> str:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetDataprocClusterClusterConfigSubclusterSpecResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 autoscaling_configs: Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecAutoscalingConfigResult'],
                 hosts_count: int,
                 id: str,
                 name: str,
                 resources: Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecResourceResult'],
                 role: str,
                 subnet_id: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "autoscaling_configs", autoscaling_configs)
        pulumi.set(__self__, "hosts_count", hosts_count)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="autoscalingConfigs")
    def autoscaling_configs(self) -> Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecAutoscalingConfigResult']:
        return pulumi.get(self, "autoscaling_configs")

    @property
    @pulumi.getter(name="hostsCount")
    def hosts_count(self) -> int:
        return pulumi.get(self, "hosts_count")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetDataprocClusterClusterConfigSubclusterSpecResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetDataprocClusterClusterConfigSubclusterSpecAutoscalingConfigResult(dict):
    def __init__(__self__, *,
                 cpu_utilization_target: str,
                 decommission_timeout: str,
                 max_hosts_count: int,
                 measurement_duration: str,
                 preemptible: bool,
                 stabilization_duration: str,
                 warmup_duration: str):
        pulumi.set(__self__, "cpu_utilization_target", cpu_utilization_target)
        pulumi.set(__self__, "decommission_timeout", decommission_timeout)
        pulumi.set(__self__, "max_hosts_count", max_hosts_count)
        pulumi.set(__self__, "measurement_duration", measurement_duration)
        pulumi.set(__self__, "preemptible", preemptible)
        pulumi.set(__self__, "stabilization_duration", stabilization_duration)
        pulumi.set(__self__, "warmup_duration", warmup_duration)

    @property
    @pulumi.getter(name="cpuUtilizationTarget")
    def cpu_utilization_target(self) -> str:
        return pulumi.get(self, "cpu_utilization_target")

    @property
    @pulumi.getter(name="decommissionTimeout")
    def decommission_timeout(self) -> str:
        return pulumi.get(self, "decommission_timeout")

    @property
    @pulumi.getter(name="maxHostsCount")
    def max_hosts_count(self) -> int:
        return pulumi.get(self, "max_hosts_count")

    @property
    @pulumi.getter(name="measurementDuration")
    def measurement_duration(self) -> str:
        return pulumi.get(self, "measurement_duration")

    @property
    @pulumi.getter
    def preemptible(self) -> bool:
        return pulumi.get(self, "preemptible")

    @property
    @pulumi.getter(name="stabilizationDuration")
    def stabilization_duration(self) -> str:
        return pulumi.get(self, "stabilization_duration")

    @property
    @pulumi.getter(name="warmupDuration")
    def warmup_duration(self) -> str:
        return pulumi.get(self, "warmup_duration")


@pulumi.output_type
class GetDataprocClusterClusterConfigSubclusterSpecResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetFunctionAsyncInvocationResult(dict):
    def __init__(__self__, *,
                 retries_count: int,
                 service_account_id: str,
                 ymq_failure_targets: Sequence['outputs.GetFunctionAsyncInvocationYmqFailureTargetResult'],
                 ymq_success_targets: Sequence['outputs.GetFunctionAsyncInvocationYmqSuccessTargetResult']):
        pulumi.set(__self__, "retries_count", retries_count)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "ymq_failure_targets", ymq_failure_targets)
        pulumi.set(__self__, "ymq_success_targets", ymq_success_targets)

    @property
    @pulumi.getter(name="retriesCount")
    def retries_count(self) -> int:
        return pulumi.get(self, "retries_count")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="ymqFailureTargets")
    def ymq_failure_targets(self) -> Sequence['outputs.GetFunctionAsyncInvocationYmqFailureTargetResult']:
        return pulumi.get(self, "ymq_failure_targets")

    @property
    @pulumi.getter(name="ymqSuccessTargets")
    def ymq_success_targets(self) -> Sequence['outputs.GetFunctionAsyncInvocationYmqSuccessTargetResult']:
        return pulumi.get(self, "ymq_success_targets")


@pulumi.output_type
class GetFunctionAsyncInvocationYmqFailureTargetResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 service_account_id: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class GetFunctionAsyncInvocationYmqSuccessTargetResult(dict):
    def __init__(__self__, *,
                 arn: str,
                 service_account_id: str):
        pulumi.set(__self__, "arn", arn)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def arn(self) -> str:
        return pulumi.get(self, "arn")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class GetFunctionConnectivityResult(dict):
    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class GetFunctionLogOptionResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 folder_id: str,
                 log_group_id: str,
                 min_level: str):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> str:
        return pulumi.get(self, "min_level")


@pulumi.output_type
class GetFunctionScalingPolicyPolicyResult(dict):
    def __init__(__self__, *,
                 tag: str,
                 zone_instances_limit: Optional[int] = None,
                 zone_requests_limit: Optional[int] = None):
        pulumi.set(__self__, "tag", tag)
        if zone_instances_limit is not None:
            pulumi.set(__self__, "zone_instances_limit", zone_instances_limit)
        if zone_requests_limit is not None:
            pulumi.set(__self__, "zone_requests_limit", zone_requests_limit)

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")

    @property
    @pulumi.getter(name="zoneInstancesLimit")
    def zone_instances_limit(self) -> Optional[int]:
        return pulumi.get(self, "zone_instances_limit")

    @property
    @pulumi.getter(name="zoneRequestsLimit")
    def zone_requests_limit(self) -> Optional[int]:
        return pulumi.get(self, "zone_requests_limit")


@pulumi.output_type
class GetFunctionSecretResult(dict):
    def __init__(__self__, *,
                 environment_variable: str,
                 id: str,
                 key: str,
                 version_id: str):
        pulumi.set(__self__, "environment_variable", environment_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="environmentVariable")
    def environment_variable(self) -> str:
        return pulumi.get(self, "environment_variable")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetFunctionStorageMountResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 mount_point_name: str,
                 prefix: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "mount_point_name", mount_point_name)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="mountPointName")
    def mount_point_name(self) -> str:
        return pulumi.get(self, "mount_point_name")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetFunctionTriggerContainerResult(dict):
    def __init__(__self__, *,
                 id: str,
                 path: str,
                 retry_attempts: str,
                 retry_interval: str,
                 service_account_id: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "retry_attempts", retry_attempts)
        pulumi.set(__self__, "retry_interval", retry_interval)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> str:
        return pulumi.get(self, "retry_attempts")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> str:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class GetFunctionTriggerContainerRegistryResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 create_image: bool,
                 create_image_tag: bool,
                 delete_image: bool,
                 delete_image_tag: bool,
                 image_name: str,
                 registry_id: str,
                 tag: str):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "create_image", create_image)
        pulumi.set(__self__, "create_image_tag", create_image_tag)
        pulumi.set(__self__, "delete_image", delete_image)
        pulumi.set(__self__, "delete_image_tag", delete_image_tag)
        pulumi.set(__self__, "image_name", image_name)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="createImage")
    def create_image(self) -> bool:
        return pulumi.get(self, "create_image")

    @property
    @pulumi.getter(name="createImageTag")
    def create_image_tag(self) -> bool:
        return pulumi.get(self, "create_image_tag")

    @property
    @pulumi.getter(name="deleteImage")
    def delete_image(self) -> bool:
        return pulumi.get(self, "delete_image")

    @property
    @pulumi.getter(name="deleteImageTag")
    def delete_image_tag(self) -> bool:
        return pulumi.get(self, "delete_image_tag")

    @property
    @pulumi.getter(name="imageName")
    def image_name(self) -> str:
        return pulumi.get(self, "image_name")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetFunctionTriggerDataStreamResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 database: str,
                 service_account_id: bool,
                 stream_name: str,
                 suffix: str):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "database", database)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "stream_name", stream_name)
        pulumi.set(__self__, "suffix", suffix)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter
    def database(self) -> str:
        return pulumi.get(self, "database")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> bool:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="streamName")
    def stream_name(self) -> str:
        return pulumi.get(self, "stream_name")

    @property
    @pulumi.getter
    def suffix(self) -> str:
        return pulumi.get(self, "suffix")


@pulumi.output_type
class GetFunctionTriggerDlqResult(dict):
    def __init__(__self__, *,
                 queue_id: str,
                 service_account_id: str):
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class GetFunctionTriggerFunctionResult(dict):
    def __init__(__self__, *,
                 id: str,
                 retry_attempts: str,
                 retry_interval: str,
                 service_account_id: str,
                 tag: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "retry_attempts", retry_attempts)
        pulumi.set(__self__, "retry_interval", retry_interval)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="retryAttempts")
    def retry_attempts(self) -> str:
        return pulumi.get(self, "retry_attempts")

    @property
    @pulumi.getter(name="retryInterval")
    def retry_interval(self) -> str:
        return pulumi.get(self, "retry_interval")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter
    def tag(self) -> str:
        return pulumi.get(self, "tag")


@pulumi.output_type
class GetFunctionTriggerIotResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 device_id: str,
                 registry_id: str,
                 topic: str):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "device_id", device_id)
        pulumi.set(__self__, "registry_id", registry_id)
        pulumi.set(__self__, "topic", topic)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="deviceId")
    def device_id(self) -> str:
        return pulumi.get(self, "device_id")

    @property
    @pulumi.getter(name="registryId")
    def registry_id(self) -> str:
        return pulumi.get(self, "registry_id")

    @property
    @pulumi.getter
    def topic(self) -> str:
        return pulumi.get(self, "topic")


@pulumi.output_type
class GetFunctionTriggerLogGroupResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 log_group_ids: Sequence[str]):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "log_group_ids", log_group_ids)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="logGroupIds")
    def log_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "log_group_ids")


@pulumi.output_type
class GetFunctionTriggerLoggingResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 group_id: str,
                 levels: Sequence[str],
                 resource_ids: Sequence[str],
                 resource_types: Sequence[str],
                 stream_names: Sequence[str]):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "group_id", group_id)
        pulumi.set(__self__, "levels", levels)
        pulumi.set(__self__, "resource_ids", resource_ids)
        pulumi.set(__self__, "resource_types", resource_types)
        pulumi.set(__self__, "stream_names", stream_names)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def levels(self) -> Sequence[str]:
        return pulumi.get(self, "levels")

    @property
    @pulumi.getter(name="resourceIds")
    def resource_ids(self) -> Sequence[str]:
        return pulumi.get(self, "resource_ids")

    @property
    @pulumi.getter(name="resourceTypes")
    def resource_types(self) -> Sequence[str]:
        return pulumi.get(self, "resource_types")

    @property
    @pulumi.getter(name="streamNames")
    def stream_names(self) -> Sequence[str]:
        return pulumi.get(self, "stream_names")


@pulumi.output_type
class GetFunctionTriggerMailResult(dict):
    def __init__(__self__, *,
                 attachments_bucket_id: str,
                 batch_cutoff: str,
                 batch_size: str,
                 service_account_id: str):
        pulumi.set(__self__, "attachments_bucket_id", attachments_bucket_id)
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "service_account_id", service_account_id)

    @property
    @pulumi.getter(name="attachmentsBucketId")
    def attachments_bucket_id(self) -> str:
        return pulumi.get(self, "attachments_bucket_id")

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")


@pulumi.output_type
class GetFunctionTriggerMessageQueueResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 queue_id: str,
                 service_account_id: str,
                 visibility_timeout: str):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "queue_id", queue_id)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "visibility_timeout", visibility_timeout)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="queueId")
    def queue_id(self) -> str:
        return pulumi.get(self, "queue_id")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="visibilityTimeout")
    def visibility_timeout(self) -> str:
        return pulumi.get(self, "visibility_timeout")


@pulumi.output_type
class GetFunctionTriggerObjectStorageResult(dict):
    def __init__(__self__, *,
                 batch_cutoff: str,
                 batch_size: str,
                 bucket_id: str,
                 create: bool,
                 delete: bool,
                 prefix: str,
                 suffix: str,
                 update: bool):
        pulumi.set(__self__, "batch_cutoff", batch_cutoff)
        pulumi.set(__self__, "batch_size", batch_size)
        pulumi.set(__self__, "bucket_id", bucket_id)
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "delete", delete)
        pulumi.set(__self__, "prefix", prefix)
        pulumi.set(__self__, "suffix", suffix)
        pulumi.set(__self__, "update", update)

    @property
    @pulumi.getter(name="batchCutoff")
    def batch_cutoff(self) -> str:
        return pulumi.get(self, "batch_cutoff")

    @property
    @pulumi.getter(name="batchSize")
    def batch_size(self) -> str:
        return pulumi.get(self, "batch_size")

    @property
    @pulumi.getter(name="bucketId")
    def bucket_id(self) -> str:
        return pulumi.get(self, "bucket_id")

    @property
    @pulumi.getter
    def create(self) -> bool:
        return pulumi.get(self, "create")

    @property
    @pulumi.getter
    def delete(self) -> bool:
        return pulumi.get(self, "delete")

    @property
    @pulumi.getter
    def prefix(self) -> str:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter
    def suffix(self) -> str:
        return pulumi.get(self, "suffix")

    @property
    @pulumi.getter
    def update(self) -> bool:
        return pulumi.get(self, "update")


@pulumi.output_type
class GetFunctionTriggerTimerResult(dict):
    def __init__(__self__, *,
                 cron_expression: str,
                 payload: str):
        pulumi.set(__self__, "cron_expression", cron_expression)
        pulumi.set(__self__, "payload", payload)

    @property
    @pulumi.getter(name="cronExpression")
    def cron_expression(self) -> str:
        return pulumi.get(self, "cron_expression")

    @property
    @pulumi.getter
    def payload(self) -> str:
        return pulumi.get(self, "payload")


@pulumi.output_type
class GetIamPolicyBindingResult(dict):
    def __init__(__self__, *,
                 members: Sequence[str],
                 role: str):
        pulumi.set(__self__, "members", members)
        pulumi.set(__self__, "role", role)

    @property
    @pulumi.getter
    def members(self) -> Sequence[str]:
        return pulumi.get(self, "members")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")


@pulumi.output_type
class GetIotCoreBrokerLogOptionResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 folder_id: str,
                 log_group_id: str,
                 min_level: str):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> str:
        return pulumi.get(self, "min_level")


@pulumi.output_type
class GetIotCoreRegistryLogOptionResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 folder_id: str,
                 log_group_id: str,
                 min_level: str):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> str:
        return pulumi.get(self, "min_level")


@pulumi.output_type
class GetKubernetesClusterKmsProviderResult(dict):
    def __init__(__self__, *,
                 key_id: str):
        pulumi.set(__self__, "key_id", key_id)

    @property
    @pulumi.getter(name="keyId")
    def key_id(self) -> str:
        return pulumi.get(self, "key_id")


@pulumi.output_type
class GetKubernetesClusterMasterResult(dict):
    def __init__(__self__, *,
                 cluster_ca_certificate: str,
                 etcd_cluster_size: int,
                 external_v4_address: str,
                 external_v4_endpoint: str,
                 external_v6_address: str,
                 external_v6_endpoint: str,
                 internal_v4_address: str,
                 internal_v4_endpoint: str,
                 maintenance_policies: Sequence['outputs.GetKubernetesClusterMasterMaintenancePolicyResult'],
                 master_locations: Sequence['outputs.GetKubernetesClusterMasterMasterLocationResult'],
                 master_loggings: Sequence['outputs.GetKubernetesClusterMasterMasterLoggingResult'],
                 public_ip: bool,
                 regionals: Sequence['outputs.GetKubernetesClusterMasterRegionalResult'],
                 security_group_ids: Sequence[str],
                 version: str,
                 version_infos: Sequence['outputs.GetKubernetesClusterMasterVersionInfoResult'],
                 zonals: Sequence['outputs.GetKubernetesClusterMasterZonalResult']):
        pulumi.set(__self__, "cluster_ca_certificate", cluster_ca_certificate)
        pulumi.set(__self__, "etcd_cluster_size", etcd_cluster_size)
        pulumi.set(__self__, "external_v4_address", external_v4_address)
        pulumi.set(__self__, "external_v4_endpoint", external_v4_endpoint)
        pulumi.set(__self__, "external_v6_address", external_v6_address)
        pulumi.set(__self__, "external_v6_endpoint", external_v6_endpoint)
        pulumi.set(__self__, "internal_v4_address", internal_v4_address)
        pulumi.set(__self__, "internal_v4_endpoint", internal_v4_endpoint)
        pulumi.set(__self__, "maintenance_policies", maintenance_policies)
        pulumi.set(__self__, "master_locations", master_locations)
        pulumi.set(__self__, "master_loggings", master_loggings)
        pulumi.set(__self__, "public_ip", public_ip)
        pulumi.set(__self__, "regionals", regionals)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "version_infos", version_infos)
        pulumi.set(__self__, "zonals", zonals)

    @property
    @pulumi.getter(name="clusterCaCertificate")
    def cluster_ca_certificate(self) -> str:
        return pulumi.get(self, "cluster_ca_certificate")

    @property
    @pulumi.getter(name="etcdClusterSize")
    def etcd_cluster_size(self) -> int:
        return pulumi.get(self, "etcd_cluster_size")

    @property
    @pulumi.getter(name="externalV4Address")
    def external_v4_address(self) -> str:
        return pulumi.get(self, "external_v4_address")

    @property
    @pulumi.getter(name="externalV4Endpoint")
    def external_v4_endpoint(self) -> str:
        return pulumi.get(self, "external_v4_endpoint")

    @property
    @pulumi.getter(name="externalV6Address")
    def external_v6_address(self) -> str:
        return pulumi.get(self, "external_v6_address")

    @property
    @pulumi.getter(name="externalV6Endpoint")
    def external_v6_endpoint(self) -> str:
        return pulumi.get(self, "external_v6_endpoint")

    @property
    @pulumi.getter(name="internalV4Address")
    def internal_v4_address(self) -> str:
        return pulumi.get(self, "internal_v4_address")

    @property
    @pulumi.getter(name="internalV4Endpoint")
    def internal_v4_endpoint(self) -> str:
        return pulumi.get(self, "internal_v4_endpoint")

    @property
    @pulumi.getter(name="maintenancePolicies")
    def maintenance_policies(self) -> Sequence['outputs.GetKubernetesClusterMasterMaintenancePolicyResult']:
        return pulumi.get(self, "maintenance_policies")

    @property
    @pulumi.getter(name="masterLocations")
    def master_locations(self) -> Sequence['outputs.GetKubernetesClusterMasterMasterLocationResult']:
        return pulumi.get(self, "master_locations")

    @property
    @pulumi.getter(name="masterLoggings")
    def master_loggings(self) -> Sequence['outputs.GetKubernetesClusterMasterMasterLoggingResult']:
        return pulumi.get(self, "master_loggings")

    @property
    @pulumi.getter(name="publicIp")
    def public_ip(self) -> bool:
        return pulumi.get(self, "public_ip")

    @property
    @pulumi.getter
    def regionals(self) -> Sequence['outputs.GetKubernetesClusterMasterRegionalResult']:
        return pulumi.get(self, "regionals")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter(name="versionInfos")
    def version_infos(self) -> Sequence['outputs.GetKubernetesClusterMasterVersionInfoResult']:
        return pulumi.get(self, "version_infos")

    @property
    @pulumi.getter
    def zonals(self) -> Sequence['outputs.GetKubernetesClusterMasterZonalResult']:
        return pulumi.get(self, "zonals")


@pulumi.output_type
class GetKubernetesClusterMasterMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 auto_upgrade: bool,
                 maintenance_windows: Sequence['outputs.GetKubernetesClusterMasterMaintenancePolicyMaintenanceWindowResult']):
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> bool:
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetKubernetesClusterMasterMaintenancePolicyMaintenanceWindowResult']:
        return pulumi.get(self, "maintenance_windows")


@pulumi.output_type
class GetKubernetesClusterMasterMaintenancePolicyMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 duration: str,
                 start_time: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetKubernetesClusterMasterMasterLocationResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 zone: str):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesClusterMasterMasterLoggingResult(dict):
    def __init__(__self__, *,
                 audit_enabled: bool,
                 cluster_autoscaler_enabled: bool,
                 enabled: bool,
                 events_enabled: bool,
                 folder_id: str,
                 kube_apiserver_enabled: bool,
                 log_group_id: str):
        pulumi.set(__self__, "audit_enabled", audit_enabled)
        pulumi.set(__self__, "cluster_autoscaler_enabled", cluster_autoscaler_enabled)
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "events_enabled", events_enabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "kube_apiserver_enabled", kube_apiserver_enabled)
        pulumi.set(__self__, "log_group_id", log_group_id)

    @property
    @pulumi.getter(name="auditEnabled")
    def audit_enabled(self) -> bool:
        return pulumi.get(self, "audit_enabled")

    @property
    @pulumi.getter(name="clusterAutoscalerEnabled")
    def cluster_autoscaler_enabled(self) -> bool:
        return pulumi.get(self, "cluster_autoscaler_enabled")

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventsEnabled")
    def events_enabled(self) -> bool:
        return pulumi.get(self, "events_enabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="kubeApiserverEnabled")
    def kube_apiserver_enabled(self) -> bool:
        return pulumi.get(self, "kube_apiserver_enabled")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")


@pulumi.output_type
class GetKubernetesClusterMasterRegionalResult(dict):
    def __init__(__self__, *,
                 region: str):
        pulumi.set(__self__, "region", region)

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")


@pulumi.output_type
class GetKubernetesClusterMasterVersionInfoResult(dict):
    def __init__(__self__, *,
                 current_version: str,
                 new_revision_available: bool,
                 new_revision_summary: str,
                 version_deprecated: bool):
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "new_revision_available", new_revision_available)
        pulumi.set(__self__, "new_revision_summary", new_revision_summary)
        pulumi.set(__self__, "version_deprecated", version_deprecated)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> str:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="newRevisionAvailable")
    def new_revision_available(self) -> bool:
        return pulumi.get(self, "new_revision_available")

    @property
    @pulumi.getter(name="newRevisionSummary")
    def new_revision_summary(self) -> str:
        return pulumi.get(self, "new_revision_summary")

    @property
    @pulumi.getter(name="versionDeprecated")
    def version_deprecated(self) -> bool:
        return pulumi.get(self, "version_deprecated")


@pulumi.output_type
class GetKubernetesClusterMasterZonalResult(dict):
    def __init__(__self__, *,
                 zone: str):
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesClusterNetworkImplementationResult(dict):
    def __init__(__self__, *,
                 cilia: Sequence['outputs.GetKubernetesClusterNetworkImplementationCiliumResult']):
        pulumi.set(__self__, "cilia", cilia)

    @property
    @pulumi.getter
    def cilia(self) -> Sequence['outputs.GetKubernetesClusterNetworkImplementationCiliumResult']:
        return pulumi.get(self, "cilia")


@pulumi.output_type
class GetKubernetesClusterNetworkImplementationCiliumResult(dict):
    def __init__(__self__, *,
                 routing_mode: str):
        pulumi.set(__self__, "routing_mode", routing_mode)

    @property
    @pulumi.getter(name="routingMode")
    def routing_mode(self) -> str:
        return pulumi.get(self, "routing_mode")


@pulumi.output_type
class GetKubernetesNodeGroupAllocationPolicyResult(dict):
    def __init__(__self__, *,
                 locations: Sequence['outputs.GetKubernetesNodeGroupAllocationPolicyLocationResult']):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetKubernetesNodeGroupAllocationPolicyLocationResult']:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetKubernetesNodeGroupAllocationPolicyLocationResult(dict):
    def __init__(__self__, *,
                 subnet_id: str,
                 zone: str):
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetKubernetesNodeGroupDeployPolicyResult(dict):
    def __init__(__self__, *,
                 max_expansion: int,
                 max_unavailable: int):
        pulumi.set(__self__, "max_expansion", max_expansion)
        pulumi.set(__self__, "max_unavailable", max_unavailable)

    @property
    @pulumi.getter(name="maxExpansion")
    def max_expansion(self) -> int:
        return pulumi.get(self, "max_expansion")

    @property
    @pulumi.getter(name="maxUnavailable")
    def max_unavailable(self) -> int:
        return pulumi.get(self, "max_unavailable")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateResult(dict):
    def __init__(__self__, *,
                 boot_disks: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateBootDiskResult'],
                 container_networks: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateContainerNetworkResult'],
                 container_runtime: 'outputs.GetKubernetesNodeGroupInstanceTemplateContainerRuntimeResult',
                 gpu_settings: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateGpuSettingResult'],
                 labels: Mapping[str, str],
                 metadata: Mapping[str, str],
                 name: str,
                 nat: bool,
                 network_acceleration_type: str,
                 network_interfaces: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceResult'],
                 platform_id: str,
                 resources: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateResourceResult'],
                 scheduling_policies: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateSchedulingPolicyResult'],
                 placement_policies: Optional[Sequence['outputs.GetKubernetesNodeGroupInstanceTemplatePlacementPolicyResult']] = None):
        pulumi.set(__self__, "boot_disks", boot_disks)
        pulumi.set(__self__, "container_networks", container_networks)
        pulumi.set(__self__, "container_runtime", container_runtime)
        pulumi.set(__self__, "gpu_settings", gpu_settings)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "network_acceleration_type", network_acceleration_type)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "scheduling_policies", scheduling_policies)
        if placement_policies is not None:
            pulumi.set(__self__, "placement_policies", placement_policies)

    @property
    @pulumi.getter(name="bootDisks")
    def boot_disks(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateBootDiskResult']:
        return pulumi.get(self, "boot_disks")

    @property
    @pulumi.getter(name="containerNetworks")
    def container_networks(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateContainerNetworkResult']:
        return pulumi.get(self, "container_networks")

    @property
    @pulumi.getter(name="containerRuntime")
    def container_runtime(self) -> 'outputs.GetKubernetesNodeGroupInstanceTemplateContainerRuntimeResult':
        return pulumi.get(self, "container_runtime")

    @property
    @pulumi.getter(name="gpuSettings")
    def gpu_settings(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateGpuSettingResult']:
        return pulumi.get(self, "gpu_settings")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="networkAccelerationType")
    def network_acceleration_type(self) -> str:
        return pulumi.get(self, "network_acceleration_type")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="schedulingPolicies")
    def scheduling_policies(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateSchedulingPolicyResult']:
        return pulumi.get(self, "scheduling_policies")

    @property
    @pulumi.getter(name="placementPolicies")
    def placement_policies(self) -> Optional[Sequence['outputs.GetKubernetesNodeGroupInstanceTemplatePlacementPolicyResult']]:
        return pulumi.get(self, "placement_policies")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateBootDiskResult(dict):
    def __init__(__self__, *,
                 size: int,
                 type: str):
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateContainerNetworkResult(dict):
    def __init__(__self__, *,
                 pod_mtu: int):
        pulumi.set(__self__, "pod_mtu", pod_mtu)

    @property
    @pulumi.getter(name="podMtu")
    def pod_mtu(self) -> int:
        return pulumi.get(self, "pod_mtu")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateContainerRuntimeResult(dict):
    def __init__(__self__, *,
                 type: str):
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateGpuSettingResult(dict):
    def __init__(__self__, *,
                 gpu_cluster_id: str,
                 gpu_environment: str):
        pulumi.set(__self__, "gpu_cluster_id", gpu_cluster_id)
        pulumi.set(__self__, "gpu_environment", gpu_environment)

    @property
    @pulumi.getter(name="gpuClusterId")
    def gpu_cluster_id(self) -> str:
        return pulumi.get(self, "gpu_cluster_id")

    @property
    @pulumi.getter(name="gpuEnvironment")
    def gpu_environment(self) -> str:
        return pulumi.get(self, "gpu_environment")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 ipv4: bool,
                 ipv4_dns_records: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordResult'],
                 ipv6: bool,
                 ipv6_dns_records: Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult'],
                 nat: bool,
                 security_group_ids: Sequence[str],
                 subnet_ids: Sequence[str]):
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv4_dns_records", ipv4_dns_records)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "ipv6_dns_records", ipv6_dns_records)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_ids", subnet_ids)

    @property
    @pulumi.getter
    def ipv4(self) -> bool:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter(name="ipv4DnsRecords")
    def ipv4_dns_records(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordResult']:
        return pulumi.get(self, "ipv4_dns_records")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6DnsRecords")
    def ipv6_dns_records(self) -> Sequence['outputs.GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult']:
        return pulumi.get(self, "ipv6_dns_records")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetIds")
    def subnet_ids(self) -> Sequence[str]:
        return pulumi.get(self, "subnet_ids")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv4DnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateNetworkInterfaceIpv6DnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplatePlacementPolicyResult(dict):
    def __init__(__self__, *,
                 placement_group_id: str):
        pulumi.set(__self__, "placement_group_id", placement_group_id)

    @property
    @pulumi.getter(name="placementGroupId")
    def placement_group_id(self) -> str:
        return pulumi.get(self, "placement_group_id")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateResourceResult(dict):
    def __init__(__self__, *,
                 core_fraction: int,
                 cores: int,
                 gpus: int,
                 memory: float):
        pulumi.set(__self__, "core_fraction", core_fraction)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "gpus", gpus)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> int:
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> int:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def gpus(self) -> int:
        return pulumi.get(self, "gpus")

    @property
    @pulumi.getter
    def memory(self) -> float:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetKubernetesNodeGroupInstanceTemplateSchedulingPolicyResult(dict):
    def __init__(__self__, *,
                 preemptible: bool):
        pulumi.set(__self__, "preemptible", preemptible)

    @property
    @pulumi.getter
    def preemptible(self) -> bool:
        return pulumi.get(self, "preemptible")


@pulumi.output_type
class GetKubernetesNodeGroupMaintenancePolicyResult(dict):
    def __init__(__self__, *,
                 auto_repair: bool,
                 auto_upgrade: bool,
                 maintenance_windows: Sequence['outputs.GetKubernetesNodeGroupMaintenancePolicyMaintenanceWindowResult']):
        pulumi.set(__self__, "auto_repair", auto_repair)
        pulumi.set(__self__, "auto_upgrade", auto_upgrade)
        pulumi.set(__self__, "maintenance_windows", maintenance_windows)

    @property
    @pulumi.getter(name="autoRepair")
    def auto_repair(self) -> bool:
        return pulumi.get(self, "auto_repair")

    @property
    @pulumi.getter(name="autoUpgrade")
    def auto_upgrade(self) -> bool:
        return pulumi.get(self, "auto_upgrade")

    @property
    @pulumi.getter(name="maintenanceWindows")
    def maintenance_windows(self) -> Sequence['outputs.GetKubernetesNodeGroupMaintenancePolicyMaintenanceWindowResult']:
        return pulumi.get(self, "maintenance_windows")


@pulumi.output_type
class GetKubernetesNodeGroupMaintenancePolicyMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 duration: str,
                 start_time: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "duration", duration)
        pulumi.set(__self__, "start_time", start_time)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def duration(self) -> str:
        return pulumi.get(self, "duration")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")


@pulumi.output_type
class GetKubernetesNodeGroupScalePolicyResult(dict):
    def __init__(__self__, *,
                 auto_scales: Sequence['outputs.GetKubernetesNodeGroupScalePolicyAutoScaleResult'],
                 fixed_scales: Sequence['outputs.GetKubernetesNodeGroupScalePolicyFixedScaleResult']):
        pulumi.set(__self__, "auto_scales", auto_scales)
        pulumi.set(__self__, "fixed_scales", fixed_scales)

    @property
    @pulumi.getter(name="autoScales")
    def auto_scales(self) -> Sequence['outputs.GetKubernetesNodeGroupScalePolicyAutoScaleResult']:
        return pulumi.get(self, "auto_scales")

    @property
    @pulumi.getter(name="fixedScales")
    def fixed_scales(self) -> Sequence['outputs.GetKubernetesNodeGroupScalePolicyFixedScaleResult']:
        return pulumi.get(self, "fixed_scales")


@pulumi.output_type
class GetKubernetesNodeGroupScalePolicyAutoScaleResult(dict):
    def __init__(__self__, *,
                 initial: int,
                 max: int,
                 min: int):
        pulumi.set(__self__, "initial", initial)
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)

    @property
    @pulumi.getter
    def initial(self) -> int:
        return pulumi.get(self, "initial")

    @property
    @pulumi.getter
    def max(self) -> int:
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> int:
        return pulumi.get(self, "min")


@pulumi.output_type
class GetKubernetesNodeGroupScalePolicyFixedScaleResult(dict):
    def __init__(__self__, *,
                 size: int):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetKubernetesNodeGroupVersionInfoResult(dict):
    def __init__(__self__, *,
                 current_version: str,
                 new_revision_available: bool,
                 new_revision_summary: str,
                 version_deprecated: bool):
        pulumi.set(__self__, "current_version", current_version)
        pulumi.set(__self__, "new_revision_available", new_revision_available)
        pulumi.set(__self__, "new_revision_summary", new_revision_summary)
        pulumi.set(__self__, "version_deprecated", version_deprecated)

    @property
    @pulumi.getter(name="currentVersion")
    def current_version(self) -> str:
        return pulumi.get(self, "current_version")

    @property
    @pulumi.getter(name="newRevisionAvailable")
    def new_revision_available(self) -> bool:
        return pulumi.get(self, "new_revision_available")

    @property
    @pulumi.getter(name="newRevisionSummary")
    def new_revision_summary(self) -> str:
        return pulumi.get(self, "new_revision_summary")

    @property
    @pulumi.getter(name="versionDeprecated")
    def version_deprecated(self) -> bool:
        return pulumi.get(self, "version_deprecated")


@pulumi.output_type
class GetLbNetworkLoadBalancerAttachedTargetGroupResult(dict):
    def __init__(__self__, *,
                 healthchecks: Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckResult'],
                 target_group_id: str):
        pulumi.set(__self__, "healthchecks", healthchecks)
        pulumi.set(__self__, "target_group_id", target_group_id)

    @property
    @pulumi.getter
    def healthchecks(self) -> Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckResult']:
        return pulumi.get(self, "healthchecks")

    @property
    @pulumi.getter(name="targetGroupId")
    def target_group_id(self) -> str:
        return pulumi.get(self, "target_group_id")


@pulumi.output_type
class GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckResult(dict):
    def __init__(__self__, *,
                 healthy_threshold: int,
                 http_options: Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionResult'],
                 interval: int,
                 name: str,
                 tcp_options: Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionResult'],
                 timeout: int,
                 unhealthy_threshold: int):
        pulumi.set(__self__, "healthy_threshold", healthy_threshold)
        pulumi.set(__self__, "http_options", http_options)
        pulumi.set(__self__, "interval", interval)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "tcp_options", tcp_options)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "unhealthy_threshold", unhealthy_threshold)

    @property
    @pulumi.getter(name="healthyThreshold")
    def healthy_threshold(self) -> int:
        return pulumi.get(self, "healthy_threshold")

    @property
    @pulumi.getter(name="httpOptions")
    def http_options(self) -> Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionResult']:
        return pulumi.get(self, "http_options")

    @property
    @pulumi.getter
    def interval(self) -> int:
        return pulumi.get(self, "interval")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="tcpOptions")
    def tcp_options(self) -> Sequence['outputs.GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionResult']:
        return pulumi.get(self, "tcp_options")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter(name="unhealthyThreshold")
    def unhealthy_threshold(self) -> int:
        return pulumi.get(self, "unhealthy_threshold")


@pulumi.output_type
class GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckHttpOptionResult(dict):
    def __init__(__self__, *,
                 path: str,
                 port: int):
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def path(self) -> str:
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetLbNetworkLoadBalancerAttachedTargetGroupHealthcheckTcpOptionResult(dict):
    def __init__(__self__, *,
                 port: int):
        pulumi.set(__self__, "port", port)

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")


@pulumi.output_type
class GetLbNetworkLoadBalancerListenerResult(dict):
    def __init__(__self__, *,
                 external_address_specs: Sequence['outputs.GetLbNetworkLoadBalancerListenerExternalAddressSpecResult'],
                 internal_address_specs: Sequence['outputs.GetLbNetworkLoadBalancerListenerInternalAddressSpecResult'],
                 name: str,
                 port: int,
                 protocol: str,
                 target_port: int):
        pulumi.set(__self__, "external_address_specs", external_address_specs)
        pulumi.set(__self__, "internal_address_specs", internal_address_specs)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "target_port", target_port)

    @property
    @pulumi.getter(name="externalAddressSpecs")
    def external_address_specs(self) -> Sequence['outputs.GetLbNetworkLoadBalancerListenerExternalAddressSpecResult']:
        return pulumi.get(self, "external_address_specs")

    @property
    @pulumi.getter(name="internalAddressSpecs")
    def internal_address_specs(self) -> Sequence['outputs.GetLbNetworkLoadBalancerListenerInternalAddressSpecResult']:
        return pulumi.get(self, "internal_address_specs")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="targetPort")
    def target_port(self) -> int:
        return pulumi.get(self, "target_port")


@pulumi.output_type
class GetLbNetworkLoadBalancerListenerExternalAddressSpecResult(dict):
    def __init__(__self__, *,
                 address: str,
                 ip_version: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "ip_version", ip_version)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        return pulumi.get(self, "ip_version")


@pulumi.output_type
class GetLbNetworkLoadBalancerListenerInternalAddressSpecResult(dict):
    def __init__(__self__, *,
                 address: str,
                 ip_version: str,
                 subnet_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "ip_version", ip_version)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ipVersion")
    def ip_version(self) -> str:
        return pulumi.get(self, "ip_version")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetLbTargetGroupTargetResult(dict):
    def __init__(__self__, *,
                 address: str,
                 subnet_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetLoadtestingAgentComputeInstanceResult(dict):
    def __init__(__self__, *,
                 boot_disks: Sequence['outputs.GetLoadtestingAgentComputeInstanceBootDiskResult'],
                 computed_metadata: Mapping[str, str],
                 labels: Mapping[str, str],
                 metadata: Mapping[str, str],
                 network_interfaces: Sequence['outputs.GetLoadtestingAgentComputeInstanceNetworkInterfaceResult'],
                 platform_id: str,
                 resources: Sequence['outputs.GetLoadtestingAgentComputeInstanceResourceResult'],
                 service_account_id: str,
                 zone_id: str):
        pulumi.set(__self__, "boot_disks", boot_disks)
        pulumi.set(__self__, "computed_metadata", computed_metadata)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "metadata", metadata)
        pulumi.set(__self__, "network_interfaces", network_interfaces)
        pulumi.set(__self__, "platform_id", platform_id)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "service_account_id", service_account_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="bootDisks")
    def boot_disks(self) -> Sequence['outputs.GetLoadtestingAgentComputeInstanceBootDiskResult']:
        return pulumi.get(self, "boot_disks")

    @property
    @pulumi.getter(name="computedMetadata")
    def computed_metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "computed_metadata")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def metadata(self) -> Mapping[str, str]:
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter(name="networkInterfaces")
    def network_interfaces(self) -> Sequence['outputs.GetLoadtestingAgentComputeInstanceNetworkInterfaceResult']:
        return pulumi.get(self, "network_interfaces")

    @property
    @pulumi.getter(name="platformId")
    def platform_id(self) -> str:
        return pulumi.get(self, "platform_id")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetLoadtestingAgentComputeInstanceResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetLoadtestingAgentComputeInstanceBootDiskResult(dict):
    def __init__(__self__, *,
                 auto_delete: bool,
                 device_name: str,
                 disk_id: str,
                 initialize_params: Sequence['outputs.GetLoadtestingAgentComputeInstanceBootDiskInitializeParamResult']):
        pulumi.set(__self__, "auto_delete", auto_delete)
        pulumi.set(__self__, "device_name", device_name)
        pulumi.set(__self__, "disk_id", disk_id)
        pulumi.set(__self__, "initialize_params", initialize_params)

    @property
    @pulumi.getter(name="autoDelete")
    def auto_delete(self) -> bool:
        return pulumi.get(self, "auto_delete")

    @property
    @pulumi.getter(name="deviceName")
    def device_name(self) -> str:
        return pulumi.get(self, "device_name")

    @property
    @pulumi.getter(name="diskId")
    def disk_id(self) -> str:
        return pulumi.get(self, "disk_id")

    @property
    @pulumi.getter(name="initializeParams")
    def initialize_params(self) -> Sequence['outputs.GetLoadtestingAgentComputeInstanceBootDiskInitializeParamResult']:
        return pulumi.get(self, "initialize_params")


@pulumi.output_type
class GetLoadtestingAgentComputeInstanceBootDiskInitializeParamResult(dict):
    def __init__(__self__, *,
                 block_size: int,
                 description: str,
                 name: str,
                 size: int,
                 type: str):
        pulumi.set(__self__, "block_size", block_size)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="blockSize")
    def block_size(self) -> int:
        return pulumi.get(self, "block_size")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetLoadtestingAgentComputeInstanceNetworkInterfaceResult(dict):
    def __init__(__self__, *,
                 index: int,
                 ip_address: str,
                 ipv4: bool,
                 ipv6: bool,
                 ipv6_address: str,
                 mac_address: str,
                 nat: bool,
                 nat_ip_address: str,
                 nat_ip_version: str,
                 security_group_ids: Sequence[str],
                 subnet_id: str):
        pulumi.set(__self__, "index", index)
        pulumi.set(__self__, "ip_address", ip_address)
        pulumi.set(__self__, "ipv4", ipv4)
        pulumi.set(__self__, "ipv6", ipv6)
        pulumi.set(__self__, "ipv6_address", ipv6_address)
        pulumi.set(__self__, "mac_address", mac_address)
        pulumi.set(__self__, "nat", nat)
        pulumi.set(__self__, "nat_ip_address", nat_ip_address)
        pulumi.set(__self__, "nat_ip_version", nat_ip_version)
        pulumi.set(__self__, "security_group_ids", security_group_ids)
        pulumi.set(__self__, "subnet_id", subnet_id)

    @property
    @pulumi.getter
    def index(self) -> int:
        return pulumi.get(self, "index")

    @property
    @pulumi.getter(name="ipAddress")
    def ip_address(self) -> str:
        return pulumi.get(self, "ip_address")

    @property
    @pulumi.getter
    def ipv4(self) -> bool:
        return pulumi.get(self, "ipv4")

    @property
    @pulumi.getter
    def ipv6(self) -> bool:
        return pulumi.get(self, "ipv6")

    @property
    @pulumi.getter(name="ipv6Address")
    def ipv6_address(self) -> str:
        return pulumi.get(self, "ipv6_address")

    @property
    @pulumi.getter(name="macAddress")
    def mac_address(self) -> str:
        return pulumi.get(self, "mac_address")

    @property
    @pulumi.getter
    def nat(self) -> bool:
        return pulumi.get(self, "nat")

    @property
    @pulumi.getter(name="natIpAddress")
    def nat_ip_address(self) -> str:
        return pulumi.get(self, "nat_ip_address")

    @property
    @pulumi.getter(name="natIpVersion")
    def nat_ip_version(self) -> str:
        return pulumi.get(self, "nat_ip_version")

    @property
    @pulumi.getter(name="securityGroupIds")
    def security_group_ids(self) -> Sequence[str]:
        return pulumi.get(self, "security_group_ids")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")


@pulumi.output_type
class GetLoadtestingAgentComputeInstanceResourceResult(dict):
    def __init__(__self__, *,
                 core_fraction: int,
                 cores: int,
                 memory: float):
        pulumi.set(__self__, "core_fraction", core_fraction)
        pulumi.set(__self__, "cores", cores)
        pulumi.set(__self__, "memory", memory)

    @property
    @pulumi.getter(name="coreFraction")
    def core_fraction(self) -> int:
        return pulumi.get(self, "core_fraction")

    @property
    @pulumi.getter
    def cores(self) -> int:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def memory(self) -> float:
        return pulumi.get(self, "memory")


@pulumi.output_type
class GetLockboxSecretCurrentVersionResult(dict):
    def __init__(__self__, *,
                 created_at: str,
                 description: str,
                 destroy_at: str,
                 id: str,
                 payload_entry_keys: Sequence[str],
                 secret_id: str,
                 status: str):
        pulumi.set(__self__, "created_at", created_at)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "destroy_at", destroy_at)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "payload_entry_keys", payload_entry_keys)
        pulumi.set(__self__, "secret_id", secret_id)
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="destroyAt")
    def destroy_at(self) -> str:
        return pulumi.get(self, "destroy_at")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="payloadEntryKeys")
    def payload_entry_keys(self) -> Sequence[str]:
        return pulumi.get(self, "payload_entry_keys")

    @property
    @pulumi.getter(name="secretId")
    def secret_id(self) -> str:
        return pulumi.get(self, "secret_id")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


@pulumi.output_type
class GetLockboxSecretVersionEntryResult(dict):
    def __init__(__self__, *,
                 key: str,
                 text_value: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "text_value", text_value)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="textValue")
    def text_value(self) -> str:
        return pulumi.get(self, "text_value")


@pulumi.output_type
class GetMdbClickhouseClusterAccessResult(dict):
    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None,
                 metrika: Optional[bool] = None,
                 serverless: Optional[bool] = None,
                 web_sql: Optional[bool] = None,
                 yandex_query: Optional[bool] = None):
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)
        if metrika is not None:
            pulumi.set(__self__, "metrika", metrika)
        if serverless is not None:
            pulumi.set(__self__, "serverless", serverless)
        if web_sql is not None:
            pulumi.set(__self__, "web_sql", web_sql)
        if yandex_query is not None:
            pulumi.set(__self__, "yandex_query", yandex_query)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter
    def metrika(self) -> Optional[bool]:
        return pulumi.get(self, "metrika")

    @property
    @pulumi.getter
    def serverless(self) -> Optional[bool]:
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> Optional[bool]:
        return pulumi.get(self, "web_sql")

    @property
    @pulumi.getter(name="yandexQuery")
    def yandex_query(self) -> Optional[bool]:
        return pulumi.get(self, "yandex_query")


@pulumi.output_type
class GetMdbClickhouseClusterBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseResult(dict):
    def __init__(__self__, *,
                 config: 'outputs.GetMdbClickhouseClusterClickhouseConfigResult',
                 resources: 'outputs.GetMdbClickhouseClusterClickhouseResourcesResult'):
        pulumi.set(__self__, "config", config)
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def config(self) -> 'outputs.GetMdbClickhouseClusterClickhouseConfigResult':
        return pulumi.get(self, "config")

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetMdbClickhouseClusterClickhouseResourcesResult':
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigResult(dict):
    def __init__(__self__, *,
                 background_fetches_pool_size: int,
                 background_merges_mutations_concurrency_ratio: int,
                 background_message_broker_schedule_pool_size: int,
                 background_pool_size: int,
                 background_schedule_pool_size: int,
                 default_database: str,
                 dictionaries_lazy_load: bool,
                 geobase_enabled: bool,
                 geobase_uri: str,
                 kafka: 'outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult',
                 keep_alive_timeout: int,
                 log_level: str,
                 mark_cache_size: int,
                 max_concurrent_queries: int,
                 max_connections: int,
                 max_partition_size_to_drop: int,
                 max_table_size_to_drop: int,
                 merge_tree: 'outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult',
                 metric_log_enabled: bool,
                 metric_log_retention_size: int,
                 metric_log_retention_time: int,
                 part_log_retention_size: int,
                 part_log_retention_time: int,
                 query_cache: 'outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult',
                 query_log_retention_size: int,
                 query_log_retention_time: int,
                 query_thread_log_enabled: bool,
                 query_thread_log_retention_size: int,
                 query_thread_log_retention_time: int,
                 rabbitmq: 'outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult',
                 text_log_enabled: bool,
                 text_log_level: str,
                 text_log_retention_size: int,
                 text_log_retention_time: int,
                 timezone: str,
                 total_memory_profiler_step: int,
                 trace_log_enabled: bool,
                 trace_log_retention_size: int,
                 trace_log_retention_time: int,
                 uncompressed_cache_size: int,
                 compressions: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult']] = None,
                 graphite_rollups: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult']] = None,
                 kafka_topics: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult']] = None,
                 query_masking_rules: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult']] = None):
        pulumi.set(__self__, "background_fetches_pool_size", background_fetches_pool_size)
        pulumi.set(__self__, "background_merges_mutations_concurrency_ratio", background_merges_mutations_concurrency_ratio)
        pulumi.set(__self__, "background_message_broker_schedule_pool_size", background_message_broker_schedule_pool_size)
        pulumi.set(__self__, "background_pool_size", background_pool_size)
        pulumi.set(__self__, "background_schedule_pool_size", background_schedule_pool_size)
        pulumi.set(__self__, "default_database", default_database)
        pulumi.set(__self__, "dictionaries_lazy_load", dictionaries_lazy_load)
        pulumi.set(__self__, "geobase_enabled", geobase_enabled)
        pulumi.set(__self__, "geobase_uri", geobase_uri)
        pulumi.set(__self__, "kafka", kafka)
        pulumi.set(__self__, "keep_alive_timeout", keep_alive_timeout)
        pulumi.set(__self__, "log_level", log_level)
        pulumi.set(__self__, "mark_cache_size", mark_cache_size)
        pulumi.set(__self__, "max_concurrent_queries", max_concurrent_queries)
        pulumi.set(__self__, "max_connections", max_connections)
        pulumi.set(__self__, "max_partition_size_to_drop", max_partition_size_to_drop)
        pulumi.set(__self__, "max_table_size_to_drop", max_table_size_to_drop)
        pulumi.set(__self__, "merge_tree", merge_tree)
        pulumi.set(__self__, "metric_log_enabled", metric_log_enabled)
        pulumi.set(__self__, "metric_log_retention_size", metric_log_retention_size)
        pulumi.set(__self__, "metric_log_retention_time", metric_log_retention_time)
        pulumi.set(__self__, "part_log_retention_size", part_log_retention_size)
        pulumi.set(__self__, "part_log_retention_time", part_log_retention_time)
        pulumi.set(__self__, "query_cache", query_cache)
        pulumi.set(__self__, "query_log_retention_size", query_log_retention_size)
        pulumi.set(__self__, "query_log_retention_time", query_log_retention_time)
        pulumi.set(__self__, "query_thread_log_enabled", query_thread_log_enabled)
        pulumi.set(__self__, "query_thread_log_retention_size", query_thread_log_retention_size)
        pulumi.set(__self__, "query_thread_log_retention_time", query_thread_log_retention_time)
        pulumi.set(__self__, "rabbitmq", rabbitmq)
        pulumi.set(__self__, "text_log_enabled", text_log_enabled)
        pulumi.set(__self__, "text_log_level", text_log_level)
        pulumi.set(__self__, "text_log_retention_size", text_log_retention_size)
        pulumi.set(__self__, "text_log_retention_time", text_log_retention_time)
        pulumi.set(__self__, "timezone", timezone)
        pulumi.set(__self__, "total_memory_profiler_step", total_memory_profiler_step)
        pulumi.set(__self__, "trace_log_enabled", trace_log_enabled)
        pulumi.set(__self__, "trace_log_retention_size", trace_log_retention_size)
        pulumi.set(__self__, "trace_log_retention_time", trace_log_retention_time)
        pulumi.set(__self__, "uncompressed_cache_size", uncompressed_cache_size)
        if compressions is not None:
            pulumi.set(__self__, "compressions", compressions)
        if graphite_rollups is not None:
            pulumi.set(__self__, "graphite_rollups", graphite_rollups)
        if kafka_topics is not None:
            pulumi.set(__self__, "kafka_topics", kafka_topics)
        if query_masking_rules is not None:
            pulumi.set(__self__, "query_masking_rules", query_masking_rules)

    @property
    @pulumi.getter(name="backgroundFetchesPoolSize")
    def background_fetches_pool_size(self) -> int:
        return pulumi.get(self, "background_fetches_pool_size")

    @property
    @pulumi.getter(name="backgroundMergesMutationsConcurrencyRatio")
    def background_merges_mutations_concurrency_ratio(self) -> int:
        return pulumi.get(self, "background_merges_mutations_concurrency_ratio")

    @property
    @pulumi.getter(name="backgroundMessageBrokerSchedulePoolSize")
    def background_message_broker_schedule_pool_size(self) -> int:
        return pulumi.get(self, "background_message_broker_schedule_pool_size")

    @property
    @pulumi.getter(name="backgroundPoolSize")
    def background_pool_size(self) -> int:
        return pulumi.get(self, "background_pool_size")

    @property
    @pulumi.getter(name="backgroundSchedulePoolSize")
    def background_schedule_pool_size(self) -> int:
        return pulumi.get(self, "background_schedule_pool_size")

    @property
    @pulumi.getter(name="defaultDatabase")
    def default_database(self) -> str:
        return pulumi.get(self, "default_database")

    @property
    @pulumi.getter(name="dictionariesLazyLoad")
    def dictionaries_lazy_load(self) -> bool:
        return pulumi.get(self, "dictionaries_lazy_load")

    @property
    @pulumi.getter(name="geobaseEnabled")
    def geobase_enabled(self) -> bool:
        return pulumi.get(self, "geobase_enabled")

    @property
    @pulumi.getter(name="geobaseUri")
    def geobase_uri(self) -> str:
        return pulumi.get(self, "geobase_uri")

    @property
    @pulumi.getter
    def kafka(self) -> 'outputs.GetMdbClickhouseClusterClickhouseConfigKafkaResult':
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter(name="keepAliveTimeout")
    def keep_alive_timeout(self) -> int:
        return pulumi.get(self, "keep_alive_timeout")

    @property
    @pulumi.getter(name="logLevel")
    def log_level(self) -> str:
        return pulumi.get(self, "log_level")

    @property
    @pulumi.getter(name="markCacheSize")
    def mark_cache_size(self) -> int:
        return pulumi.get(self, "mark_cache_size")

    @property
    @pulumi.getter(name="maxConcurrentQueries")
    def max_concurrent_queries(self) -> int:
        return pulumi.get(self, "max_concurrent_queries")

    @property
    @pulumi.getter(name="maxConnections")
    def max_connections(self) -> int:
        return pulumi.get(self, "max_connections")

    @property
    @pulumi.getter(name="maxPartitionSizeToDrop")
    def max_partition_size_to_drop(self) -> int:
        return pulumi.get(self, "max_partition_size_to_drop")

    @property
    @pulumi.getter(name="maxTableSizeToDrop")
    def max_table_size_to_drop(self) -> int:
        return pulumi.get(self, "max_table_size_to_drop")

    @property
    @pulumi.getter(name="mergeTree")
    def merge_tree(self) -> 'outputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeResult':
        return pulumi.get(self, "merge_tree")

    @property
    @pulumi.getter(name="metricLogEnabled")
    def metric_log_enabled(self) -> bool:
        return pulumi.get(self, "metric_log_enabled")

    @property
    @pulumi.getter(name="metricLogRetentionSize")
    def metric_log_retention_size(self) -> int:
        return pulumi.get(self, "metric_log_retention_size")

    @property
    @pulumi.getter(name="metricLogRetentionTime")
    def metric_log_retention_time(self) -> int:
        return pulumi.get(self, "metric_log_retention_time")

    @property
    @pulumi.getter(name="partLogRetentionSize")
    def part_log_retention_size(self) -> int:
        return pulumi.get(self, "part_log_retention_size")

    @property
    @pulumi.getter(name="partLogRetentionTime")
    def part_log_retention_time(self) -> int:
        return pulumi.get(self, "part_log_retention_time")

    @property
    @pulumi.getter(name="queryCache")
    def query_cache(self) -> 'outputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheResult':
        return pulumi.get(self, "query_cache")

    @property
    @pulumi.getter(name="queryLogRetentionSize")
    def query_log_retention_size(self) -> int:
        return pulumi.get(self, "query_log_retention_size")

    @property
    @pulumi.getter(name="queryLogRetentionTime")
    def query_log_retention_time(self) -> int:
        return pulumi.get(self, "query_log_retention_time")

    @property
    @pulumi.getter(name="queryThreadLogEnabled")
    def query_thread_log_enabled(self) -> bool:
        return pulumi.get(self, "query_thread_log_enabled")

    @property
    @pulumi.getter(name="queryThreadLogRetentionSize")
    def query_thread_log_retention_size(self) -> int:
        return pulumi.get(self, "query_thread_log_retention_size")

    @property
    @pulumi.getter(name="queryThreadLogRetentionTime")
    def query_thread_log_retention_time(self) -> int:
        return pulumi.get(self, "query_thread_log_retention_time")

    @property
    @pulumi.getter
    def rabbitmq(self) -> 'outputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqResult':
        return pulumi.get(self, "rabbitmq")

    @property
    @pulumi.getter(name="textLogEnabled")
    def text_log_enabled(self) -> bool:
        return pulumi.get(self, "text_log_enabled")

    @property
    @pulumi.getter(name="textLogLevel")
    def text_log_level(self) -> str:
        return pulumi.get(self, "text_log_level")

    @property
    @pulumi.getter(name="textLogRetentionSize")
    def text_log_retention_size(self) -> int:
        return pulumi.get(self, "text_log_retention_size")

    @property
    @pulumi.getter(name="textLogRetentionTime")
    def text_log_retention_time(self) -> int:
        return pulumi.get(self, "text_log_retention_time")

    @property
    @pulumi.getter
    def timezone(self) -> str:
        return pulumi.get(self, "timezone")

    @property
    @pulumi.getter(name="totalMemoryProfilerStep")
    def total_memory_profiler_step(self) -> int:
        return pulumi.get(self, "total_memory_profiler_step")

    @property
    @pulumi.getter(name="traceLogEnabled")
    def trace_log_enabled(self) -> bool:
        return pulumi.get(self, "trace_log_enabled")

    @property
    @pulumi.getter(name="traceLogRetentionSize")
    def trace_log_retention_size(self) -> int:
        return pulumi.get(self, "trace_log_retention_size")

    @property
    @pulumi.getter(name="traceLogRetentionTime")
    def trace_log_retention_time(self) -> int:
        return pulumi.get(self, "trace_log_retention_time")

    @property
    @pulumi.getter(name="uncompressedCacheSize")
    def uncompressed_cache_size(self) -> int:
        return pulumi.get(self, "uncompressed_cache_size")

    @property
    @pulumi.getter
    def compressions(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigCompressionResult']]:
        return pulumi.get(self, "compressions")

    @property
    @pulumi.getter(name="graphiteRollups")
    def graphite_rollups(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult']]:
        return pulumi.get(self, "graphite_rollups")

    @property
    @pulumi.getter(name="kafkaTopics")
    def kafka_topics(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult']]:
        return pulumi.get(self, "kafka_topics")

    @property
    @pulumi.getter(name="queryMaskingRules")
    def query_masking_rules(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult']]:
        return pulumi.get(self, "query_masking_rules")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigCompressionResult(dict):
    def __init__(__self__, *,
                 level: Optional[int] = None,
                 method: Optional[str] = None,
                 min_part_size: Optional[int] = None,
                 min_part_size_ratio: Optional[float] = None):
        if level is not None:
            pulumi.set(__self__, "level", level)
        if method is not None:
            pulumi.set(__self__, "method", method)
        if min_part_size is not None:
            pulumi.set(__self__, "min_part_size", min_part_size)
        if min_part_size_ratio is not None:
            pulumi.set(__self__, "min_part_size_ratio", min_part_size_ratio)

    @property
    @pulumi.getter
    def level(self) -> Optional[int]:
        return pulumi.get(self, "level")

    @property
    @pulumi.getter
    def method(self) -> Optional[str]:
        return pulumi.get(self, "method")

    @property
    @pulumi.getter(name="minPartSize")
    def min_part_size(self) -> Optional[int]:
        return pulumi.get(self, "min_part_size")

    @property
    @pulumi.getter(name="minPartSizeRatio")
    def min_part_size_ratio(self) -> Optional[float]:
        return pulumi.get(self, "min_part_size_ratio")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigGraphiteRollupResult(dict):
    def __init__(__self__, *,
                 path_column_name: str,
                 time_column_name: str,
                 value_column_name: str,
                 version_column_name: str,
                 name: Optional[str] = None,
                 patterns: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternResult']] = None):
        pulumi.set(__self__, "path_column_name", path_column_name)
        pulumi.set(__self__, "time_column_name", time_column_name)
        pulumi.set(__self__, "value_column_name", value_column_name)
        pulumi.set(__self__, "version_column_name", version_column_name)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if patterns is not None:
            pulumi.set(__self__, "patterns", patterns)

    @property
    @pulumi.getter(name="pathColumnName")
    def path_column_name(self) -> str:
        return pulumi.get(self, "path_column_name")

    @property
    @pulumi.getter(name="timeColumnName")
    def time_column_name(self) -> str:
        return pulumi.get(self, "time_column_name")

    @property
    @pulumi.getter(name="valueColumnName")
    def value_column_name(self) -> str:
        return pulumi.get(self, "value_column_name")

    @property
    @pulumi.getter(name="versionColumnName")
    def version_column_name(self) -> str:
        return pulumi.get(self, "version_column_name")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def patterns(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternResult']]:
        return pulumi.get(self, "patterns")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternResult(dict):
    def __init__(__self__, *,
                 regexp: str,
                 function: Optional[str] = None,
                 retentions: Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionResult']] = None):
        pulumi.set(__self__, "regexp", regexp)
        if function is not None:
            pulumi.set(__self__, "function", function)
        if retentions is not None:
            pulumi.set(__self__, "retentions", retentions)

    @property
    @pulumi.getter
    def regexp(self) -> str:
        return pulumi.get(self, "regexp")

    @property
    @pulumi.getter
    def function(self) -> Optional[str]:
        return pulumi.get(self, "function")

    @property
    @pulumi.getter
    def retentions(self) -> Optional[Sequence['outputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionResult']]:
        return pulumi.get(self, "retentions")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigGraphiteRollupPatternRetentionResult(dict):
    def __init__(__self__, *,
                 age: Optional[int] = None,
                 precision: Optional[int] = None):
        if age is not None:
            pulumi.set(__self__, "age", age)
        if precision is not None:
            pulumi.set(__self__, "precision", precision)

    @property
    @pulumi.getter
    def age(self) -> Optional[int]:
        return pulumi.get(self, "age")

    @property
    @pulumi.getter
    def precision(self) -> Optional[int]:
        return pulumi.get(self, "precision")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigKafkaResult(dict):
    def __init__(__self__, *,
                 auto_offset_reset: str,
                 debug: str,
                 enable_ssl_certificate_verification: bool,
                 max_poll_interval_ms: int,
                 sasl_mechanism: str,
                 sasl_password: str,
                 sasl_username: str,
                 security_protocol: str,
                 session_timeout_ms: int):
        pulumi.set(__self__, "auto_offset_reset", auto_offset_reset)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "enable_ssl_certificate_verification", enable_ssl_certificate_verification)
        pulumi.set(__self__, "max_poll_interval_ms", max_poll_interval_ms)
        pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        pulumi.set(__self__, "sasl_password", sasl_password)
        pulumi.set(__self__, "sasl_username", sasl_username)
        pulumi.set(__self__, "security_protocol", security_protocol)
        pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)

    @property
    @pulumi.getter(name="autoOffsetReset")
    def auto_offset_reset(self) -> str:
        return pulumi.get(self, "auto_offset_reset")

    @property
    @pulumi.getter
    def debug(self) -> str:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="enableSslCertificateVerification")
    def enable_ssl_certificate_verification(self) -> bool:
        return pulumi.get(self, "enable_ssl_certificate_verification")

    @property
    @pulumi.getter(name="maxPollIntervalMs")
    def max_poll_interval_ms(self) -> int:
        return pulumi.get(self, "max_poll_interval_ms")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> str:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> str:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> str:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> str:
        return pulumi.get(self, "security_protocol")

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> int:
        return pulumi.get(self, "session_timeout_ms")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigKafkaTopicResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 settings: Optional['outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsResult'] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if settings is not None:
            pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Optional['outputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsResult']:
        return pulumi.get(self, "settings")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigKafkaTopicSettingsResult(dict):
    def __init__(__self__, *,
                 auto_offset_reset: str,
                 debug: str,
                 enable_ssl_certificate_verification: bool,
                 max_poll_interval_ms: int,
                 session_timeout_ms: int,
                 sasl_mechanism: Optional[str] = None,
                 sasl_password: Optional[str] = None,
                 sasl_username: Optional[str] = None,
                 security_protocol: Optional[str] = None):
        pulumi.set(__self__, "auto_offset_reset", auto_offset_reset)
        pulumi.set(__self__, "debug", debug)
        pulumi.set(__self__, "enable_ssl_certificate_verification", enable_ssl_certificate_verification)
        pulumi.set(__self__, "max_poll_interval_ms", max_poll_interval_ms)
        pulumi.set(__self__, "session_timeout_ms", session_timeout_ms)
        if sasl_mechanism is not None:
            pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        if sasl_password is not None:
            pulumi.set(__self__, "sasl_password", sasl_password)
        if sasl_username is not None:
            pulumi.set(__self__, "sasl_username", sasl_username)
        if security_protocol is not None:
            pulumi.set(__self__, "security_protocol", security_protocol)

    @property
    @pulumi.getter(name="autoOffsetReset")
    def auto_offset_reset(self) -> str:
        return pulumi.get(self, "auto_offset_reset")

    @property
    @pulumi.getter
    def debug(self) -> str:
        return pulumi.get(self, "debug")

    @property
    @pulumi.getter(name="enableSslCertificateVerification")
    def enable_ssl_certificate_verification(self) -> bool:
        return pulumi.get(self, "enable_ssl_certificate_verification")

    @property
    @pulumi.getter(name="maxPollIntervalMs")
    def max_poll_interval_ms(self) -> int:
        return pulumi.get(self, "max_poll_interval_ms")

    @property
    @pulumi.getter(name="sessionTimeoutMs")
    def session_timeout_ms(self) -> int:
        return pulumi.get(self, "session_timeout_ms")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> Optional[str]:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> Optional[str]:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> Optional[str]:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> Optional[str]:
        return pulumi.get(self, "security_protocol")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigMergeTreeResult(dict):
    def __init__(__self__, *,
                 check_sample_column_is_correct: bool,
                 cleanup_delay_period: int,
                 max_avg_part_size_for_too_many_parts: int,
                 max_bytes_to_merge_at_min_space_in_pool: int,
                 max_cleanup_delay_period: int,
                 max_merge_selecting_sleep_ms: int,
                 max_number_of_merges_with_ttl_in_pool: int,
                 max_parts_in_total: int,
                 max_replicated_merges_in_queue: int,
                 merge_max_block_size: int,
                 merge_selecting_sleep_ms: int,
                 merge_with_recompression_ttl_timeout: int,
                 merge_with_ttl_timeout: int,
                 min_age_to_force_merge_on_partition_only: bool,
                 min_age_to_force_merge_seconds: int,
                 min_bytes_for_wide_part: int,
                 min_rows_for_wide_part: int,
                 number_of_free_entries_in_pool_to_lower_max_size_of_merge: int,
                 parts_to_delay_insert: int,
                 parts_to_throw_insert: int,
                 replicated_deduplication_window: int,
                 replicated_deduplication_window_seconds: int,
                 ttl_only_drop_parts: bool):
        pulumi.set(__self__, "check_sample_column_is_correct", check_sample_column_is_correct)
        pulumi.set(__self__, "cleanup_delay_period", cleanup_delay_period)
        pulumi.set(__self__, "max_avg_part_size_for_too_many_parts", max_avg_part_size_for_too_many_parts)
        pulumi.set(__self__, "max_bytes_to_merge_at_min_space_in_pool", max_bytes_to_merge_at_min_space_in_pool)
        pulumi.set(__self__, "max_cleanup_delay_period", max_cleanup_delay_period)
        pulumi.set(__self__, "max_merge_selecting_sleep_ms", max_merge_selecting_sleep_ms)
        pulumi.set(__self__, "max_number_of_merges_with_ttl_in_pool", max_number_of_merges_with_ttl_in_pool)
        pulumi.set(__self__, "max_parts_in_total", max_parts_in_total)
        pulumi.set(__self__, "max_replicated_merges_in_queue", max_replicated_merges_in_queue)
        pulumi.set(__self__, "merge_max_block_size", merge_max_block_size)
        pulumi.set(__self__, "merge_selecting_sleep_ms", merge_selecting_sleep_ms)
        pulumi.set(__self__, "merge_with_recompression_ttl_timeout", merge_with_recompression_ttl_timeout)
        pulumi.set(__self__, "merge_with_ttl_timeout", merge_with_ttl_timeout)
        pulumi.set(__self__, "min_age_to_force_merge_on_partition_only", min_age_to_force_merge_on_partition_only)
        pulumi.set(__self__, "min_age_to_force_merge_seconds", min_age_to_force_merge_seconds)
        pulumi.set(__self__, "min_bytes_for_wide_part", min_bytes_for_wide_part)
        pulumi.set(__self__, "min_rows_for_wide_part", min_rows_for_wide_part)
        pulumi.set(__self__, "number_of_free_entries_in_pool_to_lower_max_size_of_merge", number_of_free_entries_in_pool_to_lower_max_size_of_merge)
        pulumi.set(__self__, "parts_to_delay_insert", parts_to_delay_insert)
        pulumi.set(__self__, "parts_to_throw_insert", parts_to_throw_insert)
        pulumi.set(__self__, "replicated_deduplication_window", replicated_deduplication_window)
        pulumi.set(__self__, "replicated_deduplication_window_seconds", replicated_deduplication_window_seconds)
        pulumi.set(__self__, "ttl_only_drop_parts", ttl_only_drop_parts)

    @property
    @pulumi.getter(name="checkSampleColumnIsCorrect")
    def check_sample_column_is_correct(self) -> bool:
        return pulumi.get(self, "check_sample_column_is_correct")

    @property
    @pulumi.getter(name="cleanupDelayPeriod")
    def cleanup_delay_period(self) -> int:
        return pulumi.get(self, "cleanup_delay_period")

    @property
    @pulumi.getter(name="maxAvgPartSizeForTooManyParts")
    def max_avg_part_size_for_too_many_parts(self) -> int:
        return pulumi.get(self, "max_avg_part_size_for_too_many_parts")

    @property
    @pulumi.getter(name="maxBytesToMergeAtMinSpaceInPool")
    def max_bytes_to_merge_at_min_space_in_pool(self) -> int:
        return pulumi.get(self, "max_bytes_to_merge_at_min_space_in_pool")

    @property
    @pulumi.getter(name="maxCleanupDelayPeriod")
    def max_cleanup_delay_period(self) -> int:
        return pulumi.get(self, "max_cleanup_delay_period")

    @property
    @pulumi.getter(name="maxMergeSelectingSleepMs")
    def max_merge_selecting_sleep_ms(self) -> int:
        return pulumi.get(self, "max_merge_selecting_sleep_ms")

    @property
    @pulumi.getter(name="maxNumberOfMergesWithTtlInPool")
    def max_number_of_merges_with_ttl_in_pool(self) -> int:
        return pulumi.get(self, "max_number_of_merges_with_ttl_in_pool")

    @property
    @pulumi.getter(name="maxPartsInTotal")
    def max_parts_in_total(self) -> int:
        return pulumi.get(self, "max_parts_in_total")

    @property
    @pulumi.getter(name="maxReplicatedMergesInQueue")
    def max_replicated_merges_in_queue(self) -> int:
        return pulumi.get(self, "max_replicated_merges_in_queue")

    @property
    @pulumi.getter(name="mergeMaxBlockSize")
    def merge_max_block_size(self) -> int:
        return pulumi.get(self, "merge_max_block_size")

    @property
    @pulumi.getter(name="mergeSelectingSleepMs")
    def merge_selecting_sleep_ms(self) -> int:
        return pulumi.get(self, "merge_selecting_sleep_ms")

    @property
    @pulumi.getter(name="mergeWithRecompressionTtlTimeout")
    def merge_with_recompression_ttl_timeout(self) -> int:
        return pulumi.get(self, "merge_with_recompression_ttl_timeout")

    @property
    @pulumi.getter(name="mergeWithTtlTimeout")
    def merge_with_ttl_timeout(self) -> int:
        return pulumi.get(self, "merge_with_ttl_timeout")

    @property
    @pulumi.getter(name="minAgeToForceMergeOnPartitionOnly")
    def min_age_to_force_merge_on_partition_only(self) -> bool:
        return pulumi.get(self, "min_age_to_force_merge_on_partition_only")

    @property
    @pulumi.getter(name="minAgeToForceMergeSeconds")
    def min_age_to_force_merge_seconds(self) -> int:
        return pulumi.get(self, "min_age_to_force_merge_seconds")

    @property
    @pulumi.getter(name="minBytesForWidePart")
    def min_bytes_for_wide_part(self) -> int:
        return pulumi.get(self, "min_bytes_for_wide_part")

    @property
    @pulumi.getter(name="minRowsForWidePart")
    def min_rows_for_wide_part(self) -> int:
        return pulumi.get(self, "min_rows_for_wide_part")

    @property
    @pulumi.getter(name="numberOfFreeEntriesInPoolToLowerMaxSizeOfMerge")
    def number_of_free_entries_in_pool_to_lower_max_size_of_merge(self) -> int:
        return pulumi.get(self, "number_of_free_entries_in_pool_to_lower_max_size_of_merge")

    @property
    @pulumi.getter(name="partsToDelayInsert")
    def parts_to_delay_insert(self) -> int:
        return pulumi.get(self, "parts_to_delay_insert")

    @property
    @pulumi.getter(name="partsToThrowInsert")
    def parts_to_throw_insert(self) -> int:
        return pulumi.get(self, "parts_to_throw_insert")

    @property
    @pulumi.getter(name="replicatedDeduplicationWindow")
    def replicated_deduplication_window(self) -> int:
        return pulumi.get(self, "replicated_deduplication_window")

    @property
    @pulumi.getter(name="replicatedDeduplicationWindowSeconds")
    def replicated_deduplication_window_seconds(self) -> int:
        return pulumi.get(self, "replicated_deduplication_window_seconds")

    @property
    @pulumi.getter(name="ttlOnlyDropParts")
    def ttl_only_drop_parts(self) -> bool:
        return pulumi.get(self, "ttl_only_drop_parts")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigQueryCacheResult(dict):
    def __init__(__self__, *,
                 max_entries: int,
                 max_entry_size_in_bytes: int,
                 max_entry_size_in_rows: int,
                 max_size_in_bytes: int):
        pulumi.set(__self__, "max_entries", max_entries)
        pulumi.set(__self__, "max_entry_size_in_bytes", max_entry_size_in_bytes)
        pulumi.set(__self__, "max_entry_size_in_rows", max_entry_size_in_rows)
        pulumi.set(__self__, "max_size_in_bytes", max_size_in_bytes)

    @property
    @pulumi.getter(name="maxEntries")
    def max_entries(self) -> int:
        return pulumi.get(self, "max_entries")

    @property
    @pulumi.getter(name="maxEntrySizeInBytes")
    def max_entry_size_in_bytes(self) -> int:
        return pulumi.get(self, "max_entry_size_in_bytes")

    @property
    @pulumi.getter(name="maxEntrySizeInRows")
    def max_entry_size_in_rows(self) -> int:
        return pulumi.get(self, "max_entry_size_in_rows")

    @property
    @pulumi.getter(name="maxSizeInBytes")
    def max_size_in_bytes(self) -> int:
        return pulumi.get(self, "max_size_in_bytes")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleResult(dict):
    def __init__(__self__, *,
                 name: str,
                 replace: str,
                 regexp: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "replace", replace)
        if regexp is not None:
            pulumi.set(__self__, "regexp", regexp)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def replace(self) -> str:
        return pulumi.get(self, "replace")

    @property
    @pulumi.getter
    def regexp(self) -> Optional[str]:
        return pulumi.get(self, "regexp")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseConfigRabbitmqResult(dict):
    def __init__(__self__, *,
                 password: str,
                 username: str,
                 vhost: str):
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        pulumi.set(__self__, "vhost", vhost)

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")

    @property
    @pulumi.getter
    def vhost(self) -> str:
        return pulumi.get(self, "vhost")


@pulumi.output_type
class GetMdbClickhouseClusterClickhouseResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbClickhouseClusterCloudStorageResult(dict):
    def __init__(__self__, *,
                 data_cache_enabled: bool,
                 data_cache_max_size: int,
                 move_factor: float,
                 prefer_not_to_merge: bool,
                 enabled: Optional[bool] = None):
        pulumi.set(__self__, "data_cache_enabled", data_cache_enabled)
        pulumi.set(__self__, "data_cache_max_size", data_cache_max_size)
        pulumi.set(__self__, "move_factor", move_factor)
        pulumi.set(__self__, "prefer_not_to_merge", prefer_not_to_merge)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="dataCacheEnabled")
    def data_cache_enabled(self) -> bool:
        return pulumi.get(self, "data_cache_enabled")

    @property
    @pulumi.getter(name="dataCacheMaxSize")
    def data_cache_max_size(self) -> int:
        return pulumi.get(self, "data_cache_max_size")

    @property
    @pulumi.getter(name="moveFactor")
    def move_factor(self) -> float:
        return pulumi.get(self, "move_factor")

    @property
    @pulumi.getter(name="preferNotToMerge")
    def prefer_not_to_merge(self) -> bool:
        return pulumi.get(self, "prefer_not_to_merge")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetMdbClickhouseClusterDatabaseResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMdbClickhouseClusterFormatSchemaResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetMdbClickhouseClusterHostResult(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 shard_name: str,
                 subnet_id: str,
                 assign_public_ip: Optional[bool] = None,
                 type: Optional[str] = None,
                 zone: Optional[str] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "shard_name", shard_name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> str:
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> Optional[str]:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetMdbClickhouseClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: Optional[str] = None,
                 hour: Optional[int] = None,
                 type: Optional[str] = None):
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbClickhouseClusterMlModelResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None,
                 type: Optional[str] = None,
                 uri: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        return pulumi.get(self, "uri")


@pulumi.output_type
class GetMdbClickhouseClusterShardResult(dict):
    def __init__(__self__, *,
                 resources: 'outputs.GetMdbClickhouseClusterShardResourcesResult',
                 weight: int,
                 name: Optional[str] = None):
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "weight", weight)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetMdbClickhouseClusterShardResourcesResult':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def weight(self) -> int:
        return pulumi.get(self, "weight")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMdbClickhouseClusterShardGroupResult(dict):
    def __init__(__self__, *,
                 description: Optional[str] = None,
                 name: Optional[str] = None,
                 shard_names: Optional[Sequence[str]] = None):
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if shard_names is not None:
            pulumi.set(__self__, "shard_names", shard_names)

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="shardNames")
    def shard_names(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "shard_names")


@pulumi.output_type
class GetMdbClickhouseClusterShardResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbClickhouseClusterUserResult(dict):
    def __init__(__self__, *,
                 permissions: Sequence['outputs.GetMdbClickhouseClusterUserPermissionResult'],
                 quotas: Sequence['outputs.GetMdbClickhouseClusterUserQuotaResult'],
                 settings: 'outputs.GetMdbClickhouseClusterUserSettingsResult',
                 name: Optional[str] = None,
                 password: Optional[str] = None):
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "quotas", quotas)
        pulumi.set(__self__, "settings", settings)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbClickhouseClusterUserPermissionResult']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def quotas(self) -> Sequence['outputs.GetMdbClickhouseClusterUserQuotaResult']:
        return pulumi.get(self, "quotas")

    @property
    @pulumi.getter
    def settings(self) -> 'outputs.GetMdbClickhouseClusterUserSettingsResult':
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetMdbClickhouseClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: Optional[str] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetMdbClickhouseClusterUserQuotaResult(dict):
    def __init__(__self__, *,
                 errors: int,
                 execution_time: int,
                 queries: int,
                 read_rows: int,
                 result_rows: int,
                 interval_duration: Optional[int] = None):
        pulumi.set(__self__, "errors", errors)
        pulumi.set(__self__, "execution_time", execution_time)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "read_rows", read_rows)
        pulumi.set(__self__, "result_rows", result_rows)
        if interval_duration is not None:
            pulumi.set(__self__, "interval_duration", interval_duration)

    @property
    @pulumi.getter
    def errors(self) -> int:
        return pulumi.get(self, "errors")

    @property
    @pulumi.getter(name="executionTime")
    def execution_time(self) -> int:
        return pulumi.get(self, "execution_time")

    @property
    @pulumi.getter
    def queries(self) -> int:
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="readRows")
    def read_rows(self) -> int:
        return pulumi.get(self, "read_rows")

    @property
    @pulumi.getter(name="resultRows")
    def result_rows(self) -> int:
        return pulumi.get(self, "result_rows")

    @property
    @pulumi.getter(name="intervalDuration")
    def interval_duration(self) -> Optional[int]:
        return pulumi.get(self, "interval_duration")


@pulumi.output_type
class GetMdbClickhouseClusterUserSettingsResult(dict):
    def __init__(__self__, *,
                 add_http_cors_header: bool,
                 allow_ddl: bool,
                 allow_introspection_functions: bool,
                 allow_suspicious_low_cardinality_types: bool,
                 async_insert: bool,
                 async_insert_busy_timeout: int,
                 async_insert_max_data_size: int,
                 async_insert_stale_timeout: int,
                 async_insert_threads: int,
                 cancel_http_readonly_queries_on_client_close: bool,
                 compile: bool,
                 compile_expressions: bool,
                 connect_timeout: int,
                 connect_timeout_with_failover: int,
                 count_distinct_implementation: str,
                 distinct_overflow_mode: str,
                 distributed_aggregation_memory_efficient: bool,
                 distributed_ddl_task_timeout: int,
                 distributed_product_mode: str,
                 empty_result_for_aggregation_by_empty_set: bool,
                 enable_http_compression: bool,
                 fallback_to_stale_replicas_for_distributed_queries: bool,
                 flatten_nested: bool,
                 force_index_by_date: bool,
                 force_primary_key: bool,
                 group_by_overflow_mode: str,
                 group_by_two_level_threshold: int,
                 group_by_two_level_threshold_bytes: int,
                 hedged_connection_timeout_ms: int,
                 http_connection_timeout: int,
                 http_headers_progress_interval: int,
                 http_receive_timeout: int,
                 http_send_timeout: int,
                 idle_connection_timeout: int,
                 input_format_defaults_for_omitted_fields: bool,
                 input_format_import_nested_json: bool,
                 input_format_parallel_parsing: bool,
                 input_format_values_interpret_expressions: bool,
                 insert_keeper_max_retries: int,
                 insert_null_as_default: bool,
                 insert_quorum: int,
                 insert_quorum_timeout: int,
                 join_overflow_mode: str,
                 join_use_nulls: bool,
                 joined_subquery_requires_alias: bool,
                 load_balancing: str,
                 local_filesystem_read_method: str,
                 log_query_threads: bool,
                 low_cardinality_allow_in_native_format: bool,
                 max_ast_depth: int,
                 max_ast_elements: int,
                 max_block_size: int,
                 max_bytes_before_external_group_by: int,
                 max_bytes_before_external_sort: int,
                 max_bytes_in_distinct: int,
                 max_bytes_in_join: int,
                 max_bytes_in_set: int,
                 max_bytes_to_read: int,
                 max_bytes_to_sort: int,
                 max_bytes_to_transfer: int,
                 max_columns_to_read: int,
                 max_concurrent_queries_for_user: int,
                 max_execution_time: int,
                 max_expanded_ast_elements: int,
                 max_final_threads: int,
                 max_http_get_redirects: int,
                 max_insert_block_size: int,
                 max_insert_threads: int,
                 max_memory_usage: int,
                 max_memory_usage_for_user: int,
                 max_network_bandwidth: int,
                 max_network_bandwidth_for_user: int,
                 max_parser_depth: int,
                 max_query_size: int,
                 max_read_buffer_size: int,
                 max_replica_delay_for_distributed_queries: int,
                 max_result_bytes: int,
                 max_result_rows: int,
                 max_rows_in_distinct: int,
                 max_rows_in_join: int,
                 max_rows_in_set: int,
                 max_rows_to_group_by: int,
                 max_rows_to_read: int,
                 max_rows_to_sort: int,
                 max_rows_to_transfer: int,
                 max_temporary_columns: int,
                 max_temporary_data_on_disk_size_for_query: int,
                 max_temporary_data_on_disk_size_for_user: int,
                 max_temporary_non_const_columns: int,
                 max_threads: int,
                 memory_overcommit_ratio_denominator: int,
                 memory_overcommit_ratio_denominator_for_user: int,
                 memory_profiler_sample_probability: float,
                 memory_profiler_step: int,
                 memory_usage_overcommit_max_wait_microseconds: int,
                 merge_tree_max_bytes_to_use_cache: int,
                 merge_tree_max_rows_to_use_cache: int,
                 merge_tree_min_bytes_for_concurrent_read: int,
                 merge_tree_min_rows_for_concurrent_read: int,
                 min_bytes_to_use_direct_io: int,
                 min_count_to_compile: int,
                 min_count_to_compile_expression: int,
                 min_execution_speed: int,
                 min_execution_speed_bytes: int,
                 min_insert_block_size_bytes: int,
                 min_insert_block_size_rows: int,
                 output_format_json_quote64bit_integers: bool,
                 output_format_json_quote_denormals: bool,
                 prefer_localhost_replica: bool,
                 priority: int,
                 quota_mode: str,
                 read_overflow_mode: str,
                 readonly: int,
                 receive_timeout: int,
                 remote_filesystem_read_method: str,
                 replication_alter_partitions_sync: int,
                 result_overflow_mode: str,
                 select_sequential_consistency: bool,
                 send_progress_in_http_headers: bool,
                 send_timeout: int,
                 set_overflow_mode: str,
                 skip_unavailable_shards: bool,
                 sort_overflow_mode: str,
                 timeout_before_checking_execution_speed: int,
                 timeout_overflow_mode: str,
                 transfer_overflow_mode: str,
                 transform_null_in: bool,
                 use_hedged_requests: bool,
                 use_uncompressed_cache: bool,
                 wait_for_async_insert: bool,
                 wait_for_async_insert_timeout: int):
        pulumi.set(__self__, "add_http_cors_header", add_http_cors_header)
        pulumi.set(__self__, "allow_ddl", allow_ddl)
        pulumi.set(__self__, "allow_introspection_functions", allow_introspection_functions)
        pulumi.set(__self__, "allow_suspicious_low_cardinality_types", allow_suspicious_low_cardinality_types)
        pulumi.set(__self__, "async_insert", async_insert)
        pulumi.set(__self__, "async_insert_busy_timeout", async_insert_busy_timeout)
        pulumi.set(__self__, "async_insert_max_data_size", async_insert_max_data_size)
        pulumi.set(__self__, "async_insert_stale_timeout", async_insert_stale_timeout)
        pulumi.set(__self__, "async_insert_threads", async_insert_threads)
        pulumi.set(__self__, "cancel_http_readonly_queries_on_client_close", cancel_http_readonly_queries_on_client_close)
        pulumi.set(__self__, "compile", compile)
        pulumi.set(__self__, "compile_expressions", compile_expressions)
        pulumi.set(__self__, "connect_timeout", connect_timeout)
        pulumi.set(__self__, "connect_timeout_with_failover", connect_timeout_with_failover)
        pulumi.set(__self__, "count_distinct_implementation", count_distinct_implementation)
        pulumi.set(__self__, "distinct_overflow_mode", distinct_overflow_mode)
        pulumi.set(__self__, "distributed_aggregation_memory_efficient", distributed_aggregation_memory_efficient)
        pulumi.set(__self__, "distributed_ddl_task_timeout", distributed_ddl_task_timeout)
        pulumi.set(__self__, "distributed_product_mode", distributed_product_mode)
        pulumi.set(__self__, "empty_result_for_aggregation_by_empty_set", empty_result_for_aggregation_by_empty_set)
        pulumi.set(__self__, "enable_http_compression", enable_http_compression)
        pulumi.set(__self__, "fallback_to_stale_replicas_for_distributed_queries", fallback_to_stale_replicas_for_distributed_queries)
        pulumi.set(__self__, "flatten_nested", flatten_nested)
        pulumi.set(__self__, "force_index_by_date", force_index_by_date)
        pulumi.set(__self__, "force_primary_key", force_primary_key)
        pulumi.set(__self__, "group_by_overflow_mode", group_by_overflow_mode)
        pulumi.set(__self__, "group_by_two_level_threshold", group_by_two_level_threshold)
        pulumi.set(__self__, "group_by_two_level_threshold_bytes", group_by_two_level_threshold_bytes)
        pulumi.set(__self__, "hedged_connection_timeout_ms", hedged_connection_timeout_ms)
        pulumi.set(__self__, "http_connection_timeout", http_connection_timeout)
        pulumi.set(__self__, "http_headers_progress_interval", http_headers_progress_interval)
        pulumi.set(__self__, "http_receive_timeout", http_receive_timeout)
        pulumi.set(__self__, "http_send_timeout", http_send_timeout)
        pulumi.set(__self__, "idle_connection_timeout", idle_connection_timeout)
        pulumi.set(__self__, "input_format_defaults_for_omitted_fields", input_format_defaults_for_omitted_fields)
        pulumi.set(__self__, "input_format_import_nested_json", input_format_import_nested_json)
        pulumi.set(__self__, "input_format_parallel_parsing", input_format_parallel_parsing)
        pulumi.set(__self__, "input_format_values_interpret_expressions", input_format_values_interpret_expressions)
        pulumi.set(__self__, "insert_keeper_max_retries", insert_keeper_max_retries)
        pulumi.set(__self__, "insert_null_as_default", insert_null_as_default)
        pulumi.set(__self__, "insert_quorum", insert_quorum)
        pulumi.set(__self__, "insert_quorum_timeout", insert_quorum_timeout)
        pulumi.set(__self__, "join_overflow_mode", join_overflow_mode)
        pulumi.set(__self__, "join_use_nulls", join_use_nulls)
        pulumi.set(__self__, "joined_subquery_requires_alias", joined_subquery_requires_alias)
        pulumi.set(__self__, "load_balancing", load_balancing)
        pulumi.set(__self__, "local_filesystem_read_method", local_filesystem_read_method)
        pulumi.set(__self__, "log_query_threads", log_query_threads)
        pulumi.set(__self__, "low_cardinality_allow_in_native_format", low_cardinality_allow_in_native_format)
        pulumi.set(__self__, "max_ast_depth", max_ast_depth)
        pulumi.set(__self__, "max_ast_elements", max_ast_elements)
        pulumi.set(__self__, "max_block_size", max_block_size)
        pulumi.set(__self__, "max_bytes_before_external_group_by", max_bytes_before_external_group_by)
        pulumi.set(__self__, "max_bytes_before_external_sort", max_bytes_before_external_sort)
        pulumi.set(__self__, "max_bytes_in_distinct", max_bytes_in_distinct)
        pulumi.set(__self__, "max_bytes_in_join", max_bytes_in_join)
        pulumi.set(__self__, "max_bytes_in_set", max_bytes_in_set)
        pulumi.set(__self__, "max_bytes_to_read", max_bytes_to_read)
        pulumi.set(__self__, "max_bytes_to_sort", max_bytes_to_sort)
        pulumi.set(__self__, "max_bytes_to_transfer", max_bytes_to_transfer)
        pulumi.set(__self__, "max_columns_to_read", max_columns_to_read)
        pulumi.set(__self__, "max_concurrent_queries_for_user", max_concurrent_queries_for_user)
        pulumi.set(__self__, "max_execution_time", max_execution_time)
        pulumi.set(__self__, "max_expanded_ast_elements", max_expanded_ast_elements)
        pulumi.set(__self__, "max_final_threads", max_final_threads)
        pulumi.set(__self__, "max_http_get_redirects", max_http_get_redirects)
        pulumi.set(__self__, "max_insert_block_size", max_insert_block_size)
        pulumi.set(__self__, "max_insert_threads", max_insert_threads)
        pulumi.set(__self__, "max_memory_usage", max_memory_usage)
        pulumi.set(__self__, "max_memory_usage_for_user", max_memory_usage_for_user)
        pulumi.set(__self__, "max_network_bandwidth", max_network_bandwidth)
        pulumi.set(__self__, "max_network_bandwidth_for_user", max_network_bandwidth_for_user)
        pulumi.set(__self__, "max_parser_depth", max_parser_depth)
        pulumi.set(__self__, "max_query_size", max_query_size)
        pulumi.set(__self__, "max_read_buffer_size", max_read_buffer_size)
        pulumi.set(__self__, "max_replica_delay_for_distributed_queries", max_replica_delay_for_distributed_queries)
        pulumi.set(__self__, "max_result_bytes", max_result_bytes)
        pulumi.set(__self__, "max_result_rows", max_result_rows)
        pulumi.set(__self__, "max_rows_in_distinct", max_rows_in_distinct)
        pulumi.set(__self__, "max_rows_in_join", max_rows_in_join)
        pulumi.set(__self__, "max_rows_in_set", max_rows_in_set)
        pulumi.set(__self__, "max_rows_to_group_by", max_rows_to_group_by)
        pulumi.set(__self__, "max_rows_to_read", max_rows_to_read)
        pulumi.set(__self__, "max_rows_to_sort", max_rows_to_sort)
        pulumi.set(__self__, "max_rows_to_transfer", max_rows_to_transfer)
        pulumi.set(__self__, "max_temporary_columns", max_temporary_columns)
        pulumi.set(__self__, "max_temporary_data_on_disk_size_for_query", max_temporary_data_on_disk_size_for_query)
        pulumi.set(__self__, "max_temporary_data_on_disk_size_for_user", max_temporary_data_on_disk_size_for_user)
        pulumi.set(__self__, "max_temporary_non_const_columns", max_temporary_non_const_columns)
        pulumi.set(__self__, "max_threads", max_threads)
        pulumi.set(__self__, "memory_overcommit_ratio_denominator", memory_overcommit_ratio_denominator)
        pulumi.set(__self__, "memory_overcommit_ratio_denominator_for_user", memory_overcommit_ratio_denominator_for_user)
        pulumi.set(__self__, "memory_profiler_sample_probability", memory_profiler_sample_probability)
        pulumi.set(__self__, "memory_profiler_step", memory_profiler_step)
        pulumi.set(__self__, "memory_usage_overcommit_max_wait_microseconds", memory_usage_overcommit_max_wait_microseconds)
        pulumi.set(__self__, "merge_tree_max_bytes_to_use_cache", merge_tree_max_bytes_to_use_cache)
        pulumi.set(__self__, "merge_tree_max_rows_to_use_cache", merge_tree_max_rows_to_use_cache)
        pulumi.set(__self__, "merge_tree_min_bytes_for_concurrent_read", merge_tree_min_bytes_for_concurrent_read)
        pulumi.set(__self__, "merge_tree_min_rows_for_concurrent_read", merge_tree_min_rows_for_concurrent_read)
        pulumi.set(__self__, "min_bytes_to_use_direct_io", min_bytes_to_use_direct_io)
        pulumi.set(__self__, "min_count_to_compile", min_count_to_compile)
        pulumi.set(__self__, "min_count_to_compile_expression", min_count_to_compile_expression)
        pulumi.set(__self__, "min_execution_speed", min_execution_speed)
        pulumi.set(__self__, "min_execution_speed_bytes", min_execution_speed_bytes)
        pulumi.set(__self__, "min_insert_block_size_bytes", min_insert_block_size_bytes)
        pulumi.set(__self__, "min_insert_block_size_rows", min_insert_block_size_rows)
        pulumi.set(__self__, "output_format_json_quote64bit_integers", output_format_json_quote64bit_integers)
        pulumi.set(__self__, "output_format_json_quote_denormals", output_format_json_quote_denormals)
        pulumi.set(__self__, "prefer_localhost_replica", prefer_localhost_replica)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "quota_mode", quota_mode)
        pulumi.set(__self__, "read_overflow_mode", read_overflow_mode)
        pulumi.set(__self__, "readonly", readonly)
        pulumi.set(__self__, "receive_timeout", receive_timeout)
        pulumi.set(__self__, "remote_filesystem_read_method", remote_filesystem_read_method)
        pulumi.set(__self__, "replication_alter_partitions_sync", replication_alter_partitions_sync)
        pulumi.set(__self__, "result_overflow_mode", result_overflow_mode)
        pulumi.set(__self__, "select_sequential_consistency", select_sequential_consistency)
        pulumi.set(__self__, "send_progress_in_http_headers", send_progress_in_http_headers)
        pulumi.set(__self__, "send_timeout", send_timeout)
        pulumi.set(__self__, "set_overflow_mode", set_overflow_mode)
        pulumi.set(__self__, "skip_unavailable_shards", skip_unavailable_shards)
        pulumi.set(__self__, "sort_overflow_mode", sort_overflow_mode)
        pulumi.set(__self__, "timeout_before_checking_execution_speed", timeout_before_checking_execution_speed)
        pulumi.set(__self__, "timeout_overflow_mode", timeout_overflow_mode)
        pulumi.set(__self__, "transfer_overflow_mode", transfer_overflow_mode)
        pulumi.set(__self__, "transform_null_in", transform_null_in)
        pulumi.set(__self__, "use_hedged_requests", use_hedged_requests)
        pulumi.set(__self__, "use_uncompressed_cache", use_uncompressed_cache)
        pulumi.set(__self__, "wait_for_async_insert", wait_for_async_insert)
        pulumi.set(__self__, "wait_for_async_insert_timeout", wait_for_async_insert_timeout)

    @property
    @pulumi.getter(name="addHttpCorsHeader")
    def add_http_cors_header(self) -> bool:
        return pulumi.get(self, "add_http_cors_header")

    @property
    @pulumi.getter(name="allowDdl")
    def allow_ddl(self) -> bool:
        return pulumi.get(self, "allow_ddl")

    @property
    @pulumi.getter(name="allowIntrospectionFunctions")
    def allow_introspection_functions(self) -> bool:
        return pulumi.get(self, "allow_introspection_functions")

    @property
    @pulumi.getter(name="allowSuspiciousLowCardinalityTypes")
    def allow_suspicious_low_cardinality_types(self) -> bool:
        return pulumi.get(self, "allow_suspicious_low_cardinality_types")

    @property
    @pulumi.getter(name="asyncInsert")
    def async_insert(self) -> bool:
        return pulumi.get(self, "async_insert")

    @property
    @pulumi.getter(name="asyncInsertBusyTimeout")
    def async_insert_busy_timeout(self) -> int:
        return pulumi.get(self, "async_insert_busy_timeout")

    @property
    @pulumi.getter(name="asyncInsertMaxDataSize")
    def async_insert_max_data_size(self) -> int:
        return pulumi.get(self, "async_insert_max_data_size")

    @property
    @pulumi.getter(name="asyncInsertStaleTimeout")
    def async_insert_stale_timeout(self) -> int:
        return pulumi.get(self, "async_insert_stale_timeout")

    @property
    @pulumi.getter(name="asyncInsertThreads")
    def async_insert_threads(self) -> int:
        return pulumi.get(self, "async_insert_threads")

    @property
    @pulumi.getter(name="cancelHttpReadonlyQueriesOnClientClose")
    def cancel_http_readonly_queries_on_client_close(self) -> bool:
        return pulumi.get(self, "cancel_http_readonly_queries_on_client_close")

    @property
    @pulumi.getter
    def compile(self) -> bool:
        return pulumi.get(self, "compile")

    @property
    @pulumi.getter(name="compileExpressions")
    def compile_expressions(self) -> bool:
        return pulumi.get(self, "compile_expressions")

    @property
    @pulumi.getter(name="connectTimeout")
    def connect_timeout(self) -> int:
        return pulumi.get(self, "connect_timeout")

    @property
    @pulumi.getter(name="connectTimeoutWithFailover")
    def connect_timeout_with_failover(self) -> int:
        return pulumi.get(self, "connect_timeout_with_failover")

    @property
    @pulumi.getter(name="countDistinctImplementation")
    def count_distinct_implementation(self) -> str:
        return pulumi.get(self, "count_distinct_implementation")

    @property
    @pulumi.getter(name="distinctOverflowMode")
    def distinct_overflow_mode(self) -> str:
        return pulumi.get(self, "distinct_overflow_mode")

    @property
    @pulumi.getter(name="distributedAggregationMemoryEfficient")
    def distributed_aggregation_memory_efficient(self) -> bool:
        return pulumi.get(self, "distributed_aggregation_memory_efficient")

    @property
    @pulumi.getter(name="distributedDdlTaskTimeout")
    def distributed_ddl_task_timeout(self) -> int:
        return pulumi.get(self, "distributed_ddl_task_timeout")

    @property
    @pulumi.getter(name="distributedProductMode")
    def distributed_product_mode(self) -> str:
        return pulumi.get(self, "distributed_product_mode")

    @property
    @pulumi.getter(name="emptyResultForAggregationByEmptySet")
    def empty_result_for_aggregation_by_empty_set(self) -> bool:
        return pulumi.get(self, "empty_result_for_aggregation_by_empty_set")

    @property
    @pulumi.getter(name="enableHttpCompression")
    def enable_http_compression(self) -> bool:
        return pulumi.get(self, "enable_http_compression")

    @property
    @pulumi.getter(name="fallbackToStaleReplicasForDistributedQueries")
    def fallback_to_stale_replicas_for_distributed_queries(self) -> bool:
        return pulumi.get(self, "fallback_to_stale_replicas_for_distributed_queries")

    @property
    @pulumi.getter(name="flattenNested")
    def flatten_nested(self) -> bool:
        return pulumi.get(self, "flatten_nested")

    @property
    @pulumi.getter(name="forceIndexByDate")
    def force_index_by_date(self) -> bool:
        return pulumi.get(self, "force_index_by_date")

    @property
    @pulumi.getter(name="forcePrimaryKey")
    def force_primary_key(self) -> bool:
        return pulumi.get(self, "force_primary_key")

    @property
    @pulumi.getter(name="groupByOverflowMode")
    def group_by_overflow_mode(self) -> str:
        return pulumi.get(self, "group_by_overflow_mode")

    @property
    @pulumi.getter(name="groupByTwoLevelThreshold")
    def group_by_two_level_threshold(self) -> int:
        return pulumi.get(self, "group_by_two_level_threshold")

    @property
    @pulumi.getter(name="groupByTwoLevelThresholdBytes")
    def group_by_two_level_threshold_bytes(self) -> int:
        return pulumi.get(self, "group_by_two_level_threshold_bytes")

    @property
    @pulumi.getter(name="hedgedConnectionTimeoutMs")
    def hedged_connection_timeout_ms(self) -> int:
        return pulumi.get(self, "hedged_connection_timeout_ms")

    @property
    @pulumi.getter(name="httpConnectionTimeout")
    def http_connection_timeout(self) -> int:
        return pulumi.get(self, "http_connection_timeout")

    @property
    @pulumi.getter(name="httpHeadersProgressInterval")
    def http_headers_progress_interval(self) -> int:
        return pulumi.get(self, "http_headers_progress_interval")

    @property
    @pulumi.getter(name="httpReceiveTimeout")
    def http_receive_timeout(self) -> int:
        return pulumi.get(self, "http_receive_timeout")

    @property
    @pulumi.getter(name="httpSendTimeout")
    def http_send_timeout(self) -> int:
        return pulumi.get(self, "http_send_timeout")

    @property
    @pulumi.getter(name="idleConnectionTimeout")
    def idle_connection_timeout(self) -> int:
        return pulumi.get(self, "idle_connection_timeout")

    @property
    @pulumi.getter(name="inputFormatDefaultsForOmittedFields")
    def input_format_defaults_for_omitted_fields(self) -> bool:
        return pulumi.get(self, "input_format_defaults_for_omitted_fields")

    @property
    @pulumi.getter(name="inputFormatImportNestedJson")
    def input_format_import_nested_json(self) -> bool:
        return pulumi.get(self, "input_format_import_nested_json")

    @property
    @pulumi.getter(name="inputFormatParallelParsing")
    def input_format_parallel_parsing(self) -> bool:
        return pulumi.get(self, "input_format_parallel_parsing")

    @property
    @pulumi.getter(name="inputFormatValuesInterpretExpressions")
    def input_format_values_interpret_expressions(self) -> bool:
        return pulumi.get(self, "input_format_values_interpret_expressions")

    @property
    @pulumi.getter(name="insertKeeperMaxRetries")
    def insert_keeper_max_retries(self) -> int:
        return pulumi.get(self, "insert_keeper_max_retries")

    @property
    @pulumi.getter(name="insertNullAsDefault")
    def insert_null_as_default(self) -> bool:
        return pulumi.get(self, "insert_null_as_default")

    @property
    @pulumi.getter(name="insertQuorum")
    def insert_quorum(self) -> int:
        return pulumi.get(self, "insert_quorum")

    @property
    @pulumi.getter(name="insertQuorumTimeout")
    def insert_quorum_timeout(self) -> int:
        return pulumi.get(self, "insert_quorum_timeout")

    @property
    @pulumi.getter(name="joinOverflowMode")
    def join_overflow_mode(self) -> str:
        return pulumi.get(self, "join_overflow_mode")

    @property
    @pulumi.getter(name="joinUseNulls")
    def join_use_nulls(self) -> bool:
        return pulumi.get(self, "join_use_nulls")

    @property
    @pulumi.getter(name="joinedSubqueryRequiresAlias")
    def joined_subquery_requires_alias(self) -> bool:
        return pulumi.get(self, "joined_subquery_requires_alias")

    @property
    @pulumi.getter(name="loadBalancing")
    def load_balancing(self) -> str:
        return pulumi.get(self, "load_balancing")

    @property
    @pulumi.getter(name="localFilesystemReadMethod")
    def local_filesystem_read_method(self) -> str:
        return pulumi.get(self, "local_filesystem_read_method")

    @property
    @pulumi.getter(name="logQueryThreads")
    def log_query_threads(self) -> bool:
        return pulumi.get(self, "log_query_threads")

    @property
    @pulumi.getter(name="lowCardinalityAllowInNativeFormat")
    def low_cardinality_allow_in_native_format(self) -> bool:
        return pulumi.get(self, "low_cardinality_allow_in_native_format")

    @property
    @pulumi.getter(name="maxAstDepth")
    def max_ast_depth(self) -> int:
        return pulumi.get(self, "max_ast_depth")

    @property
    @pulumi.getter(name="maxAstElements")
    def max_ast_elements(self) -> int:
        return pulumi.get(self, "max_ast_elements")

    @property
    @pulumi.getter(name="maxBlockSize")
    def max_block_size(self) -> int:
        return pulumi.get(self, "max_block_size")

    @property
    @pulumi.getter(name="maxBytesBeforeExternalGroupBy")
    def max_bytes_before_external_group_by(self) -> int:
        return pulumi.get(self, "max_bytes_before_external_group_by")

    @property
    @pulumi.getter(name="maxBytesBeforeExternalSort")
    def max_bytes_before_external_sort(self) -> int:
        return pulumi.get(self, "max_bytes_before_external_sort")

    @property
    @pulumi.getter(name="maxBytesInDistinct")
    def max_bytes_in_distinct(self) -> int:
        return pulumi.get(self, "max_bytes_in_distinct")

    @property
    @pulumi.getter(name="maxBytesInJoin")
    def max_bytes_in_join(self) -> int:
        return pulumi.get(self, "max_bytes_in_join")

    @property
    @pulumi.getter(name="maxBytesInSet")
    def max_bytes_in_set(self) -> int:
        return pulumi.get(self, "max_bytes_in_set")

    @property
    @pulumi.getter(name="maxBytesToRead")
    def max_bytes_to_read(self) -> int:
        return pulumi.get(self, "max_bytes_to_read")

    @property
    @pulumi.getter(name="maxBytesToSort")
    def max_bytes_to_sort(self) -> int:
        return pulumi.get(self, "max_bytes_to_sort")

    @property
    @pulumi.getter(name="maxBytesToTransfer")
    def max_bytes_to_transfer(self) -> int:
        return pulumi.get(self, "max_bytes_to_transfer")

    @property
    @pulumi.getter(name="maxColumnsToRead")
    def max_columns_to_read(self) -> int:
        return pulumi.get(self, "max_columns_to_read")

    @property
    @pulumi.getter(name="maxConcurrentQueriesForUser")
    def max_concurrent_queries_for_user(self) -> int:
        return pulumi.get(self, "max_concurrent_queries_for_user")

    @property
    @pulumi.getter(name="maxExecutionTime")
    def max_execution_time(self) -> int:
        return pulumi.get(self, "max_execution_time")

    @property
    @pulumi.getter(name="maxExpandedAstElements")
    def max_expanded_ast_elements(self) -> int:
        return pulumi.get(self, "max_expanded_ast_elements")

    @property
    @pulumi.getter(name="maxFinalThreads")
    def max_final_threads(self) -> int:
        return pulumi.get(self, "max_final_threads")

    @property
    @pulumi.getter(name="maxHttpGetRedirects")
    def max_http_get_redirects(self) -> int:
        return pulumi.get(self, "max_http_get_redirects")

    @property
    @pulumi.getter(name="maxInsertBlockSize")
    def max_insert_block_size(self) -> int:
        return pulumi.get(self, "max_insert_block_size")

    @property
    @pulumi.getter(name="maxInsertThreads")
    def max_insert_threads(self) -> int:
        return pulumi.get(self, "max_insert_threads")

    @property
    @pulumi.getter(name="maxMemoryUsage")
    def max_memory_usage(self) -> int:
        return pulumi.get(self, "max_memory_usage")

    @property
    @pulumi.getter(name="maxMemoryUsageForUser")
    def max_memory_usage_for_user(self) -> int:
        return pulumi.get(self, "max_memory_usage_for_user")

    @property
    @pulumi.getter(name="maxNetworkBandwidth")
    def max_network_bandwidth(self) -> int:
        return pulumi.get(self, "max_network_bandwidth")

    @property
    @pulumi.getter(name="maxNetworkBandwidthForUser")
    def max_network_bandwidth_for_user(self) -> int:
        return pulumi.get(self, "max_network_bandwidth_for_user")

    @property
    @pulumi.getter(name="maxParserDepth")
    def max_parser_depth(self) -> int:
        return pulumi.get(self, "max_parser_depth")

    @property
    @pulumi.getter(name="maxQuerySize")
    def max_query_size(self) -> int:
        return pulumi.get(self, "max_query_size")

    @property
    @pulumi.getter(name="maxReadBufferSize")
    def max_read_buffer_size(self) -> int:
        return pulumi.get(self, "max_read_buffer_size")

    @property
    @pulumi.getter(name="maxReplicaDelayForDistributedQueries")
    def max_replica_delay_for_distributed_queries(self) -> int:
        return pulumi.get(self, "max_replica_delay_for_distributed_queries")

    @property
    @pulumi.getter(name="maxResultBytes")
    def max_result_bytes(self) -> int:
        return pulumi.get(self, "max_result_bytes")

    @property
    @pulumi.getter(name="maxResultRows")
    def max_result_rows(self) -> int:
        return pulumi.get(self, "max_result_rows")

    @property
    @pulumi.getter(name="maxRowsInDistinct")
    def max_rows_in_distinct(self) -> int:
        return pulumi.get(self, "max_rows_in_distinct")

    @property
    @pulumi.getter(name="maxRowsInJoin")
    def max_rows_in_join(self) -> int:
        return pulumi.get(self, "max_rows_in_join")

    @property
    @pulumi.getter(name="maxRowsInSet")
    def max_rows_in_set(self) -> int:
        return pulumi.get(self, "max_rows_in_set")

    @property
    @pulumi.getter(name="maxRowsToGroupBy")
    def max_rows_to_group_by(self) -> int:
        return pulumi.get(self, "max_rows_to_group_by")

    @property
    @pulumi.getter(name="maxRowsToRead")
    def max_rows_to_read(self) -> int:
        return pulumi.get(self, "max_rows_to_read")

    @property
    @pulumi.getter(name="maxRowsToSort")
    def max_rows_to_sort(self) -> int:
        return pulumi.get(self, "max_rows_to_sort")

    @property
    @pulumi.getter(name="maxRowsToTransfer")
    def max_rows_to_transfer(self) -> int:
        return pulumi.get(self, "max_rows_to_transfer")

    @property
    @pulumi.getter(name="maxTemporaryColumns")
    def max_temporary_columns(self) -> int:
        return pulumi.get(self, "max_temporary_columns")

    @property
    @pulumi.getter(name="maxTemporaryDataOnDiskSizeForQuery")
    def max_temporary_data_on_disk_size_for_query(self) -> int:
        return pulumi.get(self, "max_temporary_data_on_disk_size_for_query")

    @property
    @pulumi.getter(name="maxTemporaryDataOnDiskSizeForUser")
    def max_temporary_data_on_disk_size_for_user(self) -> int:
        return pulumi.get(self, "max_temporary_data_on_disk_size_for_user")

    @property
    @pulumi.getter(name="maxTemporaryNonConstColumns")
    def max_temporary_non_const_columns(self) -> int:
        return pulumi.get(self, "max_temporary_non_const_columns")

    @property
    @pulumi.getter(name="maxThreads")
    def max_threads(self) -> int:
        return pulumi.get(self, "max_threads")

    @property
    @pulumi.getter(name="memoryOvercommitRatioDenominator")
    def memory_overcommit_ratio_denominator(self) -> int:
        return pulumi.get(self, "memory_overcommit_ratio_denominator")

    @property
    @pulumi.getter(name="memoryOvercommitRatioDenominatorForUser")
    def memory_overcommit_ratio_denominator_for_user(self) -> int:
        return pulumi.get(self, "memory_overcommit_ratio_denominator_for_user")

    @property
    @pulumi.getter(name="memoryProfilerSampleProbability")
    def memory_profiler_sample_probability(self) -> float:
        return pulumi.get(self, "memory_profiler_sample_probability")

    @property
    @pulumi.getter(name="memoryProfilerStep")
    def memory_profiler_step(self) -> int:
        return pulumi.get(self, "memory_profiler_step")

    @property
    @pulumi.getter(name="memoryUsageOvercommitMaxWaitMicroseconds")
    def memory_usage_overcommit_max_wait_microseconds(self) -> int:
        return pulumi.get(self, "memory_usage_overcommit_max_wait_microseconds")

    @property
    @pulumi.getter(name="mergeTreeMaxBytesToUseCache")
    def merge_tree_max_bytes_to_use_cache(self) -> int:
        return pulumi.get(self, "merge_tree_max_bytes_to_use_cache")

    @property
    @pulumi.getter(name="mergeTreeMaxRowsToUseCache")
    def merge_tree_max_rows_to_use_cache(self) -> int:
        return pulumi.get(self, "merge_tree_max_rows_to_use_cache")

    @property
    @pulumi.getter(name="mergeTreeMinBytesForConcurrentRead")
    def merge_tree_min_bytes_for_concurrent_read(self) -> int:
        return pulumi.get(self, "merge_tree_min_bytes_for_concurrent_read")

    @property
    @pulumi.getter(name="mergeTreeMinRowsForConcurrentRead")
    def merge_tree_min_rows_for_concurrent_read(self) -> int:
        return pulumi.get(self, "merge_tree_min_rows_for_concurrent_read")

    @property
    @pulumi.getter(name="minBytesToUseDirectIo")
    def min_bytes_to_use_direct_io(self) -> int:
        return pulumi.get(self, "min_bytes_to_use_direct_io")

    @property
    @pulumi.getter(name="minCountToCompile")
    def min_count_to_compile(self) -> int:
        return pulumi.get(self, "min_count_to_compile")

    @property
    @pulumi.getter(name="minCountToCompileExpression")
    def min_count_to_compile_expression(self) -> int:
        return pulumi.get(self, "min_count_to_compile_expression")

    @property
    @pulumi.getter(name="minExecutionSpeed")
    def min_execution_speed(self) -> int:
        return pulumi.get(self, "min_execution_speed")

    @property
    @pulumi.getter(name="minExecutionSpeedBytes")
    def min_execution_speed_bytes(self) -> int:
        return pulumi.get(self, "min_execution_speed_bytes")

    @property
    @pulumi.getter(name="minInsertBlockSizeBytes")
    def min_insert_block_size_bytes(self) -> int:
        return pulumi.get(self, "min_insert_block_size_bytes")

    @property
    @pulumi.getter(name="minInsertBlockSizeRows")
    def min_insert_block_size_rows(self) -> int:
        return pulumi.get(self, "min_insert_block_size_rows")

    @property
    @pulumi.getter(name="outputFormatJsonQuote64bitIntegers")
    def output_format_json_quote64bit_integers(self) -> bool:
        return pulumi.get(self, "output_format_json_quote64bit_integers")

    @property
    @pulumi.getter(name="outputFormatJsonQuoteDenormals")
    def output_format_json_quote_denormals(self) -> bool:
        return pulumi.get(self, "output_format_json_quote_denormals")

    @property
    @pulumi.getter(name="preferLocalhostReplica")
    def prefer_localhost_replica(self) -> bool:
        return pulumi.get(self, "prefer_localhost_replica")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="quotaMode")
    def quota_mode(self) -> str:
        return pulumi.get(self, "quota_mode")

    @property
    @pulumi.getter(name="readOverflowMode")
    def read_overflow_mode(self) -> str:
        return pulumi.get(self, "read_overflow_mode")

    @property
    @pulumi.getter
    def readonly(self) -> int:
        return pulumi.get(self, "readonly")

    @property
    @pulumi.getter(name="receiveTimeout")
    def receive_timeout(self) -> int:
        return pulumi.get(self, "receive_timeout")

    @property
    @pulumi.getter(name="remoteFilesystemReadMethod")
    def remote_filesystem_read_method(self) -> str:
        return pulumi.get(self, "remote_filesystem_read_method")

    @property
    @pulumi.getter(name="replicationAlterPartitionsSync")
    def replication_alter_partitions_sync(self) -> int:
        return pulumi.get(self, "replication_alter_partitions_sync")

    @property
    @pulumi.getter(name="resultOverflowMode")
    def result_overflow_mode(self) -> str:
        return pulumi.get(self, "result_overflow_mode")

    @property
    @pulumi.getter(name="selectSequentialConsistency")
    def select_sequential_consistency(self) -> bool:
        return pulumi.get(self, "select_sequential_consistency")

    @property
    @pulumi.getter(name="sendProgressInHttpHeaders")
    def send_progress_in_http_headers(self) -> bool:
        return pulumi.get(self, "send_progress_in_http_headers")

    @property
    @pulumi.getter(name="sendTimeout")
    def send_timeout(self) -> int:
        return pulumi.get(self, "send_timeout")

    @property
    @pulumi.getter(name="setOverflowMode")
    def set_overflow_mode(self) -> str:
        return pulumi.get(self, "set_overflow_mode")

    @property
    @pulumi.getter(name="skipUnavailableShards")
    def skip_unavailable_shards(self) -> bool:
        return pulumi.get(self, "skip_unavailable_shards")

    @property
    @pulumi.getter(name="sortOverflowMode")
    def sort_overflow_mode(self) -> str:
        return pulumi.get(self, "sort_overflow_mode")

    @property
    @pulumi.getter(name="timeoutBeforeCheckingExecutionSpeed")
    def timeout_before_checking_execution_speed(self) -> int:
        return pulumi.get(self, "timeout_before_checking_execution_speed")

    @property
    @pulumi.getter(name="timeoutOverflowMode")
    def timeout_overflow_mode(self) -> str:
        return pulumi.get(self, "timeout_overflow_mode")

    @property
    @pulumi.getter(name="transferOverflowMode")
    def transfer_overflow_mode(self) -> str:
        return pulumi.get(self, "transfer_overflow_mode")

    @property
    @pulumi.getter(name="transformNullIn")
    def transform_null_in(self) -> bool:
        return pulumi.get(self, "transform_null_in")

    @property
    @pulumi.getter(name="useHedgedRequests")
    def use_hedged_requests(self) -> bool:
        return pulumi.get(self, "use_hedged_requests")

    @property
    @pulumi.getter(name="useUncompressedCache")
    def use_uncompressed_cache(self) -> bool:
        return pulumi.get(self, "use_uncompressed_cache")

    @property
    @pulumi.getter(name="waitForAsyncInsert")
    def wait_for_async_insert(self) -> bool:
        return pulumi.get(self, "wait_for_async_insert")

    @property
    @pulumi.getter(name="waitForAsyncInsertTimeout")
    def wait_for_async_insert_timeout(self) -> int:
        return pulumi.get(self, "wait_for_async_insert_timeout")


@pulumi.output_type
class GetMdbClickhouseClusterZookeeperResult(dict):
    def __init__(__self__, *,
                 resources: 'outputs.GetMdbClickhouseClusterZookeeperResourcesResult'):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetMdbClickhouseClusterZookeeperResourcesResult':
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbClickhouseClusterZookeeperResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbElasticsearchClusterConfigResult(dict):
    def __init__(__self__, *,
                 admin_password: str,
                 data_nodes: Sequence['outputs.GetMdbElasticsearchClusterConfigDataNodeResult'],
                 edition: str,
                 master_node: 'outputs.GetMdbElasticsearchClusterConfigMasterNodeResult',
                 plugins: Sequence[str],
                 version: str):
        pulumi.set(__self__, "admin_password", admin_password)
        pulumi.set(__self__, "data_nodes", data_nodes)
        pulumi.set(__self__, "edition", edition)
        pulumi.set(__self__, "master_node", master_node)
        pulumi.set(__self__, "plugins", plugins)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="adminPassword")
    def admin_password(self) -> str:
        return pulumi.get(self, "admin_password")

    @property
    @pulumi.getter(name="dataNodes")
    def data_nodes(self) -> Sequence['outputs.GetMdbElasticsearchClusterConfigDataNodeResult']:
        return pulumi.get(self, "data_nodes")

    @property
    @pulumi.getter
    def edition(self) -> str:
        return pulumi.get(self, "edition")

    @property
    @pulumi.getter(name="masterNode")
    def master_node(self) -> 'outputs.GetMdbElasticsearchClusterConfigMasterNodeResult':
        return pulumi.get(self, "master_node")

    @property
    @pulumi.getter
    def plugins(self) -> Sequence[str]:
        return pulumi.get(self, "plugins")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbElasticsearchClusterConfigDataNodeResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetMdbElasticsearchClusterConfigDataNodeResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMdbElasticsearchClusterConfigDataNodeResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbElasticsearchClusterConfigDataNodeResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbElasticsearchClusterConfigMasterNodeResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetMdbElasticsearchClusterConfigMasterNodeResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMdbElasticsearchClusterConfigMasterNodeResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbElasticsearchClusterConfigMasterNodeResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbElasticsearchClusterHostResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 fqdn: str,
                 name: str,
                 subnet_id: str,
                 type: str,
                 zone: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetMdbElasticsearchClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbGreenplumClusterAccessResult(dict):
    def __init__(__self__, *,
                 data_lens: bool,
                 data_transfer: bool,
                 web_sql: bool):
        pulumi.set(__self__, "data_lens", data_lens)
        pulumi.set(__self__, "data_transfer", data_transfer)
        pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> bool:
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> bool:
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> bool:
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class GetMdbGreenplumClusterBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbGreenplumClusterCloudStorageResult(dict):
    def __init__(__self__, *,
                 enable: bool):
        pulumi.set(__self__, "enable", enable)

    @property
    @pulumi.getter
    def enable(self) -> bool:
        return pulumi.get(self, "enable")


@pulumi.output_type
class GetMdbGreenplumClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbGreenplumClusterMasterHostResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 fqdn: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "fqdn", fqdn)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class GetMdbGreenplumClusterMasterSubclusterResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetMdbGreenplumClusterMasterSubclusterResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMdbGreenplumClusterMasterSubclusterResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbGreenplumClusterMasterSubclusterResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbGreenplumClusterPoolerConfigResult(dict):
    def __init__(__self__, *,
                 pool_client_idle_timeout: Optional[int] = None,
                 pool_size: Optional[int] = None,
                 pooling_mode: Optional[str] = None):
        if pool_client_idle_timeout is not None:
            pulumi.set(__self__, "pool_client_idle_timeout", pool_client_idle_timeout)
        if pool_size is not None:
            pulumi.set(__self__, "pool_size", pool_size)
        if pooling_mode is not None:
            pulumi.set(__self__, "pooling_mode", pooling_mode)

    @property
    @pulumi.getter(name="poolClientIdleTimeout")
    def pool_client_idle_timeout(self) -> Optional[int]:
        return pulumi.get(self, "pool_client_idle_timeout")

    @property
    @pulumi.getter(name="poolSize")
    def pool_size(self) -> Optional[int]:
        return pulumi.get(self, "pool_size")

    @property
    @pulumi.getter(name="poolingMode")
    def pooling_mode(self) -> Optional[str]:
        return pulumi.get(self, "pooling_mode")


@pulumi.output_type
class GetMdbGreenplumClusterPxfConfigResult(dict):
    def __init__(__self__, *,
                 connection_timeout: Optional[int] = None,
                 max_threads: Optional[int] = None,
                 pool_allow_core_thread_timeout: Optional[bool] = None,
                 pool_core_size: Optional[int] = None,
                 pool_max_size: Optional[int] = None,
                 pool_queue_capacity: Optional[int] = None,
                 upload_timeout: Optional[int] = None,
                 xms: Optional[int] = None,
                 xmx: Optional[int] = None):
        if connection_timeout is not None:
            pulumi.set(__self__, "connection_timeout", connection_timeout)
        if max_threads is not None:
            pulumi.set(__self__, "max_threads", max_threads)
        if pool_allow_core_thread_timeout is not None:
            pulumi.set(__self__, "pool_allow_core_thread_timeout", pool_allow_core_thread_timeout)
        if pool_core_size is not None:
            pulumi.set(__self__, "pool_core_size", pool_core_size)
        if pool_max_size is not None:
            pulumi.set(__self__, "pool_max_size", pool_max_size)
        if pool_queue_capacity is not None:
            pulumi.set(__self__, "pool_queue_capacity", pool_queue_capacity)
        if upload_timeout is not None:
            pulumi.set(__self__, "upload_timeout", upload_timeout)
        if xms is not None:
            pulumi.set(__self__, "xms", xms)
        if xmx is not None:
            pulumi.set(__self__, "xmx", xmx)

    @property
    @pulumi.getter(name="connectionTimeout")
    def connection_timeout(self) -> Optional[int]:
        return pulumi.get(self, "connection_timeout")

    @property
    @pulumi.getter(name="maxThreads")
    def max_threads(self) -> Optional[int]:
        return pulumi.get(self, "max_threads")

    @property
    @pulumi.getter(name="poolAllowCoreThreadTimeout")
    def pool_allow_core_thread_timeout(self) -> Optional[bool]:
        return pulumi.get(self, "pool_allow_core_thread_timeout")

    @property
    @pulumi.getter(name="poolCoreSize")
    def pool_core_size(self) -> Optional[int]:
        return pulumi.get(self, "pool_core_size")

    @property
    @pulumi.getter(name="poolMaxSize")
    def pool_max_size(self) -> Optional[int]:
        return pulumi.get(self, "pool_max_size")

    @property
    @pulumi.getter(name="poolQueueCapacity")
    def pool_queue_capacity(self) -> Optional[int]:
        return pulumi.get(self, "pool_queue_capacity")

    @property
    @pulumi.getter(name="uploadTimeout")
    def upload_timeout(self) -> Optional[int]:
        return pulumi.get(self, "upload_timeout")

    @property
    @pulumi.getter
    def xms(self) -> Optional[int]:
        return pulumi.get(self, "xms")

    @property
    @pulumi.getter
    def xmx(self) -> Optional[int]:
        return pulumi.get(self, "xmx")


@pulumi.output_type
class GetMdbGreenplumClusterSegmentHostResult(dict):
    def __init__(__self__, *,
                 fqdn: str):
        pulumi.set(__self__, "fqdn", fqdn)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")


@pulumi.output_type
class GetMdbGreenplumClusterSegmentSubclusterResult(dict):
    def __init__(__self__, *,
                 resources: Sequence['outputs.GetMdbGreenplumClusterSegmentSubclusterResourceResult']):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMdbGreenplumClusterSegmentSubclusterResourceResult']:
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbGreenplumClusterSegmentSubclusterResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbKafkaClusterAccessResult(dict):
    def __init__(__self__, *,
                 data_transfer: bool):
        pulumi.set(__self__, "data_transfer", data_transfer)

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> bool:
        return pulumi.get(self, "data_transfer")


@pulumi.output_type
class GetMdbKafkaClusterConfigResult(dict):
    def __init__(__self__, *,
                 access: 'outputs.GetMdbKafkaClusterConfigAccessResult',
                 disk_size_autoscaling: 'outputs.GetMdbKafkaClusterConfigDiskSizeAutoscalingResult',
                 kafka: 'outputs.GetMdbKafkaClusterConfigKafkaResult',
                 version: str,
                 zones: Sequence[str],
                 zookeeper: 'outputs.GetMdbKafkaClusterConfigZookeeperResult',
                 assign_public_ip: Optional[bool] = None,
                 brokers_count: Optional[int] = None,
                 schema_registry: Optional[bool] = None,
                 unmanaged_topics: Optional[bool] = None):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "disk_size_autoscaling", disk_size_autoscaling)
        pulumi.set(__self__, "kafka", kafka)
        pulumi.set(__self__, "version", version)
        pulumi.set(__self__, "zones", zones)
        pulumi.set(__self__, "zookeeper", zookeeper)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if brokers_count is not None:
            pulumi.set(__self__, "brokers_count", brokers_count)
        if schema_registry is not None:
            pulumi.set(__self__, "schema_registry", schema_registry)
        if unmanaged_topics is not None:
            pulumi.set(__self__, "unmanaged_topics", unmanaged_topics)

    @property
    @pulumi.getter
    def access(self) -> 'outputs.GetMdbKafkaClusterConfigAccessResult':
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="diskSizeAutoscaling")
    def disk_size_autoscaling(self) -> 'outputs.GetMdbKafkaClusterConfigDiskSizeAutoscalingResult':
        return pulumi.get(self, "disk_size_autoscaling")

    @property
    @pulumi.getter
    def kafka(self) -> 'outputs.GetMdbKafkaClusterConfigKafkaResult':
        return pulumi.get(self, "kafka")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")

    @property
    @pulumi.getter
    def zones(self) -> Sequence[str]:
        return pulumi.get(self, "zones")

    @property
    @pulumi.getter
    def zookeeper(self) -> 'outputs.GetMdbKafkaClusterConfigZookeeperResult':
        return pulumi.get(self, "zookeeper")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="brokersCount")
    def brokers_count(self) -> Optional[int]:
        return pulumi.get(self, "brokers_count")

    @property
    @pulumi.getter(name="schemaRegistry")
    def schema_registry(self) -> Optional[bool]:
        return pulumi.get(self, "schema_registry")

    @property
    @pulumi.getter(name="unmanagedTopics")
    def unmanaged_topics(self) -> Optional[bool]:
        warnings.warn("""The 'unmanaged_topics' field has been deprecated, because feature enabled permanently and can't be disabled.""", DeprecationWarning)
        pulumi.log.warn("""unmanaged_topics is deprecated: The 'unmanaged_topics' field has been deprecated, because feature enabled permanently and can't be disabled.""")

        return pulumi.get(self, "unmanaged_topics")


@pulumi.output_type
class GetMdbKafkaClusterConfigAccessResult(dict):
    def __init__(__self__, *,
                 data_transfer: Optional[bool] = None):
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        return pulumi.get(self, "data_transfer")


@pulumi.output_type
class GetMdbKafkaClusterConfigDiskSizeAutoscalingResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbKafkaClusterConfigKafkaResult(dict):
    def __init__(__self__, *,
                 resources: 'outputs.GetMdbKafkaClusterConfigKafkaResourcesResult',
                 kafka_config: Optional['outputs.GetMdbKafkaClusterConfigKafkaKafkaConfigResult'] = None):
        pulumi.set(__self__, "resources", resources)
        if kafka_config is not None:
            pulumi.set(__self__, "kafka_config", kafka_config)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetMdbKafkaClusterConfigKafkaResourcesResult':
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter(name="kafkaConfig")
    def kafka_config(self) -> Optional['outputs.GetMdbKafkaClusterConfigKafkaKafkaConfigResult']:
        return pulumi.get(self, "kafka_config")


@pulumi.output_type
class GetMdbKafkaClusterConfigKafkaKafkaConfigResult(dict):
    def __init__(__self__, *,
                 auto_create_topics_enable: Optional[bool] = None,
                 compression_type: Optional[str] = None,
                 default_replication_factor: Optional[str] = None,
                 log_flush_interval_messages: Optional[str] = None,
                 log_flush_interval_ms: Optional[str] = None,
                 log_flush_scheduler_interval_ms: Optional[str] = None,
                 log_preallocate: Optional[bool] = None,
                 log_retention_bytes: Optional[str] = None,
                 log_retention_hours: Optional[str] = None,
                 log_retention_minutes: Optional[str] = None,
                 log_retention_ms: Optional[str] = None,
                 log_segment_bytes: Optional[str] = None,
                 message_max_bytes: Optional[str] = None,
                 num_partitions: Optional[str] = None,
                 offsets_retention_minutes: Optional[str] = None,
                 replica_fetch_max_bytes: Optional[str] = None,
                 sasl_enabled_mechanisms: Optional[Sequence[str]] = None,
                 socket_receive_buffer_bytes: Optional[str] = None,
                 socket_send_buffer_bytes: Optional[str] = None,
                 ssl_cipher_suites: Optional[Sequence[str]] = None):
        if auto_create_topics_enable is not None:
            pulumi.set(__self__, "auto_create_topics_enable", auto_create_topics_enable)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if default_replication_factor is not None:
            pulumi.set(__self__, "default_replication_factor", default_replication_factor)
        if log_flush_interval_messages is not None:
            pulumi.set(__self__, "log_flush_interval_messages", log_flush_interval_messages)
        if log_flush_interval_ms is not None:
            pulumi.set(__self__, "log_flush_interval_ms", log_flush_interval_ms)
        if log_flush_scheduler_interval_ms is not None:
            pulumi.set(__self__, "log_flush_scheduler_interval_ms", log_flush_scheduler_interval_ms)
        if log_preallocate is not None:
            pulumi.set(__self__, "log_preallocate", log_preallocate)
        if log_retention_bytes is not None:
            pulumi.set(__self__, "log_retention_bytes", log_retention_bytes)
        if log_retention_hours is not None:
            pulumi.set(__self__, "log_retention_hours", log_retention_hours)
        if log_retention_minutes is not None:
            pulumi.set(__self__, "log_retention_minutes", log_retention_minutes)
        if log_retention_ms is not None:
            pulumi.set(__self__, "log_retention_ms", log_retention_ms)
        if log_segment_bytes is not None:
            pulumi.set(__self__, "log_segment_bytes", log_segment_bytes)
        if message_max_bytes is not None:
            pulumi.set(__self__, "message_max_bytes", message_max_bytes)
        if num_partitions is not None:
            pulumi.set(__self__, "num_partitions", num_partitions)
        if offsets_retention_minutes is not None:
            pulumi.set(__self__, "offsets_retention_minutes", offsets_retention_minutes)
        if replica_fetch_max_bytes is not None:
            pulumi.set(__self__, "replica_fetch_max_bytes", replica_fetch_max_bytes)
        if sasl_enabled_mechanisms is not None:
            pulumi.set(__self__, "sasl_enabled_mechanisms", sasl_enabled_mechanisms)
        if socket_receive_buffer_bytes is not None:
            pulumi.set(__self__, "socket_receive_buffer_bytes", socket_receive_buffer_bytes)
        if socket_send_buffer_bytes is not None:
            pulumi.set(__self__, "socket_send_buffer_bytes", socket_send_buffer_bytes)
        if ssl_cipher_suites is not None:
            pulumi.set(__self__, "ssl_cipher_suites", ssl_cipher_suites)

    @property
    @pulumi.getter(name="autoCreateTopicsEnable")
    def auto_create_topics_enable(self) -> Optional[bool]:
        return pulumi.get(self, "auto_create_topics_enable")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="defaultReplicationFactor")
    def default_replication_factor(self) -> Optional[str]:
        return pulumi.get(self, "default_replication_factor")

    @property
    @pulumi.getter(name="logFlushIntervalMessages")
    def log_flush_interval_messages(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_messages")

    @property
    @pulumi.getter(name="logFlushIntervalMs")
    def log_flush_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_interval_ms")

    @property
    @pulumi.getter(name="logFlushSchedulerIntervalMs")
    def log_flush_scheduler_interval_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_flush_scheduler_interval_ms")

    @property
    @pulumi.getter(name="logPreallocate")
    def log_preallocate(self) -> Optional[bool]:
        return pulumi.get(self, "log_preallocate")

    @property
    @pulumi.getter(name="logRetentionBytes")
    def log_retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_bytes")

    @property
    @pulumi.getter(name="logRetentionHours")
    def log_retention_hours(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_hours")

    @property
    @pulumi.getter(name="logRetentionMinutes")
    def log_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_minutes")

    @property
    @pulumi.getter(name="logRetentionMs")
    def log_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "log_retention_ms")

    @property
    @pulumi.getter(name="logSegmentBytes")
    def log_segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "log_segment_bytes")

    @property
    @pulumi.getter(name="messageMaxBytes")
    def message_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "message_max_bytes")

    @property
    @pulumi.getter(name="numPartitions")
    def num_partitions(self) -> Optional[str]:
        return pulumi.get(self, "num_partitions")

    @property
    @pulumi.getter(name="offsetsRetentionMinutes")
    def offsets_retention_minutes(self) -> Optional[str]:
        return pulumi.get(self, "offsets_retention_minutes")

    @property
    @pulumi.getter(name="replicaFetchMaxBytes")
    def replica_fetch_max_bytes(self) -> Optional[str]:
        return pulumi.get(self, "replica_fetch_max_bytes")

    @property
    @pulumi.getter(name="saslEnabledMechanisms")
    def sasl_enabled_mechanisms(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "sasl_enabled_mechanisms")

    @property
    @pulumi.getter(name="socketReceiveBufferBytes")
    def socket_receive_buffer_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_receive_buffer_bytes")

    @property
    @pulumi.getter(name="socketSendBufferBytes")
    def socket_send_buffer_bytes(self) -> Optional[str]:
        return pulumi.get(self, "socket_send_buffer_bytes")

    @property
    @pulumi.getter(name="sslCipherSuites")
    def ssl_cipher_suites(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "ssl_cipher_suites")


@pulumi.output_type
class GetMdbKafkaClusterConfigKafkaResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbKafkaClusterConfigZookeeperResult(dict):
    def __init__(__self__, *,
                 resources: 'outputs.GetMdbKafkaClusterConfigZookeeperResourcesResult'):
        pulumi.set(__self__, "resources", resources)

    @property
    @pulumi.getter
    def resources(self) -> 'outputs.GetMdbKafkaClusterConfigZookeeperResourcesResult':
        return pulumi.get(self, "resources")


@pulumi.output_type
class GetMdbKafkaClusterConfigZookeeperResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbKafkaClusterDiskSizeAutoscalingResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: int,
                 planned_usage_threshold: int):
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> int:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> int:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbKafkaClusterHostResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 health: str,
                 name: str,
                 role: str,
                 subnet_id: str,
                 zone_id: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def health(self) -> str:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetMdbKafkaClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbKafkaClusterTopicResult(dict):
    def __init__(__self__, *,
                 name: str,
                 partitions: int,
                 replication_factor: int,
                 topic_config: Optional['outputs.GetMdbKafkaClusterTopicTopicConfigResult'] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "partitions", partitions)
        pulumi.set(__self__, "replication_factor", replication_factor)
        if topic_config is not None:
            pulumi.set(__self__, "topic_config", topic_config)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def partitions(self) -> int:
        return pulumi.get(self, "partitions")

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="topicConfig")
    def topic_config(self) -> Optional['outputs.GetMdbKafkaClusterTopicTopicConfigResult']:
        return pulumi.get(self, "topic_config")


@pulumi.output_type
class GetMdbKafkaClusterTopicTopicConfigResult(dict):
    def __init__(__self__, *,
                 cleanup_policy: Optional[str] = None,
                 compression_type: Optional[str] = None,
                 delete_retention_ms: Optional[str] = None,
                 file_delete_delay_ms: Optional[str] = None,
                 flush_messages: Optional[str] = None,
                 flush_ms: Optional[str] = None,
                 max_message_bytes: Optional[str] = None,
                 min_compaction_lag_ms: Optional[str] = None,
                 min_insync_replicas: Optional[str] = None,
                 preallocate: Optional[bool] = None,
                 retention_bytes: Optional[str] = None,
                 retention_ms: Optional[str] = None,
                 segment_bytes: Optional[str] = None):
        if cleanup_policy is not None:
            pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        if compression_type is not None:
            pulumi.set(__self__, "compression_type", compression_type)
        if delete_retention_ms is not None:
            pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        if file_delete_delay_ms is not None:
            pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        if flush_messages is not None:
            pulumi.set(__self__, "flush_messages", flush_messages)
        if flush_ms is not None:
            pulumi.set(__self__, "flush_ms", flush_ms)
        if max_message_bytes is not None:
            pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        if min_compaction_lag_ms is not None:
            pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        if min_insync_replicas is not None:
            pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        if preallocate is not None:
            pulumi.set(__self__, "preallocate", preallocate)
        if retention_bytes is not None:
            pulumi.set(__self__, "retention_bytes", retention_bytes)
        if retention_ms is not None:
            pulumi.set(__self__, "retention_ms", retention_ms)
        if segment_bytes is not None:
            pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> Optional[str]:
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> Optional[str]:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "delete_retention_ms")

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> Optional[str]:
        return pulumi.get(self, "file_delete_delay_ms")

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> Optional[str]:
        return pulumi.get(self, "flush_messages")

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> Optional[str]:
        return pulumi.get(self, "flush_ms")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> Optional[str]:
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> Optional[str]:
        return pulumi.get(self, "min_compaction_lag_ms")

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> Optional[str]:
        return pulumi.get(self, "min_insync_replicas")

    @property
    @pulumi.getter
    def preallocate(self) -> Optional[bool]:
        return pulumi.get(self, "preallocate")

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> Optional[str]:
        return pulumi.get(self, "retention_bytes")

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> Optional[str]:
        return pulumi.get(self, "retention_ms")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> Optional[str]:
        return pulumi.get(self, "segment_bytes")


@pulumi.output_type
class GetMdbKafkaClusterUserResult(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Optional[Sequence['outputs.GetMdbKafkaClusterUserPermissionResult']] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        if permissions is not None:
            pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Optional[Sequence['outputs.GetMdbKafkaClusterUserPermissionResult']]:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetMdbKafkaClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 role: str,
                 topic_name: str,
                 allow_hosts: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "topic_name", topic_name)
        if allow_hosts is not None:
            pulumi.set(__self__, "allow_hosts", allow_hosts)

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")

    @property
    @pulumi.getter(name="allowHosts")
    def allow_hosts(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "allow_hosts")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerResult(dict):
    def __init__(__self__, *,
                 replication_factor: int,
                 source_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterResult'],
                 target_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterResult'],
                 topics: str):
        pulumi.set(__self__, "replication_factor", replication_factor)
        pulumi.set(__self__, "source_clusters", source_clusters)
        pulumi.set(__self__, "target_clusters", target_clusters)
        pulumi.set(__self__, "topics", topics)

    @property
    @pulumi.getter(name="replicationFactor")
    def replication_factor(self) -> int:
        return pulumi.get(self, "replication_factor")

    @property
    @pulumi.getter(name="sourceClusters")
    def source_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterResult']:
        return pulumi.get(self, "source_clusters")

    @property
    @pulumi.getter(name="targetClusters")
    def target_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterResult']:
        return pulumi.get(self, "target_clusters")

    @property
    @pulumi.getter
    def topics(self) -> str:
        return pulumi.get(self, "topics")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 external_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterResult'],
                 this_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterResult']):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "external_clusters", external_clusters)
        pulumi.set(__self__, "this_clusters", this_clusters)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="externalClusters")
    def external_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterResult']:
        return pulumi.get(self, "external_clusters")

    @property
    @pulumi.getter(name="thisClusters")
    def this_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterResult']:
        return pulumi.get(self, "this_clusters")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterExternalClusterResult(dict):
    def __init__(__self__, *,
                 bootstrap_servers: str,
                 sasl_mechanism: str,
                 sasl_password: str,
                 sasl_username: str,
                 security_protocol: str):
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        pulumi.set(__self__, "sasl_password", sasl_password)
        pulumi.set(__self__, "sasl_username", sasl_username)
        pulumi.set(__self__, "security_protocol", security_protocol)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> str:
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> str:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> str:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> str:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> str:
        return pulumi.get(self, "security_protocol")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerSourceClusterThisClusterResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterResult(dict):
    def __init__(__self__, *,
                 alias: str,
                 external_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterResult'],
                 this_clusters: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterResult']):
        pulumi.set(__self__, "alias", alias)
        pulumi.set(__self__, "external_clusters", external_clusters)
        pulumi.set(__self__, "this_clusters", this_clusters)

    @property
    @pulumi.getter
    def alias(self) -> str:
        return pulumi.get(self, "alias")

    @property
    @pulumi.getter(name="externalClusters")
    def external_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterResult']:
        return pulumi.get(self, "external_clusters")

    @property
    @pulumi.getter(name="thisClusters")
    def this_clusters(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterResult']:
        return pulumi.get(self, "this_clusters")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterExternalClusterResult(dict):
    def __init__(__self__, *,
                 bootstrap_servers: str,
                 sasl_mechanism: str,
                 sasl_password: str,
                 sasl_username: str,
                 security_protocol: str):
        pulumi.set(__self__, "bootstrap_servers", bootstrap_servers)
        pulumi.set(__self__, "sasl_mechanism", sasl_mechanism)
        pulumi.set(__self__, "sasl_password", sasl_password)
        pulumi.set(__self__, "sasl_username", sasl_username)
        pulumi.set(__self__, "security_protocol", security_protocol)

    @property
    @pulumi.getter(name="bootstrapServers")
    def bootstrap_servers(self) -> str:
        return pulumi.get(self, "bootstrap_servers")

    @property
    @pulumi.getter(name="saslMechanism")
    def sasl_mechanism(self) -> str:
        return pulumi.get(self, "sasl_mechanism")

    @property
    @pulumi.getter(name="saslPassword")
    def sasl_password(self) -> str:
        return pulumi.get(self, "sasl_password")

    @property
    @pulumi.getter(name="saslUsername")
    def sasl_username(self) -> str:
        return pulumi.get(self, "sasl_username")

    @property
    @pulumi.getter(name="securityProtocol")
    def security_protocol(self) -> str:
        return pulumi.get(self, "security_protocol")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigMirrormakerTargetClusterThisClusterResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigS3SinkResult(dict):
    def __init__(__self__, *,
                 file_compression_type: str,
                 file_max_records: int,
                 s3_connections: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionResult'],
                 topics: str):
        pulumi.set(__self__, "file_compression_type", file_compression_type)
        pulumi.set(__self__, "file_max_records", file_max_records)
        pulumi.set(__self__, "s3_connections", s3_connections)
        pulumi.set(__self__, "topics", topics)

    @property
    @pulumi.getter(name="fileCompressionType")
    def file_compression_type(self) -> str:
        return pulumi.get(self, "file_compression_type")

    @property
    @pulumi.getter(name="fileMaxRecords")
    def file_max_records(self) -> int:
        return pulumi.get(self, "file_max_records")

    @property
    @pulumi.getter(name="s3Connections")
    def s3_connections(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionResult']:
        return pulumi.get(self, "s3_connections")

    @property
    @pulumi.getter
    def topics(self) -> str:
        return pulumi.get(self, "topics")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionResult(dict):
    def __init__(__self__, *,
                 bucket_name: str,
                 external_s3s: Sequence['outputs.GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3Result']):
        pulumi.set(__self__, "bucket_name", bucket_name)
        pulumi.set(__self__, "external_s3s", external_s3s)

    @property
    @pulumi.getter(name="bucketName")
    def bucket_name(self) -> str:
        return pulumi.get(self, "bucket_name")

    @property
    @pulumi.getter(name="externalS3s")
    def external_s3s(self) -> Sequence['outputs.GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3Result']:
        return pulumi.get(self, "external_s3s")


@pulumi.output_type
class GetMdbKafkaConnectorConnectorConfigS3SinkS3ConnectionExternalS3Result(dict):
    def __init__(__self__, *,
                 access_key_id: str,
                 endpoint: str,
                 region: str,
                 secret_access_key: str):
        pulumi.set(__self__, "access_key_id", access_key_id)
        pulumi.set(__self__, "endpoint", endpoint)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "secret_access_key", secret_access_key)

    @property
    @pulumi.getter(name="accessKeyId")
    def access_key_id(self) -> str:
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter
    def endpoint(self) -> str:
        return pulumi.get(self, "endpoint")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="secretAccessKey")
    def secret_access_key(self) -> str:
        return pulumi.get(self, "secret_access_key")


@pulumi.output_type
class GetMdbKafkaTopicTopicConfigResult(dict):
    def __init__(__self__, *,
                 cleanup_policy: str,
                 compression_type: str,
                 delete_retention_ms: str,
                 file_delete_delay_ms: str,
                 flush_messages: str,
                 flush_ms: str,
                 max_message_bytes: str,
                 min_compaction_lag_ms: str,
                 min_insync_replicas: str,
                 preallocate: bool,
                 retention_bytes: str,
                 retention_ms: str,
                 segment_bytes: str):
        pulumi.set(__self__, "cleanup_policy", cleanup_policy)
        pulumi.set(__self__, "compression_type", compression_type)
        pulumi.set(__self__, "delete_retention_ms", delete_retention_ms)
        pulumi.set(__self__, "file_delete_delay_ms", file_delete_delay_ms)
        pulumi.set(__self__, "flush_messages", flush_messages)
        pulumi.set(__self__, "flush_ms", flush_ms)
        pulumi.set(__self__, "max_message_bytes", max_message_bytes)
        pulumi.set(__self__, "min_compaction_lag_ms", min_compaction_lag_ms)
        pulumi.set(__self__, "min_insync_replicas", min_insync_replicas)
        pulumi.set(__self__, "preallocate", preallocate)
        pulumi.set(__self__, "retention_bytes", retention_bytes)
        pulumi.set(__self__, "retention_ms", retention_ms)
        pulumi.set(__self__, "segment_bytes", segment_bytes)

    @property
    @pulumi.getter(name="cleanupPolicy")
    def cleanup_policy(self) -> str:
        return pulumi.get(self, "cleanup_policy")

    @property
    @pulumi.getter(name="compressionType")
    def compression_type(self) -> str:
        return pulumi.get(self, "compression_type")

    @property
    @pulumi.getter(name="deleteRetentionMs")
    def delete_retention_ms(self) -> str:
        return pulumi.get(self, "delete_retention_ms")

    @property
    @pulumi.getter(name="fileDeleteDelayMs")
    def file_delete_delay_ms(self) -> str:
        return pulumi.get(self, "file_delete_delay_ms")

    @property
    @pulumi.getter(name="flushMessages")
    def flush_messages(self) -> str:
        return pulumi.get(self, "flush_messages")

    @property
    @pulumi.getter(name="flushMs")
    def flush_ms(self) -> str:
        return pulumi.get(self, "flush_ms")

    @property
    @pulumi.getter(name="maxMessageBytes")
    def max_message_bytes(self) -> str:
        return pulumi.get(self, "max_message_bytes")

    @property
    @pulumi.getter(name="minCompactionLagMs")
    def min_compaction_lag_ms(self) -> str:
        return pulumi.get(self, "min_compaction_lag_ms")

    @property
    @pulumi.getter(name="minInsyncReplicas")
    def min_insync_replicas(self) -> str:
        return pulumi.get(self, "min_insync_replicas")

    @property
    @pulumi.getter
    def preallocate(self) -> bool:
        return pulumi.get(self, "preallocate")

    @property
    @pulumi.getter(name="retentionBytes")
    def retention_bytes(self) -> str:
        return pulumi.get(self, "retention_bytes")

    @property
    @pulumi.getter(name="retentionMs")
    def retention_ms(self) -> str:
        return pulumi.get(self, "retention_ms")

    @property
    @pulumi.getter(name="segmentBytes")
    def segment_bytes(self) -> str:
        return pulumi.get(self, "segment_bytes")


@pulumi.output_type
class GetMdbKafkaUserPermissionResult(dict):
    def __init__(__self__, *,
                 allow_hosts: Sequence[str],
                 role: str,
                 topic_name: str):
        pulumi.set(__self__, "allow_hosts", allow_hosts)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "topic_name", topic_name)

    @property
    @pulumi.getter(name="allowHosts")
    def allow_hosts(self) -> Sequence[str]:
        return pulumi.get(self, "allow_hosts")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="topicName")
    def topic_name(self) -> str:
        return pulumi.get(self, "topic_name")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigResult(dict):
    def __init__(__self__, *,
                 access: 'outputs.GetMdbMongodbClusterClusterConfigAccessResult',
                 backup_retain_period_days: int,
                 backup_window_start: 'outputs.GetMdbMongodbClusterClusterConfigBackupWindowStartResult',
                 feature_compatibility_version: str,
                 mongocfg: 'outputs.GetMdbMongodbClusterClusterConfigMongocfgResult',
                 mongod: 'outputs.GetMdbMongodbClusterClusterConfigMongodResult',
                 mongos: 'outputs.GetMdbMongodbClusterClusterConfigMongosResult',
                 performance_diagnostics: 'outputs.GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsResult',
                 version: Optional[str] = None):
        pulumi.set(__self__, "access", access)
        pulumi.set(__self__, "backup_retain_period_days", backup_retain_period_days)
        pulumi.set(__self__, "backup_window_start", backup_window_start)
        pulumi.set(__self__, "feature_compatibility_version", feature_compatibility_version)
        pulumi.set(__self__, "mongocfg", mongocfg)
        pulumi.set(__self__, "mongod", mongod)
        pulumi.set(__self__, "mongos", mongos)
        pulumi.set(__self__, "performance_diagnostics", performance_diagnostics)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def access(self) -> 'outputs.GetMdbMongodbClusterClusterConfigAccessResult':
        return pulumi.get(self, "access")

    @property
    @pulumi.getter(name="backupRetainPeriodDays")
    def backup_retain_period_days(self) -> int:
        return pulumi.get(self, "backup_retain_period_days")

    @property
    @pulumi.getter(name="backupWindowStart")
    def backup_window_start(self) -> 'outputs.GetMdbMongodbClusterClusterConfigBackupWindowStartResult':
        return pulumi.get(self, "backup_window_start")

    @property
    @pulumi.getter(name="featureCompatibilityVersion")
    def feature_compatibility_version(self) -> str:
        return pulumi.get(self, "feature_compatibility_version")

    @property
    @pulumi.getter
    def mongocfg(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongocfgResult':
        return pulumi.get(self, "mongocfg")

    @property
    @pulumi.getter
    def mongod(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongodResult':
        return pulumi.get(self, "mongod")

    @property
    @pulumi.getter
    def mongos(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongosResult':
        return pulumi.get(self, "mongos")

    @property
    @pulumi.getter(name="performanceDiagnostics")
    def performance_diagnostics(self) -> 'outputs.GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsResult':
        return pulumi.get(self, "performance_diagnostics")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigAccessResult(dict):
    def __init__(__self__, *,
                 data_lens: Optional[bool] = None,
                 data_transfer: Optional[bool] = None):
        if data_lens is not None:
            pulumi.set(__self__, "data_lens", data_lens)
        if data_transfer is not None:
            pulumi.set(__self__, "data_transfer", data_transfer)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> Optional[bool]:
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> Optional[bool]:
        return pulumi.get(self, "data_transfer")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongocfgResult(dict):
    def __init__(__self__, *,
                 net: Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgNetResult'] = None,
                 operation_profiling: Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingResult'] = None,
                 storage: Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgStorageResult'] = None):
        if net is not None:
            pulumi.set(__self__, "net", net)
        if operation_profiling is not None:
            pulumi.set(__self__, "operation_profiling", operation_profiling)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgNetResult']:
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="operationProfiling")
    def operation_profiling(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingResult']:
        return pulumi.get(self, "operation_profiling")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgStorageResult']:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongocfgNetResult(dict):
    def __init__(__self__, *,
                 max_incoming_connections: Optional[int] = None):
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongocfgOperationProfilingResult(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 slow_op_threshold: Optional[int] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if slow_op_threshold is not None:
            pulumi.set(__self__, "slow_op_threshold", slow_op_threshold)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="slowOpThreshold")
    def slow_op_threshold(self) -> Optional[int]:
        return pulumi.get(self, "slow_op_threshold")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongocfgStorageResult(dict):
    def __init__(__self__, *,
                 wired_tiger: Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerResult'] = None):
        if wired_tiger is not None:
            pulumi.set(__self__, "wired_tiger", wired_tiger)

    @property
    @pulumi.getter(name="wiredTiger")
    def wired_tiger(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerResult']:
        return pulumi.get(self, "wired_tiger")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongocfgStorageWiredTigerResult(dict):
    def __init__(__self__, *,
                 cache_size_gb: Optional[float] = None):
        if cache_size_gb is not None:
            pulumi.set(__self__, "cache_size_gb", cache_size_gb)

    @property
    @pulumi.getter(name="cacheSizeGb")
    def cache_size_gb(self) -> Optional[float]:
        return pulumi.get(self, "cache_size_gb")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodResult(dict):
    def __init__(__self__, *,
                 audit_log: 'outputs.GetMdbMongodbClusterClusterConfigMongodAuditLogResult',
                 security: 'outputs.GetMdbMongodbClusterClusterConfigMongodSecurityResult',
                 set_parameter: 'outputs.GetMdbMongodbClusterClusterConfigMongodSetParameterResult',
                 net: Optional['outputs.GetMdbMongodbClusterClusterConfigMongodNetResult'] = None,
                 operation_profiling: Optional['outputs.GetMdbMongodbClusterClusterConfigMongodOperationProfilingResult'] = None,
                 storage: Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageResult'] = None):
        pulumi.set(__self__, "audit_log", audit_log)
        pulumi.set(__self__, "security", security)
        pulumi.set(__self__, "set_parameter", set_parameter)
        if net is not None:
            pulumi.set(__self__, "net", net)
        if operation_profiling is not None:
            pulumi.set(__self__, "operation_profiling", operation_profiling)
        if storage is not None:
            pulumi.set(__self__, "storage", storage)

    @property
    @pulumi.getter(name="auditLog")
    def audit_log(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongodAuditLogResult':
        return pulumi.get(self, "audit_log")

    @property
    @pulumi.getter
    def security(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongodSecurityResult':
        return pulumi.get(self, "security")

    @property
    @pulumi.getter(name="setParameter")
    def set_parameter(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongodSetParameterResult':
        return pulumi.get(self, "set_parameter")

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongodNetResult']:
        return pulumi.get(self, "net")

    @property
    @pulumi.getter(name="operationProfiling")
    def operation_profiling(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongodOperationProfilingResult']:
        return pulumi.get(self, "operation_profiling")

    @property
    @pulumi.getter
    def storage(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageResult']:
        return pulumi.get(self, "storage")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodAuditLogResult(dict):
    def __init__(__self__, *,
                 filter: Optional[str] = None,
                 runtime_configuration: Optional[bool] = None):
        if filter is not None:
            pulumi.set(__self__, "filter", filter)
        if runtime_configuration is not None:
            pulumi.set(__self__, "runtime_configuration", runtime_configuration)

    @property
    @pulumi.getter
    def filter(self) -> Optional[str]:
        return pulumi.get(self, "filter")

    @property
    @pulumi.getter(name="runtimeConfiguration")
    def runtime_configuration(self) -> Optional[bool]:
        return pulumi.get(self, "runtime_configuration")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodNetResult(dict):
    def __init__(__self__, *,
                 compressors: Optional[Sequence[str]] = None,
                 max_incoming_connections: Optional[int] = None):
        if compressors is not None:
            pulumi.set(__self__, "compressors", compressors)
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter
    def compressors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compressors")

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodOperationProfilingResult(dict):
    def __init__(__self__, *,
                 mode: Optional[str] = None,
                 slow_op_sample_rate: Optional[float] = None,
                 slow_op_threshold: Optional[int] = None):
        if mode is not None:
            pulumi.set(__self__, "mode", mode)
        if slow_op_sample_rate is not None:
            pulumi.set(__self__, "slow_op_sample_rate", slow_op_sample_rate)
        if slow_op_threshold is not None:
            pulumi.set(__self__, "slow_op_threshold", slow_op_threshold)

    @property
    @pulumi.getter
    def mode(self) -> Optional[str]:
        return pulumi.get(self, "mode")

    @property
    @pulumi.getter(name="slowOpSampleRate")
    def slow_op_sample_rate(self) -> Optional[float]:
        return pulumi.get(self, "slow_op_sample_rate")

    @property
    @pulumi.getter(name="slowOpThreshold")
    def slow_op_threshold(self) -> Optional[int]:
        return pulumi.get(self, "slow_op_threshold")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodSecurityResult(dict):
    def __init__(__self__, *,
                 kmip: 'outputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmipResult',
                 enable_encryption: Optional[bool] = None):
        pulumi.set(__self__, "kmip", kmip)
        if enable_encryption is not None:
            pulumi.set(__self__, "enable_encryption", enable_encryption)

    @property
    @pulumi.getter
    def kmip(self) -> 'outputs.GetMdbMongodbClusterClusterConfigMongodSecurityKmipResult':
        return pulumi.get(self, "kmip")

    @property
    @pulumi.getter(name="enableEncryption")
    def enable_encryption(self) -> Optional[bool]:
        return pulumi.get(self, "enable_encryption")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodSecurityKmipResult(dict):
    def __init__(__self__, *,
                 client_certificate: Optional[str] = None,
                 key_identifier: Optional[str] = None,
                 port: Optional[int] = None,
                 server_ca: Optional[str] = None,
                 server_name: Optional[str] = None):
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if key_identifier is not None:
            pulumi.set(__self__, "key_identifier", key_identifier)
        if port is not None:
            pulumi.set(__self__, "port", port)
        if server_ca is not None:
            pulumi.set(__self__, "server_ca", server_ca)
        if server_name is not None:
            pulumi.set(__self__, "server_name", server_name)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[str]:
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="keyIdentifier")
    def key_identifier(self) -> Optional[str]:
        return pulumi.get(self, "key_identifier")

    @property
    @pulumi.getter
    def port(self) -> Optional[int]:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="serverCa")
    def server_ca(self) -> Optional[str]:
        return pulumi.get(self, "server_ca")

    @property
    @pulumi.getter(name="serverName")
    def server_name(self) -> Optional[str]:
        return pulumi.get(self, "server_name")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodSetParameterResult(dict):
    def __init__(__self__, *,
                 audit_authorization_success: Optional[bool] = None,
                 enable_flow_control: Optional[bool] = None,
                 min_snapshot_history_window_in_seconds: Optional[int] = None):
        if audit_authorization_success is not None:
            pulumi.set(__self__, "audit_authorization_success", audit_authorization_success)
        if enable_flow_control is not None:
            pulumi.set(__self__, "enable_flow_control", enable_flow_control)
        if min_snapshot_history_window_in_seconds is not None:
            pulumi.set(__self__, "min_snapshot_history_window_in_seconds", min_snapshot_history_window_in_seconds)

    @property
    @pulumi.getter(name="auditAuthorizationSuccess")
    def audit_authorization_success(self) -> Optional[bool]:
        return pulumi.get(self, "audit_authorization_success")

    @property
    @pulumi.getter(name="enableFlowControl")
    def enable_flow_control(self) -> Optional[bool]:
        return pulumi.get(self, "enable_flow_control")

    @property
    @pulumi.getter(name="minSnapshotHistoryWindowInSeconds")
    def min_snapshot_history_window_in_seconds(self) -> Optional[int]:
        return pulumi.get(self, "min_snapshot_history_window_in_seconds")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodStorageResult(dict):
    def __init__(__self__, *,
                 journal: Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageJournalResult'] = None,
                 wired_tiger: Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerResult'] = None):
        if journal is not None:
            pulumi.set(__self__, "journal", journal)
        if wired_tiger is not None:
            pulumi.set(__self__, "wired_tiger", wired_tiger)

    @property
    @pulumi.getter
    def journal(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageJournalResult']:
        return pulumi.get(self, "journal")

    @property
    @pulumi.getter(name="wiredTiger")
    def wired_tiger(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerResult']:
        return pulumi.get(self, "wired_tiger")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodStorageJournalResult(dict):
    def __init__(__self__, *,
                 commit_interval: Optional[int] = None):
        if commit_interval is not None:
            pulumi.set(__self__, "commit_interval", commit_interval)

    @property
    @pulumi.getter(name="commitInterval")
    def commit_interval(self) -> Optional[int]:
        return pulumi.get(self, "commit_interval")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongodStorageWiredTigerResult(dict):
    def __init__(__self__, *,
                 block_compressor: Optional[str] = None,
                 cache_size_gb: Optional[float] = None,
                 prefix_compression: Optional[bool] = None):
        if block_compressor is not None:
            pulumi.set(__self__, "block_compressor", block_compressor)
        if cache_size_gb is not None:
            pulumi.set(__self__, "cache_size_gb", cache_size_gb)
        if prefix_compression is not None:
            pulumi.set(__self__, "prefix_compression", prefix_compression)

    @property
    @pulumi.getter(name="blockCompressor")
    def block_compressor(self) -> Optional[str]:
        return pulumi.get(self, "block_compressor")

    @property
    @pulumi.getter(name="cacheSizeGb")
    def cache_size_gb(self) -> Optional[float]:
        return pulumi.get(self, "cache_size_gb")

    @property
    @pulumi.getter(name="prefixCompression")
    def prefix_compression(self) -> Optional[bool]:
        return pulumi.get(self, "prefix_compression")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongosResult(dict):
    def __init__(__self__, *,
                 net: Optional['outputs.GetMdbMongodbClusterClusterConfigMongosNetResult'] = None):
        if net is not None:
            pulumi.set(__self__, "net", net)

    @property
    @pulumi.getter
    def net(self) -> Optional['outputs.GetMdbMongodbClusterClusterConfigMongosNetResult']:
        return pulumi.get(self, "net")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigMongosNetResult(dict):
    def __init__(__self__, *,
                 compressors: Optional[Sequence[str]] = None,
                 max_incoming_connections: Optional[int] = None):
        if compressors is not None:
            pulumi.set(__self__, "compressors", compressors)
        if max_incoming_connections is not None:
            pulumi.set(__self__, "max_incoming_connections", max_incoming_connections)

    @property
    @pulumi.getter
    def compressors(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "compressors")

    @property
    @pulumi.getter(name="maxIncomingConnections")
    def max_incoming_connections(self) -> Optional[int]:
        return pulumi.get(self, "max_incoming_connections")


@pulumi.output_type
class GetMdbMongodbClusterClusterConfigPerformanceDiagnosticsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetMdbMongodbClusterDatabaseResult(dict):
    def __init__(__self__, *,
                 name: Optional[str] = None):
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMdbMongodbClusterDiskSizeAutoscalingMongocfgResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: Optional[int] = None,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        if disk_size_limit is not None:
            pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbMongodbClusterDiskSizeAutoscalingMongodResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: Optional[int] = None,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        if disk_size_limit is not None:
            pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: Optional[int] = None,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        if disk_size_limit is not None:
            pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbMongodbClusterDiskSizeAutoscalingMongosResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: Optional[int] = None,
                 emergency_usage_threshold: Optional[int] = None,
                 planned_usage_threshold: Optional[int] = None):
        if disk_size_limit is not None:
            pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        if emergency_usage_threshold is not None:
            pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        if planned_usage_threshold is not None:
            pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> Optional[int]:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> Optional[int]:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbMongodbClusterHostResult(dict):
    def __init__(__self__, *,
                 health: str,
                 host_parameters: 'outputs.GetMdbMongodbClusterHostHostParametersResult',
                 name: str,
                 role: str,
                 shard_name: str,
                 assign_public_ip: Optional[bool] = None,
                 subnet_id: Optional[str] = None,
                 type: Optional[str] = None,
                 zone_id: Optional[str] = None):
        pulumi.set(__self__, "health", health)
        pulumi.set(__self__, "host_parameters", host_parameters)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "shard_name", shard_name)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if subnet_id is not None:
            pulumi.set(__self__, "subnet_id", subnet_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if zone_id is not None:
            pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def health(self) -> str:
        return pulumi.get(self, "health")

    @property
    @pulumi.getter(name="hostParameters")
    def host_parameters(self) -> 'outputs.GetMdbMongodbClusterHostHostParametersResult':
        return pulumi.get(self, "host_parameters")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> str:
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> Optional[str]:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> Optional[str]:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetMdbMongodbClusterHostHostParametersResult(dict):
    def __init__(__self__, *,
                 hidden: Optional[bool] = None,
                 priority: Optional[float] = None,
                 secondary_delay_secs: Optional[int] = None,
                 tags: Optional[Mapping[str, str]] = None):
        if hidden is not None:
            pulumi.set(__self__, "hidden", hidden)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if secondary_delay_secs is not None:
            pulumi.set(__self__, "secondary_delay_secs", secondary_delay_secs)
        if tags is not None:
            pulumi.set(__self__, "tags", tags)

    @property
    @pulumi.getter
    def hidden(self) -> Optional[bool]:
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def priority(self) -> Optional[float]:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="secondaryDelaySecs")
    def secondary_delay_secs(self) -> Optional[int]:
        return pulumi.get(self, "secondary_delay_secs")

    @property
    @pulumi.getter
    def tags(self) -> Optional[Mapping[str, str]]:
        return pulumi.get(self, "tags")


@pulumi.output_type
class GetMdbMongodbClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: Optional[str] = None,
                 hour: Optional[int] = None,
                 type: Optional[str] = None):
        if day is not None:
            pulumi.set(__self__, "day", day)
        if hour is not None:
            pulumi.set(__self__, "hour", hour)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> Optional[str]:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> Optional[int]:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbMongodbClusterResourcesResult(dict):
    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMongodbClusterResourcesMongocfgResult(dict):
    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMongodbClusterResourcesMongodResult(dict):
    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMongodbClusterResourcesMongoinfraResult(dict):
    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMongodbClusterResourcesMongosResult(dict):
    def __init__(__self__, *,
                 disk_size: Optional[int] = None,
                 disk_type_id: Optional[str] = None,
                 resource_preset_id: Optional[str] = None):
        if disk_size is not None:
            pulumi.set(__self__, "disk_size", disk_size)
        if disk_type_id is not None:
            pulumi.set(__self__, "disk_type_id", disk_type_id)
        if resource_preset_id is not None:
            pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> Optional[int]:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> Optional[str]:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> Optional[str]:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMongodbClusterRestoreResult(dict):
    def __init__(__self__, *,
                 backup_id: Optional[str] = None,
                 time: Optional[str] = None):
        if backup_id is not None:
            pulumi.set(__self__, "backup_id", backup_id)
        if time is not None:
            pulumi.set(__self__, "time", time)

    @property
    @pulumi.getter(name="backupId")
    def backup_id(self) -> Optional[str]:
        return pulumi.get(self, "backup_id")

    @property
    @pulumi.getter
    def time(self) -> Optional[str]:
        return pulumi.get(self, "time")


@pulumi.output_type
class GetMdbMongodbClusterUserResult(dict):
    def __init__(__self__, *,
                 permissions: Sequence['outputs.GetMdbMongodbClusterUserPermissionResult'],
                 name: Optional[str] = None,
                 password: Optional[str] = None):
        pulumi.set(__self__, "permissions", permissions)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbMongodbClusterUserPermissionResult']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        return pulumi.get(self, "password")


@pulumi.output_type
class GetMdbMongodbClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: Optional[str] = None,
                 roles: Optional[Sequence[str]] = None):
        if database_name is not None:
            pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> Optional[str]:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetMdbMysqlClusterAccessResult(dict):
    def __init__(__self__, *,
                 data_lens: bool,
                 data_transfer: bool,
                 web_sql: bool):
        pulumi.set(__self__, "data_lens", data_lens)
        pulumi.set(__self__, "data_transfer", data_transfer)
        pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> bool:
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> bool:
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> bool:
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class GetMdbMysqlClusterBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: Optional[int] = None,
                 minutes: Optional[int] = None):
        if hours is not None:
            pulumi.set(__self__, "hours", hours)
        if minutes is not None:
            pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> Optional[int]:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> Optional[int]:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbMysqlClusterDatabaseResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMdbMysqlClusterHostResult(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 replication_source: str,
                 subnet_id: str,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 backup_priority: Optional[int] = None,
                 priority: Optional[int] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "replication_source", replication_source)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if backup_priority is not None:
            pulumi.set(__self__, "backup_priority", backup_priority)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="replicationSource")
    def replication_source(self) -> str:
        return pulumi.get(self, "replication_source")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="backupPriority")
    def backup_priority(self) -> Optional[int]:
        return pulumi.get(self, "backup_priority")

    @property
    @pulumi.getter
    def priority(self) -> Optional[int]:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetMdbMysqlClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbMysqlClusterPerformanceDiagnosticResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 sessions_sampling_interval: int,
                 statements_sampling_interval: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sessions_sampling_interval", sessions_sampling_interval)
        pulumi.set(__self__, "statements_sampling_interval", statements_sampling_interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="sessionsSamplingInterval")
    def sessions_sampling_interval(self) -> int:
        return pulumi.get(self, "sessions_sampling_interval")

    @property
    @pulumi.getter(name="statementsSamplingInterval")
    def statements_sampling_interval(self) -> int:
        return pulumi.get(self, "statements_sampling_interval")


@pulumi.output_type
class GetMdbMysqlClusterResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbMysqlClusterUserResult(dict):
    def __init__(__self__, *,
                 authentication_plugin: str,
                 connection_limits: Sequence['outputs.GetMdbMysqlClusterUserConnectionLimitResult'],
                 global_permissions: Sequence[str],
                 name: str,
                 password: str,
                 permissions: Sequence['outputs.GetMdbMysqlClusterUserPermissionResult']):
        pulumi.set(__self__, "authentication_plugin", authentication_plugin)
        pulumi.set(__self__, "connection_limits", connection_limits)
        pulumi.set(__self__, "global_permissions", global_permissions)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter(name="authenticationPlugin")
    def authentication_plugin(self) -> str:
        return pulumi.get(self, "authentication_plugin")

    @property
    @pulumi.getter(name="connectionLimits")
    def connection_limits(self) -> Sequence['outputs.GetMdbMysqlClusterUserConnectionLimitResult']:
        return pulumi.get(self, "connection_limits")

    @property
    @pulumi.getter(name="globalPermissions")
    def global_permissions(self) -> Sequence[str]:
        return pulumi.get(self, "global_permissions")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbMysqlClusterUserPermissionResult']:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetMdbMysqlClusterUserConnectionLimitResult(dict):
    def __init__(__self__, *,
                 max_connections_per_hour: int,
                 max_questions_per_hour: int,
                 max_updates_per_hour: int,
                 max_user_connections: int):
        pulumi.set(__self__, "max_connections_per_hour", max_connections_per_hour)
        pulumi.set(__self__, "max_questions_per_hour", max_questions_per_hour)
        pulumi.set(__self__, "max_updates_per_hour", max_updates_per_hour)
        pulumi.set(__self__, "max_user_connections", max_user_connections)

    @property
    @pulumi.getter(name="maxConnectionsPerHour")
    def max_connections_per_hour(self) -> int:
        return pulumi.get(self, "max_connections_per_hour")

    @property
    @pulumi.getter(name="maxQuestionsPerHour")
    def max_questions_per_hour(self) -> int:
        return pulumi.get(self, "max_questions_per_hour")

    @property
    @pulumi.getter(name="maxUpdatesPerHour")
    def max_updates_per_hour(self) -> int:
        return pulumi.get(self, "max_updates_per_hour")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> int:
        return pulumi.get(self, "max_user_connections")


@pulumi.output_type
class GetMdbMysqlClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetMdbMysqlUserConnectionLimitResult(dict):
    def __init__(__self__, *,
                 max_connections_per_hour: int,
                 max_questions_per_hour: int,
                 max_updates_per_hour: int,
                 max_user_connections: int):
        pulumi.set(__self__, "max_connections_per_hour", max_connections_per_hour)
        pulumi.set(__self__, "max_questions_per_hour", max_questions_per_hour)
        pulumi.set(__self__, "max_updates_per_hour", max_updates_per_hour)
        pulumi.set(__self__, "max_user_connections", max_user_connections)

    @property
    @pulumi.getter(name="maxConnectionsPerHour")
    def max_connections_per_hour(self) -> int:
        return pulumi.get(self, "max_connections_per_hour")

    @property
    @pulumi.getter(name="maxQuestionsPerHour")
    def max_questions_per_hour(self) -> int:
        return pulumi.get(self, "max_questions_per_hour")

    @property
    @pulumi.getter(name="maxUpdatesPerHour")
    def max_updates_per_hour(self) -> int:
        return pulumi.get(self, "max_updates_per_hour")

    @property
    @pulumi.getter(name="maxUserConnections")
    def max_user_connections(self) -> int:
        return pulumi.get(self, "max_user_connections")


@pulumi.output_type
class GetMdbMysqlUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 roles: Optional[Sequence[str]] = None):
        pulumi.set(__self__, "database_name", database_name)
        if roles is not None:
            pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Optional[Sequence[str]]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigResult(dict):
    def __init__(__self__, *,
                 accesses: Sequence['outputs.GetMdbPostgresqlClusterConfigAccessResult'],
                 autofailover: bool,
                 backup_retain_period_days: int,
                 backup_window_starts: Sequence['outputs.GetMdbPostgresqlClusterConfigBackupWindowStartResult'],
                 disk_size_autoscalings: Sequence['outputs.GetMdbPostgresqlClusterConfigDiskSizeAutoscalingResult'],
                 performance_diagnostics: Sequence['outputs.GetMdbPostgresqlClusterConfigPerformanceDiagnosticResult'],
                 pooler_configs: Sequence['outputs.GetMdbPostgresqlClusterConfigPoolerConfigResult'],
                 postgresql_config: Mapping[str, str],
                 resources: Sequence['outputs.GetMdbPostgresqlClusterConfigResourceResult'],
                 version: str):
        pulumi.set(__self__, "accesses", accesses)
        pulumi.set(__self__, "autofailover", autofailover)
        pulumi.set(__self__, "backup_retain_period_days", backup_retain_period_days)
        pulumi.set(__self__, "backup_window_starts", backup_window_starts)
        pulumi.set(__self__, "disk_size_autoscalings", disk_size_autoscalings)
        pulumi.set(__self__, "performance_diagnostics", performance_diagnostics)
        pulumi.set(__self__, "pooler_configs", pooler_configs)
        pulumi.set(__self__, "postgresql_config", postgresql_config)
        pulumi.set(__self__, "resources", resources)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def accesses(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigAccessResult']:
        return pulumi.get(self, "accesses")

    @property
    @pulumi.getter
    def autofailover(self) -> bool:
        return pulumi.get(self, "autofailover")

    @property
    @pulumi.getter(name="backupRetainPeriodDays")
    def backup_retain_period_days(self) -> int:
        return pulumi.get(self, "backup_retain_period_days")

    @property
    @pulumi.getter(name="backupWindowStarts")
    def backup_window_starts(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigBackupWindowStartResult']:
        return pulumi.get(self, "backup_window_starts")

    @property
    @pulumi.getter(name="diskSizeAutoscalings")
    def disk_size_autoscalings(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigDiskSizeAutoscalingResult']:
        return pulumi.get(self, "disk_size_autoscalings")

    @property
    @pulumi.getter(name="performanceDiagnostics")
    def performance_diagnostics(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigPerformanceDiagnosticResult']:
        return pulumi.get(self, "performance_diagnostics")

    @property
    @pulumi.getter(name="poolerConfigs")
    def pooler_configs(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigPoolerConfigResult']:
        return pulumi.get(self, "pooler_configs")

    @property
    @pulumi.getter(name="postgresqlConfig")
    def postgresql_config(self) -> Mapping[str, str]:
        return pulumi.get(self, "postgresql_config")

    @property
    @pulumi.getter
    def resources(self) -> Sequence['outputs.GetMdbPostgresqlClusterConfigResourceResult']:
        return pulumi.get(self, "resources")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigAccessResult(dict):
    def __init__(__self__, *,
                 data_lens: bool,
                 data_transfer: bool,
                 serverless: bool,
                 web_sql: bool):
        pulumi.set(__self__, "data_lens", data_lens)
        pulumi.set(__self__, "data_transfer", data_transfer)
        pulumi.set(__self__, "serverless", serverless)
        pulumi.set(__self__, "web_sql", web_sql)

    @property
    @pulumi.getter(name="dataLens")
    def data_lens(self) -> bool:
        return pulumi.get(self, "data_lens")

    @property
    @pulumi.getter(name="dataTransfer")
    def data_transfer(self) -> bool:
        return pulumi.get(self, "data_transfer")

    @property
    @pulumi.getter
    def serverless(self) -> bool:
        return pulumi.get(self, "serverless")

    @property
    @pulumi.getter(name="webSql")
    def web_sql(self) -> bool:
        return pulumi.get(self, "web_sql")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigDiskSizeAutoscalingResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: int,
                 planned_usage_threshold: int):
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> int:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> int:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigPerformanceDiagnosticResult(dict):
    def __init__(__self__, *,
                 enabled: bool,
                 sessions_sampling_interval: int,
                 statements_sampling_interval: int):
        pulumi.set(__self__, "enabled", enabled)
        pulumi.set(__self__, "sessions_sampling_interval", sessions_sampling_interval)
        pulumi.set(__self__, "statements_sampling_interval", statements_sampling_interval)

    @property
    @pulumi.getter
    def enabled(self) -> bool:
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="sessionsSamplingInterval")
    def sessions_sampling_interval(self) -> int:
        return pulumi.get(self, "sessions_sampling_interval")

    @property
    @pulumi.getter(name="statementsSamplingInterval")
    def statements_sampling_interval(self) -> int:
        return pulumi.get(self, "statements_sampling_interval")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigPoolerConfigResult(dict):
    def __init__(__self__, *,
                 pool_discard: bool,
                 pooling_mode: str):
        pulumi.set(__self__, "pool_discard", pool_discard)
        pulumi.set(__self__, "pooling_mode", pooling_mode)

    @property
    @pulumi.getter(name="poolDiscard")
    def pool_discard(self) -> bool:
        return pulumi.get(self, "pool_discard")

    @property
    @pulumi.getter(name="poolingMode")
    def pooling_mode(self) -> str:
        return pulumi.get(self, "pooling_mode")


@pulumi.output_type
class GetMdbPostgresqlClusterConfigResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbPostgresqlClusterDatabaseResult(dict):
    def __init__(__self__, *,
                 name: str,
                 owner: str,
                 extensions: Optional[Sequence['outputs.GetMdbPostgresqlClusterDatabaseExtensionResult']] = None,
                 lc_collate: Optional[str] = None,
                 lc_type: Optional[str] = None,
                 template_db: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "owner", owner)
        if extensions is not None:
            pulumi.set(__self__, "extensions", extensions)
        if lc_collate is not None:
            pulumi.set(__self__, "lc_collate", lc_collate)
        if lc_type is not None:
            pulumi.set(__self__, "lc_type", lc_type)
        if template_db is not None:
            pulumi.set(__self__, "template_db", template_db)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def owner(self) -> str:
        return pulumi.get(self, "owner")

    @property
    @pulumi.getter
    def extensions(self) -> Optional[Sequence['outputs.GetMdbPostgresqlClusterDatabaseExtensionResult']]:
        return pulumi.get(self, "extensions")

    @property
    @pulumi.getter(name="lcCollate")
    def lc_collate(self) -> Optional[str]:
        return pulumi.get(self, "lc_collate")

    @property
    @pulumi.getter(name="lcType")
    def lc_type(self) -> Optional[str]:
        return pulumi.get(self, "lc_type")

    @property
    @pulumi.getter(name="templateDb")
    def template_db(self) -> Optional[str]:
        return pulumi.get(self, "template_db")


@pulumi.output_type
class GetMdbPostgresqlClusterDatabaseExtensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 version: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbPostgresqlClusterHostResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 fqdn: str,
                 priority: int,
                 replication_source: str,
                 role: str,
                 subnet_id: str,
                 zone: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "replication_source", replication_source)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="replicationSource")
    def replication_source(self) -> str:
        return pulumi.get(self, "replication_source")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetMdbPostgresqlClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbPostgresqlClusterUserResult(dict):
    def __init__(__self__, *,
                 conn_limit: int,
                 grants: Sequence[str],
                 name: str,
                 permissions: Sequence['outputs.GetMdbPostgresqlClusterUserPermissionResult'],
                 settings: Mapping[str, str],
                 login: Optional[bool] = None):
        pulumi.set(__self__, "conn_limit", conn_limit)
        pulumi.set(__self__, "grants", grants)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "permissions", permissions)
        pulumi.set(__self__, "settings", settings)
        if login is not None:
            pulumi.set(__self__, "login", login)

    @property
    @pulumi.getter(name="connLimit")
    def conn_limit(self) -> int:
        return pulumi.get(self, "conn_limit")

    @property
    @pulumi.getter
    def grants(self) -> Sequence[str]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbPostgresqlClusterUserPermissionResult']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def settings(self) -> Mapping[str, str]:
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter
    def login(self) -> Optional[bool]:
        return pulumi.get(self, "login")


@pulumi.output_type
class GetMdbPostgresqlClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetMdbPostgresqlDatabaseExtensionResult(dict):
    def __init__(__self__, *,
                 name: str,
                 version: Optional[str] = None):
        pulumi.set(__self__, "name", name)
        if version is not None:
            pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def version(self) -> Optional[str]:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbPostgresqlUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: str):
        pulumi.set(__self__, "database_name", database_name)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")


@pulumi.output_type
class GetMdbRedisClusterConfigResult(dict):
    def __init__(__self__, *,
                 client_output_buffer_limit_normal: str,
                 client_output_buffer_limit_pubsub: str,
                 databases: int,
                 maxmemory_percent: int,
                 maxmemory_policy: str,
                 notify_keyspace_events: str,
                 slowlog_log_slower_than: int,
                 slowlog_max_len: int,
                 timeout: int,
                 version: str):
        pulumi.set(__self__, "client_output_buffer_limit_normal", client_output_buffer_limit_normal)
        pulumi.set(__self__, "client_output_buffer_limit_pubsub", client_output_buffer_limit_pubsub)
        pulumi.set(__self__, "databases", databases)
        pulumi.set(__self__, "maxmemory_percent", maxmemory_percent)
        pulumi.set(__self__, "maxmemory_policy", maxmemory_policy)
        pulumi.set(__self__, "notify_keyspace_events", notify_keyspace_events)
        pulumi.set(__self__, "slowlog_log_slower_than", slowlog_log_slower_than)
        pulumi.set(__self__, "slowlog_max_len", slowlog_max_len)
        pulumi.set(__self__, "timeout", timeout)
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="clientOutputBufferLimitNormal")
    def client_output_buffer_limit_normal(self) -> str:
        return pulumi.get(self, "client_output_buffer_limit_normal")

    @property
    @pulumi.getter(name="clientOutputBufferLimitPubsub")
    def client_output_buffer_limit_pubsub(self) -> str:
        return pulumi.get(self, "client_output_buffer_limit_pubsub")

    @property
    @pulumi.getter
    def databases(self) -> int:
        return pulumi.get(self, "databases")

    @property
    @pulumi.getter(name="maxmemoryPercent")
    def maxmemory_percent(self) -> int:
        return pulumi.get(self, "maxmemory_percent")

    @property
    @pulumi.getter(name="maxmemoryPolicy")
    def maxmemory_policy(self) -> str:
        return pulumi.get(self, "maxmemory_policy")

    @property
    @pulumi.getter(name="notifyKeyspaceEvents")
    def notify_keyspace_events(self) -> str:
        return pulumi.get(self, "notify_keyspace_events")

    @property
    @pulumi.getter(name="slowlogLogSlowerThan")
    def slowlog_log_slower_than(self) -> int:
        return pulumi.get(self, "slowlog_log_slower_than")

    @property
    @pulumi.getter(name="slowlogMaxLen")
    def slowlog_max_len(self) -> int:
        return pulumi.get(self, "slowlog_max_len")

    @property
    @pulumi.getter
    def timeout(self) -> int:
        return pulumi.get(self, "timeout")

    @property
    @pulumi.getter
    def version(self) -> str:
        return pulumi.get(self, "version")


@pulumi.output_type
class GetMdbRedisClusterDiskSizeAutoscalingResult(dict):
    def __init__(__self__, *,
                 disk_size_limit: int,
                 emergency_usage_threshold: int,
                 planned_usage_threshold: int):
        pulumi.set(__self__, "disk_size_limit", disk_size_limit)
        pulumi.set(__self__, "emergency_usage_threshold", emergency_usage_threshold)
        pulumi.set(__self__, "planned_usage_threshold", planned_usage_threshold)

    @property
    @pulumi.getter(name="diskSizeLimit")
    def disk_size_limit(self) -> int:
        return pulumi.get(self, "disk_size_limit")

    @property
    @pulumi.getter(name="emergencyUsageThreshold")
    def emergency_usage_threshold(self) -> int:
        return pulumi.get(self, "emergency_usage_threshold")

    @property
    @pulumi.getter(name="plannedUsageThreshold")
    def planned_usage_threshold(self) -> int:
        return pulumi.get(self, "planned_usage_threshold")


@pulumi.output_type
class GetMdbRedisClusterHostResult(dict):
    def __init__(__self__, *,
                 fqdn: str,
                 shard_name: str,
                 subnet_id: str,
                 zone: str,
                 assign_public_ip: Optional[bool] = None,
                 replica_priority: Optional[int] = None):
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "shard_name", shard_name)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)
        if assign_public_ip is not None:
            pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        if replica_priority is not None:
            pulumi.set(__self__, "replica_priority", replica_priority)

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="shardName")
    def shard_name(self) -> str:
        return pulumi.get(self, "shard_name")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> Optional[bool]:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter(name="replicaPriority")
    def replica_priority(self) -> Optional[int]:
        return pulumi.get(self, "replica_priority")


@pulumi.output_type
class GetMdbRedisClusterMaintenanceWindowResult(dict):
    def __init__(__self__, *,
                 day: str,
                 hour: int,
                 type: str):
        pulumi.set(__self__, "day", day)
        pulumi.set(__self__, "hour", hour)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def day(self) -> str:
        return pulumi.get(self, "day")

    @property
    @pulumi.getter
    def hour(self) -> int:
        return pulumi.get(self, "hour")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetMdbRedisClusterResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbSqlserverClusterBackupWindowStartResult(dict):
    def __init__(__self__, *,
                 hours: int,
                 minutes: int):
        pulumi.set(__self__, "hours", hours)
        pulumi.set(__self__, "minutes", minutes)

    @property
    @pulumi.getter
    def hours(self) -> int:
        return pulumi.get(self, "hours")

    @property
    @pulumi.getter
    def minutes(self) -> int:
        return pulumi.get(self, "minutes")


@pulumi.output_type
class GetMdbSqlserverClusterDatabaseResult(dict):
    def __init__(__self__, *,
                 name: str):
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")


@pulumi.output_type
class GetMdbSqlserverClusterHostResult(dict):
    def __init__(__self__, *,
                 assign_public_ip: bool,
                 fqdn: str,
                 subnet_id: str,
                 zone: str):
        pulumi.set(__self__, "assign_public_ip", assign_public_ip)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "subnet_id", subnet_id)
        pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="assignPublicIp")
    def assign_public_ip(self) -> bool:
        return pulumi.get(self, "assign_public_ip")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter(name="subnetId")
    def subnet_id(self) -> str:
        return pulumi.get(self, "subnet_id")

    @property
    @pulumi.getter
    def zone(self) -> str:
        return pulumi.get(self, "zone")


@pulumi.output_type
class GetMdbSqlserverClusterResourceResult(dict):
    def __init__(__self__, *,
                 disk_size: int,
                 disk_type_id: str,
                 resource_preset_id: str):
        pulumi.set(__self__, "disk_size", disk_size)
        pulumi.set(__self__, "disk_type_id", disk_type_id)
        pulumi.set(__self__, "resource_preset_id", resource_preset_id)

    @property
    @pulumi.getter(name="diskSize")
    def disk_size(self) -> int:
        return pulumi.get(self, "disk_size")

    @property
    @pulumi.getter(name="diskTypeId")
    def disk_type_id(self) -> str:
        return pulumi.get(self, "disk_type_id")

    @property
    @pulumi.getter(name="resourcePresetId")
    def resource_preset_id(self) -> str:
        return pulumi.get(self, "resource_preset_id")


@pulumi.output_type
class GetMdbSqlserverClusterUserResult(dict):
    def __init__(__self__, *,
                 name: str,
                 password: str,
                 permissions: Sequence['outputs.GetMdbSqlserverClusterUserPermissionResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "permissions", permissions)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbSqlserverClusterUserPermissionResult']:
        return pulumi.get(self, "permissions")


@pulumi.output_type
class GetMdbSqlserverClusterUserPermissionResult(dict):
    def __init__(__self__, *,
                 database_name: str,
                 roles: Sequence[str]):
        pulumi.set(__self__, "database_name", database_name)
        pulumi.set(__self__, "roles", roles)

    @property
    @pulumi.getter(name="databaseName")
    def database_name(self) -> str:
        return pulumi.get(self, "database_name")

    @property
    @pulumi.getter
    def roles(self) -> Sequence[str]:
        return pulumi.get(self, "roles")


@pulumi.output_type
class GetMonitoringDashboardParametrizationResult(dict):
    def __init__(__self__, *,
                 parameters: Sequence['outputs.GetMonitoringDashboardParametrizationParameterResult'],
                 selectors: str):
        """
        :param Sequence['GetMonitoringDashboardParametrizationParameterArgs'] parameters: Dashboard parameter
        :param str selectors: Predefined selectors
        """
        pulumi.set(__self__, "parameters", parameters)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter
    def parameters(self) -> Sequence['outputs.GetMonitoringDashboardParametrizationParameterResult']:
        """
        Dashboard parameter
        """
        return pulumi.get(self, "parameters")

    @property
    @pulumi.getter
    def selectors(self) -> str:
        """
        Predefined selectors
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetMonitoringDashboardParametrizationParameterResult(dict):
    def __init__(__self__, *,
                 customs: Sequence['outputs.GetMonitoringDashboardParametrizationParameterCustomResult'],
                 description: str,
                 hidden: bool,
                 id: str,
                 label_values: Sequence['outputs.GetMonitoringDashboardParametrizationParameterLabelValueResult'],
                 texts: Sequence['outputs.GetMonitoringDashboardParametrizationParameterTextResult'],
                 title: str):
        """
        :param Sequence['GetMonitoringDashboardParametrizationParameterCustomArgs'] customs: Custom parameter
        :param str description: Parameter description
        :param bool hidden: UI-visibility
        :param str id: Parameter identifier
        :param Sequence['GetMonitoringDashboardParametrizationParameterLabelValueArgs'] label_values: Label values parameter
        :param Sequence['GetMonitoringDashboardParametrizationParameterTextArgs'] texts: Text parameter
        :param str title: UI-visible title of the parameter
        """
        pulumi.set(__self__, "customs", customs)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "label_values", label_values)
        pulumi.set(__self__, "texts", texts)
        pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def customs(self) -> Sequence['outputs.GetMonitoringDashboardParametrizationParameterCustomResult']:
        """
        Custom parameter
        """
        return pulumi.get(self, "customs")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Parameter description
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        """
        UI-visibility
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Parameter identifier
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="labelValues")
    def label_values(self) -> Sequence['outputs.GetMonitoringDashboardParametrizationParameterLabelValueResult']:
        """
        Label values parameter
        """
        return pulumi.get(self, "label_values")

    @property
    @pulumi.getter
    def texts(self) -> Sequence['outputs.GetMonitoringDashboardParametrizationParameterTextResult']:
        """
        Text parameter
        """
        return pulumi.get(self, "texts")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        UI-visible title of the parameter
        """
        return pulumi.get(self, "title")


@pulumi.output_type
class GetMonitoringDashboardParametrizationParameterCustomResult(dict):
    def __init__(__self__, *,
                 default_values: Sequence[str],
                 multiselectable: bool,
                 values: Sequence[str]):
        """
        :param Sequence[str] default_values: Default values from values
        :param bool multiselectable: Specifies the multiselectable values of parameter
        :param Sequence[str] values: Parameter values
        """
        pulumi.set(__self__, "default_values", default_values)
        pulumi.set(__self__, "multiselectable", multiselectable)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Sequence[str]:
        """
        Default values from values
        """
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter
    def multiselectable(self) -> bool:
        """
        Specifies the multiselectable values of parameter
        """
        return pulumi.get(self, "multiselectable")

    @property
    @pulumi.getter
    def values(self) -> Sequence[str]:
        """
        Parameter values
        """
        return pulumi.get(self, "values")


@pulumi.output_type
class GetMonitoringDashboardParametrizationParameterLabelValueResult(dict):
    def __init__(__self__, *,
                 default_values: Sequence[str],
                 folder_id: str,
                 label_key: str,
                 multiselectable: bool,
                 selectors: str):
        """
        :param Sequence[str] default_values: Default value
        :param str folder_id: Folder ID
        :param str label_key: Label key to list label values
        :param bool multiselectable: Specifies the multiselectable values of parameter
        :param str selectors: Selectors to select metric label values
        """
        pulumi.set(__self__, "default_values", default_values)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "label_key", label_key)
        pulumi.set(__self__, "multiselectable", multiselectable)
        pulumi.set(__self__, "selectors", selectors)

    @property
    @pulumi.getter(name="defaultValues")
    def default_values(self) -> Sequence[str]:
        """
        Default value
        """
        return pulumi.get(self, "default_values")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        """
        Folder ID
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="labelKey")
    def label_key(self) -> str:
        """
        Label key to list label values
        """
        return pulumi.get(self, "label_key")

    @property
    @pulumi.getter
    def multiselectable(self) -> bool:
        """
        Specifies the multiselectable values of parameter
        """
        return pulumi.get(self, "multiselectable")

    @property
    @pulumi.getter
    def selectors(self) -> str:
        """
        Selectors to select metric label values
        """
        return pulumi.get(self, "selectors")


@pulumi.output_type
class GetMonitoringDashboardParametrizationParameterTextResult(dict):
    def __init__(__self__, *,
                 default_value: str):
        """
        :param str default_value: Default value
        """
        pulumi.set(__self__, "default_value", default_value)

    @property
    @pulumi.getter(name="defaultValue")
    def default_value(self) -> str:
        """
        Default value
        """
        return pulumi.get(self, "default_value")


@pulumi.output_type
class GetMonitoringDashboardWidgetResult(dict):
    def __init__(__self__, *,
                 charts: Sequence['outputs.GetMonitoringDashboardWidgetChartResult'],
                 positions: Sequence['outputs.GetMonitoringDashboardWidgetPositionResult'],
                 texts: Sequence['outputs.GetMonitoringDashboardWidgetTextResult'],
                 titles: Sequence['outputs.GetMonitoringDashboardWidgetTitleResult']):
        """
        :param Sequence['GetMonitoringDashboardWidgetChartArgs'] charts: Chart widget
        :param Sequence['GetMonitoringDashboardWidgetPositionArgs'] positions: Widget layout position
        :param Sequence['GetMonitoringDashboardWidgetTextArgs'] texts: Text widget
        :param Sequence['GetMonitoringDashboardWidgetTitleArgs'] titles: Title widget
        """
        pulumi.set(__self__, "charts", charts)
        pulumi.set(__self__, "positions", positions)
        pulumi.set(__self__, "texts", texts)
        pulumi.set(__self__, "titles", titles)

    @property
    @pulumi.getter
    def charts(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartResult']:
        """
        Chart widget
        """
        return pulumi.get(self, "charts")

    @property
    @pulumi.getter
    def positions(self) -> Sequence['outputs.GetMonitoringDashboardWidgetPositionResult']:
        """
        Widget layout position
        """
        return pulumi.get(self, "positions")

    @property
    @pulumi.getter
    def texts(self) -> Sequence['outputs.GetMonitoringDashboardWidgetTextResult']:
        """
        Text widget
        """
        return pulumi.get(self, "texts")

    @property
    @pulumi.getter
    def titles(self) -> Sequence['outputs.GetMonitoringDashboardWidgetTitleResult']:
        """
        Title widget
        """
        return pulumi.get(self, "titles")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartResult(dict):
    def __init__(__self__, *,
                 chart_id: str,
                 description: str,
                 display_legend: bool,
                 freeze: str,
                 name_hiding_settings: Sequence['outputs.GetMonitoringDashboardWidgetChartNameHidingSettingResult'],
                 queries: Sequence['outputs.GetMonitoringDashboardWidgetChartQueryResult'],
                 series_overrides: Sequence['outputs.GetMonitoringDashboardWidgetChartSeriesOverrideResult'],
                 title: str,
                 visualization_settings: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingResult']):
        """
        :param str chart_id: Chart ID
        :param str description: Chart description in dashboard (not enabled in UI)
        :param bool display_legend: Enable legend under chart
        :param str freeze: Fixed time interval for chart
        :param Sequence['GetMonitoringDashboardWidgetChartNameHidingSettingArgs'] name_hiding_settings: Name hiding settings
        :param Sequence['GetMonitoringDashboardWidgetChartQueryArgs'] queries: Queries
        :param str title: Chart widget title
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingArgs'] visualization_settings: Visualization settings
        """
        pulumi.set(__self__, "chart_id", chart_id)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "display_legend", display_legend)
        pulumi.set(__self__, "freeze", freeze)
        pulumi.set(__self__, "name_hiding_settings", name_hiding_settings)
        pulumi.set(__self__, "queries", queries)
        pulumi.set(__self__, "series_overrides", series_overrides)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "visualization_settings", visualization_settings)

    @property
    @pulumi.getter(name="chartId")
    def chart_id(self) -> str:
        """
        Chart ID
        """
        return pulumi.get(self, "chart_id")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        Chart description in dashboard (not enabled in UI)
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="displayLegend")
    def display_legend(self) -> bool:
        """
        Enable legend under chart
        """
        return pulumi.get(self, "display_legend")

    @property
    @pulumi.getter
    def freeze(self) -> str:
        """
        Fixed time interval for chart
        """
        return pulumi.get(self, "freeze")

    @property
    @pulumi.getter(name="nameHidingSettings")
    def name_hiding_settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartNameHidingSettingResult']:
        """
        Name hiding settings
        """
        return pulumi.get(self, "name_hiding_settings")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartQueryResult']:
        """
        Queries
        """
        return pulumi.get(self, "queries")

    @property
    @pulumi.getter(name="seriesOverrides")
    def series_overrides(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartSeriesOverrideResult']:
        return pulumi.get(self, "series_overrides")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Chart widget title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter(name="visualizationSettings")
    def visualization_settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingResult']:
        """
        Visualization settings
        """
        return pulumi.get(self, "visualization_settings")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartNameHidingSettingResult(dict):
    def __init__(__self__, *,
                 names: Sequence[str],
                 positive: bool):
        """
        :param bool positive: True if we want to show concrete series names only, false if we want to hide concrete series names
        """
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "positive", positive)

    @property
    @pulumi.getter
    def names(self) -> Sequence[str]:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter
    def positive(self) -> bool:
        """
        True if we want to show concrete series names only, false if we want to hide concrete series names
        """
        return pulumi.get(self, "positive")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartQueryResult(dict):
    def __init__(__self__, *,
                 downsamplings: Sequence['outputs.GetMonitoringDashboardWidgetChartQueryDownsamplingResult'],
                 targets: Sequence['outputs.GetMonitoringDashboardWidgetChartQueryTargetResult']):
        """
        :param Sequence['GetMonitoringDashboardWidgetChartQueryDownsamplingArgs'] downsamplings: Downsampling settings
        :param Sequence['GetMonitoringDashboardWidgetChartQueryTargetArgs'] targets: Downsampling settings
        """
        pulumi.set(__self__, "downsamplings", downsamplings)
        pulumi.set(__self__, "targets", targets)

    @property
    @pulumi.getter
    def downsamplings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartQueryDownsamplingResult']:
        """
        Downsampling settings
        """
        return pulumi.get(self, "downsamplings")

    @property
    @pulumi.getter
    def targets(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartQueryTargetResult']:
        """
        Downsampling settings
        """
        return pulumi.get(self, "targets")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartQueryDownsamplingResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 gap_filling: str,
                 grid_aggregation: str,
                 grid_interval: int,
                 max_points: int):
        """
        :param bool disabled: Disable downsampling
        :param str gap_filling: Parameters for filling gaps in data
        :param str grid_aggregation: Function that is used for downsampling
        :param int grid_interval: Time interval (grid) for downsampling in milliseconds. Points in the specified range are aggregated into one time point
        :param int max_points: Maximum number of points to be returned
        """
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "gap_filling", gap_filling)
        pulumi.set(__self__, "grid_aggregation", grid_aggregation)
        pulumi.set(__self__, "grid_interval", grid_interval)
        pulumi.set(__self__, "max_points", max_points)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        """
        Disable downsampling
        """
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="gapFilling")
    def gap_filling(self) -> str:
        """
        Parameters for filling gaps in data
        """
        return pulumi.get(self, "gap_filling")

    @property
    @pulumi.getter(name="gridAggregation")
    def grid_aggregation(self) -> str:
        """
        Function that is used for downsampling
        """
        return pulumi.get(self, "grid_aggregation")

    @property
    @pulumi.getter(name="gridInterval")
    def grid_interval(self) -> int:
        """
        Time interval (grid) for downsampling in milliseconds. Points in the specified range are aggregated into one time point
        """
        return pulumi.get(self, "grid_interval")

    @property
    @pulumi.getter(name="maxPoints")
    def max_points(self) -> int:
        """
        Maximum number of points to be returned
        """
        return pulumi.get(self, "max_points")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartQueryTargetResult(dict):
    def __init__(__self__, *,
                 hidden: bool,
                 query: str,
                 text_mode: bool):
        """
        :param bool hidden: Checks that target is visible or invisible
        :param str query: Query
        :param bool text_mode: Text mode
        """
        pulumi.set(__self__, "hidden", hidden)
        pulumi.set(__self__, "query", query)
        pulumi.set(__self__, "text_mode", text_mode)

    @property
    @pulumi.getter
    def hidden(self) -> bool:
        """
        Checks that target is visible or invisible
        """
        return pulumi.get(self, "hidden")

    @property
    @pulumi.getter
    def query(self) -> str:
        """
        Query
        """
        return pulumi.get(self, "query")

    @property
    @pulumi.getter(name="textMode")
    def text_mode(self) -> bool:
        """
        Text mode
        """
        return pulumi.get(self, "text_mode")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartSeriesOverrideResult(dict):
    def __init__(__self__, *,
                 name: str,
                 settings: Sequence['outputs.GetMonitoringDashboardWidgetChartSeriesOverrideSettingResult'],
                 target_index: str):
        """
        :param str name: Series name
        :param Sequence['GetMonitoringDashboardWidgetChartSeriesOverrideSettingArgs'] settings: Override settings
        :param str target_index: Target index
        """
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "settings", settings)
        pulumi.set(__self__, "target_index", target_index)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Series name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartSeriesOverrideSettingResult']:
        """
        Override settings
        """
        return pulumi.get(self, "settings")

    @property
    @pulumi.getter(name="targetIndex")
    def target_index(self) -> str:
        """
        Target index
        """
        return pulumi.get(self, "target_index")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartSeriesOverrideSettingResult(dict):
    def __init__(__self__, *,
                 color: str,
                 grow_down: bool,
                 name: str,
                 stack_name: str,
                 type: str,
                 yaxis_position: str):
        """
        :param str color: Series color or empty
        :param bool grow_down: Stack grow down
        :param str name: Series name or empty
        :param str stack_name: Stack name or empty
        :param str type: Type
        :param str yaxis_position: Yaxis position
        """
        pulumi.set(__self__, "color", color)
        pulumi.set(__self__, "grow_down", grow_down)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "stack_name", stack_name)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "yaxis_position", yaxis_position)

    @property
    @pulumi.getter
    def color(self) -> str:
        """
        Series color or empty
        """
        return pulumi.get(self, "color")

    @property
    @pulumi.getter(name="growDown")
    def grow_down(self) -> bool:
        """
        Stack grow down
        """
        return pulumi.get(self, "grow_down")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Series name or empty
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="stackName")
    def stack_name(self) -> str:
        """
        Stack name or empty
        """
        return pulumi.get(self, "stack_name")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="yaxisPosition")
    def yaxis_position(self) -> str:
        """
        Yaxis position
        """
        return pulumi.get(self, "yaxis_position")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingResult(dict):
    def __init__(__self__, *,
                 aggregation: str,
                 color_scheme_settings: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingResult'],
                 heatmap_settings: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingResult'],
                 interpolate: str,
                 normalize: bool,
                 show_labels: bool,
                 title: str,
                 type: str,
                 yaxis_settings: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingResult']):
        """
        :param str aggregation: Aggregation
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingArgs'] color_scheme_settings: Color scheme settings
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingArgs'] heatmap_settings: Heatmap settings
        :param str interpolate: Interpolate
        :param bool normalize: Normalize
        :param bool show_labels: Show chart labels
        :param str title: Inside chart title
        :param str type: Visualization type
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingArgs'] yaxis_settings: Y axis settings
        """
        pulumi.set(__self__, "aggregation", aggregation)
        pulumi.set(__self__, "color_scheme_settings", color_scheme_settings)
        pulumi.set(__self__, "heatmap_settings", heatmap_settings)
        pulumi.set(__self__, "interpolate", interpolate)
        pulumi.set(__self__, "normalize", normalize)
        pulumi.set(__self__, "show_labels", show_labels)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "yaxis_settings", yaxis_settings)

    @property
    @pulumi.getter
    def aggregation(self) -> str:
        """
        Aggregation
        """
        return pulumi.get(self, "aggregation")

    @property
    @pulumi.getter(name="colorSchemeSettings")
    def color_scheme_settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingResult']:
        """
        Color scheme settings
        """
        return pulumi.get(self, "color_scheme_settings")

    @property
    @pulumi.getter(name="heatmapSettings")
    def heatmap_settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingResult']:
        """
        Heatmap settings
        """
        return pulumi.get(self, "heatmap_settings")

    @property
    @pulumi.getter
    def interpolate(self) -> str:
        """
        Interpolate
        """
        return pulumi.get(self, "interpolate")

    @property
    @pulumi.getter
    def normalize(self) -> bool:
        """
        Normalize
        """
        return pulumi.get(self, "normalize")

    @property
    @pulumi.getter(name="showLabels")
    def show_labels(self) -> bool:
        """
        Show chart labels
        """
        return pulumi.get(self, "show_labels")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Inside chart title
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Visualization type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="yaxisSettings")
    def yaxis_settings(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingResult']:
        """
        Y axis settings
        """
        return pulumi.get(self, "yaxis_settings")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingResult(dict):
    def __init__(__self__, *,
                 automatics: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticResult'],
                 gradients: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientResult'],
                 standards: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardResult']):
        """
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticArgs'] automatics: Automatic color scheme
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientArgs'] gradients: Gradient color scheme
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardArgs'] standards: Standard color scheme
        """
        pulumi.set(__self__, "automatics", automatics)
        pulumi.set(__self__, "gradients", gradients)
        pulumi.set(__self__, "standards", standards)

    @property
    @pulumi.getter
    def automatics(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticResult']:
        """
        Automatic color scheme
        """
        return pulumi.get(self, "automatics")

    @property
    @pulumi.getter
    def gradients(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientResult']:
        """
        Gradient color scheme
        """
        return pulumi.get(self, "gradients")

    @property
    @pulumi.getter
    def standards(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardResult']:
        """
        Standard color scheme
        """
        return pulumi.get(self, "standards")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingAutomaticResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingGradientResult(dict):
    def __init__(__self__, *,
                 green_value: str,
                 red_value: str,
                 violet_value: str,
                 yellow_value: str):
        """
        :param str green_value: Gradient green value
        :param str red_value: Gradient red value
        :param str violet_value: Gradient violet value
        :param str yellow_value: Gradient yellow value
        """
        pulumi.set(__self__, "green_value", green_value)
        pulumi.set(__self__, "red_value", red_value)
        pulumi.set(__self__, "violet_value", violet_value)
        pulumi.set(__self__, "yellow_value", yellow_value)

    @property
    @pulumi.getter(name="greenValue")
    def green_value(self) -> str:
        """
        Gradient green value
        """
        return pulumi.get(self, "green_value")

    @property
    @pulumi.getter(name="redValue")
    def red_value(self) -> str:
        """
        Gradient red value
        """
        return pulumi.get(self, "red_value")

    @property
    @pulumi.getter(name="violetValue")
    def violet_value(self) -> str:
        """
        Gradient violet value
        """
        return pulumi.get(self, "violet_value")

    @property
    @pulumi.getter(name="yellowValue")
    def yellow_value(self) -> str:
        """
        Gradient yellow value
        """
        return pulumi.get(self, "yellow_value")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingColorSchemeSettingStandardResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingHeatmapSettingResult(dict):
    def __init__(__self__, *,
                 green_value: str,
                 red_value: str,
                 violet_value: str,
                 yellow_value: str):
        """
        :param str green_value: Heatmap green value
        :param str red_value: Heatmap red value
        :param str violet_value: Heatmap violet_value
        :param str yellow_value: Heatmap yellow value
        """
        pulumi.set(__self__, "green_value", green_value)
        pulumi.set(__self__, "red_value", red_value)
        pulumi.set(__self__, "violet_value", violet_value)
        pulumi.set(__self__, "yellow_value", yellow_value)

    @property
    @pulumi.getter(name="greenValue")
    def green_value(self) -> str:
        """
        Heatmap green value
        """
        return pulumi.get(self, "green_value")

    @property
    @pulumi.getter(name="redValue")
    def red_value(self) -> str:
        """
        Heatmap red value
        """
        return pulumi.get(self, "red_value")

    @property
    @pulumi.getter(name="violetValue")
    def violet_value(self) -> str:
        """
        Heatmap violet_value
        """
        return pulumi.get(self, "violet_value")

    @property
    @pulumi.getter(name="yellowValue")
    def yellow_value(self) -> str:
        """
        Heatmap yellow value
        """
        return pulumi.get(self, "yellow_value")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingResult(dict):
    def __init__(__self__, *,
                 lefts: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftResult'],
                 rights: Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightResult']):
        """
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftArgs'] lefts: Left Y axis settings
        :param Sequence['GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightArgs'] rights: Right Y axis settings
        """
        pulumi.set(__self__, "lefts", lefts)
        pulumi.set(__self__, "rights", rights)

    @property
    @pulumi.getter
    def lefts(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftResult']:
        """
        Left Y axis settings
        """
        return pulumi.get(self, "lefts")

    @property
    @pulumi.getter
    def rights(self) -> Sequence['outputs.GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightResult']:
        """
        Right Y axis settings
        """
        return pulumi.get(self, "rights")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingLeftResult(dict):
    def __init__(__self__, *,
                 max: str,
                 min: str,
                 precision: int,
                 title: str,
                 type: str,
                 unit_format: str):
        """
        :param str max: Max value in extended number format or empty
        :param str min: Min value in extended number format or empty
        :param int precision: Tick value precision (null as default, 0-7 in other cases)
        :param str title: Title or empty
        :param str type: Type
        :param str unit_format: Unit format
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "precision", precision)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_format", unit_format)

    @property
    @pulumi.getter
    def max(self) -> str:
        """
        Max value in extended number format or empty
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        """
        Min value in extended number format or empty
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def precision(self) -> int:
        """
        Tick value precision (null as default, 0-7 in other cases)
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title or empty
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitFormat")
    def unit_format(self) -> str:
        """
        Unit format
        """
        return pulumi.get(self, "unit_format")


@pulumi.output_type
class GetMonitoringDashboardWidgetChartVisualizationSettingYaxisSettingRightResult(dict):
    def __init__(__self__, *,
                 max: str,
                 min: str,
                 precision: int,
                 title: str,
                 type: str,
                 unit_format: str):
        """
        :param str max: Max value in extended number format or empty
        :param str min: Min value in extended number format or empty
        :param int precision: Tick value precision (null as default, 0-7 in other cases)
        :param str title: Title or empty
        :param str type: Type
        :param str unit_format: Unit format
        """
        pulumi.set(__self__, "max", max)
        pulumi.set(__self__, "min", min)
        pulumi.set(__self__, "precision", precision)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "unit_format", unit_format)

    @property
    @pulumi.getter
    def max(self) -> str:
        """
        Max value in extended number format or empty
        """
        return pulumi.get(self, "max")

    @property
    @pulumi.getter
    def min(self) -> str:
        """
        Min value in extended number format or empty
        """
        return pulumi.get(self, "min")

    @property
    @pulumi.getter
    def precision(self) -> int:
        """
        Tick value precision (null as default, 0-7 in other cases)
        """
        return pulumi.get(self, "precision")

    @property
    @pulumi.getter
    def title(self) -> str:
        """
        Title or empty
        """
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="unitFormat")
    def unit_format(self) -> str:
        """
        Unit format
        """
        return pulumi.get(self, "unit_format")


@pulumi.output_type
class GetMonitoringDashboardWidgetPositionResult(dict):
    def __init__(__self__, *,
                 h: int,
                 w: int,
                 x: int,
                 y: int):
        """
        :param int h: Height
        :param int w: Width
        :param int x: X-axis top-left corner coordinate
        :param int y: Y-axis top-left corner coordinate
        """
        pulumi.set(__self__, "h", h)
        pulumi.set(__self__, "w", w)
        pulumi.set(__self__, "x", x)
        pulumi.set(__self__, "y", y)

    @property
    @pulumi.getter
    def h(self) -> int:
        """
        Height
        """
        return pulumi.get(self, "h")

    @property
    @pulumi.getter
    def w(self) -> int:
        """
        Width
        """
        return pulumi.get(self, "w")

    @property
    @pulumi.getter
    def x(self) -> int:
        """
        X-axis top-left corner coordinate
        """
        return pulumi.get(self, "x")

    @property
    @pulumi.getter
    def y(self) -> int:
        """
        Y-axis top-left corner coordinate
        """
        return pulumi.get(self, "y")


@pulumi.output_type
class GetMonitoringDashboardWidgetTextResult(dict):
    def __init__(__self__, *,
                 text: str):
        """
        :param str text: Text
        """
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Text
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GetMonitoringDashboardWidgetTitleResult(dict):
    def __init__(__self__, *,
                 size: str,
                 text: str):
        """
        :param str size: Title size
        :param str text: Title text
        """
        pulumi.set(__self__, "size", size)
        pulumi.set(__self__, "text", text)

    @property
    @pulumi.getter
    def size(self) -> str:
        """
        Title size
        """
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def text(self) -> str:
        """
        Title text
        """
        return pulumi.get(self, "text")


@pulumi.output_type
class GetOrganizationmanagerGroupMemberResult(dict):
    def __init__(__self__, *,
                 id: str,
                 type: str):
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetOrganizationmanagerOsLoginSettingsSshCertificateSettingsResult(dict):
    def __init__(__self__, *,
                 enabled: Optional[bool] = None):
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetOrganizationmanagerOsLoginSettingsUserSshKeySettingsResult(dict):
    def __init__(__self__, *,
                 allow_manage_own_keys: Optional[bool] = None,
                 enabled: Optional[bool] = None):
        if allow_manage_own_keys is not None:
            pulumi.set(__self__, "allow_manage_own_keys", allow_manage_own_keys)
        if enabled is not None:
            pulumi.set(__self__, "enabled", enabled)

    @property
    @pulumi.getter(name="allowManageOwnKeys")
    def allow_manage_own_keys(self) -> Optional[bool]:
        return pulumi.get(self, "allow_manage_own_keys")

    @property
    @pulumi.getter
    def enabled(self) -> Optional[bool]:
        return pulumi.get(self, "enabled")


@pulumi.output_type
class GetOrganizationmanagerSamlFederationSecuritySettingResult(dict):
    def __init__(__self__, *,
                 encrypted_assertions: bool):
        pulumi.set(__self__, "encrypted_assertions", encrypted_assertions)

    @property
    @pulumi.getter(name="encryptedAssertions")
    def encrypted_assertions(self) -> bool:
        return pulumi.get(self, "encrypted_assertions")


@pulumi.output_type
class GetServerlessContainerConnectivityResult(dict):
    def __init__(__self__, *,
                 network_id: str):
        pulumi.set(__self__, "network_id", network_id)

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        return pulumi.get(self, "network_id")


@pulumi.output_type
class GetServerlessContainerImageResult(dict):
    def __init__(__self__, *,
                 args: Sequence[str],
                 commands: Sequence[str],
                 digest: str,
                 environment: Mapping[str, str],
                 url: str,
                 work_dir: str):
        pulumi.set(__self__, "args", args)
        pulumi.set(__self__, "commands", commands)
        pulumi.set(__self__, "digest", digest)
        pulumi.set(__self__, "environment", environment)
        pulumi.set(__self__, "url", url)
        pulumi.set(__self__, "work_dir", work_dir)

    @property
    @pulumi.getter
    def args(self) -> Sequence[str]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def commands(self) -> Sequence[str]:
        return pulumi.get(self, "commands")

    @property
    @pulumi.getter
    def digest(self) -> str:
        return pulumi.get(self, "digest")

    @property
    @pulumi.getter
    def environment(self) -> Mapping[str, str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter
    def url(self) -> str:
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="workDir")
    def work_dir(self) -> str:
        return pulumi.get(self, "work_dir")


@pulumi.output_type
class GetServerlessContainerLogOptionResult(dict):
    def __init__(__self__, *,
                 disabled: bool,
                 folder_id: str,
                 log_group_id: str,
                 min_level: str):
        pulumi.set(__self__, "disabled", disabled)
        pulumi.set(__self__, "folder_id", folder_id)
        pulumi.set(__self__, "log_group_id", log_group_id)
        pulumi.set(__self__, "min_level", min_level)

    @property
    @pulumi.getter
    def disabled(self) -> bool:
        return pulumi.get(self, "disabled")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter(name="minLevel")
    def min_level(self) -> str:
        return pulumi.get(self, "min_level")


@pulumi.output_type
class GetServerlessContainerSecretResult(dict):
    def __init__(__self__, *,
                 environment_variable: str,
                 id: str,
                 key: str,
                 version_id: str):
        pulumi.set(__self__, "environment_variable", environment_variable)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "version_id", version_id)

    @property
    @pulumi.getter(name="environmentVariable")
    def environment_variable(self) -> str:
        return pulumi.get(self, "environment_variable")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="versionId")
    def version_id(self) -> str:
        return pulumi.get(self, "version_id")


@pulumi.output_type
class GetServerlessContainerStorageMountResult(dict):
    def __init__(__self__, *,
                 bucket: str,
                 mount_point_path: str,
                 prefix: Optional[str] = None,
                 read_only: Optional[bool] = None):
        pulumi.set(__self__, "bucket", bucket)
        pulumi.set(__self__, "mount_point_path", mount_point_path)
        if prefix is not None:
            pulumi.set(__self__, "prefix", prefix)
        if read_only is not None:
            pulumi.set(__self__, "read_only", read_only)

    @property
    @pulumi.getter
    def bucket(self) -> str:
        return pulumi.get(self, "bucket")

    @property
    @pulumi.getter(name="mountPointPath")
    def mount_point_path(self) -> str:
        return pulumi.get(self, "mount_point_path")

    @property
    @pulumi.getter
    def prefix(self) -> Optional[str]:
        return pulumi.get(self, "prefix")

    @property
    @pulumi.getter(name="readOnly")
    def read_only(self) -> Optional[bool]:
        return pulumi.get(self, "read_only")


@pulumi.output_type
class GetSmartcaptchaCaptchaOverrideVariantResult(dict):
    def __init__(__self__, *,
                 challenge_type: str,
                 complexity: str,
                 description: str,
                 pre_check_type: str,
                 uuid: str):
        pulumi.set(__self__, "challenge_type", challenge_type)
        pulumi.set(__self__, "complexity", complexity)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "pre_check_type", pre_check_type)
        pulumi.set(__self__, "uuid", uuid)

    @property
    @pulumi.getter(name="challengeType")
    def challenge_type(self) -> str:
        return pulumi.get(self, "challenge_type")

    @property
    @pulumi.getter
    def complexity(self) -> str:
        return pulumi.get(self, "complexity")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="preCheckType")
    def pre_check_type(self) -> str:
        return pulumi.get(self, "pre_check_type")

    @property
    @pulumi.getter
    def uuid(self) -> str:
        return pulumi.get(self, "uuid")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionResult'],
                 description: str,
                 name: str,
                 override_variant_uuid: str,
                 priority: int):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "override_variant_uuid", override_variant_uuid)
        pulumi.set(__self__, "priority", priority)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="overrideVariantUuid")
    def override_variant_uuid(self) -> str:
        return pulumi.get(self, "override_variant_uuid")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionResult(dict):
    def __init__(__self__, *,
                 headers: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHeaderResult'],
                 hosts: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHostResult'],
                 source_ips: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpResult'],
                 uris: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriResult']):
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "hosts", hosts)
        pulumi.set(__self__, "source_ips", source_ips)
        pulumi.set(__self__, "uris", uris)

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHostResult']:
        return pulumi.get(self, "hosts")

    @property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpResult']:
        return pulumi.get(self, "source_ips")

    @property
    @pulumi.getter
    def uris(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriResult']:
        return pulumi.get(self, "uris")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionHostResult(dict):
    def __init__(__self__, *,
                 hosts: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHostHostResult']):
        pulumi.set(__self__, "hosts", hosts)

    @property
    @pulumi.getter
    def hosts(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionHostHostResult']:
        return pulumi.get(self, "hosts")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionHostHostResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpResult(dict):
    def __init__(__self__, *,
                 geo_ip_matches: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatchResult'],
                 geo_ip_not_matches: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatchResult'],
                 ip_ranges_matches: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatchResult'],
                 ip_ranges_not_matches: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatchResult']):
        pulumi.set(__self__, "geo_ip_matches", geo_ip_matches)
        pulumi.set(__self__, "geo_ip_not_matches", geo_ip_not_matches)
        pulumi.set(__self__, "ip_ranges_matches", ip_ranges_matches)
        pulumi.set(__self__, "ip_ranges_not_matches", ip_ranges_not_matches)

    @property
    @pulumi.getter(name="geoIpMatches")
    def geo_ip_matches(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatchResult']:
        return pulumi.get(self, "geo_ip_matches")

    @property
    @pulumi.getter(name="geoIpNotMatches")
    def geo_ip_not_matches(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatchResult']:
        return pulumi.get(self, "geo_ip_not_matches")

    @property
    @pulumi.getter(name="ipRangesMatches")
    def ip_ranges_matches(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatchResult']:
        return pulumi.get(self, "ip_ranges_matches")

    @property
    @pulumi.getter(name="ipRangesNotMatches")
    def ip_ranges_not_matches(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatchResult']:
        return pulumi.get(self, "ip_ranges_not_matches")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpGeoIpNotMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionSourceIpIpRangesNotMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionUriResult(dict):
    def __init__(__self__, *,
                 paths: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriPathResult'],
                 queries: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryResult']):
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriPathResult']:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryResult']:
        return pulumi.get(self, "queries")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionUriPathResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryValueResult']):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSmartcaptchaCaptchaSecurityRuleConditionUriQueryValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleResult(dict):
    def __init__(__self__, *,
                 description: str,
                 dry_run: bool,
                 name: str,
                 priority: int,
                 rule_conditions: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionResult'],
                 smart_protections: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionResult']):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "dry_run", dry_run)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "rule_conditions", rule_conditions)
        pulumi.set(__self__, "smart_protections", smart_protections)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="dryRun")
    def dry_run(self) -> bool:
        return pulumi.get(self, "dry_run")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def priority(self) -> int:
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter(name="ruleConditions")
    def rule_conditions(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionResult']:
        return pulumi.get(self, "rule_conditions")

    @property
    @pulumi.getter(name="smartProtections")
    def smart_protections(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionResult']:
        return pulumi.get(self, "smart_protections")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionResult(dict):
    def __init__(__self__, *,
                 action: str,
                 conditions: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionResult']):
        pulumi.set(__self__, "action", action)
        pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def action(self) -> str:
        return pulumi.get(self, "action")

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionResult']:
        return pulumi.get(self, "conditions")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionResult(dict):
    def __init__(__self__, *,
                 authorities: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityResult'],
                 headers: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderResult'],
                 http_methods: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodResult'],
                 request_uris: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriResult'],
                 source_ips: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpResult']):
        pulumi.set(__self__, "authorities", authorities)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "http_methods", http_methods)
        pulumi.set(__self__, "request_uris", request_uris)
        pulumi.set(__self__, "source_ips", source_ips)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityResult']:
        return pulumi.get(self, "authorities")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodResult']:
        return pulumi.get(self, "http_methods")

    @property
    @pulumi.getter(name="requestUris")
    def request_uris(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriResult']:
        return pulumi.get(self, "request_uris")

    @property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpResult']:
        return pulumi.get(self, "source_ips")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityResult(dict):
    def __init__(__self__, *,
                 authorities: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthorityResult']):
        pulumi.set(__self__, "authorities", authorities)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthorityResult']:
        return pulumi.get(self, "authorities")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionAuthorityAuthorityResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodResult(dict):
    def __init__(__self__, *,
                 http_methods: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethodResult']):
        pulumi.set(__self__, "http_methods", http_methods)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethodResult']:
        return pulumi.get(self, "http_methods")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionHttpMethodHttpMethodResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriResult(dict):
    def __init__(__self__, *,
                 paths: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPathResult'],
                 queries: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryResult']):
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPathResult']:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryResult']:
        return pulumi.get(self, "queries")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriPathResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValueResult']):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionRequestUriQueryValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpResult(dict):
    def __init__(__self__, *,
                 geo_ip_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatchResult'],
                 geo_ip_not_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatchResult'],
                 ip_ranges_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatchResult'],
                 ip_ranges_not_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatchResult']):
        pulumi.set(__self__, "geo_ip_matches", geo_ip_matches)
        pulumi.set(__self__, "geo_ip_not_matches", geo_ip_not_matches)
        pulumi.set(__self__, "ip_ranges_matches", ip_ranges_matches)
        pulumi.set(__self__, "ip_ranges_not_matches", ip_ranges_not_matches)

    @property
    @pulumi.getter(name="geoIpMatches")
    def geo_ip_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatchResult']:
        return pulumi.get(self, "geo_ip_matches")

    @property
    @pulumi.getter(name="geoIpNotMatches")
    def geo_ip_not_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatchResult']:
        return pulumi.get(self, "geo_ip_not_matches")

    @property
    @pulumi.getter(name="ipRangesMatches")
    def ip_ranges_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatchResult']:
        return pulumi.get(self, "ip_ranges_matches")

    @property
    @pulumi.getter(name="ipRangesNotMatches")
    def ip_ranges_not_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatchResult']:
        return pulumi.get(self, "ip_ranges_not_matches")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpGeoIpNotMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleRuleConditionConditionSourceIpIpRangesNotMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionResult(dict):
    def __init__(__self__, *,
                 conditions: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionResult'],
                 mode: str):
        pulumi.set(__self__, "conditions", conditions)
        pulumi.set(__self__, "mode", mode)

    @property
    @pulumi.getter
    def conditions(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionResult']:
        return pulumi.get(self, "conditions")

    @property
    @pulumi.getter
    def mode(self) -> str:
        return pulumi.get(self, "mode")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionResult(dict):
    def __init__(__self__, *,
                 authorities: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityResult'],
                 headers: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderResult'],
                 http_methods: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodResult'],
                 request_uris: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriResult'],
                 source_ips: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpResult']):
        pulumi.set(__self__, "authorities", authorities)
        pulumi.set(__self__, "headers", headers)
        pulumi.set(__self__, "http_methods", http_methods)
        pulumi.set(__self__, "request_uris", request_uris)
        pulumi.set(__self__, "source_ips", source_ips)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityResult']:
        return pulumi.get(self, "authorities")

    @property
    @pulumi.getter
    def headers(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderResult']:
        return pulumi.get(self, "headers")

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodResult']:
        return pulumi.get(self, "http_methods")

    @property
    @pulumi.getter(name="requestUris")
    def request_uris(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriResult']:
        return pulumi.get(self, "request_uris")

    @property
    @pulumi.getter(name="sourceIps")
    def source_ips(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpResult']:
        return pulumi.get(self, "source_ips")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityResult(dict):
    def __init__(__self__, *,
                 authorities: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthorityResult']):
        pulumi.set(__self__, "authorities", authorities)

    @property
    @pulumi.getter
    def authorities(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthorityResult']:
        return pulumi.get(self, "authorities")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionAuthorityAuthorityResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHeaderValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodResult(dict):
    def __init__(__self__, *,
                 http_methods: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethodResult']):
        pulumi.set(__self__, "http_methods", http_methods)

    @property
    @pulumi.getter(name="httpMethods")
    def http_methods(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethodResult']:
        return pulumi.get(self, "http_methods")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionHttpMethodHttpMethodResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriResult(dict):
    def __init__(__self__, *,
                 paths: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPathResult'],
                 queries: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryResult']):
        pulumi.set(__self__, "paths", paths)
        pulumi.set(__self__, "queries", queries)

    @property
    @pulumi.getter
    def paths(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPathResult']:
        return pulumi.get(self, "paths")

    @property
    @pulumi.getter
    def queries(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryResult']:
        return pulumi.get(self, "queries")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriPathResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryResult(dict):
    def __init__(__self__, *,
                 key: str,
                 values: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValueResult']):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionRequestUriQueryValueResult(dict):
    def __init__(__self__, *,
                 exact_match: str,
                 exact_not_match: str,
                 pire_regex_match: str,
                 pire_regex_not_match: str,
                 prefix_match: str,
                 prefix_not_match: str):
        pulumi.set(__self__, "exact_match", exact_match)
        pulumi.set(__self__, "exact_not_match", exact_not_match)
        pulumi.set(__self__, "pire_regex_match", pire_regex_match)
        pulumi.set(__self__, "pire_regex_not_match", pire_regex_not_match)
        pulumi.set(__self__, "prefix_match", prefix_match)
        pulumi.set(__self__, "prefix_not_match", prefix_not_match)

    @property
    @pulumi.getter(name="exactMatch")
    def exact_match(self) -> str:
        return pulumi.get(self, "exact_match")

    @property
    @pulumi.getter(name="exactNotMatch")
    def exact_not_match(self) -> str:
        return pulumi.get(self, "exact_not_match")

    @property
    @pulumi.getter(name="pireRegexMatch")
    def pire_regex_match(self) -> str:
        return pulumi.get(self, "pire_regex_match")

    @property
    @pulumi.getter(name="pireRegexNotMatch")
    def pire_regex_not_match(self) -> str:
        return pulumi.get(self, "pire_regex_not_match")

    @property
    @pulumi.getter(name="prefixMatch")
    def prefix_match(self) -> str:
        return pulumi.get(self, "prefix_match")

    @property
    @pulumi.getter(name="prefixNotMatch")
    def prefix_not_match(self) -> str:
        return pulumi.get(self, "prefix_not_match")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpResult(dict):
    def __init__(__self__, *,
                 geo_ip_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatchResult'],
                 geo_ip_not_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatchResult'],
                 ip_ranges_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatchResult'],
                 ip_ranges_not_matches: Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatchResult']):
        pulumi.set(__self__, "geo_ip_matches", geo_ip_matches)
        pulumi.set(__self__, "geo_ip_not_matches", geo_ip_not_matches)
        pulumi.set(__self__, "ip_ranges_matches", ip_ranges_matches)
        pulumi.set(__self__, "ip_ranges_not_matches", ip_ranges_not_matches)

    @property
    @pulumi.getter(name="geoIpMatches")
    def geo_ip_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatchResult']:
        return pulumi.get(self, "geo_ip_matches")

    @property
    @pulumi.getter(name="geoIpNotMatches")
    def geo_ip_not_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatchResult']:
        return pulumi.get(self, "geo_ip_not_matches")

    @property
    @pulumi.getter(name="ipRangesMatches")
    def ip_ranges_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatchResult']:
        return pulumi.get(self, "ip_ranges_matches")

    @property
    @pulumi.getter(name="ipRangesNotMatches")
    def ip_ranges_not_matches(self) -> Sequence['outputs.GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatchResult']:
        return pulumi.get(self, "ip_ranges_not_matches")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpGeoIpNotMatchResult(dict):
    def __init__(__self__, *,
                 locations: Sequence[str]):
        pulumi.set(__self__, "locations", locations)

    @property
    @pulumi.getter
    def locations(self) -> Sequence[str]:
        return pulumi.get(self, "locations")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetSwsSecurityProfileSecurityRuleSmartProtectionConditionSourceIpIpRangesNotMatchResult(dict):
    def __init__(__self__, *,
                 ip_ranges: Sequence[str]):
        pulumi.set(__self__, "ip_ranges", ip_ranges)

    @property
    @pulumi.getter(name="ipRanges")
    def ip_ranges(self) -> Sequence[str]:
        return pulumi.get(self, "ip_ranges")


@pulumi.output_type
class GetVpcAddressDnsRecordResult(dict):
    def __init__(__self__, *,
                 dns_zone_id: str,
                 fqdn: str,
                 ptr: bool,
                 ttl: int):
        pulumi.set(__self__, "dns_zone_id", dns_zone_id)
        pulumi.set(__self__, "fqdn", fqdn)
        pulumi.set(__self__, "ptr", ptr)
        pulumi.set(__self__, "ttl", ttl)

    @property
    @pulumi.getter(name="dnsZoneId")
    def dns_zone_id(self) -> str:
        return pulumi.get(self, "dns_zone_id")

    @property
    @pulumi.getter
    def fqdn(self) -> str:
        return pulumi.get(self, "fqdn")

    @property
    @pulumi.getter
    def ptr(self) -> bool:
        return pulumi.get(self, "ptr")

    @property
    @pulumi.getter
    def ttl(self) -> int:
        return pulumi.get(self, "ttl")


@pulumi.output_type
class GetVpcAddressExternalIpv4AddressResult(dict):
    def __init__(__self__, *,
                 address: str,
                 ddos_protection_provider: str,
                 outgoing_smtp_capability: str,
                 zone_id: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "ddos_protection_provider", ddos_protection_provider)
        pulumi.set(__self__, "outgoing_smtp_capability", outgoing_smtp_capability)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="ddosProtectionProvider")
    def ddos_protection_provider(self) -> str:
        return pulumi.get(self, "ddos_protection_provider")

    @property
    @pulumi.getter(name="outgoingSmtpCapability")
    def outgoing_smtp_capability(self) -> str:
        return pulumi.get(self, "outgoing_smtp_capability")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetVpcGatewaySharedEgressGatewayResult(dict):
    def __init__(__self__):
        pass


@pulumi.output_type
class GetVpcRouteTableStaticRouteResult(dict):
    def __init__(__self__, *,
                 destination_prefix: str,
                 gateway_id: str,
                 next_hop_address: str):
        pulumi.set(__self__, "destination_prefix", destination_prefix)
        pulumi.set(__self__, "gateway_id", gateway_id)
        pulumi.set(__self__, "next_hop_address", next_hop_address)

    @property
    @pulumi.getter(name="destinationPrefix")
    def destination_prefix(self) -> str:
        return pulumi.get(self, "destination_prefix")

    @property
    @pulumi.getter(name="gatewayId")
    def gateway_id(self) -> str:
        return pulumi.get(self, "gateway_id")

    @property
    @pulumi.getter(name="nextHopAddress")
    def next_hop_address(self) -> str:
        return pulumi.get(self, "next_hop_address")


@pulumi.output_type
class GetVpcSecurityGroupEgressResult(dict):
    def __init__(__self__, *,
                 description: str,
                 from_port: int,
                 id: str,
                 labels: Mapping[str, str],
                 port: int,
                 predefined_target: str,
                 protocol: str,
                 security_group_id: str,
                 to_port: int,
                 v4_cidr_blocks: Sequence[str],
                 v6_cidr_blocks: Sequence[str]):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "predefined_target", predefined_target)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "to_port", to_port)
        pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> int:
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> str:
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> int:
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Sequence[str]:
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Sequence[str]:
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class GetVpcSecurityGroupIngressResult(dict):
    def __init__(__self__, *,
                 description: str,
                 from_port: int,
                 id: str,
                 labels: Mapping[str, str],
                 port: int,
                 predefined_target: str,
                 protocol: str,
                 security_group_id: str,
                 to_port: int,
                 v4_cidr_blocks: Sequence[str],
                 v6_cidr_blocks: Sequence[str]):
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "from_port", from_port)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "labels", labels)
        pulumi.set(__self__, "port", port)
        pulumi.set(__self__, "predefined_target", predefined_target)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "security_group_id", security_group_id)
        pulumi.set(__self__, "to_port", to_port)
        pulumi.set(__self__, "v4_cidr_blocks", v4_cidr_blocks)
        pulumi.set(__self__, "v6_cidr_blocks", v6_cidr_blocks)

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fromPort")
    def from_port(self) -> int:
        return pulumi.get(self, "from_port")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def port(self) -> int:
        return pulumi.get(self, "port")

    @property
    @pulumi.getter(name="predefinedTarget")
    def predefined_target(self) -> str:
        return pulumi.get(self, "predefined_target")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter(name="securityGroupId")
    def security_group_id(self) -> str:
        return pulumi.get(self, "security_group_id")

    @property
    @pulumi.getter(name="toPort")
    def to_port(self) -> int:
        return pulumi.get(self, "to_port")

    @property
    @pulumi.getter(name="v4CidrBlocks")
    def v4_cidr_blocks(self) -> Sequence[str]:
        return pulumi.get(self, "v4_cidr_blocks")

    @property
    @pulumi.getter(name="v6CidrBlocks")
    def v6_cidr_blocks(self) -> Sequence[str]:
        return pulumi.get(self, "v6_cidr_blocks")


@pulumi.output_type
class GetVpcSubnetDhcpOptionResult(dict):
    def __init__(__self__, *,
                 domain_name: str,
                 domain_name_servers: Sequence[str],
                 ntp_servers: Sequence[str]):
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_name_servers", domain_name_servers)
        pulumi.set(__self__, "ntp_servers", ntp_servers)

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainNameServers")
    def domain_name_servers(self) -> Sequence[str]:
        return pulumi.get(self, "domain_name_servers")

    @property
    @pulumi.getter(name="ntpServers")
    def ntp_servers(self) -> Sequence[str]:
        return pulumi.get(self, "ntp_servers")


@pulumi.output_type
class GetYdbDatabaseDedicatedLocationResult(dict):
    def __init__(__self__, *,
                 regions: Sequence['outputs.GetYdbDatabaseDedicatedLocationRegionResult'],
                 zones: Sequence['outputs.GetYdbDatabaseDedicatedLocationZoneResult']):
        pulumi.set(__self__, "regions", regions)
        pulumi.set(__self__, "zones", zones)

    @property
    @pulumi.getter
    def regions(self) -> Sequence['outputs.GetYdbDatabaseDedicatedLocationRegionResult']:
        return pulumi.get(self, "regions")

    @property
    @pulumi.getter
    def zones(self) -> Sequence['outputs.GetYdbDatabaseDedicatedLocationZoneResult']:
        return pulumi.get(self, "zones")


@pulumi.output_type
class GetYdbDatabaseDedicatedLocationRegionResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetYdbDatabaseDedicatedLocationZoneResult(dict):
    def __init__(__self__, *,
                 id: str):
        pulumi.set(__self__, "id", id)

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")


@pulumi.output_type
class GetYdbDatabaseDedicatedScalePolicyResult(dict):
    def __init__(__self__, *,
                 fixed_scales: Sequence['outputs.GetYdbDatabaseDedicatedScalePolicyFixedScaleResult']):
        pulumi.set(__self__, "fixed_scales", fixed_scales)

    @property
    @pulumi.getter(name="fixedScales")
    def fixed_scales(self) -> Sequence['outputs.GetYdbDatabaseDedicatedScalePolicyFixedScaleResult']:
        return pulumi.get(self, "fixed_scales")


@pulumi.output_type
class GetYdbDatabaseDedicatedScalePolicyFixedScaleResult(dict):
    def __init__(__self__, *,
                 size: int):
        pulumi.set(__self__, "size", size)

    @property
    @pulumi.getter
    def size(self) -> int:
        return pulumi.get(self, "size")


@pulumi.output_type
class GetYdbDatabaseDedicatedStorageConfigResult(dict):
    def __init__(__self__, *,
                 group_count: int,
                 storage_type_id: str):
        pulumi.set(__self__, "group_count", group_count)
        pulumi.set(__self__, "storage_type_id", storage_type_id)

    @property
    @pulumi.getter(name="groupCount")
    def group_count(self) -> int:
        return pulumi.get(self, "group_count")

    @property
    @pulumi.getter(name="storageTypeId")
    def storage_type_id(self) -> str:
        return pulumi.get(self, "storage_type_id")


@pulumi.output_type
class GetYdbDatabaseServerlessServerlessDatabaseResult(dict):
    def __init__(__self__, *,
                 enable_throttling_rcu_limit: bool,
                 provisioned_rcu_limit: int,
                 storage_size_limit: int,
                 throttling_rcu_limit: int):
        pulumi.set(__self__, "enable_throttling_rcu_limit", enable_throttling_rcu_limit)
        pulumi.set(__self__, "provisioned_rcu_limit", provisioned_rcu_limit)
        pulumi.set(__self__, "storage_size_limit", storage_size_limit)
        pulumi.set(__self__, "throttling_rcu_limit", throttling_rcu_limit)

    @property
    @pulumi.getter(name="enableThrottlingRcuLimit")
    def enable_throttling_rcu_limit(self) -> bool:
        return pulumi.get(self, "enable_throttling_rcu_limit")

    @property
    @pulumi.getter(name="provisionedRcuLimit")
    def provisioned_rcu_limit(self) -> int:
        return pulumi.get(self, "provisioned_rcu_limit")

    @property
    @pulumi.getter(name="storageSizeLimit")
    def storage_size_limit(self) -> int:
        return pulumi.get(self, "storage_size_limit")

    @property
    @pulumi.getter(name="throttlingRcuLimit")
    def throttling_rcu_limit(self) -> int:
        return pulumi.get(self, "throttling_rcu_limit")


