# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ComputeGpuClusterArgs', 'ComputeGpuCluster']

@pulumi.input_type
class ComputeGpuClusterArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 interconnect_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a ComputeGpuCluster resource.
        :param pulumi.Input[str] description: Description of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] folder_id: The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
               provider folder is used.
        :param pulumi.Input[str] interconnect_type: Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
               and it is the only one available at the moment.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
               see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        :param pulumi.Input[str] name: Name of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] zone: Availability zone where the GPU cluster will reside.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if interconnect_type is not None:
            pulumi.set(__self__, "interconnect_type", interconnect_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="interconnectType")
    def interconnect_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        and it is the only one available at the moment.
        """
        return pulumi.get(self, "interconnect_type")

    @interconnect_type.setter
    def interconnect_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interconnect_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone where the GPU cluster will reside.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


@pulumi.input_type
class _ComputeGpuClusterState:
    def __init__(__self__, *,
                 created_at: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 interconnect_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering ComputeGpuCluster resources.
        :param pulumi.Input[str] created_at: Creation timestamp of the GPU cluster.
        :param pulumi.Input[str] description: Description of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] folder_id: The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
               provider folder is used.
        :param pulumi.Input[str] interconnect_type: Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
               and it is the only one available at the moment.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
               see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        :param pulumi.Input[str] name: Name of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] status: The status of the GPU cluster.
        :param pulumi.Input[str] zone: Availability zone where the GPU cluster will reside.
        """
        if created_at is not None:
            pulumi.set(__self__, "created_at", created_at)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if interconnect_type is not None:
            pulumi.set(__self__, "interconnect_type", interconnect_type)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if zone is not None:
            pulumi.set(__self__, "zone", zone)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> Optional[pulumi.Input[str]]:
        """
        Creation timestamp of the GPU cluster.
        """
        return pulumi.get(self, "created_at")

    @created_at.setter
    def created_at(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "created_at", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter(name="interconnectType")
    def interconnect_type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        and it is the only one available at the moment.
        """
        return pulumi.get(self, "interconnect_type")

    @interconnect_type.setter
    def interconnect_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "interconnect_type", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the GPU cluster.
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def zone(self) -> Optional[pulumi.Input[str]]:
        """
        Availability zone where the GPU cluster will reside.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "zone", value)


class ComputeGpuCluster(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 interconnect_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        GPU Cluster connects multiple Compute GPU Instances in the same availability zone with high-speed low-latency network.

        Users can create a cluster from several VMs and use GPUDirectRDMA to directly send data between GPUs on different VMs.

        For more information about GPU cluster in Yandex.Cloud, see:

        * [Documentation](https://cloud.yandex.com/docs/compute/concepts/gpu_cluster)

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        default = yandex.ComputeGpuCluster("default",
            interconnect_type="infiniband",
            labels={
                "environment": "test",
            },
            zone="ru-central1-a")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A GPU cluster can be imported using any of these accepted formats:

        ```sh
        $ pulumi import yandex:index/computeGpuCluster:ComputeGpuCluster default gpu_cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Description of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] folder_id: The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
               provider folder is used.
        :param pulumi.Input[str] interconnect_type: Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
               and it is the only one available at the moment.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
               see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        :param pulumi.Input[str] name: Name of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] zone: Availability zone where the GPU cluster will reside.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ComputeGpuClusterArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        GPU Cluster connects multiple Compute GPU Instances in the same availability zone with high-speed low-latency network.

        Users can create a cluster from several VMs and use GPUDirectRDMA to directly send data between GPUs on different VMs.

        For more information about GPU cluster in Yandex.Cloud, see:

        * [Documentation](https://cloud.yandex.com/docs/compute/concepts/gpu_cluster)

        ## Example Usage

        <!--Start PulumiCodeChooser -->
        ```python
        import pulumi
        import pulumi_yandex as yandex

        default = yandex.ComputeGpuCluster("default",
            interconnect_type="infiniband",
            labels={
                "environment": "test",
            },
            zone="ru-central1-a")
        ```
        <!--End PulumiCodeChooser -->

        ## Import

        A GPU cluster can be imported using any of these accepted formats:

        ```sh
        $ pulumi import yandex:index/computeGpuCluster:ComputeGpuCluster default gpu_cluster_id
        ```

        :param str resource_name: The name of the resource.
        :param ComputeGpuClusterArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ComputeGpuClusterArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 interconnect_type: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 zone: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ComputeGpuClusterArgs.__new__(ComputeGpuClusterArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["interconnect_type"] = interconnect_type
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["zone"] = zone
            __props__.__dict__["created_at"] = None
            __props__.__dict__["status"] = None
        super(ComputeGpuCluster, __self__).__init__(
            'yandex:index/computeGpuCluster:ComputeGpuCluster',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            created_at: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            interconnect_type: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            status: Optional[pulumi.Input[str]] = None,
            zone: Optional[pulumi.Input[str]] = None) -> 'ComputeGpuCluster':
        """
        Get an existing ComputeGpuCluster resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] created_at: Creation timestamp of the GPU cluster.
        :param pulumi.Input[str] description: Description of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] folder_id: The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
               provider folder is used.
        :param pulumi.Input[str] interconnect_type: Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
               and it is the only one available at the moment.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
               see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        :param pulumi.Input[str] name: Name of the GPU cluster. Provide this property when you create a resource.
        :param pulumi.Input[str] status: The status of the GPU cluster.
        :param pulumi.Input[str] zone: Availability zone where the GPU cluster will reside.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ComputeGpuClusterState.__new__(_ComputeGpuClusterState)

        __props__.__dict__["created_at"] = created_at
        __props__.__dict__["description"] = description
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["interconnect_type"] = interconnect_type
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["status"] = status
        __props__.__dict__["zone"] = zone
        return ComputeGpuCluster(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> pulumi.Output[str]:
        """
        Creation timestamp of the GPU cluster.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Description of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        """
        The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter(name="interconnectType")
    def interconnect_type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        and it is the only one available at the moment.
        """
        return pulumi.get(self, "interconnect_type")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the GPU cluster. Provide this property when you create a resource.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the GPU cluster.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Output[str]:
        """
        Availability zone where the GPU cluster will reside.
        """
        return pulumi.get(self, "zone")

