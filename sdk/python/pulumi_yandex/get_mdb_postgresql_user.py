# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetMdbPostgresqlUserResult',
    'AwaitableGetMdbPostgresqlUserResult',
    'get_mdb_postgresql_user',
    'get_mdb_postgresql_user_output',
]

@pulumi.output_type
class GetMdbPostgresqlUserResult:
    """
    A collection of values returned by getMdbPostgresqlUser.
    """
    def __init__(__self__, cluster_id=None, conn_limit=None, deletion_protection=None, grants=None, id=None, login=None, name=None, password=None, permissions=None, settings=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if conn_limit and not isinstance(conn_limit, int):
            raise TypeError("Expected argument 'conn_limit' to be a int")
        pulumi.set(__self__, "conn_limit", conn_limit)
        if deletion_protection and not isinstance(deletion_protection, str):
            raise TypeError("Expected argument 'deletion_protection' to be a str")
        pulumi.set(__self__, "deletion_protection", deletion_protection)
        if grants and not isinstance(grants, list):
            raise TypeError("Expected argument 'grants' to be a list")
        pulumi.set(__self__, "grants", grants)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if login and not isinstance(login, bool):
            raise TypeError("Expected argument 'login' to be a bool")
        pulumi.set(__self__, "login", login)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if permissions and not isinstance(permissions, list):
            raise TypeError("Expected argument 'permissions' to be a list")
        pulumi.set(__self__, "permissions", permissions)
        if settings and not isinstance(settings, dict):
            raise TypeError("Expected argument 'settings' to be a dict")
        pulumi.set(__self__, "settings", settings)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="connLimit")
    def conn_limit(self) -> Optional[int]:
        return pulumi.get(self, "conn_limit")

    @property
    @pulumi.getter(name="deletionProtection")
    def deletion_protection(self) -> Optional[str]:
        return pulumi.get(self, "deletion_protection")

    @property
    @pulumi.getter
    def grants(self) -> Sequence[str]:
        return pulumi.get(self, "grants")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def login(self) -> Optional[bool]:
        return pulumi.get(self, "login")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def permissions(self) -> Sequence['outputs.GetMdbPostgresqlUserPermissionResult']:
        return pulumi.get(self, "permissions")

    @property
    @pulumi.getter
    def settings(self) -> Mapping[str, str]:
        return pulumi.get(self, "settings")


class AwaitableGetMdbPostgresqlUserResult(GetMdbPostgresqlUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetMdbPostgresqlUserResult(
            cluster_id=self.cluster_id,
            conn_limit=self.conn_limit,
            deletion_protection=self.deletion_protection,
            grants=self.grants,
            id=self.id,
            login=self.login,
            name=self.name,
            password=self.password,
            permissions=self.permissions,
            settings=self.settings)


def get_mdb_postgresql_user(cluster_id: Optional[str] = None,
                            conn_limit: Optional[int] = None,
                            deletion_protection: Optional[str] = None,
                            login: Optional[bool] = None,
                            name: Optional[str] = None,
                            settings: Optional[Mapping[str, str]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetMdbPostgresqlUserResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['connLimit'] = conn_limit
    __args__['deletionProtection'] = deletion_protection
    __args__['login'] = login
    __args__['name'] = name
    __args__['settings'] = settings
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('yandex:index/getMdbPostgresqlUser:getMdbPostgresqlUser', __args__, opts=opts, typ=GetMdbPostgresqlUserResult).value

    return AwaitableGetMdbPostgresqlUserResult(
        cluster_id=pulumi.get(__ret__, 'cluster_id'),
        conn_limit=pulumi.get(__ret__, 'conn_limit'),
        deletion_protection=pulumi.get(__ret__, 'deletion_protection'),
        grants=pulumi.get(__ret__, 'grants'),
        id=pulumi.get(__ret__, 'id'),
        login=pulumi.get(__ret__, 'login'),
        name=pulumi.get(__ret__, 'name'),
        password=pulumi.get(__ret__, 'password'),
        permissions=pulumi.get(__ret__, 'permissions'),
        settings=pulumi.get(__ret__, 'settings'))


@_utilities.lift_output_func(get_mdb_postgresql_user)
def get_mdb_postgresql_user_output(cluster_id: Optional[pulumi.Input[str]] = None,
                                   conn_limit: Optional[pulumi.Input[Optional[int]]] = None,
                                   deletion_protection: Optional[pulumi.Input[Optional[str]]] = None,
                                   login: Optional[pulumi.Input[Optional[bool]]] = None,
                                   name: Optional[pulumi.Input[str]] = None,
                                   settings: Optional[pulumi.Input[Optional[Mapping[str, str]]]] = None,
                                   opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetMdbPostgresqlUserResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
