// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// File storage is a virtual file system that can be attached to multiple Compute Cloud VMs in the same availability zone.
//
// Users can share files in storage and use them from different VMs.
//
// Storage is attached to a VM through the [Filesystem in Userspace](https://en.wikipedia.org/wiki/Filesystem_in_Userspace) (FUSE) interface as a [virtiofs](https://www.kernel.org/doc/html/latest/filesystems/virtiofs.html) device that is not linked to the host file system directly.
//
// For more information about filesystems in Yandex.Cloud, see:
//
// * [Documentation](https://cloud.yandex.com/docs/compute/concepts/filesystem)
// * How-to Guides
//   - [Attach filesystem to a VM](https://cloud.yandex.com/en-ru/docs/compute/operations/filesystem/attach-to-vm)
//   - [Detach filesystem from VM](https://cloud.yandex.com/en-ru/docs/compute/operations/filesystem/detach-from-vm)
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewComputeFilesystem(ctx, "default", &yandex.ComputeFilesystemArgs{
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("test"),
//				},
//				Size: pulumi.Int(10),
//				Type: pulumi.String("network-ssd"),
//				Zone: pulumi.String("ru-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A filesystem can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import yandex:index/computeFilesystem:ComputeFilesystem default filesystem_id
// ```
type ComputeFilesystem struct {
	pulumi.CustomResourceState

	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrOutput `pulumi:"blockSize"`
	// Creation timestamp of the filesystem.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrOutput `pulumi:"size"`
	// The status of the filesystem.
	Status pulumi.StringOutput `pulumi:"status"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewComputeFilesystem registers a new resource with the given unique name, arguments, and options.
func NewComputeFilesystem(ctx *pulumi.Context,
	name string, args *ComputeFilesystemArgs, opts ...pulumi.ResourceOption) (*ComputeFilesystem, error) {
	if args == nil {
		args = &ComputeFilesystemArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeFilesystem
	err := ctx.RegisterResource("yandex:index/computeFilesystem:ComputeFilesystem", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeFilesystem gets an existing ComputeFilesystem resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeFilesystem(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeFilesystemState, opts ...pulumi.ResourceOption) (*ComputeFilesystem, error) {
	var resource ComputeFilesystem
	err := ctx.ReadResource("yandex:index/computeFilesystem:ComputeFilesystem", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeFilesystem resources.
type computeFilesystemState struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize *int `pulumi:"blockSize"`
	// Creation timestamp of the filesystem.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size *int `pulumi:"size"`
	// The status of the filesystem.
	Status *string `pulumi:"status"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type *string `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone *string `pulumi:"zone"`
}

type ComputeFilesystemState struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrInput
	// Creation timestamp of the filesystem.
	CreatedAt pulumi.StringPtrInput
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrInput
	// The status of the filesystem.
	Status pulumi.StringPtrInput
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrInput
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringPtrInput
}

func (ComputeFilesystemState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeFilesystemState)(nil)).Elem()
}

type computeFilesystemArgs struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize *int `pulumi:"blockSize"`
	// Description of the filesystem. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the filesystem. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// Size of the filesystem, specified in GB.
	Size *int `pulumi:"size"`
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type *string `pulumi:"type"`
	// Availability zone where the filesystem will reside.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeFilesystem resource.
type ComputeFilesystemArgs struct {
	// Block size of the filesystem, specified in bytes.
	BlockSize pulumi.IntPtrInput
	// Description of the filesystem. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the filesystem belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the filesystem. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// Size of the filesystem, specified in GB.
	Size pulumi.IntPtrInput
	// Type of filesystem to create. Type `network-hdd` is set by default.
	Type pulumi.StringPtrInput
	// Availability zone where the filesystem will reside.
	Zone pulumi.StringPtrInput
}

func (ComputeFilesystemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeFilesystemArgs)(nil)).Elem()
}

type ComputeFilesystemInput interface {
	pulumi.Input

	ToComputeFilesystemOutput() ComputeFilesystemOutput
	ToComputeFilesystemOutputWithContext(ctx context.Context) ComputeFilesystemOutput
}

func (*ComputeFilesystem) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeFilesystem)(nil)).Elem()
}

func (i *ComputeFilesystem) ToComputeFilesystemOutput() ComputeFilesystemOutput {
	return i.ToComputeFilesystemOutputWithContext(context.Background())
}

func (i *ComputeFilesystem) ToComputeFilesystemOutputWithContext(ctx context.Context) ComputeFilesystemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeFilesystemOutput)
}

// ComputeFilesystemArrayInput is an input type that accepts ComputeFilesystemArray and ComputeFilesystemArrayOutput values.
// You can construct a concrete instance of `ComputeFilesystemArrayInput` via:
//
//	ComputeFilesystemArray{ ComputeFilesystemArgs{...} }
type ComputeFilesystemArrayInput interface {
	pulumi.Input

	ToComputeFilesystemArrayOutput() ComputeFilesystemArrayOutput
	ToComputeFilesystemArrayOutputWithContext(context.Context) ComputeFilesystemArrayOutput
}

type ComputeFilesystemArray []ComputeFilesystemInput

func (ComputeFilesystemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeFilesystem)(nil)).Elem()
}

func (i ComputeFilesystemArray) ToComputeFilesystemArrayOutput() ComputeFilesystemArrayOutput {
	return i.ToComputeFilesystemArrayOutputWithContext(context.Background())
}

func (i ComputeFilesystemArray) ToComputeFilesystemArrayOutputWithContext(ctx context.Context) ComputeFilesystemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeFilesystemArrayOutput)
}

// ComputeFilesystemMapInput is an input type that accepts ComputeFilesystemMap and ComputeFilesystemMapOutput values.
// You can construct a concrete instance of `ComputeFilesystemMapInput` via:
//
//	ComputeFilesystemMap{ "key": ComputeFilesystemArgs{...} }
type ComputeFilesystemMapInput interface {
	pulumi.Input

	ToComputeFilesystemMapOutput() ComputeFilesystemMapOutput
	ToComputeFilesystemMapOutputWithContext(context.Context) ComputeFilesystemMapOutput
}

type ComputeFilesystemMap map[string]ComputeFilesystemInput

func (ComputeFilesystemMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeFilesystem)(nil)).Elem()
}

func (i ComputeFilesystemMap) ToComputeFilesystemMapOutput() ComputeFilesystemMapOutput {
	return i.ToComputeFilesystemMapOutputWithContext(context.Background())
}

func (i ComputeFilesystemMap) ToComputeFilesystemMapOutputWithContext(ctx context.Context) ComputeFilesystemMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeFilesystemMapOutput)
}

type ComputeFilesystemOutput struct{ *pulumi.OutputState }

func (ComputeFilesystemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeFilesystem)(nil)).Elem()
}

func (o ComputeFilesystemOutput) ToComputeFilesystemOutput() ComputeFilesystemOutput {
	return o
}

func (o ComputeFilesystemOutput) ToComputeFilesystemOutputWithContext(ctx context.Context) ComputeFilesystemOutput {
	return o
}

// Block size of the filesystem, specified in bytes.
func (o ComputeFilesystemOutput) BlockSize() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.IntPtrOutput { return v.BlockSize }).(pulumi.IntPtrOutput)
}

// Creation timestamp of the filesystem.
func (o ComputeFilesystemOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the filesystem. Provide this property when you create a resource.
func (o ComputeFilesystemOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the folder that the filesystem belongs to. If it is not provided, the default
// provider folder is used.
func (o ComputeFilesystemOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Labels to assign to this filesystem. A list of key/value pairs. For details about the concept,
// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
func (o ComputeFilesystemOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the filesystem. Provide this property when you create a resource.
func (o ComputeFilesystemOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Size of the filesystem, specified in GB.
func (o ComputeFilesystemOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.IntPtrOutput { return v.Size }).(pulumi.IntPtrOutput)
}

// The status of the filesystem.
func (o ComputeFilesystemOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Type of filesystem to create. Type `network-hdd` is set by default.
func (o ComputeFilesystemOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

// Availability zone where the filesystem will reside.
func (o ComputeFilesystemOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeFilesystem) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ComputeFilesystemArrayOutput struct{ *pulumi.OutputState }

func (ComputeFilesystemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeFilesystem)(nil)).Elem()
}

func (o ComputeFilesystemArrayOutput) ToComputeFilesystemArrayOutput() ComputeFilesystemArrayOutput {
	return o
}

func (o ComputeFilesystemArrayOutput) ToComputeFilesystemArrayOutputWithContext(ctx context.Context) ComputeFilesystemArrayOutput {
	return o
}

func (o ComputeFilesystemArrayOutput) Index(i pulumi.IntInput) ComputeFilesystemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeFilesystem {
		return vs[0].([]*ComputeFilesystem)[vs[1].(int)]
	}).(ComputeFilesystemOutput)
}

type ComputeFilesystemMapOutput struct{ *pulumi.OutputState }

func (ComputeFilesystemMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeFilesystem)(nil)).Elem()
}

func (o ComputeFilesystemMapOutput) ToComputeFilesystemMapOutput() ComputeFilesystemMapOutput {
	return o
}

func (o ComputeFilesystemMapOutput) ToComputeFilesystemMapOutputWithContext(ctx context.Context) ComputeFilesystemMapOutput {
	return o
}

func (o ComputeFilesystemMapOutput) MapIndex(k pulumi.StringInput) ComputeFilesystemOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeFilesystem {
		return vs[0].(map[string]*ComputeFilesystem)[vs[1].(string)]
	}).(ComputeFilesystemOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeFilesystemInput)(nil)).Elem(), &ComputeFilesystem{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeFilesystemArrayInput)(nil)).Elem(), ComputeFilesystemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeFilesystemMapInput)(nil)).Elem(), ComputeFilesystemMap{})
	pulumi.RegisterOutputType(ComputeFilesystemOutput{})
	pulumi.RegisterOutputType(ComputeFilesystemArrayOutput{})
	pulumi.RegisterOutputType(ComputeFilesystemMapOutput{})
}
