// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a DNS Recordset.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := yandex.NewVpcNetwork(ctx, "foo", nil)
//			if err != nil {
//				return err
//			}
//			zone1, err := yandex.NewDnsZone(ctx, "zone1", &yandex.DnsZoneArgs{
//				Description: pulumi.String("desc"),
//				Labels: pulumi.StringMap{
//					"label1": pulumi.String("label-1-value"),
//				},
//				Zone:   pulumi.String("example.com."),
//				Public: pulumi.Bool(false),
//				PrivateNetworks: pulumi.StringArray{
//					foo.ID(),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = yandex.NewDnsRecordset(ctx, "rs1", &yandex.DnsRecordsetArgs{
//				ZoneId: zone1.ID(),
//				Type:   pulumi.String("A"),
//				Ttl:    pulumi.Int(200),
//				Datas: pulumi.StringArray{
//					pulumi.String("10.1.0.1"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = yandex.NewDnsRecordset(ctx, "rs2", &yandex.DnsRecordsetArgs{
//				ZoneId: zone1.ID(),
//				Type:   pulumi.String("A"),
//				Ttl:    pulumi.Int(200),
//				Datas: pulumi.StringArray{
//					pulumi.String("10.1.0.2"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// DNS recordset can be imported using this format:
//
// ```sh
// $ pulumi import yandex:index/dnsRecordset:DnsRecordset rs1 {{zone_id}}/{{name}}/{{type}}
// ```
type DnsRecordset struct {
	pulumi.CustomResourceState

	// The string data for the records in this record set.
	Datas pulumi.StringArrayOutput `pulumi:"datas"`
	// The DNS name this record set will apply to.
	Name pulumi.StringOutput `pulumi:"name"`
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntOutput `pulumi:"ttl"`
	// The DNS record set type.
	Type pulumi.StringOutput `pulumi:"type"`
	// The id of the zone in which this record set will reside.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsRecordset registers a new resource with the given unique name, arguments, and options.
func NewDnsRecordset(ctx *pulumi.Context,
	name string, args *DnsRecordsetArgs, opts ...pulumi.ResourceOption) (*DnsRecordset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Datas == nil {
		return nil, errors.New("invalid value for required argument 'Datas'")
	}
	if args.Ttl == nil {
		return nil, errors.New("invalid value for required argument 'Ttl'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource DnsRecordset
	err := ctx.RegisterResource("yandex:index/dnsRecordset:DnsRecordset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRecordset gets an existing DnsRecordset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRecordset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRecordsetState, opts ...pulumi.ResourceOption) (*DnsRecordset, error) {
	var resource DnsRecordset
	err := ctx.ReadResource("yandex:index/dnsRecordset:DnsRecordset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRecordset resources.
type dnsRecordsetState struct {
	// The string data for the records in this record set.
	Datas []string `pulumi:"datas"`
	// The DNS name this record set will apply to.
	Name *string `pulumi:"name"`
	// The time-to-live of this record set (seconds).
	Ttl *int `pulumi:"ttl"`
	// The DNS record set type.
	Type *string `pulumi:"type"`
	// The id of the zone in which this record set will reside.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsRecordsetState struct {
	// The string data for the records in this record set.
	Datas pulumi.StringArrayInput
	// The DNS name this record set will apply to.
	Name pulumi.StringPtrInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntPtrInput
	// The DNS record set type.
	Type pulumi.StringPtrInput
	// The id of the zone in which this record set will reside.
	ZoneId pulumi.StringPtrInput
}

func (DnsRecordsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordsetState)(nil)).Elem()
}

type dnsRecordsetArgs struct {
	// The string data for the records in this record set.
	Datas []string `pulumi:"datas"`
	// The DNS name this record set will apply to.
	Name *string `pulumi:"name"`
	// The time-to-live of this record set (seconds).
	Ttl int `pulumi:"ttl"`
	// The DNS record set type.
	Type string `pulumi:"type"`
	// The id of the zone in which this record set will reside.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsRecordset resource.
type DnsRecordsetArgs struct {
	// The string data for the records in this record set.
	Datas pulumi.StringArrayInput
	// The DNS name this record set will apply to.
	Name pulumi.StringPtrInput
	// The time-to-live of this record set (seconds).
	Ttl pulumi.IntInput
	// The DNS record set type.
	Type pulumi.StringInput
	// The id of the zone in which this record set will reside.
	ZoneId pulumi.StringInput
}

func (DnsRecordsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRecordsetArgs)(nil)).Elem()
}

type DnsRecordsetInput interface {
	pulumi.Input

	ToDnsRecordsetOutput() DnsRecordsetOutput
	ToDnsRecordsetOutputWithContext(ctx context.Context) DnsRecordsetOutput
}

func (*DnsRecordset) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordset)(nil)).Elem()
}

func (i *DnsRecordset) ToDnsRecordsetOutput() DnsRecordsetOutput {
	return i.ToDnsRecordsetOutputWithContext(context.Background())
}

func (i *DnsRecordset) ToDnsRecordsetOutputWithContext(ctx context.Context) DnsRecordsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordsetOutput)
}

// DnsRecordsetArrayInput is an input type that accepts DnsRecordsetArray and DnsRecordsetArrayOutput values.
// You can construct a concrete instance of `DnsRecordsetArrayInput` via:
//
//	DnsRecordsetArray{ DnsRecordsetArgs{...} }
type DnsRecordsetArrayInput interface {
	pulumi.Input

	ToDnsRecordsetArrayOutput() DnsRecordsetArrayOutput
	ToDnsRecordsetArrayOutputWithContext(context.Context) DnsRecordsetArrayOutput
}

type DnsRecordsetArray []DnsRecordsetInput

func (DnsRecordsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecordset)(nil)).Elem()
}

func (i DnsRecordsetArray) ToDnsRecordsetArrayOutput() DnsRecordsetArrayOutput {
	return i.ToDnsRecordsetArrayOutputWithContext(context.Background())
}

func (i DnsRecordsetArray) ToDnsRecordsetArrayOutputWithContext(ctx context.Context) DnsRecordsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordsetArrayOutput)
}

// DnsRecordsetMapInput is an input type that accepts DnsRecordsetMap and DnsRecordsetMapOutput values.
// You can construct a concrete instance of `DnsRecordsetMapInput` via:
//
//	DnsRecordsetMap{ "key": DnsRecordsetArgs{...} }
type DnsRecordsetMapInput interface {
	pulumi.Input

	ToDnsRecordsetMapOutput() DnsRecordsetMapOutput
	ToDnsRecordsetMapOutputWithContext(context.Context) DnsRecordsetMapOutput
}

type DnsRecordsetMap map[string]DnsRecordsetInput

func (DnsRecordsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecordset)(nil)).Elem()
}

func (i DnsRecordsetMap) ToDnsRecordsetMapOutput() DnsRecordsetMapOutput {
	return i.ToDnsRecordsetMapOutputWithContext(context.Background())
}

func (i DnsRecordsetMap) ToDnsRecordsetMapOutputWithContext(ctx context.Context) DnsRecordsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRecordsetMapOutput)
}

type DnsRecordsetOutput struct{ *pulumi.OutputState }

func (DnsRecordsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRecordset)(nil)).Elem()
}

func (o DnsRecordsetOutput) ToDnsRecordsetOutput() DnsRecordsetOutput {
	return o
}

func (o DnsRecordsetOutput) ToDnsRecordsetOutputWithContext(ctx context.Context) DnsRecordsetOutput {
	return o
}

// The string data for the records in this record set.
func (o DnsRecordsetOutput) Datas() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *DnsRecordset) pulumi.StringArrayOutput { return v.Datas }).(pulumi.StringArrayOutput)
}

// The DNS name this record set will apply to.
func (o DnsRecordsetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordset) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The time-to-live of this record set (seconds).
func (o DnsRecordsetOutput) Ttl() pulumi.IntOutput {
	return o.ApplyT(func(v *DnsRecordset) pulumi.IntOutput { return v.Ttl }).(pulumi.IntOutput)
}

// The DNS record set type.
func (o DnsRecordsetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordset) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// The id of the zone in which this record set will reside.
func (o DnsRecordsetOutput) ZoneId() pulumi.StringOutput {
	return o.ApplyT(func(v *DnsRecordset) pulumi.StringOutput { return v.ZoneId }).(pulumi.StringOutput)
}

type DnsRecordsetArrayOutput struct{ *pulumi.OutputState }

func (DnsRecordsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRecordset)(nil)).Elem()
}

func (o DnsRecordsetArrayOutput) ToDnsRecordsetArrayOutput() DnsRecordsetArrayOutput {
	return o
}

func (o DnsRecordsetArrayOutput) ToDnsRecordsetArrayOutputWithContext(ctx context.Context) DnsRecordsetArrayOutput {
	return o
}

func (o DnsRecordsetArrayOutput) Index(i pulumi.IntInput) DnsRecordsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsRecordset {
		return vs[0].([]*DnsRecordset)[vs[1].(int)]
	}).(DnsRecordsetOutput)
}

type DnsRecordsetMapOutput struct{ *pulumi.OutputState }

func (DnsRecordsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRecordset)(nil)).Elem()
}

func (o DnsRecordsetMapOutput) ToDnsRecordsetMapOutput() DnsRecordsetMapOutput {
	return o
}

func (o DnsRecordsetMapOutput) ToDnsRecordsetMapOutputWithContext(ctx context.Context) DnsRecordsetMapOutput {
	return o
}

func (o DnsRecordsetMapOutput) MapIndex(k pulumi.StringInput) DnsRecordsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsRecordset {
		return vs[0].(map[string]*DnsRecordset)[vs[1].(string)]
	}).(DnsRecordsetOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordsetInput)(nil)).Elem(), &DnsRecordset{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordsetArrayInput)(nil)).Elem(), DnsRecordsetArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsRecordsetMapInput)(nil)).Elem(), DnsRecordsetMap{})
	pulumi.RegisterOutputType(DnsRecordsetOutput{})
	pulumi.RegisterOutputType(DnsRecordsetArrayOutput{})
	pulumi.RegisterOutputType(DnsRecordsetMapOutput{})
}
