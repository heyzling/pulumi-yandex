// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type MdbKafkaConnector struct {
	pulumi.CustomResourceState

	ClusterId                   pulumi.StringOutput                                    `pulumi:"clusterId"`
	ConnectorConfigMirrormakers MdbKafkaConnectorConnectorConfigMirrormakerArrayOutput `pulumi:"connectorConfigMirrormakers"`
	ConnectorConfigS3Sinks      MdbKafkaConnectorConnectorConfigS3SinkArrayOutput      `pulumi:"connectorConfigS3Sinks"`
	Name                        pulumi.StringOutput                                    `pulumi:"name"`
	Properties                  pulumi.StringMapOutput                                 `pulumi:"properties"`
	TasksMax                    pulumi.IntPtrOutput                                    `pulumi:"tasksMax"`
}

// NewMdbKafkaConnector registers a new resource with the given unique name, arguments, and options.
func NewMdbKafkaConnector(ctx *pulumi.Context,
	name string, args *MdbKafkaConnectorArgs, opts ...pulumi.ResourceOption) (*MdbKafkaConnector, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbKafkaConnector
	err := ctx.RegisterResource("yandex:index/mdbKafkaConnector:MdbKafkaConnector", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbKafkaConnector gets an existing MdbKafkaConnector resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbKafkaConnector(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbKafkaConnectorState, opts ...pulumi.ResourceOption) (*MdbKafkaConnector, error) {
	var resource MdbKafkaConnector
	err := ctx.ReadResource("yandex:index/mdbKafkaConnector:MdbKafkaConnector", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbKafkaConnector resources.
type mdbKafkaConnectorState struct {
	ClusterId                   *string                                       `pulumi:"clusterId"`
	ConnectorConfigMirrormakers []MdbKafkaConnectorConnectorConfigMirrormaker `pulumi:"connectorConfigMirrormakers"`
	ConnectorConfigS3Sinks      []MdbKafkaConnectorConnectorConfigS3Sink      `pulumi:"connectorConfigS3Sinks"`
	Name                        *string                                       `pulumi:"name"`
	Properties                  map[string]string                             `pulumi:"properties"`
	TasksMax                    *int                                          `pulumi:"tasksMax"`
}

type MdbKafkaConnectorState struct {
	ClusterId                   pulumi.StringPtrInput
	ConnectorConfigMirrormakers MdbKafkaConnectorConnectorConfigMirrormakerArrayInput
	ConnectorConfigS3Sinks      MdbKafkaConnectorConnectorConfigS3SinkArrayInput
	Name                        pulumi.StringPtrInput
	Properties                  pulumi.StringMapInput
	TasksMax                    pulumi.IntPtrInput
}

func (MdbKafkaConnectorState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaConnectorState)(nil)).Elem()
}

type mdbKafkaConnectorArgs struct {
	ClusterId                   string                                        `pulumi:"clusterId"`
	ConnectorConfigMirrormakers []MdbKafkaConnectorConnectorConfigMirrormaker `pulumi:"connectorConfigMirrormakers"`
	ConnectorConfigS3Sinks      []MdbKafkaConnectorConnectorConfigS3Sink      `pulumi:"connectorConfigS3Sinks"`
	Name                        *string                                       `pulumi:"name"`
	Properties                  map[string]string                             `pulumi:"properties"`
	TasksMax                    *int                                          `pulumi:"tasksMax"`
}

// The set of arguments for constructing a MdbKafkaConnector resource.
type MdbKafkaConnectorArgs struct {
	ClusterId                   pulumi.StringInput
	ConnectorConfigMirrormakers MdbKafkaConnectorConnectorConfigMirrormakerArrayInput
	ConnectorConfigS3Sinks      MdbKafkaConnectorConnectorConfigS3SinkArrayInput
	Name                        pulumi.StringPtrInput
	Properties                  pulumi.StringMapInput
	TasksMax                    pulumi.IntPtrInput
}

func (MdbKafkaConnectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaConnectorArgs)(nil)).Elem()
}

type MdbKafkaConnectorInput interface {
	pulumi.Input

	ToMdbKafkaConnectorOutput() MdbKafkaConnectorOutput
	ToMdbKafkaConnectorOutputWithContext(ctx context.Context) MdbKafkaConnectorOutput
}

func (*MdbKafkaConnector) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaConnector)(nil)).Elem()
}

func (i *MdbKafkaConnector) ToMdbKafkaConnectorOutput() MdbKafkaConnectorOutput {
	return i.ToMdbKafkaConnectorOutputWithContext(context.Background())
}

func (i *MdbKafkaConnector) ToMdbKafkaConnectorOutputWithContext(ctx context.Context) MdbKafkaConnectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaConnectorOutput)
}

// MdbKafkaConnectorArrayInput is an input type that accepts MdbKafkaConnectorArray and MdbKafkaConnectorArrayOutput values.
// You can construct a concrete instance of `MdbKafkaConnectorArrayInput` via:
//
//	MdbKafkaConnectorArray{ MdbKafkaConnectorArgs{...} }
type MdbKafkaConnectorArrayInput interface {
	pulumi.Input

	ToMdbKafkaConnectorArrayOutput() MdbKafkaConnectorArrayOutput
	ToMdbKafkaConnectorArrayOutputWithContext(context.Context) MdbKafkaConnectorArrayOutput
}

type MdbKafkaConnectorArray []MdbKafkaConnectorInput

func (MdbKafkaConnectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaConnector)(nil)).Elem()
}

func (i MdbKafkaConnectorArray) ToMdbKafkaConnectorArrayOutput() MdbKafkaConnectorArrayOutput {
	return i.ToMdbKafkaConnectorArrayOutputWithContext(context.Background())
}

func (i MdbKafkaConnectorArray) ToMdbKafkaConnectorArrayOutputWithContext(ctx context.Context) MdbKafkaConnectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaConnectorArrayOutput)
}

// MdbKafkaConnectorMapInput is an input type that accepts MdbKafkaConnectorMap and MdbKafkaConnectorMapOutput values.
// You can construct a concrete instance of `MdbKafkaConnectorMapInput` via:
//
//	MdbKafkaConnectorMap{ "key": MdbKafkaConnectorArgs{...} }
type MdbKafkaConnectorMapInput interface {
	pulumi.Input

	ToMdbKafkaConnectorMapOutput() MdbKafkaConnectorMapOutput
	ToMdbKafkaConnectorMapOutputWithContext(context.Context) MdbKafkaConnectorMapOutput
}

type MdbKafkaConnectorMap map[string]MdbKafkaConnectorInput

func (MdbKafkaConnectorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaConnector)(nil)).Elem()
}

func (i MdbKafkaConnectorMap) ToMdbKafkaConnectorMapOutput() MdbKafkaConnectorMapOutput {
	return i.ToMdbKafkaConnectorMapOutputWithContext(context.Background())
}

func (i MdbKafkaConnectorMap) ToMdbKafkaConnectorMapOutputWithContext(ctx context.Context) MdbKafkaConnectorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaConnectorMapOutput)
}

type MdbKafkaConnectorOutput struct{ *pulumi.OutputState }

func (MdbKafkaConnectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaConnector)(nil)).Elem()
}

func (o MdbKafkaConnectorOutput) ToMdbKafkaConnectorOutput() MdbKafkaConnectorOutput {
	return o
}

func (o MdbKafkaConnectorOutput) ToMdbKafkaConnectorOutputWithContext(ctx context.Context) MdbKafkaConnectorOutput {
	return o
}

func (o MdbKafkaConnectorOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

func (o MdbKafkaConnectorOutput) ConnectorConfigMirrormakers() MdbKafkaConnectorConnectorConfigMirrormakerArrayOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) MdbKafkaConnectorConnectorConfigMirrormakerArrayOutput {
		return v.ConnectorConfigMirrormakers
	}).(MdbKafkaConnectorConnectorConfigMirrormakerArrayOutput)
}

func (o MdbKafkaConnectorOutput) ConnectorConfigS3Sinks() MdbKafkaConnectorConnectorConfigS3SinkArrayOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) MdbKafkaConnectorConnectorConfigS3SinkArrayOutput {
		return v.ConnectorConfigS3Sinks
	}).(MdbKafkaConnectorConnectorConfigS3SinkArrayOutput)
}

func (o MdbKafkaConnectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o MdbKafkaConnectorOutput) Properties() pulumi.StringMapOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) pulumi.StringMapOutput { return v.Properties }).(pulumi.StringMapOutput)
}

func (o MdbKafkaConnectorOutput) TasksMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *MdbKafkaConnector) pulumi.IntPtrOutput { return v.TasksMax }).(pulumi.IntPtrOutput)
}

type MdbKafkaConnectorArrayOutput struct{ *pulumi.OutputState }

func (MdbKafkaConnectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaConnector)(nil)).Elem()
}

func (o MdbKafkaConnectorArrayOutput) ToMdbKafkaConnectorArrayOutput() MdbKafkaConnectorArrayOutput {
	return o
}

func (o MdbKafkaConnectorArrayOutput) ToMdbKafkaConnectorArrayOutputWithContext(ctx context.Context) MdbKafkaConnectorArrayOutput {
	return o
}

func (o MdbKafkaConnectorArrayOutput) Index(i pulumi.IntInput) MdbKafkaConnectorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbKafkaConnector {
		return vs[0].([]*MdbKafkaConnector)[vs[1].(int)]
	}).(MdbKafkaConnectorOutput)
}

type MdbKafkaConnectorMapOutput struct{ *pulumi.OutputState }

func (MdbKafkaConnectorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaConnector)(nil)).Elem()
}

func (o MdbKafkaConnectorMapOutput) ToMdbKafkaConnectorMapOutput() MdbKafkaConnectorMapOutput {
	return o
}

func (o MdbKafkaConnectorMapOutput) ToMdbKafkaConnectorMapOutputWithContext(ctx context.Context) MdbKafkaConnectorMapOutput {
	return o
}

func (o MdbKafkaConnectorMapOutput) MapIndex(k pulumi.StringInput) MdbKafkaConnectorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbKafkaConnector {
		return vs[0].(map[string]*MdbKafkaConnector)[vs[1].(string)]
	}).(MdbKafkaConnectorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaConnectorInput)(nil)).Elem(), &MdbKafkaConnector{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaConnectorArrayInput)(nil)).Elem(), MdbKafkaConnectorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaConnectorMapInput)(nil)).Elem(), MdbKafkaConnectorMap{})
	pulumi.RegisterOutputType(MdbKafkaConnectorOutput{})
	pulumi.RegisterOutputType(MdbKafkaConnectorArrayOutput{})
	pulumi.RegisterOutputType(MdbKafkaConnectorMapOutput{})
}
