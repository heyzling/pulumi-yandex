// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of [Yandex.Cloud Storage Object](https://cloud.yandex.com/docs/storage/concepts/object).
//
// ## Example Usage
//
// Example creating an object in an existing `cat-pictures` bucket.
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewStorageObject(ctx, "cute-cat-picture", &yandex.StorageObjectArgs{
//				Bucket: pulumi.String("cat-pictures"),
//				Key:    pulumi.String("cute-cat"),
//				Source: pulumi.String("/images/cats/cute-cat.jpg"),
//				Tags: pulumi.StringMap{
//					"test": pulumi.String("value"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
type StorageObject struct {
	pulumi.CustomResourceState

	// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
	AccessKey pulumi.StringPtrOutput `pulumi:"accessKey"`
	// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
	//
	// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
	Acl pulumi.StringPtrOutput `pulumi:"acl"`
	// The name of the containing bucket.
	Bucket pulumi.StringOutput `pulumi:"bucket"`
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content pulumi.StringPtrOutput `pulumi:"content"`
	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
	ContentBase64 pulumi.StringPtrOutput `pulumi:"contentBase64"`
	// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	// The name of the object once it is in the bucket.
	Key pulumi.StringOutput `pulumi:"key"`
	// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockLegalHoldStatus pulumi.StringPtrOutput `pulumi:"objectLockLegalHoldStatus"`
	// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockMode pulumi.StringPtrOutput `pulumi:"objectLockMode"`
	// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockRetainUntilDate pulumi.StringPtrOutput `pulumi:"objectLockRetainUntilDate"`
	// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
	SecretKey pulumi.StringPtrOutput `pulumi:"secretKey"`
	// The path to a file that will be read and uploaded as raw bytes for the object content.
	Source pulumi.StringPtrOutput `pulumi:"source"`
	// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
	SourceHash pulumi.StringPtrOutput `pulumi:"sourceHash"`
	// Specifies an object tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
}

// NewStorageObject registers a new resource with the given unique name, arguments, and options.
func NewStorageObject(ctx *pulumi.Context,
	name string, args *StorageObjectArgs, opts ...pulumi.ResourceOption) (*StorageObject, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	if args.Key == nil {
		return nil, errors.New("invalid value for required argument 'Key'")
	}
	if args.SecretKey != nil {
		args.SecretKey = pulumi.ToSecret(args.SecretKey).(pulumi.StringPtrInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"secretKey",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StorageObject
	err := ctx.RegisterResource("yandex:index/storageObject:StorageObject", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStorageObject gets an existing StorageObject resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStorageObject(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StorageObjectState, opts ...pulumi.ResourceOption) (*StorageObject, error) {
	var resource StorageObject
	err := ctx.ReadResource("yandex:index/storageObject:StorageObject", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StorageObject resources.
type storageObjectState struct {
	// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
	AccessKey *string `pulumi:"accessKey"`
	// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
	//
	// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
	Acl *string `pulumi:"acl"`
	// The name of the containing bucket.
	Bucket *string `pulumi:"bucket"`
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content *string `pulumi:"content"`
	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
	ContentBase64 *string `pulumi:"contentBase64"`
	// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
	ContentType *string `pulumi:"contentType"`
	// The name of the object once it is in the bucket.
	Key *string `pulumi:"key"`
	// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockLegalHoldStatus *string `pulumi:"objectLockLegalHoldStatus"`
	// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockMode *string `pulumi:"objectLockMode"`
	// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockRetainUntilDate *string `pulumi:"objectLockRetainUntilDate"`
	// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
	SecretKey *string `pulumi:"secretKey"`
	// The path to a file that will be read and uploaded as raw bytes for the object content.
	Source *string `pulumi:"source"`
	// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
	SourceHash *string `pulumi:"sourceHash"`
	// Specifies an object tags.
	Tags map[string]string `pulumi:"tags"`
}

type StorageObjectState struct {
	// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
	AccessKey pulumi.StringPtrInput
	// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
	//
	// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
	Acl pulumi.StringPtrInput
	// The name of the containing bucket.
	Bucket pulumi.StringPtrInput
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content pulumi.StringPtrInput
	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
	ContentBase64 pulumi.StringPtrInput
	// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
	ContentType pulumi.StringPtrInput
	// The name of the object once it is in the bucket.
	Key pulumi.StringPtrInput
	// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockLegalHoldStatus pulumi.StringPtrInput
	// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockMode pulumi.StringPtrInput
	// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockRetainUntilDate pulumi.StringPtrInput
	// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
	SecretKey pulumi.StringPtrInput
	// The path to a file that will be read and uploaded as raw bytes for the object content.
	Source pulumi.StringPtrInput
	// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
	SourceHash pulumi.StringPtrInput
	// Specifies an object tags.
	Tags pulumi.StringMapInput
}

func (StorageObjectState) ElementType() reflect.Type {
	return reflect.TypeOf((*storageObjectState)(nil)).Elem()
}

type storageObjectArgs struct {
	// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
	AccessKey *string `pulumi:"accessKey"`
	// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
	//
	// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
	Acl *string `pulumi:"acl"`
	// The name of the containing bucket.
	Bucket string `pulumi:"bucket"`
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content *string `pulumi:"content"`
	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
	ContentBase64 *string `pulumi:"contentBase64"`
	// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
	ContentType *string `pulumi:"contentType"`
	// The name of the object once it is in the bucket.
	Key string `pulumi:"key"`
	// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockLegalHoldStatus *string `pulumi:"objectLockLegalHoldStatus"`
	// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockMode *string `pulumi:"objectLockMode"`
	// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockRetainUntilDate *string `pulumi:"objectLockRetainUntilDate"`
	// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
	SecretKey *string `pulumi:"secretKey"`
	// The path to a file that will be read and uploaded as raw bytes for the object content.
	Source *string `pulumi:"source"`
	// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
	SourceHash *string `pulumi:"sourceHash"`
	// Specifies an object tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a StorageObject resource.
type StorageObjectArgs struct {
	// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
	AccessKey pulumi.StringPtrInput
	// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
	//
	// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
	Acl pulumi.StringPtrInput
	// The name of the containing bucket.
	Bucket pulumi.StringInput
	// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
	Content pulumi.StringPtrInput
	// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
	ContentBase64 pulumi.StringPtrInput
	// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
	ContentType pulumi.StringPtrInput
	// The name of the object once it is in the bucket.
	Key pulumi.StringInput
	// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockLegalHoldStatus pulumi.StringPtrInput
	// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockMode pulumi.StringPtrInput
	// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
	ObjectLockRetainUntilDate pulumi.StringPtrInput
	// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
	SecretKey pulumi.StringPtrInput
	// The path to a file that will be read and uploaded as raw bytes for the object content.
	Source pulumi.StringPtrInput
	// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
	SourceHash pulumi.StringPtrInput
	// Specifies an object tags.
	Tags pulumi.StringMapInput
}

func (StorageObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*storageObjectArgs)(nil)).Elem()
}

type StorageObjectInput interface {
	pulumi.Input

	ToStorageObjectOutput() StorageObjectOutput
	ToStorageObjectOutputWithContext(ctx context.Context) StorageObjectOutput
}

func (*StorageObject) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageObject)(nil)).Elem()
}

func (i *StorageObject) ToStorageObjectOutput() StorageObjectOutput {
	return i.ToStorageObjectOutputWithContext(context.Background())
}

func (i *StorageObject) ToStorageObjectOutputWithContext(ctx context.Context) StorageObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageObjectOutput)
}

// StorageObjectArrayInput is an input type that accepts StorageObjectArray and StorageObjectArrayOutput values.
// You can construct a concrete instance of `StorageObjectArrayInput` via:
//
//	StorageObjectArray{ StorageObjectArgs{...} }
type StorageObjectArrayInput interface {
	pulumi.Input

	ToStorageObjectArrayOutput() StorageObjectArrayOutput
	ToStorageObjectArrayOutputWithContext(context.Context) StorageObjectArrayOutput
}

type StorageObjectArray []StorageObjectInput

func (StorageObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageObject)(nil)).Elem()
}

func (i StorageObjectArray) ToStorageObjectArrayOutput() StorageObjectArrayOutput {
	return i.ToStorageObjectArrayOutputWithContext(context.Background())
}

func (i StorageObjectArray) ToStorageObjectArrayOutputWithContext(ctx context.Context) StorageObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageObjectArrayOutput)
}

// StorageObjectMapInput is an input type that accepts StorageObjectMap and StorageObjectMapOutput values.
// You can construct a concrete instance of `StorageObjectMapInput` via:
//
//	StorageObjectMap{ "key": StorageObjectArgs{...} }
type StorageObjectMapInput interface {
	pulumi.Input

	ToStorageObjectMapOutput() StorageObjectMapOutput
	ToStorageObjectMapOutputWithContext(context.Context) StorageObjectMapOutput
}

type StorageObjectMap map[string]StorageObjectInput

func (StorageObjectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageObject)(nil)).Elem()
}

func (i StorageObjectMap) ToStorageObjectMapOutput() StorageObjectMapOutput {
	return i.ToStorageObjectMapOutputWithContext(context.Background())
}

func (i StorageObjectMap) ToStorageObjectMapOutputWithContext(ctx context.Context) StorageObjectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StorageObjectMapOutput)
}

type StorageObjectOutput struct{ *pulumi.OutputState }

func (StorageObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StorageObject)(nil)).Elem()
}

func (o StorageObjectOutput) ToStorageObjectOutput() StorageObjectOutput {
	return o
}

func (o StorageObjectOutput) ToStorageObjectOutputWithContext(ctx context.Context) StorageObjectOutput {
	return o
}

// The access key to use when applying changes. If omitted, `storageAccessKey` specified in config is used.
func (o StorageObjectOutput) AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.AccessKey }).(pulumi.StringPtrOutput)
}

// The [predefined ACL](https://cloud.yandex.com/docs/storage/concepts/acl#predefined_acls) to apply. Defaults to `private`.
//
// > **Note:** To change ACL after creation, the service account to which used access and secret keys correspond should have `storage.admin` role, though this role is not necessary to be able to create an object with any ACL.
func (o StorageObjectOutput) Acl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.Acl }).(pulumi.StringPtrOutput)
}

// The name of the containing bucket.
func (o StorageObjectOutput) Bucket() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringOutput { return v.Bucket }).(pulumi.StringOutput)
}

// Literal string value to use as the object content, which will be uploaded as UTF-8-encoded text.
func (o StorageObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.Content }).(pulumi.StringPtrOutput)
}

// Base64-encoded data that will be decoded and uploaded as raw bytes for the object content. This allows safely uploading non-UTF8 binary data, but is recommended only for small content such as the result of the `gzipbase64` function with small text strings. For larger objects, use `source` to stream the content from a disk file.
func (o StorageObjectOutput) ContentBase64() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.ContentBase64 }).(pulumi.StringPtrOutput)
}

// A standard MIME type describing the format of the object data, e.g. `application/octet-stream`. All Valid MIME Types are valid for this input.
func (o StorageObjectOutput) ContentType() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringOutput { return v.ContentType }).(pulumi.StringOutput)
}

// The name of the object once it is in the bucket.
func (o StorageObjectOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringOutput { return v.Key }).(pulumi.StringOutput)
}

// Specifies a [legal hold status](https://cloud.yandex.com/en/docs/storage/concepts/object-lock#types) of an object. Requires `objectLockConfiguration` to be enabled on a bucket.
func (o StorageObjectOutput) ObjectLockLegalHoldStatus() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.ObjectLockLegalHoldStatus }).(pulumi.StringPtrOutput)
}

// Specifies a type of object lock. One of `["GOVERNANCE", "COMPLIANCE"]`. It must be set simultaneously with `objectLockRetainUntilDate`. Requires `objectLockConfiguration` to be enabled on a bucket.
func (o StorageObjectOutput) ObjectLockMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.ObjectLockMode }).(pulumi.StringPtrOutput)
}

// Specifies date and time in RTC3339 format until which an object is to be locked. It must be set simultaneously with `objectLockMode`. Requires `objectLockConfiguration` to be enabled on a bucket.
func (o StorageObjectOutput) ObjectLockRetainUntilDate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.ObjectLockRetainUntilDate }).(pulumi.StringPtrOutput)
}

// The secret key to use when applying changes. If omitted, `storageSecretKey` specified in config is used.
func (o StorageObjectOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.SecretKey }).(pulumi.StringPtrOutput)
}

// The path to a file that will be read and uploaded as raw bytes for the object content.
func (o StorageObjectOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.Source }).(pulumi.StringPtrOutput)
}

// Used to trigger object update when the source content changes. So the only meaningful value is `filemd5("path/to/source")` (The value is only stored in state and not saved by Yandex Storage).
func (o StorageObjectOutput) SourceHash() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringPtrOutput { return v.SourceHash }).(pulumi.StringPtrOutput)
}

// Specifies an object tags.
func (o StorageObjectOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StorageObject) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

type StorageObjectArrayOutput struct{ *pulumi.OutputState }

func (StorageObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StorageObject)(nil)).Elem()
}

func (o StorageObjectArrayOutput) ToStorageObjectArrayOutput() StorageObjectArrayOutput {
	return o
}

func (o StorageObjectArrayOutput) ToStorageObjectArrayOutputWithContext(ctx context.Context) StorageObjectArrayOutput {
	return o
}

func (o StorageObjectArrayOutput) Index(i pulumi.IntInput) StorageObjectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StorageObject {
		return vs[0].([]*StorageObject)[vs[1].(int)]
	}).(StorageObjectOutput)
}

type StorageObjectMapOutput struct{ *pulumi.OutputState }

func (StorageObjectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StorageObject)(nil)).Elem()
}

func (o StorageObjectMapOutput) ToStorageObjectMapOutput() StorageObjectMapOutput {
	return o
}

func (o StorageObjectMapOutput) ToStorageObjectMapOutputWithContext(ctx context.Context) StorageObjectMapOutput {
	return o
}

func (o StorageObjectMapOutput) MapIndex(k pulumi.StringInput) StorageObjectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StorageObject {
		return vs[0].(map[string]*StorageObject)[vs[1].(string)]
	}).(StorageObjectOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StorageObjectInput)(nil)).Elem(), &StorageObject{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageObjectArrayInput)(nil)).Elem(), StorageObjectArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StorageObjectMapInput)(nil)).Elem(), StorageObjectMap{})
	pulumi.RegisterOutputType(StorageObjectOutput{})
	pulumi.RegisterOutputType(StorageObjectArrayOutput{})
	pulumi.RegisterOutputType(StorageObjectMapOutput{})
}
