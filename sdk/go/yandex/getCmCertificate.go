// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupCmCertificate(ctx *pulumi.Context, args *LookupCmCertificateArgs, opts ...pulumi.InvokeOption) (*LookupCmCertificateResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCmCertificateResult
	err := ctx.Invoke("yandex:index/getCmCertificate:getCmCertificate", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCmCertificate.
type LookupCmCertificateArgs struct {
	CertificateId  *string           `pulumi:"certificateId"`
	Description    *string           `pulumi:"description"`
	FolderId       *string           `pulumi:"folderId"`
	Labels         map[string]string `pulumi:"labels"`
	Name           *string           `pulumi:"name"`
	WaitValidation *bool             `pulumi:"waitValidation"`
}

// A collection of values returned by getCmCertificate.
type LookupCmCertificateResult struct {
	CertificateId      string                      `pulumi:"certificateId"`
	Challenges         []GetCmCertificateChallenge `pulumi:"challenges"`
	CreatedAt          string                      `pulumi:"createdAt"`
	DeletionProtection bool                        `pulumi:"deletionProtection"`
	Description        string                      `pulumi:"description"`
	Domains            []string                    `pulumi:"domains"`
	FolderId           string                      `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id             string            `pulumi:"id"`
	IssuedAt       string            `pulumi:"issuedAt"`
	Issuer         string            `pulumi:"issuer"`
	Labels         map[string]string `pulumi:"labels"`
	Name           string            `pulumi:"name"`
	NotAfter       string            `pulumi:"notAfter"`
	NotBefore      string            `pulumi:"notBefore"`
	Serial         string            `pulumi:"serial"`
	Status         string            `pulumi:"status"`
	Subject        string            `pulumi:"subject"`
	Type           string            `pulumi:"type"`
	UpdatedAt      string            `pulumi:"updatedAt"`
	WaitValidation *bool             `pulumi:"waitValidation"`
}

func LookupCmCertificateOutput(ctx *pulumi.Context, args LookupCmCertificateOutputArgs, opts ...pulumi.InvokeOption) LookupCmCertificateResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCmCertificateResult, error) {
			args := v.(LookupCmCertificateArgs)
			r, err := LookupCmCertificate(ctx, &args, opts...)
			var s LookupCmCertificateResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCmCertificateResultOutput)
}

// A collection of arguments for invoking getCmCertificate.
type LookupCmCertificateOutputArgs struct {
	CertificateId  pulumi.StringPtrInput `pulumi:"certificateId"`
	Description    pulumi.StringPtrInput `pulumi:"description"`
	FolderId       pulumi.StringPtrInput `pulumi:"folderId"`
	Labels         pulumi.StringMapInput `pulumi:"labels"`
	Name           pulumi.StringPtrInput `pulumi:"name"`
	WaitValidation pulumi.BoolPtrInput   `pulumi:"waitValidation"`
}

func (LookupCmCertificateOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCmCertificateArgs)(nil)).Elem()
}

// A collection of values returned by getCmCertificate.
type LookupCmCertificateResultOutput struct{ *pulumi.OutputState }

func (LookupCmCertificateResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCmCertificateResult)(nil)).Elem()
}

func (o LookupCmCertificateResultOutput) ToLookupCmCertificateResultOutput() LookupCmCertificateResultOutput {
	return o
}

func (o LookupCmCertificateResultOutput) ToLookupCmCertificateResultOutputWithContext(ctx context.Context) LookupCmCertificateResultOutput {
	return o
}

func (o LookupCmCertificateResultOutput) CertificateId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.CertificateId }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Challenges() GetCmCertificateChallengeArrayOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) []GetCmCertificateChallenge { return v.Challenges }).(GetCmCertificateChallengeArrayOutput)
}

func (o LookupCmCertificateResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) DeletionProtection() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) bool { return v.DeletionProtection }).(pulumi.BoolOutput)
}

func (o LookupCmCertificateResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Description }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Domains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) []string { return v.Domains }).(pulumi.StringArrayOutput)
}

func (o LookupCmCertificateResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCmCertificateResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) IssuedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.IssuedAt }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Issuer() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Issuer }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

func (o LookupCmCertificateResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) NotAfter() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.NotAfter }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) NotBefore() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.NotBefore }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Serial() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Serial }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Status }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Subject() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Subject }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.Type }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func (o LookupCmCertificateResultOutput) WaitValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCmCertificateResult) *bool { return v.WaitValidation }).(pulumi.BoolPtrOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCmCertificateResultOutput{})
}
