// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a user of a Kafka cluster within the Yandex.Cloud. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/managed-kafka/concepts).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			foo, err := yandex.NewMdbKafkaCluster(ctx, "foo", &yandex.MdbKafkaClusterArgs{
//				NetworkId: pulumi.String("c64vs98keiqc7f24pvkd"),
//				Config: &yandex.MdbKafkaClusterConfigArgs{
//					Version: pulumi.String("2.8"),
//					Zones: pulumi.StringArray{
//						pulumi.String("ru-central1-a"),
//					},
//					Kafka: &yandex.MdbKafkaClusterConfigKafkaArgs{
//						Resources: &yandex.MdbKafkaClusterConfigKafkaResourcesArgs{
//							ResourcePresetId: pulumi.String("s2.micro"),
//							DiskTypeId:       pulumi.String("network-hdd"),
//							DiskSize:         pulumi.Int(16),
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = yandex.NewMdbKafkaTopic(ctx, "events", &yandex.MdbKafkaTopicArgs{
//				ClusterId:         foo.ID(),
//				Partitions:        pulumi.Int(4),
//				ReplicationFactor: pulumi.Int(1),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = yandex.NewMdbKafkaUser(ctx, "userEvents", &yandex.MdbKafkaUserArgs{
//				ClusterId: foo.ID(),
//				Password:  pulumi.String("pass1231232332"),
//				Permissions: yandex.MdbKafkaUserPermissionArray{
//					&yandex.MdbKafkaUserPermissionArgs{
//						TopicName: pulumi.String("events"),
//						Role:      pulumi.String("ACCESS_ROLE_CONSUMER"),
//						AllowHosts: pulumi.StringArray{
//							pulumi.String("host1.db.yandex.net"),
//							pulumi.String("host2.db.yandex.net"),
//						},
//					},
//					&yandex.MdbKafkaUserPermissionArgs{
//						TopicName: pulumi.String("events"),
//						Role:      pulumi.String("ACCESS_ROLE_PRODUCER"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// Kafka user can be imported using following format:
//
// ```sh
// $ pulumi import yandex:index/mdbKafkaUser:MdbKafkaUser foo {{cluster_id}}:{{user_name}}
// ```
type MdbKafkaUser struct {
	pulumi.CustomResourceState

	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of the user.
	Name pulumi.StringOutput `pulumi:"name"`
	// The password of the user.
	Password pulumi.StringOutput `pulumi:"password"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions MdbKafkaUserPermissionArrayOutput `pulumi:"permissions"`
}

// NewMdbKafkaUser registers a new resource with the given unique name, arguments, and options.
func NewMdbKafkaUser(ctx *pulumi.Context,
	name string, args *MdbKafkaUserArgs, opts ...pulumi.ResourceOption) (*MdbKafkaUser, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterId == nil {
		return nil, errors.New("invalid value for required argument 'ClusterId'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Password != nil {
		args.Password = pulumi.ToSecret(args.Password).(pulumi.StringInput)
	}
	secrets := pulumi.AdditionalSecretOutputs([]string{
		"password",
	})
	opts = append(opts, secrets)
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MdbKafkaUser
	err := ctx.RegisterResource("yandex:index/mdbKafkaUser:MdbKafkaUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbKafkaUser gets an existing MdbKafkaUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbKafkaUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbKafkaUserState, opts ...pulumi.ResourceOption) (*MdbKafkaUser, error) {
	var resource MdbKafkaUser
	err := ctx.ReadResource("yandex:index/mdbKafkaUser:MdbKafkaUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbKafkaUser resources.
type mdbKafkaUserState struct {
	ClusterId *string `pulumi:"clusterId"`
	// The name of the user.
	Name *string `pulumi:"name"`
	// The password of the user.
	Password *string `pulumi:"password"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions []MdbKafkaUserPermission `pulumi:"permissions"`
}

type MdbKafkaUserState struct {
	ClusterId pulumi.StringPtrInput
	// The name of the user.
	Name pulumi.StringPtrInput
	// The password of the user.
	Password pulumi.StringPtrInput
	// Set of permissions granted to the user. The structure is documented below.
	Permissions MdbKafkaUserPermissionArrayInput
}

func (MdbKafkaUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaUserState)(nil)).Elem()
}

type mdbKafkaUserArgs struct {
	ClusterId string `pulumi:"clusterId"`
	// The name of the user.
	Name *string `pulumi:"name"`
	// The password of the user.
	Password string `pulumi:"password"`
	// Set of permissions granted to the user. The structure is documented below.
	Permissions []MdbKafkaUserPermission `pulumi:"permissions"`
}

// The set of arguments for constructing a MdbKafkaUser resource.
type MdbKafkaUserArgs struct {
	ClusterId pulumi.StringInput
	// The name of the user.
	Name pulumi.StringPtrInput
	// The password of the user.
	Password pulumi.StringInput
	// Set of permissions granted to the user. The structure is documented below.
	Permissions MdbKafkaUserPermissionArrayInput
}

func (MdbKafkaUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbKafkaUserArgs)(nil)).Elem()
}

type MdbKafkaUserInput interface {
	pulumi.Input

	ToMdbKafkaUserOutput() MdbKafkaUserOutput
	ToMdbKafkaUserOutputWithContext(ctx context.Context) MdbKafkaUserOutput
}

func (*MdbKafkaUser) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaUser)(nil)).Elem()
}

func (i *MdbKafkaUser) ToMdbKafkaUserOutput() MdbKafkaUserOutput {
	return i.ToMdbKafkaUserOutputWithContext(context.Background())
}

func (i *MdbKafkaUser) ToMdbKafkaUserOutputWithContext(ctx context.Context) MdbKafkaUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaUserOutput)
}

// MdbKafkaUserArrayInput is an input type that accepts MdbKafkaUserArray and MdbKafkaUserArrayOutput values.
// You can construct a concrete instance of `MdbKafkaUserArrayInput` via:
//
//	MdbKafkaUserArray{ MdbKafkaUserArgs{...} }
type MdbKafkaUserArrayInput interface {
	pulumi.Input

	ToMdbKafkaUserArrayOutput() MdbKafkaUserArrayOutput
	ToMdbKafkaUserArrayOutputWithContext(context.Context) MdbKafkaUserArrayOutput
}

type MdbKafkaUserArray []MdbKafkaUserInput

func (MdbKafkaUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaUser)(nil)).Elem()
}

func (i MdbKafkaUserArray) ToMdbKafkaUserArrayOutput() MdbKafkaUserArrayOutput {
	return i.ToMdbKafkaUserArrayOutputWithContext(context.Background())
}

func (i MdbKafkaUserArray) ToMdbKafkaUserArrayOutputWithContext(ctx context.Context) MdbKafkaUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaUserArrayOutput)
}

// MdbKafkaUserMapInput is an input type that accepts MdbKafkaUserMap and MdbKafkaUserMapOutput values.
// You can construct a concrete instance of `MdbKafkaUserMapInput` via:
//
//	MdbKafkaUserMap{ "key": MdbKafkaUserArgs{...} }
type MdbKafkaUserMapInput interface {
	pulumi.Input

	ToMdbKafkaUserMapOutput() MdbKafkaUserMapOutput
	ToMdbKafkaUserMapOutputWithContext(context.Context) MdbKafkaUserMapOutput
}

type MdbKafkaUserMap map[string]MdbKafkaUserInput

func (MdbKafkaUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaUser)(nil)).Elem()
}

func (i MdbKafkaUserMap) ToMdbKafkaUserMapOutput() MdbKafkaUserMapOutput {
	return i.ToMdbKafkaUserMapOutputWithContext(context.Background())
}

func (i MdbKafkaUserMap) ToMdbKafkaUserMapOutputWithContext(ctx context.Context) MdbKafkaUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbKafkaUserMapOutput)
}

type MdbKafkaUserOutput struct{ *pulumi.OutputState }

func (MdbKafkaUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbKafkaUser)(nil)).Elem()
}

func (o MdbKafkaUserOutput) ToMdbKafkaUserOutput() MdbKafkaUserOutput {
	return o
}

func (o MdbKafkaUserOutput) ToMdbKafkaUserOutputWithContext(ctx context.Context) MdbKafkaUserOutput {
	return o
}

func (o MdbKafkaUserOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaUser) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// The name of the user.
func (o MdbKafkaUserOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaUser) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The password of the user.
func (o MdbKafkaUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v *MdbKafkaUser) pulumi.StringOutput { return v.Password }).(pulumi.StringOutput)
}

// Set of permissions granted to the user. The structure is documented below.
func (o MdbKafkaUserOutput) Permissions() MdbKafkaUserPermissionArrayOutput {
	return o.ApplyT(func(v *MdbKafkaUser) MdbKafkaUserPermissionArrayOutput { return v.Permissions }).(MdbKafkaUserPermissionArrayOutput)
}

type MdbKafkaUserArrayOutput struct{ *pulumi.OutputState }

func (MdbKafkaUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbKafkaUser)(nil)).Elem()
}

func (o MdbKafkaUserArrayOutput) ToMdbKafkaUserArrayOutput() MdbKafkaUserArrayOutput {
	return o
}

func (o MdbKafkaUserArrayOutput) ToMdbKafkaUserArrayOutputWithContext(ctx context.Context) MdbKafkaUserArrayOutput {
	return o
}

func (o MdbKafkaUserArrayOutput) Index(i pulumi.IntInput) MdbKafkaUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbKafkaUser {
		return vs[0].([]*MdbKafkaUser)[vs[1].(int)]
	}).(MdbKafkaUserOutput)
}

type MdbKafkaUserMapOutput struct{ *pulumi.OutputState }

func (MdbKafkaUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbKafkaUser)(nil)).Elem()
}

func (o MdbKafkaUserMapOutput) ToMdbKafkaUserMapOutput() MdbKafkaUserMapOutput {
	return o
}

func (o MdbKafkaUserMapOutput) ToMdbKafkaUserMapOutputWithContext(ctx context.Context) MdbKafkaUserMapOutput {
	return o
}

func (o MdbKafkaUserMapOutput) MapIndex(k pulumi.StringInput) MdbKafkaUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbKafkaUser {
		return vs[0].(map[string]*MdbKafkaUser)[vs[1].(string)]
	}).(MdbKafkaUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaUserInput)(nil)).Elem(), &MdbKafkaUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaUserArrayInput)(nil)).Elem(), MdbKafkaUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbKafkaUserMapInput)(nil)).Elem(), MdbKafkaUserMap{})
	pulumi.RegisterOutputType(MdbKafkaUserOutput{})
	pulumi.RegisterOutputType(MdbKafkaUserArrayOutput{})
	pulumi.RegisterOutputType(MdbKafkaUserMapOutput{})
}
