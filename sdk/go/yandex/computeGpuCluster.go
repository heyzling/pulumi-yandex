// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// GPU Cluster connects multiple Compute GPU Instances in the same availability zone with high-speed low-latency network.
//
// Users can create a cluster from several VMs and use GPUDirectRDMA to directly send data between GPUs on different VMs.
//
// For more information about GPU cluster in Yandex.Cloud, see:
//
// * [Documentation](https://cloud.yandex.com/docs/compute/concepts/gpu_cluster)
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewComputeGpuCluster(ctx, "default", &yandex.ComputeGpuClusterArgs{
//				InterconnectType: pulumi.String("infiniband"),
//				Labels: pulumi.StringMap{
//					"environment": pulumi.String("test"),
//				},
//				Zone: pulumi.String("ru-central1-a"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A GPU cluster can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import yandex:index/computeGpuCluster:ComputeGpuCluster default gpu_cluster_id
// ```
type ComputeGpuCluster struct {
	pulumi.CustomResourceState

	// Creation timestamp of the GPU cluster.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the GPU cluster. Provide this property when you create a resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
	// and it is the only one available at the moment.
	InterconnectType pulumi.StringPtrOutput `pulumi:"interconnectType"`
	// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the GPU cluster. Provide this property when you create a resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The status of the GPU cluster.
	Status pulumi.StringOutput `pulumi:"status"`
	// Availability zone where the GPU cluster will reside.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewComputeGpuCluster registers a new resource with the given unique name, arguments, and options.
func NewComputeGpuCluster(ctx *pulumi.Context,
	name string, args *ComputeGpuClusterArgs, opts ...pulumi.ResourceOption) (*ComputeGpuCluster, error) {
	if args == nil {
		args = &ComputeGpuClusterArgs{}
	}

	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ComputeGpuCluster
	err := ctx.RegisterResource("yandex:index/computeGpuCluster:ComputeGpuCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeGpuCluster gets an existing ComputeGpuCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeGpuCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeGpuClusterState, opts ...pulumi.ResourceOption) (*ComputeGpuCluster, error) {
	var resource ComputeGpuCluster
	err := ctx.ReadResource("yandex:index/computeGpuCluster:ComputeGpuCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeGpuCluster resources.
type computeGpuClusterState struct {
	// Creation timestamp of the GPU cluster.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the GPU cluster. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
	// and it is the only one available at the moment.
	InterconnectType *string `pulumi:"interconnectType"`
	// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the GPU cluster. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// The status of the GPU cluster.
	Status *string `pulumi:"status"`
	// Availability zone where the GPU cluster will reside.
	Zone *string `pulumi:"zone"`
}

type ComputeGpuClusterState struct {
	// Creation timestamp of the GPU cluster.
	CreatedAt pulumi.StringPtrInput
	// Description of the GPU cluster. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
	// and it is the only one available at the moment.
	InterconnectType pulumi.StringPtrInput
	// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the GPU cluster. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// The status of the GPU cluster.
	Status pulumi.StringPtrInput
	// Availability zone where the GPU cluster will reside.
	Zone pulumi.StringPtrInput
}

func (ComputeGpuClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeGpuClusterState)(nil)).Elem()
}

type computeGpuClusterArgs struct {
	// Description of the GPU cluster. Provide this property when you create a resource.
	Description *string `pulumi:"description"`
	// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
	// and it is the only one available at the moment.
	InterconnectType *string `pulumi:"interconnectType"`
	// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels map[string]string `pulumi:"labels"`
	// Name of the GPU cluster. Provide this property when you create a resource.
	Name *string `pulumi:"name"`
	// Availability zone where the GPU cluster will reside.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeGpuCluster resource.
type ComputeGpuClusterArgs struct {
	// Description of the GPU cluster. Provide this property when you create a resource.
	Description pulumi.StringPtrInput
	// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
	// provider folder is used.
	FolderId pulumi.StringPtrInput
	// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
	// and it is the only one available at the moment.
	InterconnectType pulumi.StringPtrInput
	// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
	// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
	Labels pulumi.StringMapInput
	// Name of the GPU cluster. Provide this property when you create a resource.
	Name pulumi.StringPtrInput
	// Availability zone where the GPU cluster will reside.
	Zone pulumi.StringPtrInput
}

func (ComputeGpuClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeGpuClusterArgs)(nil)).Elem()
}

type ComputeGpuClusterInput interface {
	pulumi.Input

	ToComputeGpuClusterOutput() ComputeGpuClusterOutput
	ToComputeGpuClusterOutputWithContext(ctx context.Context) ComputeGpuClusterOutput
}

func (*ComputeGpuCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeGpuCluster)(nil)).Elem()
}

func (i *ComputeGpuCluster) ToComputeGpuClusterOutput() ComputeGpuClusterOutput {
	return i.ToComputeGpuClusterOutputWithContext(context.Background())
}

func (i *ComputeGpuCluster) ToComputeGpuClusterOutputWithContext(ctx context.Context) ComputeGpuClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeGpuClusterOutput)
}

// ComputeGpuClusterArrayInput is an input type that accepts ComputeGpuClusterArray and ComputeGpuClusterArrayOutput values.
// You can construct a concrete instance of `ComputeGpuClusterArrayInput` via:
//
//	ComputeGpuClusterArray{ ComputeGpuClusterArgs{...} }
type ComputeGpuClusterArrayInput interface {
	pulumi.Input

	ToComputeGpuClusterArrayOutput() ComputeGpuClusterArrayOutput
	ToComputeGpuClusterArrayOutputWithContext(context.Context) ComputeGpuClusterArrayOutput
}

type ComputeGpuClusterArray []ComputeGpuClusterInput

func (ComputeGpuClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeGpuCluster)(nil)).Elem()
}

func (i ComputeGpuClusterArray) ToComputeGpuClusterArrayOutput() ComputeGpuClusterArrayOutput {
	return i.ToComputeGpuClusterArrayOutputWithContext(context.Background())
}

func (i ComputeGpuClusterArray) ToComputeGpuClusterArrayOutputWithContext(ctx context.Context) ComputeGpuClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeGpuClusterArrayOutput)
}

// ComputeGpuClusterMapInput is an input type that accepts ComputeGpuClusterMap and ComputeGpuClusterMapOutput values.
// You can construct a concrete instance of `ComputeGpuClusterMapInput` via:
//
//	ComputeGpuClusterMap{ "key": ComputeGpuClusterArgs{...} }
type ComputeGpuClusterMapInput interface {
	pulumi.Input

	ToComputeGpuClusterMapOutput() ComputeGpuClusterMapOutput
	ToComputeGpuClusterMapOutputWithContext(context.Context) ComputeGpuClusterMapOutput
}

type ComputeGpuClusterMap map[string]ComputeGpuClusterInput

func (ComputeGpuClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeGpuCluster)(nil)).Elem()
}

func (i ComputeGpuClusterMap) ToComputeGpuClusterMapOutput() ComputeGpuClusterMapOutput {
	return i.ToComputeGpuClusterMapOutputWithContext(context.Background())
}

func (i ComputeGpuClusterMap) ToComputeGpuClusterMapOutputWithContext(ctx context.Context) ComputeGpuClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeGpuClusterMapOutput)
}

type ComputeGpuClusterOutput struct{ *pulumi.OutputState }

func (ComputeGpuClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeGpuCluster)(nil)).Elem()
}

func (o ComputeGpuClusterOutput) ToComputeGpuClusterOutput() ComputeGpuClusterOutput {
	return o
}

func (o ComputeGpuClusterOutput) ToComputeGpuClusterOutputWithContext(ctx context.Context) ComputeGpuClusterOutput {
	return o
}

// Creation timestamp of the GPU cluster.
func (o ComputeGpuClusterOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringOutput { return v.CreatedAt }).(pulumi.StringOutput)
}

// Description of the GPU cluster. Provide this property when you create a resource.
func (o ComputeGpuClusterOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default
// provider folder is used.
func (o ComputeGpuClusterOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default,
// and it is the only one available at the moment.
func (o ComputeGpuClusterOutput) InterconnectType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringPtrOutput { return v.InterconnectType }).(pulumi.StringPtrOutput)
}

// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept,
// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
func (o ComputeGpuClusterOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringMapOutput { return v.Labels }).(pulumi.StringMapOutput)
}

// Name of the GPU cluster. Provide this property when you create a resource.
func (o ComputeGpuClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The status of the GPU cluster.
func (o ComputeGpuClusterOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// Availability zone where the GPU cluster will reside.
func (o ComputeGpuClusterOutput) Zone() pulumi.StringOutput {
	return o.ApplyT(func(v *ComputeGpuCluster) pulumi.StringOutput { return v.Zone }).(pulumi.StringOutput)
}

type ComputeGpuClusterArrayOutput struct{ *pulumi.OutputState }

func (ComputeGpuClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeGpuCluster)(nil)).Elem()
}

func (o ComputeGpuClusterArrayOutput) ToComputeGpuClusterArrayOutput() ComputeGpuClusterArrayOutput {
	return o
}

func (o ComputeGpuClusterArrayOutput) ToComputeGpuClusterArrayOutputWithContext(ctx context.Context) ComputeGpuClusterArrayOutput {
	return o
}

func (o ComputeGpuClusterArrayOutput) Index(i pulumi.IntInput) ComputeGpuClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeGpuCluster {
		return vs[0].([]*ComputeGpuCluster)[vs[1].(int)]
	}).(ComputeGpuClusterOutput)
}

type ComputeGpuClusterMapOutput struct{ *pulumi.OutputState }

func (ComputeGpuClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeGpuCluster)(nil)).Elem()
}

func (o ComputeGpuClusterMapOutput) ToComputeGpuClusterMapOutput() ComputeGpuClusterMapOutput {
	return o
}

func (o ComputeGpuClusterMapOutput) ToComputeGpuClusterMapOutputWithContext(ctx context.Context) ComputeGpuClusterMapOutput {
	return o
}

func (o ComputeGpuClusterMapOutput) MapIndex(k pulumi.StringInput) ComputeGpuClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeGpuCluster {
		return vs[0].(map[string]*ComputeGpuCluster)[vs[1].(string)]
	}).(ComputeGpuClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeGpuClusterInput)(nil)).Elem(), &ComputeGpuCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeGpuClusterArrayInput)(nil)).Elem(), ComputeGpuClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeGpuClusterMapInput)(nil)).Elem(), ComputeGpuClusterMap{})
	pulumi.RegisterOutputType(ComputeGpuClusterOutput{})
	pulumi.RegisterOutputType(ComputeGpuClusterArrayOutput{})
	pulumi.RegisterOutputType(ComputeGpuClusterMapOutput{})
}
