// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a virtual host that belongs to specified HTTP router and adds the specified routes to it. For more information,
// see [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/http-router).
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewAlbVirtualHost(ctx, "my-virtual-host", &yandex.AlbVirtualHostArgs{
//				HttpRouterId: pulumi.Any(yandex_alb_http_router.MyRouter.Id),
//				Routes: yandex.AlbVirtualHostRouteArray{
//					&yandex.AlbVirtualHostRouteArgs{
//						Name: pulumi.String("my-route"),
//						HttpRoute: &yandex.AlbVirtualHostRouteHttpRouteArgs{
//							HttpRouteAction: &yandex.AlbVirtualHostRouteHttpRouteHttpRouteActionArgs{
//								BackendGroupId: pulumi.Any(yandex_alb_backend_group.MyBg.Id),
//								Timeout:        pulumi.String("3s"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A virtual host can be imported using the `id` of the resource, which for a virtual host is defined as its
// http router id separated by `/` from the virtual host's name, e.g.:
//
// ```sh
// $ pulumi import yandex:index/albVirtualHost:AlbVirtualHost default http_router_id/vhost_name
// ```
type AlbVirtualHost struct {
	pulumi.CustomResourceState

	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
	// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities pulumi.StringArrayOutput `pulumi:"authorities"`
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId pulumi.StringOutput `pulumi:"httpRouterId"`
	// Apply the following modifications to the request
	// headers. The structure is documented below.
	ModifyRequestHeaders AlbVirtualHostModifyRequestHeaderArrayOutput `pulumi:"modifyRequestHeaders"`
	// Apply the following modifications to the response
	// headers. The structure is documented below.
	ModifyResponseHeaders AlbVirtualHostModifyResponseHeaderArrayOutput `pulumi:"modifyResponseHeaders"`
	// name of the header to modify.
	Name pulumi.StringOutput `pulumi:"name"`
	// Route options for the virtual host. The structure is documented below.
	RouteOptions AlbVirtualHostRouteOptionsPtrOutput `pulumi:"routeOptions"`
	// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
	// http '/' match first makes all other routes unused. The structure is documented below.
	Routes AlbVirtualHostRouteArrayOutput `pulumi:"routes"`
}

// NewAlbVirtualHost registers a new resource with the given unique name, arguments, and options.
func NewAlbVirtualHost(ctx *pulumi.Context,
	name string, args *AlbVirtualHostArgs, opts ...pulumi.ResourceOption) (*AlbVirtualHost, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.HttpRouterId == nil {
		return nil, errors.New("invalid value for required argument 'HttpRouterId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AlbVirtualHost
	err := ctx.RegisterResource("yandex:index/albVirtualHost:AlbVirtualHost", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbVirtualHost gets an existing AlbVirtualHost resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbVirtualHost(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbVirtualHostState, opts ...pulumi.ResourceOption) (*AlbVirtualHost, error) {
	var resource AlbVirtualHost
	err := ctx.ReadResource("yandex:index/albVirtualHost:AlbVirtualHost", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbVirtualHost resources.
type albVirtualHostState struct {
	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
	// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities []string `pulumi:"authorities"`
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId *string `pulumi:"httpRouterId"`
	// Apply the following modifications to the request
	// headers. The structure is documented below.
	ModifyRequestHeaders []AlbVirtualHostModifyRequestHeader `pulumi:"modifyRequestHeaders"`
	// Apply the following modifications to the response
	// headers. The structure is documented below.
	ModifyResponseHeaders []AlbVirtualHostModifyResponseHeader `pulumi:"modifyResponseHeaders"`
	// name of the header to modify.
	Name *string `pulumi:"name"`
	// Route options for the virtual host. The structure is documented below.
	RouteOptions *AlbVirtualHostRouteOptions `pulumi:"routeOptions"`
	// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
	// http '/' match first makes all other routes unused. The structure is documented below.
	Routes []AlbVirtualHostRoute `pulumi:"routes"`
}

type AlbVirtualHostState struct {
	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
	// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities pulumi.StringArrayInput
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId pulumi.StringPtrInput
	// Apply the following modifications to the request
	// headers. The structure is documented below.
	ModifyRequestHeaders AlbVirtualHostModifyRequestHeaderArrayInput
	// Apply the following modifications to the response
	// headers. The structure is documented below.
	ModifyResponseHeaders AlbVirtualHostModifyResponseHeaderArrayInput
	// name of the header to modify.
	Name pulumi.StringPtrInput
	// Route options for the virtual host. The structure is documented below.
	RouteOptions AlbVirtualHostRouteOptionsPtrInput
	// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
	// http '/' match first makes all other routes unused. The structure is documented below.
	Routes AlbVirtualHostRouteArrayInput
}

func (AlbVirtualHostState) ElementType() reflect.Type {
	return reflect.TypeOf((*albVirtualHostState)(nil)).Elem()
}

type albVirtualHostArgs struct {
	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
	// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities []string `pulumi:"authorities"`
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId string `pulumi:"httpRouterId"`
	// Apply the following modifications to the request
	// headers. The structure is documented below.
	ModifyRequestHeaders []AlbVirtualHostModifyRequestHeader `pulumi:"modifyRequestHeaders"`
	// Apply the following modifications to the response
	// headers. The structure is documented below.
	ModifyResponseHeaders []AlbVirtualHostModifyResponseHeader `pulumi:"modifyResponseHeaders"`
	// name of the header to modify.
	Name *string `pulumi:"name"`
	// Route options for the virtual host. The structure is documented below.
	RouteOptions *AlbVirtualHostRouteOptions `pulumi:"routeOptions"`
	// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
	// http '/' match first makes all other routes unused. The structure is documented below.
	Routes []AlbVirtualHostRoute `pulumi:"routes"`
}

// The set of arguments for constructing a AlbVirtualHost resource.
type AlbVirtualHostArgs struct {
	// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
	// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
	Authorities pulumi.StringArrayInput
	// The ID of the HTTP router to which the virtual host belongs.
	HttpRouterId pulumi.StringInput
	// Apply the following modifications to the request
	// headers. The structure is documented below.
	ModifyRequestHeaders AlbVirtualHostModifyRequestHeaderArrayInput
	// Apply the following modifications to the response
	// headers. The structure is documented below.
	ModifyResponseHeaders AlbVirtualHostModifyResponseHeaderArrayInput
	// name of the header to modify.
	Name pulumi.StringPtrInput
	// Route options for the virtual host. The structure is documented below.
	RouteOptions AlbVirtualHostRouteOptionsPtrInput
	// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
	// http '/' match first makes all other routes unused. The structure is documented below.
	Routes AlbVirtualHostRouteArrayInput
}

func (AlbVirtualHostArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albVirtualHostArgs)(nil)).Elem()
}

type AlbVirtualHostInput interface {
	pulumi.Input

	ToAlbVirtualHostOutput() AlbVirtualHostOutput
	ToAlbVirtualHostOutputWithContext(ctx context.Context) AlbVirtualHostOutput
}

func (*AlbVirtualHost) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbVirtualHost)(nil)).Elem()
}

func (i *AlbVirtualHost) ToAlbVirtualHostOutput() AlbVirtualHostOutput {
	return i.ToAlbVirtualHostOutputWithContext(context.Background())
}

func (i *AlbVirtualHost) ToAlbVirtualHostOutputWithContext(ctx context.Context) AlbVirtualHostOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbVirtualHostOutput)
}

// AlbVirtualHostArrayInput is an input type that accepts AlbVirtualHostArray and AlbVirtualHostArrayOutput values.
// You can construct a concrete instance of `AlbVirtualHostArrayInput` via:
//
//	AlbVirtualHostArray{ AlbVirtualHostArgs{...} }
type AlbVirtualHostArrayInput interface {
	pulumi.Input

	ToAlbVirtualHostArrayOutput() AlbVirtualHostArrayOutput
	ToAlbVirtualHostArrayOutputWithContext(context.Context) AlbVirtualHostArrayOutput
}

type AlbVirtualHostArray []AlbVirtualHostInput

func (AlbVirtualHostArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbVirtualHost)(nil)).Elem()
}

func (i AlbVirtualHostArray) ToAlbVirtualHostArrayOutput() AlbVirtualHostArrayOutput {
	return i.ToAlbVirtualHostArrayOutputWithContext(context.Background())
}

func (i AlbVirtualHostArray) ToAlbVirtualHostArrayOutputWithContext(ctx context.Context) AlbVirtualHostArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbVirtualHostArrayOutput)
}

// AlbVirtualHostMapInput is an input type that accepts AlbVirtualHostMap and AlbVirtualHostMapOutput values.
// You can construct a concrete instance of `AlbVirtualHostMapInput` via:
//
//	AlbVirtualHostMap{ "key": AlbVirtualHostArgs{...} }
type AlbVirtualHostMapInput interface {
	pulumi.Input

	ToAlbVirtualHostMapOutput() AlbVirtualHostMapOutput
	ToAlbVirtualHostMapOutputWithContext(context.Context) AlbVirtualHostMapOutput
}

type AlbVirtualHostMap map[string]AlbVirtualHostInput

func (AlbVirtualHostMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbVirtualHost)(nil)).Elem()
}

func (i AlbVirtualHostMap) ToAlbVirtualHostMapOutput() AlbVirtualHostMapOutput {
	return i.ToAlbVirtualHostMapOutputWithContext(context.Background())
}

func (i AlbVirtualHostMap) ToAlbVirtualHostMapOutputWithContext(ctx context.Context) AlbVirtualHostMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbVirtualHostMapOutput)
}

type AlbVirtualHostOutput struct{ *pulumi.OutputState }

func (AlbVirtualHostOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbVirtualHost)(nil)).Elem()
}

func (o AlbVirtualHostOutput) ToAlbVirtualHostOutput() AlbVirtualHostOutput {
	return o
}

func (o AlbVirtualHostOutput) ToAlbVirtualHostOutputWithContext(ctx context.Context) AlbVirtualHostOutput {
	return o
}

// A list of domains (host/authority header) that will be matched to this virtual host. Wildcard
// hosts are supported in the form of '*.foo.com' or '*-bar.foo.com'. If not specified, all domains will be matched.
func (o AlbVirtualHostOutput) Authorities() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *AlbVirtualHost) pulumi.StringArrayOutput { return v.Authorities }).(pulumi.StringArrayOutput)
}

// The ID of the HTTP router to which the virtual host belongs.
func (o AlbVirtualHostOutput) HttpRouterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbVirtualHost) pulumi.StringOutput { return v.HttpRouterId }).(pulumi.StringOutput)
}

// Apply the following modifications to the request
// headers. The structure is documented below.
func (o AlbVirtualHostOutput) ModifyRequestHeaders() AlbVirtualHostModifyRequestHeaderArrayOutput {
	return o.ApplyT(func(v *AlbVirtualHost) AlbVirtualHostModifyRequestHeaderArrayOutput { return v.ModifyRequestHeaders }).(AlbVirtualHostModifyRequestHeaderArrayOutput)
}

// Apply the following modifications to the response
// headers. The structure is documented below.
func (o AlbVirtualHostOutput) ModifyResponseHeaders() AlbVirtualHostModifyResponseHeaderArrayOutput {
	return o.ApplyT(func(v *AlbVirtualHost) AlbVirtualHostModifyResponseHeaderArrayOutput { return v.ModifyResponseHeaders }).(AlbVirtualHostModifyResponseHeaderArrayOutput)
}

// name of the header to modify.
func (o AlbVirtualHostOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AlbVirtualHost) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Route options for the virtual host. The structure is documented below.
func (o AlbVirtualHostOutput) RouteOptions() AlbVirtualHostRouteOptionsPtrOutput {
	return o.ApplyT(func(v *AlbVirtualHost) AlbVirtualHostRouteOptionsPtrOutput { return v.RouteOptions }).(AlbVirtualHostRouteOptionsPtrOutput)
}

// A Route resource. Routes are matched *in-order*. Be careful when adding them to the end. For instance, having
// http '/' match first makes all other routes unused. The structure is documented below.
func (o AlbVirtualHostOutput) Routes() AlbVirtualHostRouteArrayOutput {
	return o.ApplyT(func(v *AlbVirtualHost) AlbVirtualHostRouteArrayOutput { return v.Routes }).(AlbVirtualHostRouteArrayOutput)
}

type AlbVirtualHostArrayOutput struct{ *pulumi.OutputState }

func (AlbVirtualHostArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbVirtualHost)(nil)).Elem()
}

func (o AlbVirtualHostArrayOutput) ToAlbVirtualHostArrayOutput() AlbVirtualHostArrayOutput {
	return o
}

func (o AlbVirtualHostArrayOutput) ToAlbVirtualHostArrayOutputWithContext(ctx context.Context) AlbVirtualHostArrayOutput {
	return o
}

func (o AlbVirtualHostArrayOutput) Index(i pulumi.IntInput) AlbVirtualHostOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbVirtualHost {
		return vs[0].([]*AlbVirtualHost)[vs[1].(int)]
	}).(AlbVirtualHostOutput)
}

type AlbVirtualHostMapOutput struct{ *pulumi.OutputState }

func (AlbVirtualHostMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbVirtualHost)(nil)).Elem()
}

func (o AlbVirtualHostMapOutput) ToAlbVirtualHostMapOutput() AlbVirtualHostMapOutput {
	return o
}

func (o AlbVirtualHostMapOutput) ToAlbVirtualHostMapOutputWithContext(ctx context.Context) AlbVirtualHostMapOutput {
	return o
}

func (o AlbVirtualHostMapOutput) MapIndex(k pulumi.StringInput) AlbVirtualHostOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbVirtualHost {
		return vs[0].(map[string]*AlbVirtualHost)[vs[1].(string)]
	}).(AlbVirtualHostOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbVirtualHostInput)(nil)).Elem(), &AlbVirtualHost{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbVirtualHostArrayInput)(nil)).Elem(), AlbVirtualHostArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbVirtualHostMapInput)(nil)).Elem(), AlbVirtualHostMap{})
	pulumi.RegisterOutputType(AlbVirtualHostOutput{})
	pulumi.RegisterOutputType(AlbVirtualHostArrayOutput{})
	pulumi.RegisterOutputType(AlbVirtualHostMapOutput{})
}
