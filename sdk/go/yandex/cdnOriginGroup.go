// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"errors"
	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of [Yandex.Cloud CDN Origin Groups](https://cloud.yandex.ru/docs/cdn/concepts/origins).
//
// > **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id <folder-id> --type gcore```
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/heyzling/pulumi-yandex.git/sdk/go/yandex"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := yandex.NewCdnOriginGroup(ctx, "myGroup", &yandex.CdnOriginGroupArgs{
//				Origins: yandex.CdnOriginGroupOriginArray{
//					&yandex.CdnOriginGroupOriginArgs{
//						Source: pulumi.String("ya.ru"),
//					},
//					&yandex.CdnOriginGroupOriginArgs{
//						Source: pulumi.String("yandex.ru"),
//					},
//					&yandex.CdnOriginGroupOriginArgs{
//						Source: pulumi.String("goo.gl"),
//					},
//					&yandex.CdnOriginGroupOriginArgs{
//						Backup: pulumi.Bool(false),
//						Source: pulumi.String("amazon.com"),
//					},
//				},
//				UseNext: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// ## Import
//
// A origin group can be imported using any of these accepted formats:
//
// ```sh
// $ pulumi import yandex:index/cdnOriginGroup:CdnOriginGroup default origin_group_id
// ```
type CdnOriginGroup struct {
	pulumi.CustomResourceState

	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// CDN Origin Group name used to define device.
	Name    pulumi.StringOutput             `pulumi:"name"`
	Origins CdnOriginGroupOriginArrayOutput `pulumi:"origins"`
	// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
	UseNext pulumi.BoolPtrOutput `pulumi:"useNext"`
}

// NewCdnOriginGroup registers a new resource with the given unique name, arguments, and options.
func NewCdnOriginGroup(ctx *pulumi.Context,
	name string, args *CdnOriginGroupArgs, opts ...pulumi.ResourceOption) (*CdnOriginGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Origins == nil {
		return nil, errors.New("invalid value for required argument 'Origins'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CdnOriginGroup
	err := ctx.RegisterResource("yandex:index/cdnOriginGroup:CdnOriginGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCdnOriginGroup gets an existing CdnOriginGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCdnOriginGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CdnOriginGroupState, opts ...pulumi.ResourceOption) (*CdnOriginGroup, error) {
	var resource CdnOriginGroup
	err := ctx.ReadResource("yandex:index/cdnOriginGroup:CdnOriginGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CdnOriginGroup resources.
type cdnOriginGroupState struct {
	FolderId *string `pulumi:"folderId"`
	// CDN Origin Group name used to define device.
	Name    *string                `pulumi:"name"`
	Origins []CdnOriginGroupOrigin `pulumi:"origins"`
	// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
	UseNext *bool `pulumi:"useNext"`
}

type CdnOriginGroupState struct {
	FolderId pulumi.StringPtrInput
	// CDN Origin Group name used to define device.
	Name    pulumi.StringPtrInput
	Origins CdnOriginGroupOriginArrayInput
	// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
	UseNext pulumi.BoolPtrInput
}

func (CdnOriginGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnOriginGroupState)(nil)).Elem()
}

type cdnOriginGroupArgs struct {
	FolderId *string `pulumi:"folderId"`
	// CDN Origin Group name used to define device.
	Name    *string                `pulumi:"name"`
	Origins []CdnOriginGroupOrigin `pulumi:"origins"`
	// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
	UseNext *bool `pulumi:"useNext"`
}

// The set of arguments for constructing a CdnOriginGroup resource.
type CdnOriginGroupArgs struct {
	FolderId pulumi.StringPtrInput
	// CDN Origin Group name used to define device.
	Name    pulumi.StringPtrInput
	Origins CdnOriginGroupOriginArrayInput
	// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
	UseNext pulumi.BoolPtrInput
}

func (CdnOriginGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cdnOriginGroupArgs)(nil)).Elem()
}

type CdnOriginGroupInput interface {
	pulumi.Input

	ToCdnOriginGroupOutput() CdnOriginGroupOutput
	ToCdnOriginGroupOutputWithContext(ctx context.Context) CdnOriginGroupOutput
}

func (*CdnOriginGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnOriginGroup)(nil)).Elem()
}

func (i *CdnOriginGroup) ToCdnOriginGroupOutput() CdnOriginGroupOutput {
	return i.ToCdnOriginGroupOutputWithContext(context.Background())
}

func (i *CdnOriginGroup) ToCdnOriginGroupOutputWithContext(ctx context.Context) CdnOriginGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnOriginGroupOutput)
}

// CdnOriginGroupArrayInput is an input type that accepts CdnOriginGroupArray and CdnOriginGroupArrayOutput values.
// You can construct a concrete instance of `CdnOriginGroupArrayInput` via:
//
//	CdnOriginGroupArray{ CdnOriginGroupArgs{...} }
type CdnOriginGroupArrayInput interface {
	pulumi.Input

	ToCdnOriginGroupArrayOutput() CdnOriginGroupArrayOutput
	ToCdnOriginGroupArrayOutputWithContext(context.Context) CdnOriginGroupArrayOutput
}

type CdnOriginGroupArray []CdnOriginGroupInput

func (CdnOriginGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnOriginGroup)(nil)).Elem()
}

func (i CdnOriginGroupArray) ToCdnOriginGroupArrayOutput() CdnOriginGroupArrayOutput {
	return i.ToCdnOriginGroupArrayOutputWithContext(context.Background())
}

func (i CdnOriginGroupArray) ToCdnOriginGroupArrayOutputWithContext(ctx context.Context) CdnOriginGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnOriginGroupArrayOutput)
}

// CdnOriginGroupMapInput is an input type that accepts CdnOriginGroupMap and CdnOriginGroupMapOutput values.
// You can construct a concrete instance of `CdnOriginGroupMapInput` via:
//
//	CdnOriginGroupMap{ "key": CdnOriginGroupArgs{...} }
type CdnOriginGroupMapInput interface {
	pulumi.Input

	ToCdnOriginGroupMapOutput() CdnOriginGroupMapOutput
	ToCdnOriginGroupMapOutputWithContext(context.Context) CdnOriginGroupMapOutput
}

type CdnOriginGroupMap map[string]CdnOriginGroupInput

func (CdnOriginGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnOriginGroup)(nil)).Elem()
}

func (i CdnOriginGroupMap) ToCdnOriginGroupMapOutput() CdnOriginGroupMapOutput {
	return i.ToCdnOriginGroupMapOutputWithContext(context.Background())
}

func (i CdnOriginGroupMap) ToCdnOriginGroupMapOutputWithContext(ctx context.Context) CdnOriginGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CdnOriginGroupMapOutput)
}

type CdnOriginGroupOutput struct{ *pulumi.OutputState }

func (CdnOriginGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CdnOriginGroup)(nil)).Elem()
}

func (o CdnOriginGroupOutput) ToCdnOriginGroupOutput() CdnOriginGroupOutput {
	return o
}

func (o CdnOriginGroupOutput) ToCdnOriginGroupOutputWithContext(ctx context.Context) CdnOriginGroupOutput {
	return o
}

func (o CdnOriginGroupOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnOriginGroup) pulumi.StringOutput { return v.FolderId }).(pulumi.StringOutput)
}

// CDN Origin Group name used to define device.
func (o CdnOriginGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *CdnOriginGroup) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o CdnOriginGroupOutput) Origins() CdnOriginGroupOriginArrayOutput {
	return o.ApplyT(func(v *CdnOriginGroup) CdnOriginGroupOriginArrayOutput { return v.Origins }).(CdnOriginGroupOriginArrayOutput)
}

// If the option is active (has true value), in case the origin responds with 4XX or 5XX codes, use the next origin from the list.
func (o CdnOriginGroupOutput) UseNext() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *CdnOriginGroup) pulumi.BoolPtrOutput { return v.UseNext }).(pulumi.BoolPtrOutput)
}

type CdnOriginGroupArrayOutput struct{ *pulumi.OutputState }

func (CdnOriginGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CdnOriginGroup)(nil)).Elem()
}

func (o CdnOriginGroupArrayOutput) ToCdnOriginGroupArrayOutput() CdnOriginGroupArrayOutput {
	return o
}

func (o CdnOriginGroupArrayOutput) ToCdnOriginGroupArrayOutputWithContext(ctx context.Context) CdnOriginGroupArrayOutput {
	return o
}

func (o CdnOriginGroupArrayOutput) Index(i pulumi.IntInput) CdnOriginGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CdnOriginGroup {
		return vs[0].([]*CdnOriginGroup)[vs[1].(int)]
	}).(CdnOriginGroupOutput)
}

type CdnOriginGroupMapOutput struct{ *pulumi.OutputState }

func (CdnOriginGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CdnOriginGroup)(nil)).Elem()
}

func (o CdnOriginGroupMapOutput) ToCdnOriginGroupMapOutput() CdnOriginGroupMapOutput {
	return o
}

func (o CdnOriginGroupMapOutput) ToCdnOriginGroupMapOutputWithContext(ctx context.Context) CdnOriginGroupMapOutput {
	return o
}

func (o CdnOriginGroupMapOutput) MapIndex(k pulumi.StringInput) CdnOriginGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CdnOriginGroup {
		return vs[0].(map[string]*CdnOriginGroup)[vs[1].(string)]
	}).(CdnOriginGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CdnOriginGroupInput)(nil)).Elem(), &CdnOriginGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnOriginGroupArrayInput)(nil)).Elem(), CdnOriginGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CdnOriginGroupMapInput)(nil)).Elem(), CdnOriginGroupMap{})
	pulumi.RegisterOutputType(CdnOriginGroupOutput{})
	pulumi.RegisterOutputType(CdnOriginGroupArrayOutput{})
	pulumi.RegisterOutputType(CdnOriginGroupMapOutput{})
}
