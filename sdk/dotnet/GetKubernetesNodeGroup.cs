// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetKubernetesNodeGroup
    {
        public static Task<GetKubernetesNodeGroupResult> InvokeAsync(GetKubernetesNodeGroupArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetKubernetesNodeGroupResult>("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", args ?? new GetKubernetesNodeGroupArgs(), options.WithDefaults());

        public static Output<GetKubernetesNodeGroupResult> Invoke(GetKubernetesNodeGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetKubernetesNodeGroupResult>("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", args ?? new GetKubernetesNodeGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetKubernetesNodeGroupArgs : global::Pulumi.InvokeArgs
    {
        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("nodeGroupId")]
        public string? NodeGroupId { get; set; }

        public GetKubernetesNodeGroupArgs()
        {
        }
        public static new GetKubernetesNodeGroupArgs Empty => new GetKubernetesNodeGroupArgs();
    }

    public sealed class GetKubernetesNodeGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nodeGroupId")]
        public Input<string>? NodeGroupId { get; set; }

        public GetKubernetesNodeGroupInvokeArgs()
        {
        }
        public static new GetKubernetesNodeGroupInvokeArgs Empty => new GetKubernetesNodeGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetKubernetesNodeGroupResult
    {
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupAllocationPolicyResult> AllocationPolicies;
        public readonly ImmutableArray<string> AllowedUnsafeSysctls;
        public readonly string ClusterId;
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupDeployPolicyResult> DeployPolicies;
        public readonly string Description;
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceGroupId;
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupInstanceTemplateResult> InstanceTemplates;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupMaintenancePolicyResult> MaintenancePolicies;
        public readonly string Name;
        public readonly string NodeGroupId;
        public readonly ImmutableDictionary<string, string> NodeLabels;
        public readonly ImmutableArray<string> NodeTaints;
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupScalePolicyResult> ScalePolicies;
        public readonly string Status;
        public readonly ImmutableArray<Outputs.GetKubernetesNodeGroupVersionInfoResult> VersionInfos;

        [OutputConstructor]
        private GetKubernetesNodeGroupResult(
            ImmutableArray<Outputs.GetKubernetesNodeGroupAllocationPolicyResult> allocationPolicies,

            ImmutableArray<string> allowedUnsafeSysctls,

            string clusterId,

            string createdAt,

            ImmutableArray<Outputs.GetKubernetesNodeGroupDeployPolicyResult> deployPolicies,

            string description,

            string folderId,

            string id,

            string instanceGroupId,

            ImmutableArray<Outputs.GetKubernetesNodeGroupInstanceTemplateResult> instanceTemplates,

            ImmutableDictionary<string, string> labels,

            ImmutableArray<Outputs.GetKubernetesNodeGroupMaintenancePolicyResult> maintenancePolicies,

            string name,

            string nodeGroupId,

            ImmutableDictionary<string, string> nodeLabels,

            ImmutableArray<string> nodeTaints,

            ImmutableArray<Outputs.GetKubernetesNodeGroupScalePolicyResult> scalePolicies,

            string status,

            ImmutableArray<Outputs.GetKubernetesNodeGroupVersionInfoResult> versionInfos)
        {
            AllocationPolicies = allocationPolicies;
            AllowedUnsafeSysctls = allowedUnsafeSysctls;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            DeployPolicies = deployPolicies;
            Description = description;
            FolderId = folderId;
            Id = id;
            InstanceGroupId = instanceGroupId;
            InstanceTemplates = instanceTemplates;
            Labels = labels;
            MaintenancePolicies = maintenancePolicies;
            Name = name;
            NodeGroupId = nodeGroupId;
            NodeLabels = nodeLabels;
            NodeTaints = nodeTaints;
            ScalePolicies = scalePolicies;
            Status = status;
            VersionInfos = versionInfos;
        }
    }
}
