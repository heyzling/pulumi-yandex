// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class DatatransferTransferTransformationTransformerArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Convert column values to strings.
        /// </summary>
        [Input("convertToString")]
        public Input<Inputs.DatatransferTransferTransformationTransformerConvertToStringArgs>? ConvertToString { get; set; }

        /// <summary>
        /// Set up a list of table columns to transfer.
        /// </summary>
        [Input("filterColumns")]
        public Input<Inputs.DatatransferTransferTransformationTransformerFilterColumnsArgs>? FilterColumns { get; set; }

        /// <summary>
        /// This filter only applies to transfers with queues (Apache KafkaÂ®) as a data source. When running a transfer, only the strings meeting the specified criteria remain in a changefeed.
        /// </summary>
        [Input("filterRows")]
        public Input<Inputs.DatatransferTransferTransformationTransformerFilterRowsArgs>? FilterRows { get; set; }

        /// <summary>
        /// Mask field transformer allows you to hash data.
        /// </summary>
        [Input("maskField")]
        public Input<Inputs.DatatransferTransferTransformationTransformerMaskFieldArgs>? MaskField { get; set; }

        /// <summary>
        /// Set rules for renaming tables by specifying the current names of the tables in the source and new names for these tables in the target.
        /// </summary>
        [Input("renameTables")]
        public Input<Inputs.DatatransferTransferTransformationTransformerRenameTablesArgs>? RenameTables { get; set; }

        /// <summary>
        /// Override primary keys.
        /// </summary>
        [Input("replacePrimaryKey")]
        public Input<Inputs.DatatransferTransferTransformationTransformerReplacePrimaryKeyArgs>? ReplacePrimaryKey { get; set; }

        /// <summary>
        /// Set the number of shards for particular tables and a list of columns whose values will be used for calculating a hash to determine a shard.
        /// </summary>
        [Input("sharderTransformer")]
        public Input<Inputs.DatatransferTransferTransformationTransformerSharderTransformerArgs>? SharderTransformer { get; set; }

        /// <summary>
        /// Splits the X table into multiple tables (X_1, X_2, ..., X_n) based on data.
        /// </summary>
        [Input("tableSplitterTransformer")]
        public Input<Inputs.DatatransferTransferTransformationTransformerTableSplitterTransformerArgs>? TableSplitterTransformer { get; set; }

        public DatatransferTransferTransformationTransformerArgs()
        {
        }
        public static new DatatransferTransferTransformationTransformerArgs Empty => new DatatransferTransferTransformationTransformerArgs();
    }
}
