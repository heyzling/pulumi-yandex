// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetMdbClickhouseClusterClickhouseConfigInputArgs : global::Pulumi.ResourceArgs
    {
        [Input("backgroundFetchesPoolSize", required: true)]
        public Input<int> BackgroundFetchesPoolSize { get; set; } = null!;

        [Input("backgroundMergesMutationsConcurrencyRatio", required: true)]
        public Input<int> BackgroundMergesMutationsConcurrencyRatio { get; set; } = null!;

        [Input("backgroundMessageBrokerSchedulePoolSize", required: true)]
        public Input<int> BackgroundMessageBrokerSchedulePoolSize { get; set; } = null!;

        [Input("backgroundPoolSize", required: true)]
        public Input<int> BackgroundPoolSize { get; set; } = null!;

        [Input("backgroundSchedulePoolSize", required: true)]
        public Input<int> BackgroundSchedulePoolSize { get; set; } = null!;

        [Input("compressions")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs>? _compressions;
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs> Compressions
        {
            get => _compressions ?? (_compressions = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigCompressionInputArgs>());
            set => _compressions = value;
        }

        [Input("defaultDatabase", required: true)]
        public Input<string> DefaultDatabase { get; set; } = null!;

        [Input("dictionariesLazyLoad", required: true)]
        public Input<bool> DictionariesLazyLoad { get; set; } = null!;

        [Input("geobaseEnabled", required: true)]
        public Input<bool> GeobaseEnabled { get; set; } = null!;

        [Input("geobaseUri", required: true)]
        public Input<string> GeobaseUri { get; set; } = null!;

        [Input("graphiteRollups")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs>? _graphiteRollups;
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs> GraphiteRollups
        {
            get => _graphiteRollups ?? (_graphiteRollups = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigGraphiteRollupInputArgs>());
            set => _graphiteRollups = value;
        }

        [Input("kafka", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaInputArgs> Kafka { get; set; } = null!;

        [Input("kafkaTopics")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs>? _kafkaTopics;
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs> KafkaTopics
        {
            get => _kafkaTopics ?? (_kafkaTopics = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigKafkaTopicInputArgs>());
            set => _kafkaTopics = value;
        }

        [Input("keepAliveTimeout", required: true)]
        public Input<int> KeepAliveTimeout { get; set; } = null!;

        [Input("logLevel", required: true)]
        public Input<string> LogLevel { get; set; } = null!;

        [Input("markCacheSize", required: true)]
        public Input<int> MarkCacheSize { get; set; } = null!;

        [Input("maxConcurrentQueries", required: true)]
        public Input<int> MaxConcurrentQueries { get; set; } = null!;

        [Input("maxConnections", required: true)]
        public Input<int> MaxConnections { get; set; } = null!;

        [Input("maxPartitionSizeToDrop", required: true)]
        public Input<int> MaxPartitionSizeToDrop { get; set; } = null!;

        [Input("maxTableSizeToDrop", required: true)]
        public Input<int> MaxTableSizeToDrop { get; set; } = null!;

        [Input("mergeTree", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigMergeTreeInputArgs> MergeTree { get; set; } = null!;

        [Input("metricLogEnabled", required: true)]
        public Input<bool> MetricLogEnabled { get; set; } = null!;

        [Input("metricLogRetentionSize", required: true)]
        public Input<int> MetricLogRetentionSize { get; set; } = null!;

        [Input("metricLogRetentionTime", required: true)]
        public Input<int> MetricLogRetentionTime { get; set; } = null!;

        [Input("partLogRetentionSize", required: true)]
        public Input<int> PartLogRetentionSize { get; set; } = null!;

        [Input("partLogRetentionTime", required: true)]
        public Input<int> PartLogRetentionTime { get; set; } = null!;

        [Input("queryCache", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryCacheInputArgs> QueryCache { get; set; } = null!;

        [Input("queryLogRetentionSize", required: true)]
        public Input<int> QueryLogRetentionSize { get; set; } = null!;

        [Input("queryLogRetentionTime", required: true)]
        public Input<int> QueryLogRetentionTime { get; set; } = null!;

        [Input("queryMaskingRules")]
        private InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs>? _queryMaskingRules;
        public InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs> QueryMaskingRules
        {
            get => _queryMaskingRules ?? (_queryMaskingRules = new InputList<Inputs.GetMdbClickhouseClusterClickhouseConfigQueryMaskingRuleInputArgs>());
            set => _queryMaskingRules = value;
        }

        [Input("queryThreadLogEnabled", required: true)]
        public Input<bool> QueryThreadLogEnabled { get; set; } = null!;

        [Input("queryThreadLogRetentionSize", required: true)]
        public Input<int> QueryThreadLogRetentionSize { get; set; } = null!;

        [Input("queryThreadLogRetentionTime", required: true)]
        public Input<int> QueryThreadLogRetentionTime { get; set; } = null!;

        [Input("rabbitmq", required: true)]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseConfigRabbitmqInputArgs> Rabbitmq { get; set; } = null!;

        [Input("textLogEnabled", required: true)]
        public Input<bool> TextLogEnabled { get; set; } = null!;

        [Input("textLogLevel", required: true)]
        public Input<string> TextLogLevel { get; set; } = null!;

        [Input("textLogRetentionSize", required: true)]
        public Input<int> TextLogRetentionSize { get; set; } = null!;

        [Input("textLogRetentionTime", required: true)]
        public Input<int> TextLogRetentionTime { get; set; } = null!;

        [Input("timezone", required: true)]
        public Input<string> Timezone { get; set; } = null!;

        [Input("totalMemoryProfilerStep", required: true)]
        public Input<int> TotalMemoryProfilerStep { get; set; } = null!;

        [Input("traceLogEnabled", required: true)]
        public Input<bool> TraceLogEnabled { get; set; } = null!;

        [Input("traceLogRetentionSize", required: true)]
        public Input<int> TraceLogRetentionSize { get; set; } = null!;

        [Input("traceLogRetentionTime", required: true)]
        public Input<int> TraceLogRetentionTime { get; set; } = null!;

        [Input("uncompressedCacheSize", required: true)]
        public Input<int> UncompressedCacheSize { get; set; } = null!;

        public GetMdbClickhouseClusterClickhouseConfigInputArgs()
        {
        }
        public static new GetMdbClickhouseClusterClickhouseConfigInputArgs Empty => new GetMdbClickhouseClusterClickhouseConfigInputArgs();
    }
}
