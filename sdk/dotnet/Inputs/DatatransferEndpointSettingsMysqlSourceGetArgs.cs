// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class DatatransferEndpointSettingsMysqlSourceGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Connection settings. The structure is documented below.
        /// </summary>
        [Input("connection")]
        public Input<Inputs.DatatransferEndpointSettingsMysqlSourceConnectionGetArgs>? Connection { get; set; }

        /// <summary>
        /// Name of the database to transfer.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        [Input("excludeTablesRegexes")]
        private InputList<string>? _excludeTablesRegexes;

        /// <summary>
        /// Opposite of `include_table_regex`. The tables matching the specified regular expressions will not be transferred.
        /// </summary>
        public InputList<string> ExcludeTablesRegexes
        {
            get => _excludeTablesRegexes ?? (_excludeTablesRegexes = new InputList<string>());
            set => _excludeTablesRegexes = value;
        }

        [Input("includeTablesRegexes")]
        private InputList<string>? _includeTablesRegexes;

        /// <summary>
        /// List of regular expressions of table names which should be transferred. A table name is formatted as schemaname.tablename. For example, a single regular expression may look like `^mydb.employees$`.
        /// </summary>
        public InputList<string> IncludeTablesRegexes
        {
            get => _includeTablesRegexes ?? (_includeTablesRegexes = new InputList<string>());
            set => _includeTablesRegexes = value;
        }

        /// <summary>
        /// Defines which database schema objects should be transferred, e.g. views, routines, etc.
        /// </summary>
        [Input("objectTransferSettings")]
        public Input<Inputs.DatatransferEndpointSettingsMysqlSourceObjectTransferSettingsGetArgs>? ObjectTransferSettings { get; set; }

        /// <summary>
        /// Password for the database access. This is a block with a single field named `raw` which should contain the password.
        /// </summary>
        [Input("password")]
        public Input<Inputs.DatatransferEndpointSettingsMysqlSourcePasswordGetArgs>? Password { get; set; }

        [Input("securityGroups")]
        private InputList<string>? _securityGroups;

        /// <summary>
        /// List of security groups that the transfer associated with this endpoint should use.
        /// </summary>
        public InputList<string> SecurityGroups
        {
            get => _securityGroups ?? (_securityGroups = new InputList<string>());
            set => _securityGroups = value;
        }

        /// <summary>
        /// The name of the database where technical tables (`__tm_keeper`, `__tm_gtid_keeper`) will be created. Default is the value of the attribute `database`.
        /// </summary>
        [Input("serviceDatabase")]
        public Input<string>? ServiceDatabase { get; set; }

        /// <summary>
        /// Timezone to use for parsing timestamps for saving source timezones. Accepts values from IANA timezone database. Default: local timezone.
        /// </summary>
        [Input("timezone")]
        public Input<string>? Timezone { get; set; }

        /// <summary>
        /// User for the database access.
        /// </summary>
        [Input("user")]
        public Input<string>? User { get; set; }

        public DatatransferEndpointSettingsMysqlSourceGetArgs()
        {
        }
        public static new DatatransferEndpointSettingsMysqlSourceGetArgs Empty => new DatatransferEndpointSettingsMysqlSourceGetArgs();
    }
}
