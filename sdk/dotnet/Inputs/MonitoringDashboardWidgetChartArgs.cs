// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class MonitoringDashboardWidgetChartArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Chart ID.
        /// </summary>
        [Input("chartId")]
        public Input<string>? ChartId { get; set; }

        /// <summary>
        /// Chart description in dashboard (not enabled in UI).
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// Enable legend under chart.
        /// </summary>
        [Input("displayLegend")]
        public Input<bool>? DisplayLegend { get; set; }

        /// <summary>
        /// Fixed time interval for chart. Values:
        /// - FREEZE_DURATION_HOUR: Last hour.
        /// - FREEZE_DURATION_DAY: Last day = last 24 hours.
        /// - FREEZE_DURATION_WEEK: Last 7 days.
        /// - FREEZE_DURATION_MONTH: Last 31 days.
        /// </summary>
        [Input("freeze")]
        public Input<string>? Freeze { get; set; }

        [Input("nameHidingSettings")]
        private InputList<Inputs.MonitoringDashboardWidgetChartNameHidingSettingArgs>? _nameHidingSettings;

        /// <summary>
        /// Names settings.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetChartNameHidingSettingArgs> NameHidingSettings
        {
            get => _nameHidingSettings ?? (_nameHidingSettings = new InputList<Inputs.MonitoringDashboardWidgetChartNameHidingSettingArgs>());
            set => _nameHidingSettings = value;
        }

        [Input("queries")]
        private InputList<Inputs.MonitoringDashboardWidgetChartQueryArgs>? _queries;

        /// <summary>
        /// Queries settings.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetChartQueryArgs> Queries
        {
            get => _queries ?? (_queries = new InputList<Inputs.MonitoringDashboardWidgetChartQueryArgs>());
            set => _queries = value;
        }

        [Input("seriesOverrides")]
        private InputList<Inputs.MonitoringDashboardWidgetChartSeriesOverrideArgs>? _seriesOverrides;

        /// <summary>
        /// Time series settings.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetChartSeriesOverrideArgs> SeriesOverrides
        {
            get => _seriesOverrides ?? (_seriesOverrides = new InputList<Inputs.MonitoringDashboardWidgetChartSeriesOverrideArgs>());
            set => _seriesOverrides = value;
        }

        /// <summary>
        /// Chart widget title.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("visualizationSettings")]
        private InputList<Inputs.MonitoringDashboardWidgetChartVisualizationSettingArgs>? _visualizationSettings;

        /// <summary>
        /// Visualization settings.
        /// </summary>
        public InputList<Inputs.MonitoringDashboardWidgetChartVisualizationSettingArgs> VisualizationSettings
        {
            get => _visualizationSettings ?? (_visualizationSettings = new InputList<Inputs.MonitoringDashboardWidgetChartVisualizationSettingArgs>());
            set => _visualizationSettings = value;
        }

        public MonitoringDashboardWidgetChartArgs()
        {
        }
        public static new MonitoringDashboardWidgetChartArgs Empty => new MonitoringDashboardWidgetChartArgs();
    }
}
