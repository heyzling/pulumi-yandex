// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Inputs
{

    public sealed class GetCdnResourceOptionsArgs : global::Pulumi.InvokeArgs
    {
        [Input("allowedHttpMethods", required: true)]
        private List<string>? _allowedHttpMethods;
        public List<string> AllowedHttpMethods
        {
            get => _allowedHttpMethods ?? (_allowedHttpMethods = new List<string>());
            set => _allowedHttpMethods = value;
        }

        [Input("browserCacheSettings", required: true)]
        public int BrowserCacheSettings { get; set; }

        [Input("cacheHttpHeaders", required: true)]
        private List<string>? _cacheHttpHeaders;
        public List<string> CacheHttpHeaders
        {
            get => _cacheHttpHeaders ?? (_cacheHttpHeaders = new List<string>());
            set => _cacheHttpHeaders = value;
        }

        [Input("cors", required: true)]
        private List<string>? _cors;
        public List<string> Cors
        {
            get => _cors ?? (_cors = new List<string>());
            set => _cors = value;
        }

        [Input("customHostHeader", required: true)]
        public string CustomHostHeader { get; set; } = null!;

        [Input("customServerName", required: true)]
        public string CustomServerName { get; set; } = null!;

        [Input("disableCache", required: true)]
        public bool DisableCache { get; set; }

        [Input("disableProxyForceRanges", required: true)]
        public bool DisableProxyForceRanges { get; set; }

        [Input("edgeCacheSettings", required: true)]
        public int EdgeCacheSettings { get; set; }

        [Input("enableIpUrlSigning", required: true)]
        public bool EnableIpUrlSigning { get; set; }

        [Input("fetchedCompressed", required: true)]
        public bool FetchedCompressed { get; set; }

        [Input("forwardHostHeader", required: true)]
        public bool ForwardHostHeader { get; set; }

        [Input("gzipOn", required: true)]
        public bool GzipOn { get; set; }

        [Input("ignoreCookie", required: true)]
        public bool IgnoreCookie { get; set; }

        [Input("ignoreQueryParams", required: true)]
        public bool IgnoreQueryParams { get; set; }

        [Input("ipAddressAcl", required: true)]
        public Inputs.GetCdnResourceOptionsIpAddressAclArgs IpAddressAcl { get; set; } = null!;

        [Input("proxyCacheMethodsSet", required: true)]
        public bool ProxyCacheMethodsSet { get; set; }

        [Input("queryParamsBlacklists", required: true)]
        private List<string>? _queryParamsBlacklists;
        public List<string> QueryParamsBlacklists
        {
            get => _queryParamsBlacklists ?? (_queryParamsBlacklists = new List<string>());
            set => _queryParamsBlacklists = value;
        }

        [Input("queryParamsWhitelists", required: true)]
        private List<string>? _queryParamsWhitelists;
        public List<string> QueryParamsWhitelists
        {
            get => _queryParamsWhitelists ?? (_queryParamsWhitelists = new List<string>());
            set => _queryParamsWhitelists = value;
        }

        [Input("redirectHttpToHttps", required: true)]
        public bool RedirectHttpToHttps { get; set; }

        [Input("redirectHttpsToHttp", required: true)]
        public bool RedirectHttpsToHttp { get; set; }

        [Input("secureKey", required: true)]
        public string SecureKey { get; set; } = null!;

        [Input("slice", required: true)]
        public bool Slice { get; set; }

        [Input("staticRequestHeaders", required: true)]
        private Dictionary<string, string>? _staticRequestHeaders;
        public Dictionary<string, string> StaticRequestHeaders
        {
            get => _staticRequestHeaders ?? (_staticRequestHeaders = new Dictionary<string, string>());
            set => _staticRequestHeaders = value;
        }

        [Input("staticResponseHeaders", required: true)]
        private Dictionary<string, string>? _staticResponseHeaders;
        public Dictionary<string, string> StaticResponseHeaders
        {
            get => _staticResponseHeaders ?? (_staticResponseHeaders = new Dictionary<string, string>());
            set => _staticResponseHeaders = value;
        }

        public GetCdnResourceOptionsArgs()
        {
        }
        public static new GetCdnResourceOptionsArgs Empty => new GetCdnResourceOptionsArgs();
    }
}
