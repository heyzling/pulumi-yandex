// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetSmartcaptchaCaptcha
    {
        public static Task<GetSmartcaptchaCaptchaResult> InvokeAsync(GetSmartcaptchaCaptchaArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetSmartcaptchaCaptchaResult>("yandex:index/getSmartcaptchaCaptcha:getSmartcaptchaCaptcha", args ?? new GetSmartcaptchaCaptchaArgs(), options.WithDefaults());

        public static Output<GetSmartcaptchaCaptchaResult> Invoke(GetSmartcaptchaCaptchaInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetSmartcaptchaCaptchaResult>("yandex:index/getSmartcaptchaCaptcha:getSmartcaptchaCaptcha", args ?? new GetSmartcaptchaCaptchaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSmartcaptchaCaptchaArgs : global::Pulumi.InvokeArgs
    {
        [Input("captchaId")]
        public string? CaptchaId { get; set; }

        [Input("cloudId")]
        public string? CloudId { get; set; }

        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        public GetSmartcaptchaCaptchaArgs()
        {
        }
        public static new GetSmartcaptchaCaptchaArgs Empty => new GetSmartcaptchaCaptchaArgs();
    }

    public sealed class GetSmartcaptchaCaptchaInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("captchaId")]
        public Input<string>? CaptchaId { get; set; }

        [Input("cloudId")]
        public Input<string>? CloudId { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        public GetSmartcaptchaCaptchaInvokeArgs()
        {
        }
        public static new GetSmartcaptchaCaptchaInvokeArgs Empty => new GetSmartcaptchaCaptchaInvokeArgs();
    }


    [OutputType]
    public sealed class GetSmartcaptchaCaptchaResult
    {
        public readonly ImmutableArray<string> AllowedSites;
        public readonly string? CaptchaId;
        public readonly string ChallengeType;
        public readonly string ClientKey;
        public readonly string CloudId;
        public readonly string Complexity;
        public readonly string CreatedAt;
        public readonly bool DeletionProtection;
        public readonly string FolderId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string Name;
        public readonly ImmutableArray<Outputs.GetSmartcaptchaCaptchaOverrideVariantResult> OverrideVariants;
        public readonly string PreCheckType;
        public readonly ImmutableArray<Outputs.GetSmartcaptchaCaptchaSecurityRuleResult> SecurityRules;
        public readonly string StyleJson;
        public readonly bool Suspend;
        public readonly bool TurnOffHostnameCheck;

        [OutputConstructor]
        private GetSmartcaptchaCaptchaResult(
            ImmutableArray<string> allowedSites,

            string? captchaId,

            string challengeType,

            string clientKey,

            string cloudId,

            string complexity,

            string createdAt,

            bool deletionProtection,

            string folderId,

            string id,

            string name,

            ImmutableArray<Outputs.GetSmartcaptchaCaptchaOverrideVariantResult> overrideVariants,

            string preCheckType,

            ImmutableArray<Outputs.GetSmartcaptchaCaptchaSecurityRuleResult> securityRules,

            string styleJson,

            bool suspend,

            bool turnOffHostnameCheck)
        {
            AllowedSites = allowedSites;
            CaptchaId = captchaId;
            ChallengeType = challengeType;
            ClientKey = clientKey;
            CloudId = cloudId;
            Complexity = complexity;
            CreatedAt = createdAt;
            DeletionProtection = deletionProtection;
            FolderId = folderId;
            Id = id;
            Name = name;
            OverrideVariants = overrideVariants;
            PreCheckType = preCheckType;
            SecurityRules = securityRules;
            StyleJson = styleJson;
            Suspend = suspend;
            TurnOffHostnameCheck = turnOffHostnameCheck;
        }
    }
}
