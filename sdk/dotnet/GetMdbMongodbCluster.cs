// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbMongodbCluster
    {
        public static Task<GetMdbMongodbClusterResult> InvokeAsync(GetMdbMongodbClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbMongodbClusterResult>("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", args ?? new GetMdbMongodbClusterArgs(), options.WithDefaults());

        public static Output<GetMdbMongodbClusterResult> Invoke(GetMdbMongodbClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbMongodbClusterResult>("yandex:index/getMdbMongodbCluster:getMdbMongodbCluster", args ?? new GetMdbMongodbClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbMongodbClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterConfig")]
        public Inputs.GetMdbMongodbClusterClusterConfigArgs? ClusterConfig { get; set; }

        [Input("clusterId")]
        public string? ClusterId { get; set; }

        [Input("createdAt")]
        public string? CreatedAt { get; set; }

        [Input("databases")]
        private List<Inputs.GetMdbMongodbClusterDatabaseArgs>? _databases;
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database")]
        public List<Inputs.GetMdbMongodbClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new List<Inputs.GetMdbMongodbClusterDatabaseArgs>());
            set => _databases = value;
        }

        [Input("deletionProtection")]
        public bool? DeletionProtection { get; set; }

        [Input("description")]
        public string? Description { get; set; }

        [Input("diskSizeAutoscalingMongocfg")]
        public Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfgArgs? DiskSizeAutoscalingMongocfg { get; set; }

        [Input("diskSizeAutoscalingMongod")]
        public Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongodArgs? DiskSizeAutoscalingMongod { get; set; }

        [Input("diskSizeAutoscalingMongoinfra")]
        public Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraArgs? DiskSizeAutoscalingMongoinfra { get; set; }

        [Input("diskSizeAutoscalingMongos")]
        public Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongosArgs? DiskSizeAutoscalingMongos { get; set; }

        [Input("environment")]
        public string? Environment { get; set; }

        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("health")]
        public string? Health { get; set; }

        [Input("hosts")]
        private List<Inputs.GetMdbMongodbClusterHostArgs>? _hosts;
        public List<Inputs.GetMdbMongodbClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new List<Inputs.GetMdbMongodbClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private Dictionary<string, string>? _labels;
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Inputs.GetMdbMongodbClusterMaintenanceWindowArgs? MaintenanceWindow { get; set; }

        [Input("name")]
        public string? Name { get; set; }

        [Input("networkId")]
        public string? NetworkId { get; set; }

        [Input("resources")]
        public Inputs.GetMdbMongodbClusterResourcesArgs? Resources { get; set; }

        [Input("resourcesMongocfg")]
        public Inputs.GetMdbMongodbClusterResourcesMongocfgArgs? ResourcesMongocfg { get; set; }

        [Input("resourcesMongod")]
        public Inputs.GetMdbMongodbClusterResourcesMongodArgs? ResourcesMongod { get; set; }

        [Input("resourcesMongoinfra")]
        public Inputs.GetMdbMongodbClusterResourcesMongoinfraArgs? ResourcesMongoinfra { get; set; }

        [Input("resourcesMongos")]
        public Inputs.GetMdbMongodbClusterResourcesMongosArgs? ResourcesMongos { get; set; }

        [Input("restore")]
        public Inputs.GetMdbMongodbClusterRestoreArgs? Restore { get; set; }

        [Input("securityGroupIds")]
        private List<string>? _securityGroupIds;
        public List<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new List<string>());
            set => _securityGroupIds = value;
        }

        [Input("sharded")]
        public bool? Sharded { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("users")]
        private List<Inputs.GetMdbMongodbClusterUserArgs>? _users;
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user")]
        public List<Inputs.GetMdbMongodbClusterUserArgs> Users
        {
            get => _users ?? (_users = new List<Inputs.GetMdbMongodbClusterUserArgs>());
            set => _users = value;
        }

        public GetMdbMongodbClusterArgs()
        {
        }
        public static new GetMdbMongodbClusterArgs Empty => new GetMdbMongodbClusterArgs();
    }

    public sealed class GetMdbMongodbClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("clusterConfig")]
        public Input<Inputs.GetMdbMongodbClusterClusterConfigInputArgs>? ClusterConfig { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.GetMdbMongodbClusterDatabaseInputArgs>? _databases;
        [Obsolete(@"to manage databases, please switch to using a separate resource type yandex_mdb_mongodb_database")]
        public InputList<Inputs.GetMdbMongodbClusterDatabaseInputArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.GetMdbMongodbClusterDatabaseInputArgs>());
            set => _databases = value;
        }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("diskSizeAutoscalingMongocfg")]
        public Input<Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfgInputArgs>? DiskSizeAutoscalingMongocfg { get; set; }

        [Input("diskSizeAutoscalingMongod")]
        public Input<Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongodInputArgs>? DiskSizeAutoscalingMongod { get; set; }

        [Input("diskSizeAutoscalingMongoinfra")]
        public Input<Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraInputArgs>? DiskSizeAutoscalingMongoinfra { get; set; }

        [Input("diskSizeAutoscalingMongos")]
        public Input<Inputs.GetMdbMongodbClusterDiskSizeAutoscalingMongosInputArgs>? DiskSizeAutoscalingMongos { get; set; }

        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.GetMdbMongodbClusterHostInputArgs>? _hosts;
        public InputList<Inputs.GetMdbMongodbClusterHostInputArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.GetMdbMongodbClusterHostInputArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Input<Inputs.GetMdbMongodbClusterMaintenanceWindowInputArgs>? MaintenanceWindow { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("resources")]
        public Input<Inputs.GetMdbMongodbClusterResourcesInputArgs>? Resources { get; set; }

        [Input("resourcesMongocfg")]
        public Input<Inputs.GetMdbMongodbClusterResourcesMongocfgInputArgs>? ResourcesMongocfg { get; set; }

        [Input("resourcesMongod")]
        public Input<Inputs.GetMdbMongodbClusterResourcesMongodInputArgs>? ResourcesMongod { get; set; }

        [Input("resourcesMongoinfra")]
        public Input<Inputs.GetMdbMongodbClusterResourcesMongoinfraInputArgs>? ResourcesMongoinfra { get; set; }

        [Input("resourcesMongos")]
        public Input<Inputs.GetMdbMongodbClusterResourcesMongosInputArgs>? ResourcesMongos { get; set; }

        [Input("restore")]
        public Input<Inputs.GetMdbMongodbClusterRestoreInputArgs>? Restore { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("sharded")]
        public Input<bool>? Sharded { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.GetMdbMongodbClusterUserInputArgs>? _users;
        [Obsolete(@"to manage users, please switch to using a separate resource type yandex_mdb_mongodb_user")]
        public InputList<Inputs.GetMdbMongodbClusterUserInputArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.GetMdbMongodbClusterUserInputArgs>());
            set => _users = value;
        }

        public GetMdbMongodbClusterInvokeArgs()
        {
        }
        public static new GetMdbMongodbClusterInvokeArgs Empty => new GetMdbMongodbClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbMongodbClusterResult
    {
        public readonly Outputs.GetMdbMongodbClusterClusterConfigResult? ClusterConfig;
        public readonly string ClusterId;
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.GetMdbMongodbClusterDatabaseResult> Databases;
        public readonly bool DeletionProtection;
        public readonly string? Description;
        public readonly Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfgResult DiskSizeAutoscalingMongocfg;
        public readonly Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongodResult DiskSizeAutoscalingMongod;
        public readonly Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraResult DiskSizeAutoscalingMongoinfra;
        public readonly Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongosResult DiskSizeAutoscalingMongos;
        public readonly string? Environment;
        public readonly string FolderId;
        public readonly string Health;
        public readonly ImmutableArray<Outputs.GetMdbMongodbClusterHostResult> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly Outputs.GetMdbMongodbClusterMaintenanceWindowResult MaintenanceWindow;
        public readonly string? Name;
        public readonly string? NetworkId;
        public readonly Outputs.GetMdbMongodbClusterResourcesResult? Resources;
        public readonly Outputs.GetMdbMongodbClusterResourcesMongocfgResult? ResourcesMongocfg;
        public readonly Outputs.GetMdbMongodbClusterResourcesMongodResult? ResourcesMongod;
        public readonly Outputs.GetMdbMongodbClusterResourcesMongoinfraResult? ResourcesMongoinfra;
        public readonly Outputs.GetMdbMongodbClusterResourcesMongosResult? ResourcesMongos;
        public readonly Outputs.GetMdbMongodbClusterRestoreResult? Restore;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly bool Sharded;
        public readonly string Status;
        public readonly ImmutableArray<Outputs.GetMdbMongodbClusterUserResult> Users;

        [OutputConstructor]
        private GetMdbMongodbClusterResult(
            Outputs.GetMdbMongodbClusterClusterConfigResult? clusterConfig,

            string clusterId,

            string createdAt,

            ImmutableArray<Outputs.GetMdbMongodbClusterDatabaseResult> databases,

            bool deletionProtection,

            string? description,

            Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongocfgResult diskSizeAutoscalingMongocfg,

            Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongodResult diskSizeAutoscalingMongod,

            Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongoinfraResult diskSizeAutoscalingMongoinfra,

            Outputs.GetMdbMongodbClusterDiskSizeAutoscalingMongosResult diskSizeAutoscalingMongos,

            string? environment,

            string folderId,

            string health,

            ImmutableArray<Outputs.GetMdbMongodbClusterHostResult> hosts,

            string id,

            ImmutableDictionary<string, string> labels,

            Outputs.GetMdbMongodbClusterMaintenanceWindowResult maintenanceWindow,

            string? name,

            string? networkId,

            Outputs.GetMdbMongodbClusterResourcesResult? resources,

            Outputs.GetMdbMongodbClusterResourcesMongocfgResult? resourcesMongocfg,

            Outputs.GetMdbMongodbClusterResourcesMongodResult? resourcesMongod,

            Outputs.GetMdbMongodbClusterResourcesMongoinfraResult? resourcesMongoinfra,

            Outputs.GetMdbMongodbClusterResourcesMongosResult? resourcesMongos,

            Outputs.GetMdbMongodbClusterRestoreResult? restore,

            ImmutableArray<string> securityGroupIds,

            bool sharded,

            string status,

            ImmutableArray<Outputs.GetMdbMongodbClusterUserResult> users)
        {
            ClusterConfig = clusterConfig;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            Databases = databases;
            DeletionProtection = deletionProtection;
            Description = description;
            DiskSizeAutoscalingMongocfg = diskSizeAutoscalingMongocfg;
            DiskSizeAutoscalingMongod = diskSizeAutoscalingMongod;
            DiskSizeAutoscalingMongoinfra = diskSizeAutoscalingMongoinfra;
            DiskSizeAutoscalingMongos = diskSizeAutoscalingMongos;
            Environment = environment;
            FolderId = folderId;
            Health = health;
            Hosts = hosts;
            Id = id;
            Labels = labels;
            MaintenanceWindow = maintenanceWindow;
            Name = name;
            NetworkId = networkId;
            Resources = resources;
            ResourcesMongocfg = resourcesMongocfg;
            ResourcesMongod = resourcesMongod;
            ResourcesMongoinfra = resourcesMongoinfra;
            ResourcesMongos = resourcesMongos;
            Restore = restore;
            SecurityGroupIds = securityGroupIds;
            Sharded = sharded;
            Status = status;
            Users = users;
        }
    }
}
