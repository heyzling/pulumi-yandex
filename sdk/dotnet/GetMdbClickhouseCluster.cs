// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetMdbClickhouseCluster
    {
        public static Task<GetMdbClickhouseClusterResult> InvokeAsync(GetMdbClickhouseClusterArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetMdbClickhouseClusterResult>("yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster", args ?? new GetMdbClickhouseClusterArgs(), options.WithDefaults());

        public static Output<GetMdbClickhouseClusterResult> Invoke(GetMdbClickhouseClusterInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetMdbClickhouseClusterResult>("yandex:index/getMdbClickhouseCluster:getMdbClickhouseCluster", args ?? new GetMdbClickhouseClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetMdbClickhouseClusterArgs : global::Pulumi.InvokeArgs
    {
        [Input("access")]
        public Inputs.GetMdbClickhouseClusterAccessArgs? Access { get; set; }

        [Input("adminPassword")]
        private string? _adminPassword;
        public string? AdminPassword
        {
            get => _adminPassword;
            set => _adminPassword = value;
        }

        [Input("backupWindowStart")]
        public Inputs.GetMdbClickhouseClusterBackupWindowStartArgs? BackupWindowStart { get; set; }

        [Input("clickhouse")]
        public Inputs.GetMdbClickhouseClusterClickhouseArgs? Clickhouse { get; set; }

        [Input("cloudStorage")]
        public Inputs.GetMdbClickhouseClusterCloudStorageArgs? CloudStorage { get; set; }

        [Input("clusterId")]
        public string? ClusterId { get; set; }

        [Input("copySchemaOnNewHosts")]
        public bool? CopySchemaOnNewHosts { get; set; }

        [Input("createdAt")]
        public string? CreatedAt { get; set; }

        [Input("databases")]
        private List<Inputs.GetMdbClickhouseClusterDatabaseArgs>? _databases;
        public List<Inputs.GetMdbClickhouseClusterDatabaseArgs> Databases
        {
            get => _databases ?? (_databases = new List<Inputs.GetMdbClickhouseClusterDatabaseArgs>());
            set => _databases = value;
        }

        [Input("deletionProtection")]
        public bool? DeletionProtection { get; set; }

        [Input("description")]
        public string? Description { get; set; }

        [Input("embeddedKeeper")]
        public bool? EmbeddedKeeper { get; set; }

        [Input("environment")]
        public string? Environment { get; set; }

        [Input("folderId")]
        public string? FolderId { get; set; }

        [Input("formatSchemas")]
        private List<Inputs.GetMdbClickhouseClusterFormatSchemaArgs>? _formatSchemas;
        public List<Inputs.GetMdbClickhouseClusterFormatSchemaArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new List<Inputs.GetMdbClickhouseClusterFormatSchemaArgs>());
            set => _formatSchemas = value;
        }

        [Input("health")]
        public string? Health { get; set; }

        [Input("hosts")]
        private List<Inputs.GetMdbClickhouseClusterHostArgs>? _hosts;
        public List<Inputs.GetMdbClickhouseClusterHostArgs> Hosts
        {
            get => _hosts ?? (_hosts = new List<Inputs.GetMdbClickhouseClusterHostArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private Dictionary<string, string>? _labels;
        public Dictionary<string, string> Labels
        {
            get => _labels ?? (_labels = new Dictionary<string, string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Inputs.GetMdbClickhouseClusterMaintenanceWindowArgs? MaintenanceWindow { get; set; }

        [Input("mlModels")]
        private List<Inputs.GetMdbClickhouseClusterMlModelArgs>? _mlModels;
        public List<Inputs.GetMdbClickhouseClusterMlModelArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new List<Inputs.GetMdbClickhouseClusterMlModelArgs>());
            set => _mlModels = value;
        }

        [Input("name")]
        public string? Name { get; set; }

        [Input("networkId")]
        public string? NetworkId { get; set; }

        [Input("securityGroupIds")]
        private List<string>? _securityGroupIds;
        public List<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new List<string>());
            set => _securityGroupIds = value;
        }

        [Input("serviceAccountId")]
        public string? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private List<Inputs.GetMdbClickhouseClusterShardGroupArgs>? _shardGroups;
        public List<Inputs.GetMdbClickhouseClusterShardGroupArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new List<Inputs.GetMdbClickhouseClusterShardGroupArgs>());
            set => _shardGroups = value;
        }

        [Input("shards")]
        private List<Inputs.GetMdbClickhouseClusterShardArgs>? _shards;
        public List<Inputs.GetMdbClickhouseClusterShardArgs> Shards
        {
            get => _shards ?? (_shards = new List<Inputs.GetMdbClickhouseClusterShardArgs>());
            set => _shards = value;
        }

        [Input("sqlDatabaseManagement")]
        public bool? SqlDatabaseManagement { get; set; }

        [Input("sqlUserManagement")]
        public bool? SqlUserManagement { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        [Input("users")]
        private List<Inputs.GetMdbClickhouseClusterUserArgs>? _users;
        public List<Inputs.GetMdbClickhouseClusterUserArgs> Users
        {
            get => _users ?? (_users = new List<Inputs.GetMdbClickhouseClusterUserArgs>());
            set => _users = value;
        }

        [Input("version")]
        public string? Version { get; set; }

        [Input("zookeeper")]
        public Inputs.GetMdbClickhouseClusterZookeeperArgs? Zookeeper { get; set; }

        public GetMdbClickhouseClusterArgs()
        {
        }
        public static new GetMdbClickhouseClusterArgs Empty => new GetMdbClickhouseClusterArgs();
    }

    public sealed class GetMdbClickhouseClusterInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("access")]
        public Input<Inputs.GetMdbClickhouseClusterAccessInputArgs>? Access { get; set; }

        [Input("adminPassword")]
        private Input<string>? _adminPassword;
        public Input<string>? AdminPassword
        {
            get => _adminPassword;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _adminPassword = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("backupWindowStart")]
        public Input<Inputs.GetMdbClickhouseClusterBackupWindowStartInputArgs>? BackupWindowStart { get; set; }

        [Input("clickhouse")]
        public Input<Inputs.GetMdbClickhouseClusterClickhouseInputArgs>? Clickhouse { get; set; }

        [Input("cloudStorage")]
        public Input<Inputs.GetMdbClickhouseClusterCloudStorageInputArgs>? CloudStorage { get; set; }

        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        [Input("copySchemaOnNewHosts")]
        public Input<bool>? CopySchemaOnNewHosts { get; set; }

        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        [Input("databases")]
        private InputList<Inputs.GetMdbClickhouseClusterDatabaseInputArgs>? _databases;
        public InputList<Inputs.GetMdbClickhouseClusterDatabaseInputArgs> Databases
        {
            get => _databases ?? (_databases = new InputList<Inputs.GetMdbClickhouseClusterDatabaseInputArgs>());
            set => _databases = value;
        }

        [Input("deletionProtection")]
        public Input<bool>? DeletionProtection { get; set; }

        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("embeddedKeeper")]
        public Input<bool>? EmbeddedKeeper { get; set; }

        [Input("environment")]
        public Input<string>? Environment { get; set; }

        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        [Input("formatSchemas")]
        private InputList<Inputs.GetMdbClickhouseClusterFormatSchemaInputArgs>? _formatSchemas;
        public InputList<Inputs.GetMdbClickhouseClusterFormatSchemaInputArgs> FormatSchemas
        {
            get => _formatSchemas ?? (_formatSchemas = new InputList<Inputs.GetMdbClickhouseClusterFormatSchemaInputArgs>());
            set => _formatSchemas = value;
        }

        [Input("health")]
        public Input<string>? Health { get; set; }

        [Input("hosts")]
        private InputList<Inputs.GetMdbClickhouseClusterHostInputArgs>? _hosts;
        public InputList<Inputs.GetMdbClickhouseClusterHostInputArgs> Hosts
        {
            get => _hosts ?? (_hosts = new InputList<Inputs.GetMdbClickhouseClusterHostInputArgs>());
            set => _hosts = value;
        }

        [Input("labels")]
        private InputMap<string>? _labels;
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        [Input("maintenanceWindow")]
        public Input<Inputs.GetMdbClickhouseClusterMaintenanceWindowInputArgs>? MaintenanceWindow { get; set; }

        [Input("mlModels")]
        private InputList<Inputs.GetMdbClickhouseClusterMlModelInputArgs>? _mlModels;
        public InputList<Inputs.GetMdbClickhouseClusterMlModelInputArgs> MlModels
        {
            get => _mlModels ?? (_mlModels = new InputList<Inputs.GetMdbClickhouseClusterMlModelInputArgs>());
            set => _mlModels = value;
        }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("networkId")]
        public Input<string>? NetworkId { get; set; }

        [Input("securityGroupIds")]
        private InputList<string>? _securityGroupIds;
        public InputList<string> SecurityGroupIds
        {
            get => _securityGroupIds ?? (_securityGroupIds = new InputList<string>());
            set => _securityGroupIds = value;
        }

        [Input("serviceAccountId")]
        public Input<string>? ServiceAccountId { get; set; }

        [Input("shardGroups")]
        private InputList<Inputs.GetMdbClickhouseClusterShardGroupInputArgs>? _shardGroups;
        public InputList<Inputs.GetMdbClickhouseClusterShardGroupInputArgs> ShardGroups
        {
            get => _shardGroups ?? (_shardGroups = new InputList<Inputs.GetMdbClickhouseClusterShardGroupInputArgs>());
            set => _shardGroups = value;
        }

        [Input("shards")]
        private InputList<Inputs.GetMdbClickhouseClusterShardInputArgs>? _shards;
        public InputList<Inputs.GetMdbClickhouseClusterShardInputArgs> Shards
        {
            get => _shards ?? (_shards = new InputList<Inputs.GetMdbClickhouseClusterShardInputArgs>());
            set => _shards = value;
        }

        [Input("sqlDatabaseManagement")]
        public Input<bool>? SqlDatabaseManagement { get; set; }

        [Input("sqlUserManagement")]
        public Input<bool>? SqlUserManagement { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("users")]
        private InputList<Inputs.GetMdbClickhouseClusterUserInputArgs>? _users;
        public InputList<Inputs.GetMdbClickhouseClusterUserInputArgs> Users
        {
            get => _users ?? (_users = new InputList<Inputs.GetMdbClickhouseClusterUserInputArgs>());
            set => _users = value;
        }

        [Input("version")]
        public Input<string>? Version { get; set; }

        [Input("zookeeper")]
        public Input<Inputs.GetMdbClickhouseClusterZookeeperInputArgs>? Zookeeper { get; set; }

        public GetMdbClickhouseClusterInvokeArgs()
        {
        }
        public static new GetMdbClickhouseClusterInvokeArgs Empty => new GetMdbClickhouseClusterInvokeArgs();
    }


    [OutputType]
    public sealed class GetMdbClickhouseClusterResult
    {
        public readonly Outputs.GetMdbClickhouseClusterAccessResult Access;
        public readonly string? AdminPassword;
        public readonly Outputs.GetMdbClickhouseClusterBackupWindowStartResult BackupWindowStart;
        public readonly Outputs.GetMdbClickhouseClusterClickhouseResult Clickhouse;
        public readonly Outputs.GetMdbClickhouseClusterCloudStorageResult CloudStorage;
        public readonly string ClusterId;
        public readonly bool? CopySchemaOnNewHosts;
        public readonly string CreatedAt;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterDatabaseResult> Databases;
        public readonly bool DeletionProtection;
        public readonly string? Description;
        public readonly bool EmbeddedKeeper;
        public readonly string? Environment;
        public readonly string FolderId;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterFormatSchemaResult> FormatSchemas;
        public readonly string Health;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterHostResult> Hosts;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableDictionary<string, string> Labels;
        public readonly Outputs.GetMdbClickhouseClusterMaintenanceWindowResult MaintenanceWindow;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterMlModelResult> MlModels;
        public readonly string? Name;
        public readonly string? NetworkId;
        public readonly ImmutableArray<string> SecurityGroupIds;
        public readonly string ServiceAccountId;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterShardGroupResult> ShardGroups;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterShardResult> Shards;
        public readonly bool SqlDatabaseManagement;
        public readonly bool SqlUserManagement;
        public readonly string Status;
        public readonly ImmutableArray<Outputs.GetMdbClickhouseClusterUserResult> Users;
        public readonly string Version;
        public readonly Outputs.GetMdbClickhouseClusterZookeeperResult Zookeeper;

        [OutputConstructor]
        private GetMdbClickhouseClusterResult(
            Outputs.GetMdbClickhouseClusterAccessResult access,

            string? adminPassword,

            Outputs.GetMdbClickhouseClusterBackupWindowStartResult backupWindowStart,

            Outputs.GetMdbClickhouseClusterClickhouseResult clickhouse,

            Outputs.GetMdbClickhouseClusterCloudStorageResult cloudStorage,

            string clusterId,

            bool? copySchemaOnNewHosts,

            string createdAt,

            ImmutableArray<Outputs.GetMdbClickhouseClusterDatabaseResult> databases,

            bool deletionProtection,

            string? description,

            bool embeddedKeeper,

            string? environment,

            string folderId,

            ImmutableArray<Outputs.GetMdbClickhouseClusterFormatSchemaResult> formatSchemas,

            string health,

            ImmutableArray<Outputs.GetMdbClickhouseClusterHostResult> hosts,

            string id,

            ImmutableDictionary<string, string> labels,

            Outputs.GetMdbClickhouseClusterMaintenanceWindowResult maintenanceWindow,

            ImmutableArray<Outputs.GetMdbClickhouseClusterMlModelResult> mlModels,

            string? name,

            string? networkId,

            ImmutableArray<string> securityGroupIds,

            string serviceAccountId,

            ImmutableArray<Outputs.GetMdbClickhouseClusterShardGroupResult> shardGroups,

            ImmutableArray<Outputs.GetMdbClickhouseClusterShardResult> shards,

            bool sqlDatabaseManagement,

            bool sqlUserManagement,

            string status,

            ImmutableArray<Outputs.GetMdbClickhouseClusterUserResult> users,

            string version,

            Outputs.GetMdbClickhouseClusterZookeeperResult zookeeper)
        {
            Access = access;
            AdminPassword = adminPassword;
            BackupWindowStart = backupWindowStart;
            Clickhouse = clickhouse;
            CloudStorage = cloudStorage;
            ClusterId = clusterId;
            CopySchemaOnNewHosts = copySchemaOnNewHosts;
            CreatedAt = createdAt;
            Databases = databases;
            DeletionProtection = deletionProtection;
            Description = description;
            EmbeddedKeeper = embeddedKeeper;
            Environment = environment;
            FolderId = folderId;
            FormatSchemas = formatSchemas;
            Health = health;
            Hosts = hosts;
            Id = id;
            Labels = labels;
            MaintenanceWindow = maintenanceWindow;
            MlModels = mlModels;
            Name = name;
            NetworkId = networkId;
            SecurityGroupIds = securityGroupIds;
            ServiceAccountId = serviceAccountId;
            ShardGroups = shardGroups;
            Shards = shards;
            SqlDatabaseManagement = sqlDatabaseManagement;
            SqlUserManagement = sqlUserManagement;
            Status = status;
            Users = users;
            Version = version;
            Zookeeper = zookeeper;
        }
    }
}
