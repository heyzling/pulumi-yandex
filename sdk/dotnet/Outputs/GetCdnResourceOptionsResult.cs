// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class GetCdnResourceOptionsResult
    {
        public readonly ImmutableArray<string> AllowedHttpMethods;
        public readonly int BrowserCacheSettings;
        public readonly ImmutableArray<string> CacheHttpHeaders;
        public readonly ImmutableArray<string> Cors;
        public readonly string CustomHostHeader;
        public readonly string CustomServerName;
        public readonly bool DisableCache;
        public readonly bool DisableProxyForceRanges;
        public readonly int EdgeCacheSettings;
        public readonly bool EnableIpUrlSigning;
        public readonly bool FetchedCompressed;
        public readonly bool ForwardHostHeader;
        public readonly bool GzipOn;
        public readonly bool IgnoreCookie;
        public readonly bool IgnoreQueryParams;
        public readonly Outputs.GetCdnResourceOptionsIpAddressAclResult IpAddressAcl;
        public readonly bool ProxyCacheMethodsSet;
        public readonly ImmutableArray<string> QueryParamsBlacklists;
        public readonly ImmutableArray<string> QueryParamsWhitelists;
        public readonly bool RedirectHttpToHttps;
        public readonly bool RedirectHttpsToHttp;
        public readonly string SecureKey;
        public readonly bool Slice;
        public readonly ImmutableDictionary<string, string> StaticRequestHeaders;
        public readonly ImmutableDictionary<string, string> StaticResponseHeaders;

        [OutputConstructor]
        private GetCdnResourceOptionsResult(
            ImmutableArray<string> allowedHttpMethods,

            int browserCacheSettings,

            ImmutableArray<string> cacheHttpHeaders,

            ImmutableArray<string> cors,

            string customHostHeader,

            string customServerName,

            bool disableCache,

            bool disableProxyForceRanges,

            int edgeCacheSettings,

            bool enableIpUrlSigning,

            bool fetchedCompressed,

            bool forwardHostHeader,

            bool gzipOn,

            bool ignoreCookie,

            bool ignoreQueryParams,

            Outputs.GetCdnResourceOptionsIpAddressAclResult ipAddressAcl,

            bool proxyCacheMethodsSet,

            ImmutableArray<string> queryParamsBlacklists,

            ImmutableArray<string> queryParamsWhitelists,

            bool redirectHttpToHttps,

            bool redirectHttpsToHttp,

            string secureKey,

            bool slice,

            ImmutableDictionary<string, string> staticRequestHeaders,

            ImmutableDictionary<string, string> staticResponseHeaders)
        {
            AllowedHttpMethods = allowedHttpMethods;
            BrowserCacheSettings = browserCacheSettings;
            CacheHttpHeaders = cacheHttpHeaders;
            Cors = cors;
            CustomHostHeader = customHostHeader;
            CustomServerName = customServerName;
            DisableCache = disableCache;
            DisableProxyForceRanges = disableProxyForceRanges;
            EdgeCacheSettings = edgeCacheSettings;
            EnableIpUrlSigning = enableIpUrlSigning;
            FetchedCompressed = fetchedCompressed;
            ForwardHostHeader = forwardHostHeader;
            GzipOn = gzipOn;
            IgnoreCookie = ignoreCookie;
            IgnoreQueryParams = ignoreQueryParams;
            IpAddressAcl = ipAddressAcl;
            ProxyCacheMethodsSet = proxyCacheMethodsSet;
            QueryParamsBlacklists = queryParamsBlacklists;
            QueryParamsWhitelists = queryParamsWhitelists;
            RedirectHttpToHttps = redirectHttpToHttps;
            RedirectHttpsToHttp = redirectHttpsToHttp;
            SecureKey = secureKey;
            Slice = slice;
            StaticRequestHeaders = staticRequestHeaders;
            StaticResponseHeaders = staticResponseHeaders;
        }
    }
}
