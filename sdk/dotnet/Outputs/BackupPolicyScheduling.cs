// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class BackupPolicyScheduling
    {
        /// <summary>
        /// A list of schedules with backup sets that compose the whole scheme.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackupPolicySchedulingBackupSet> BackupSets;
        /// <summary>
        /// — enables or disables scheduling.
        /// </summary>
        public readonly bool? Enabled;
        /// <summary>
        /// — Perform backup by interval, since last backup of the host. Maximum value is: 9999 days.
        /// See `interval_type` for available values. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        /// </summary>
        public readonly int? ExecuteByInterval;
        /// <summary>
        /// — Perform backup periodically at specific time. Exactly on of options should be set: `execute_by_interval` or `execute_by_time`.
        /// </summary>
        public readonly ImmutableArray<Outputs.BackupPolicySchedulingExecuteByTime> ExecuteByTimes;
        /// <summary>
        /// — Maximum number of backup processes allowed to run in parallel. 0 for unlimited.
        /// </summary>
        public readonly int? MaxParallelBackups;
        /// <summary>
        /// — Configuration of the random delay between the execution of parallel tasks.
        /// See `interval_type` for available values.
        /// </summary>
        public readonly string? RandomMaxDelay;
        /// <summary>
        /// — Scheme of the backups.
        /// Available values are: `"ALWAYS_INCREMENTAL"`, `"ALWAYS_FULL"`, `"WEEKLY_FULL_DAILY_INCREMENTAL"`, `'WEEKLY_INCREMENTAL"`.
        /// </summary>
        public readonly string? Scheme;
        /// <summary>
        /// — A day of week to start weekly backups.
        /// See `day_type` for available values.
        /// </summary>
        public readonly string? WeeklyBackupDay;

        [OutputConstructor]
        private BackupPolicyScheduling(
            ImmutableArray<Outputs.BackupPolicySchedulingBackupSet> backupSets,

            bool? enabled,

            int? executeByInterval,

            ImmutableArray<Outputs.BackupPolicySchedulingExecuteByTime> executeByTimes,

            int? maxParallelBackups,

            string? randomMaxDelay,

            string? scheme,

            string? weeklyBackupDay)
        {
            BackupSets = backupSets;
            Enabled = enabled;
            ExecuteByInterval = executeByInterval;
            ExecuteByTimes = executeByTimes;
            MaxParallelBackups = maxParallelBackups;
            RandomMaxDelay = randomMaxDelay;
            Scheme = scheme;
            WeeklyBackupDay = weeklyBackupDay;
        }
    }
}
