// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex.Outputs
{

    [OutputType]
    public sealed class MdbClickhouseClusterClickhouseConfigKafka
    {
        /// <summary>
        /// Action to take when there is no initial offset in offset store or the desired offset is out of range: 'smallest','earliest' - automatically reset the offset to the smallest offset, 'largest','latest' - automatically reset the offset to the largest offset, 'error' - trigger an error (ERR__AUTO_OFFSET_RESET) which is retrieved by consuming messages and checking 'message-&gt;err'.
        /// </summary>
        public readonly string? AutoOffsetReset;
        /// <summary>
        /// A comma-separated list of debug contexts to enable.
        /// </summary>
        public readonly string? Debug;
        /// <summary>
        /// enable verification of SSL certificates.
        /// </summary>
        public readonly bool? EnableSslCertificateVerification;
        /// <summary>
        /// Maximum allowed time between calls to consume messages (e.g., rd_kafka_consumer_poll()) for high-level consumers. If this interval is exceeded the consumer is considered failed and the group will rebalance in order to reassign the partitions to another consumer group member.
        /// </summary>
        public readonly int? MaxPollIntervalMs;
        /// <summary>
        /// SASL mechanism used in kafka authentication.
        /// </summary>
        public readonly string? SaslMechanism;
        /// <summary>
        /// User password on kafka server.
        /// </summary>
        public readonly string? SaslPassword;
        /// <summary>
        /// Username on kafka server.
        /// </summary>
        public readonly string? SaslUsername;
        /// <summary>
        /// Security protocol used to connect to kafka server.
        /// </summary>
        public readonly string? SecurityProtocol;
        /// <summary>
        /// Client group session and failure detection timeout. The consumer sends periodic heartbeats (heartbeat.interval.ms) to indicate its liveness to the broker. If no hearts are received by the broker for a group member within the session timeout, the broker will remove the consumer from the group and trigger a rebalance.
        /// </summary>
        public readonly int? SessionTimeoutMs;

        [OutputConstructor]
        private MdbClickhouseClusterClickhouseConfigKafka(
            string? autoOffsetReset,

            string? debug,

            bool? enableSslCertificateVerification,

            int? maxPollIntervalMs,

            string? saslMechanism,

            string? saslPassword,

            string? saslUsername,

            string? securityProtocol,

            int? sessionTimeoutMs)
        {
            AutoOffsetReset = autoOffsetReset;
            Debug = debug;
            EnableSslCertificateVerification = enableSslCertificateVerification;
            MaxPollIntervalMs = maxPollIntervalMs;
            SaslMechanism = saslMechanism;
            SaslPassword = saslPassword;
            SaslUsername = saslUsername;
            SecurityProtocol = securityProtocol;
            SessionTimeoutMs = sessionTimeoutMs;
        }
    }
}
