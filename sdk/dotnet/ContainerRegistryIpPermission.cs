// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// Creates a new Container Registry IP Permission. For more information, see
    /// [the official documentation](https://cloud.yandex.ru/docs/container-registry/operations/registry/registry-access)
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var myRegistry = new Yandex.ContainerRegistry("myRegistry");
    /// 
    ///     var myIpPermission = new Yandex.ContainerRegistryIpPermission("myIpPermission", new()
    ///     {
    ///         RegistryId = myRegistry.Id,
    ///         Pushes = new[]
    ///         {
    ///             "10.1.0.0/16",
    ///             "10.2.0.0/16",
    ///             "10.3.0.0/16",
    ///         },
    ///         Pulls = new[]
    ///         {
    ///             "10.1.0.0/16",
    ///             "10.5.0/16",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// An ip premission can be imported using the `id` of the Container Registry it is applied to, e.g.
    /// 
    /// bash
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission my_ip_permission registry_id
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission")]
    public partial class ContainerRegistryIpPermission : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List of configured CIDRs, from which pull is allowed.
        /// </summary>
        [Output("pulls")]
        public Output<ImmutableArray<string>> Pulls { get; private set; } = null!;

        /// <summary>
        /// List of configured CIDRs, from which push is allowed.
        /// </summary>
        [Output("pushes")]
        public Output<ImmutableArray<string>> Pushes { get; private set; } = null!;

        /// <summary>
        /// The ID of the registry that ip restrictions applied to.
        /// </summary>
        [Output("registryId")]
        public Output<string> RegistryId { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerRegistryIpPermission resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerRegistryIpPermission(string name, ContainerRegistryIpPermissionArgs args, CustomResourceOptions? options = null)
            : base("yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission", name, args ?? new ContainerRegistryIpPermissionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerRegistryIpPermission(string name, Input<string> id, ContainerRegistryIpPermissionState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/containerRegistryIpPermission:ContainerRegistryIpPermission", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/heyzling/pulumi-yandex/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerRegistryIpPermission resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerRegistryIpPermission Get(string name, Input<string> id, ContainerRegistryIpPermissionState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerRegistryIpPermission(name, id, state, options);
        }
    }

    public sealed class ContainerRegistryIpPermissionArgs : global::Pulumi.ResourceArgs
    {
        [Input("pulls")]
        private InputList<string>? _pulls;

        /// <summary>
        /// List of configured CIDRs, from which pull is allowed.
        /// </summary>
        public InputList<string> Pulls
        {
            get => _pulls ?? (_pulls = new InputList<string>());
            set => _pulls = value;
        }

        [Input("pushes")]
        private InputList<string>? _pushes;

        /// <summary>
        /// List of configured CIDRs, from which push is allowed.
        /// </summary>
        public InputList<string> Pushes
        {
            get => _pushes ?? (_pushes = new InputList<string>());
            set => _pushes = value;
        }

        /// <summary>
        /// The ID of the registry that ip restrictions applied to.
        /// </summary>
        [Input("registryId", required: true)]
        public Input<string> RegistryId { get; set; } = null!;

        public ContainerRegistryIpPermissionArgs()
        {
        }
        public static new ContainerRegistryIpPermissionArgs Empty => new ContainerRegistryIpPermissionArgs();
    }

    public sealed class ContainerRegistryIpPermissionState : global::Pulumi.ResourceArgs
    {
        [Input("pulls")]
        private InputList<string>? _pulls;

        /// <summary>
        /// List of configured CIDRs, from which pull is allowed.
        /// </summary>
        public InputList<string> Pulls
        {
            get => _pulls ?? (_pulls = new InputList<string>());
            set => _pulls = value;
        }

        [Input("pushes")]
        private InputList<string>? _pushes;

        /// <summary>
        /// List of configured CIDRs, from which push is allowed.
        /// </summary>
        public InputList<string> Pushes
        {
            get => _pushes ?? (_pushes = new InputList<string>());
            set => _pushes = value;
        }

        /// <summary>
        /// The ID of the registry that ip restrictions applied to.
        /// </summary>
        [Input("registryId")]
        public Input<string>? RegistryId { get; set; }

        public ContainerRegistryIpPermissionState()
        {
        }
        public static new ContainerRegistryIpPermissionState Empty => new ContainerRegistryIpPermissionState();
    }
}
