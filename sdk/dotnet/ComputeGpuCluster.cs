// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    /// <summary>
    /// GPU Cluster connects multiple Compute GPU Instances in the same availability zone with high-speed low-latency network.
    /// 
    /// Users can create a cluster from several VMs and use GPUDirectRDMA to directly send data between GPUs on different VMs.
    /// 
    /// For more information about GPU cluster in Yandex.Cloud, see:
    /// 
    /// * [Documentation](https://cloud.yandex.com/docs/compute/concepts/gpu_cluster)
    /// 
    /// ## Example Usage
    /// 
    /// &lt;!--Start PulumiCodeChooser --&gt;
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Yandex = Pulumi.Yandex;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @default = new Yandex.ComputeGpuCluster("default", new()
    ///     {
    ///         InterconnectType = "infiniband",
    ///         Labels = 
    ///         {
    ///             { "environment", "test" },
    ///         },
    ///         Zone = "ru-central1-a",
    ///     });
    /// 
    /// });
    /// ```
    /// &lt;!--End PulumiCodeChooser --&gt;
    /// 
    /// ## Import
    /// 
    /// A GPU cluster can be imported using any of these accepted formats:
    /// 
    /// ```sh
    /// $ pulumi import yandex:index/computeGpuCluster:ComputeGpuCluster default gpu_cluster_id
    /// ```
    /// </summary>
    [YandexResourceType("yandex:index/computeGpuCluster:ComputeGpuCluster")]
    public partial class ComputeGpuCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Creation timestamp of the GPU cluster.
        /// </summary>
        [Output("createdAt")]
        public Output<string> CreatedAt { get; private set; } = null!;

        /// <summary>
        /// Description of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        /// provider folder is used.
        /// </summary>
        [Output("folderId")]
        public Output<string> FolderId { get; private set; } = null!;

        /// <summary>
        /// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        /// and it is the only one available at the moment.
        /// </summary>
        [Output("interconnectType")]
        public Output<string?> InterconnectType { get; private set; } = null!;

        /// <summary>
        /// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        /// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        /// </summary>
        [Output("labels")]
        public Output<ImmutableDictionary<string, string>?> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The status of the GPU cluster.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Availability zone where the GPU cluster will reside.
        /// </summary>
        [Output("zone")]
        public Output<string> Zone { get; private set; } = null!;


        /// <summary>
        /// Create a ComputeGpuCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ComputeGpuCluster(string name, ComputeGpuClusterArgs? args = null, CustomResourceOptions? options = null)
            : base("yandex:index/computeGpuCluster:ComputeGpuCluster", name, args ?? new ComputeGpuClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ComputeGpuCluster(string name, Input<string> id, ComputeGpuClusterState? state = null, CustomResourceOptions? options = null)
            : base("yandex:index/computeGpuCluster:ComputeGpuCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                PluginDownloadURL = "https://github.com/heyzling/pulumi-yandex/releases/",
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ComputeGpuCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ComputeGpuCluster Get(string name, Input<string> id, ComputeGpuClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new ComputeGpuCluster(name, id, state, options);
        }
    }

    public sealed class ComputeGpuClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Description of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        /// provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        /// and it is the only one available at the moment.
        /// </summary>
        [Input("interconnectType")]
        public Input<string>? InterconnectType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        /// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Availability zone where the GPU cluster will reside.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeGpuClusterArgs()
        {
        }
        public static new ComputeGpuClusterArgs Empty => new ComputeGpuClusterArgs();
    }

    public sealed class ComputeGpuClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Creation timestamp of the GPU cluster.
        /// </summary>
        [Input("createdAt")]
        public Input<string>? CreatedAt { get; set; }

        /// <summary>
        /// Description of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The ID of the folder that the GPU cluster belongs to. If it is not provided, the default 
        /// provider folder is used.
        /// </summary>
        [Input("folderId")]
        public Input<string>? FolderId { get; set; }

        /// <summary>
        /// Type of interconnect between nodes to use in GPU cluster. Type `infiniband` is set by default, 
        /// and it is the only one available at the moment.
        /// </summary>
        [Input("interconnectType")]
        public Input<string>? InterconnectType { get; set; }

        [Input("labels")]
        private InputMap<string>? _labels;

        /// <summary>
        /// Labels to assign to this GPU cluster. A list of key/value pairs. For details about the concept, 
        /// see [documentation](https://cloud.yandex.com/docs/overview/concepts/services#labels).
        /// </summary>
        public InputMap<string> Labels
        {
            get => _labels ?? (_labels = new InputMap<string>());
            set => _labels = value;
        }

        /// <summary>
        /// Name of the GPU cluster. Provide this property when you create a resource.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The status of the GPU cluster.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Availability zone where the GPU cluster will reside.
        /// </summary>
        [Input("zone")]
        public Input<string>? Zone { get; set; }

        public ComputeGpuClusterState()
        {
        }
        public static new ComputeGpuClusterState Empty => new ComputeGpuClusterState();
    }
}
