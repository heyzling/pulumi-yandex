// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Yandex
{
    public static class GetBackupPolicy
    {
        public static Task<GetBackupPolicyResult> InvokeAsync(GetBackupPolicyArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetBackupPolicyResult>("yandex:index/getBackupPolicy:getBackupPolicy", args ?? new GetBackupPolicyArgs(), options.WithDefaults());

        public static Output<GetBackupPolicyResult> Invoke(GetBackupPolicyInvokeArgs? args = null, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetBackupPolicyResult>("yandex:index/getBackupPolicy:getBackupPolicy", args ?? new GetBackupPolicyInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetBackupPolicyArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public string? Name { get; set; }

        [Input("policyId")]
        public string? PolicyId { get; set; }

        public GetBackupPolicyArgs()
        {
        }
        public static new GetBackupPolicyArgs Empty => new GetBackupPolicyArgs();
    }

    public sealed class GetBackupPolicyInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("policyId")]
        public Input<string>? PolicyId { get; set; }

        public GetBackupPolicyInvokeArgs()
        {
        }
        public static new GetBackupPolicyInvokeArgs Empty => new GetBackupPolicyInvokeArgs();
    }


    [OutputType]
    public sealed class GetBackupPolicyResult
    {
        public readonly string ArchiveName;
        public readonly string Cbt;
        public readonly string Compression;
        public readonly string CreatedAt;
        public readonly bool Enabled;
        public readonly bool FastBackupEnabled;
        public readonly string FolderId;
        public readonly string Format;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool MultiVolumeSnapshottingEnabled;
        public readonly string Name;
        public readonly bool PerformanceWindowEnabled;
        public readonly string PolicyId;
        public readonly bool PreserveFileSecuritySettings;
        public readonly bool QuiesceSnapshottingEnabled;
        public readonly ImmutableArray<Outputs.GetBackupPolicyReattemptResult> Reattempts;
        public readonly ImmutableArray<Outputs.GetBackupPolicyRetentionResult> Retentions;
        public readonly ImmutableArray<Outputs.GetBackupPolicySchedulingResult> Schedulings;
        public readonly bool SilentModeEnabled;
        public readonly string SplittingBytes;
        public readonly string UpdatedAt;
        public readonly ImmutableArray<Outputs.GetBackupPolicyVmSnapshotReattemptResult> VmSnapshotReattempts;
        public readonly string VssProvider;

        [OutputConstructor]
        private GetBackupPolicyResult(
            string archiveName,

            string cbt,

            string compression,

            string createdAt,

            bool enabled,

            bool fastBackupEnabled,

            string folderId,

            string format,

            string id,

            bool multiVolumeSnapshottingEnabled,

            string name,

            bool performanceWindowEnabled,

            string policyId,

            bool preserveFileSecuritySettings,

            bool quiesceSnapshottingEnabled,

            ImmutableArray<Outputs.GetBackupPolicyReattemptResult> reattempts,

            ImmutableArray<Outputs.GetBackupPolicyRetentionResult> retentions,

            ImmutableArray<Outputs.GetBackupPolicySchedulingResult> schedulings,

            bool silentModeEnabled,

            string splittingBytes,

            string updatedAt,

            ImmutableArray<Outputs.GetBackupPolicyVmSnapshotReattemptResult> vmSnapshotReattempts,

            string vssProvider)
        {
            ArchiveName = archiveName;
            Cbt = cbt;
            Compression = compression;
            CreatedAt = createdAt;
            Enabled = enabled;
            FastBackupEnabled = fastBackupEnabled;
            FolderId = folderId;
            Format = format;
            Id = id;
            MultiVolumeSnapshottingEnabled = multiVolumeSnapshottingEnabled;
            Name = name;
            PerformanceWindowEnabled = performanceWindowEnabled;
            PolicyId = policyId;
            PreserveFileSecuritySettings = preserveFileSecuritySettings;
            QuiesceSnapshottingEnabled = quiesceSnapshottingEnabled;
            Reattempts = reattempts;
            Retentions = retentions;
            Schedulings = schedulings;
            SilentModeEnabled = silentModeEnabled;
            SplittingBytes = splittingBytes;
            UpdatedAt = updatedAt;
            VmSnapshotReattempts = vmSnapshotReattempts;
            VssProvider = vssProvider;
        }
    }
}
